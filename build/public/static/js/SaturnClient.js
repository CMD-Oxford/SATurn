// Generated by Haxe 3.4.7
var $hx_exports = typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this;
$hx_exports["saturn"] = $hx_exports["saturn"] || {};
$hx_exports["saturn"]["core"] = $hx_exports["saturn"]["core"] || {};
$hx_exports["saturn"]["core"]["domain"] = $hx_exports["saturn"]["core"]["domain"] || {};
var $global = typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this;
var $hxClasses = $hxClasses || {},$estr = function() { return js.Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = $hxClasses["EReg"] = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
	this.rs = r;
	this.opt = opt;
};
EReg.__name__ = ["EReg"];
EReg.prototype = {
	r: null
	,rs: null
	,opt: null
	,regenerate: function() {
		this.r = new RegExp(this.rs,this.opt);
	}
	,hxUnserialize: function(u) {
		this.rs = u.unserialize();
		this.opt = u.unserialize();
	}
	,hxSerialize: function(s) {
		s.serialize(this.rs);
		s.serialize(this.opt);
		this.regenerate();
	}
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js._Boot.HaxeError("EReg::matched");
		}
	}
	,matchedLeft: function() {
		if(this.r.m == null) {
			throw new js._Boot.HaxeError("No string matched");
		}
		return HxOverrides.substr(this.r.s,0,this.r.m.index);
	}
	,matchedRight: function() {
		if(this.r.m == null) {
			throw new js._Boot.HaxeError("No string matched");
		}
		var sz = this.r.m.index + this.r.m[0].length;
		return HxOverrides.substr(this.r.s,sz,this.r.s.length - sz);
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw new js._Boot.HaxeError("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			var tmp = this.r;
			var tmp1 = len < 0 ? s : HxOverrides.substr(s,0,pos + len);
			this.r.m = tmp.exec(tmp1);
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b1 = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b1) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b1;
		}
	}
	,split: function(s) {
		var d = "#__delim__#";
		return s.replace(this.r,d).split(d);
	}
	,replace: function(s,by) {
		return s.replace(this.r,by);
	}
	,__class__: EReg
};
var HxOverrides = $hxClasses["HxOverrides"] = function() { };
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.strDate = function(s) {
	var _g = s.length;
	switch(_g) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js._Boot.HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return js.Lib.get_undefined();
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = $hxClasses["Lambda"] = function() { };
Lambda.__name__ = ["Lambda"];
Lambda.exists = function(it,f) {
	var x = $iterator(it)();
	while(x.hasNext()) {
		var x1 = x.next();
		if(f(x1)) {
			return true;
		}
	}
	return false;
};
Lambda.filter = function(it,f) {
	var l = new List();
	var x = $iterator(it)();
	while(x.hasNext()) {
		var x1 = x.next();
		if(f(x1)) {
			l.add(x1);
		}
	}
	return l;
};
Lambda.count = function(it,pred) {
	var n = 0;
	if(pred == null) {
		var _ = $iterator(it)();
		while(_.hasNext()) {
			var _1 = _.next();
			++n;
		}
	} else {
		var x = $iterator(it)();
		while(x.hasNext()) {
			var x1 = x.next();
			if(pred(x1)) {
				++n;
			}
		}
	}
	return n;
};
var List = $hxClasses["List"] = function() {
	this.length = 0;
};
List.__name__ = ["List"];
List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = new _List.ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new _List.ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,first: function() {
		if(this.h == null) {
			return null;
		} else {
			return this.h.item;
		}
	}
	,isEmpty: function() {
		return this.h == null;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
	,iterator: function() {
		return new _List.ListIterator(this.h);
	}
	,__class__: List
};
var _List = _List || {};
_List.ListNode = $hxClasses["_List.ListNode"] = function(item,next) {
	this.item = item;
	this.next = next;
};
_List.ListNode.__name__ = ["_List","ListNode"];
_List.ListNode.prototype = {
	item: null
	,next: null
	,__class__: _List.ListNode
};
_List.ListIterator = $hxClasses["_List.ListIterator"] = function(head) {
	this.head = head;
};
_List.ListIterator.__name__ = ["_List","ListIterator"];
_List.ListIterator.prototype = {
	head: null
	,hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: _List.ListIterator
};
Math.__name__ = ["Math"];
var Reflect = $hxClasses["Reflect"] = function() { };
Reflect.__name__ = ["Reflect"];
Reflect.hasField = function(o,field) {
	return Object.prototype.hasOwnProperty.call(o,field);
};
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.setField = function(o,field,value) {
	o[field] = value;
};
Reflect.callMethod = function(o,func,args) {
	return func.apply(o,args);
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(js.Boot.isClass(f) || js.Boot.isEnum(f));
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.deleteField = function(o,field) {
	if(!Reflect.hasField(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
var Std = $hxClasses["Std"] = function() { };
Std.__name__ = ["Std"];
Std["is"] = function(v,t) {
	return js.Boot.__instanceof(v,t);
};
Std.string = function(s) {
	return js.Boot.__string_rec(s,"");
};
Std["int"] = function(x) {
	return x | 0;
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
Std.parseFloat = function(x) {
	return parseFloat(x);
};
var StringBuf = $hxClasses["StringBuf"] = function() {
	this.b = "";
};
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	b: null
	,add: function(x) {
		this.b += Std.string(x);
	}
	,addChar: function(c) {
		this.b += String.fromCharCode(c);
	}
	,toString: function() {
		return this.b;
	}
	,__class__: StringBuf
};
var StringTools = $hxClasses["StringTools"] = function() { };
StringTools.__name__ = ["StringTools"];
StringTools.urlEncode = function(s) {
	return encodeURIComponent(s);
};
StringTools.urlDecode = function(s) {
	return decodeURIComponent(s.split("+").join(" "));
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return HxOverrides.substr(s,0,start.length) == start;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return HxOverrides.substr(s,slen - elen,elen) == end;
	} else {
		return false;
	}
};
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	while(s.length < l) s = c + s;
	return s;
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.fastCodeAt = function(s,index) {
	return s.charCodeAt(index);
};
StringTools.isEof = function(c) {
	return c != c;
};
var ValueType = $hxClasses["ValueType"] = { __ename__ : ["ValueType"], __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"] };
ValueType.TNull = ["TNull",0];
ValueType.TNull.toString = $estr;
ValueType.TNull.__enum__ = ValueType;
ValueType.TInt = ["TInt",1];
ValueType.TInt.toString = $estr;
ValueType.TInt.__enum__ = ValueType;
ValueType.TFloat = ["TFloat",2];
ValueType.TFloat.toString = $estr;
ValueType.TFloat.__enum__ = ValueType;
ValueType.TBool = ["TBool",3];
ValueType.TBool.toString = $estr;
ValueType.TBool.__enum__ = ValueType;
ValueType.TObject = ["TObject",4];
ValueType.TObject.toString = $estr;
ValueType.TObject.__enum__ = ValueType;
ValueType.TFunction = ["TFunction",5];
ValueType.TFunction.toString = $estr;
ValueType.TFunction.__enum__ = ValueType;
ValueType.TClass = function(c) { var $x = ["TClass",6,c]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TEnum = function(e) { var $x = ["TEnum",7,e]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TUnknown = ["TUnknown",8];
ValueType.TUnknown.toString = $estr;
ValueType.TUnknown.__enum__ = ValueType;
var Type = $hxClasses["Type"] = function() { };
Type.__name__ = ["Type"];
Type.getClass = function(o) {
	if(o == null) {
		return null;
	} else {
		return js.Boot.getClass(o);
	}
};
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) {
		return null;
	}
	return a.join(".");
};
Type.getEnumName = function(e) {
	var a = e.__ename__;
	return a.join(".");
};
Type.resolveClass = function(name) {
	var cl = $hxClasses[name];
	if(cl == null || !js.Boot.isClass(cl)) {
		return null;
	}
	return cl;
};
Type.resolveEnum = function(name) {
	var e = $hxClasses[name];
	if(e == null || !js.Boot.isEnum(e)) {
		return null;
	}
	return e;
};
Type.createInstance = function(cl,args) {
	var _g = args.length;
	switch(_g) {
	case 0:
		return new cl();
	case 1:
		return new cl(args[0]);
	case 2:
		return new cl(args[0],args[1]);
	case 3:
		return new cl(args[0],args[1],args[2]);
	case 4:
		return new cl(args[0],args[1],args[2],args[3]);
	case 5:
		return new cl(args[0],args[1],args[2],args[3],args[4]);
	case 6:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5]);
	case 7:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
	case 8:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
	case 9:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8]);
	case 10:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9]);
	case 11:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10]);
	case 12:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11]);
	case 13:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12]);
	case 14:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12],args[13]);
	default:
		throw new js._Boot.HaxeError("Too many arguments");
	}
};
Type.createEmptyInstance = function(cl) {
	function empty() {}; empty.prototype = cl.prototype;
	return new empty();
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw new js._Boot.HaxeError("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw new js._Boot.HaxeError("Constructor " + constr + " need parameters");
		}
		return Reflect.callMethod(e,f,params);
	}
	if(params != null && params.length != 0) {
		throw new js._Boot.HaxeError("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type.getClassFields = function(c) {
	var a = Reflect.fields(c);
	HxOverrides.remove(a,"__name__");
	HxOverrides.remove(a,"__interfaces__");
	HxOverrides.remove(a,"__properties__");
	HxOverrides.remove(a,"__super__");
	HxOverrides.remove(a,"__meta__");
	HxOverrides.remove(a,"prototype");
	return a;
};
Type.getEnumConstructs = function(e) {
	return e.__constructs__.slice();
};
Type["typeof"] = function(v) {
	var _g = typeof(v);
	switch(_g) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(js.Boot.isClass(v) || js.Boot.isEnum(v)) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum(e);
		}
		var c = js.Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumIndex = function(e) {
	return e[1];
};
var bindings = bindings || {};
bindings.NodeSocket = $hxClasses["bindings.NodeSocket"] = function(nativeSocket) {
	this.theNativeSocket = nativeSocket;
};
bindings.NodeSocket.__name__ = ["bindings","NodeSocket"];
bindings.NodeSocket.prototype = {
	theNativeSocket: null
	,id: null
	,on: function(command,func) {
		this.theNativeSocket.on(command,func);
	}
	,emit: function(command,obj) {
		this.theNativeSocket.emit(command,obj);
	}
	,getId: function() {
		return this.theNativeSocket.id;
	}
	,disconnect: function() {
		this.theNativeSocket.disconnect();
	}
	,__class__: bindings.NodeSocket
};
var haxe = haxe || {};
haxe.IMap = $hxClasses["haxe.IMap"] = function() { };
haxe.IMap.__name__ = ["haxe","IMap"];
haxe.Http = $hxClasses["haxe.Http"] = function(url) {
	this.url = url;
	this.headers = new List();
	this.params = new List();
	this.async = true;
	this.withCredentials = false;
};
haxe.Http.__name__ = ["haxe","Http"];
haxe.Http.prototype = {
	url: null
	,responseData: null
	,async: null
	,withCredentials: null
	,postData: null
	,headers: null
	,params: null
	,setParameter: function(param,value) {
		this.params = Lambda.filter(this.params,function(p) {
			return p.param != param;
		});
		this.params.push({ param : param, value : value});
		return this;
	}
	,req: null
	,request: function(post) {
		var me = this;
		me.responseData = null;
		var r = this.req = js.Browser.createXMLHttpRequest();
		var onreadystatechange = function(_) {
			if(r.readyState != 4) {
				return;
			}
			var s;
			try {
				s = r.status;
			} catch( e ) {
				s = null;
			}
			if(s != null && "undefined" !== typeof window) {
				var protocol = js.Browser.get_location().protocol.toLowerCase();
				var rlocalProtocol = new EReg("^(?:about|app|app-storage|.+-extension|file|res|widget):$","");
				var isLocal = rlocalProtocol.match(protocol);
				if(isLocal) {
					if(r.responseText != null) {
						s = 200;
					} else {
						s = 404;
					}
				}
			}
			if(s == undefined) {
				s = null;
			}
			if(s != null) {
				me.onStatus(s);
			}
			if(s != null && s >= 200 && s < 400) {
				me.req = null;
				me.onData(me.responseData = r.responseText);
			} else if(s == null) {
				me.req = null;
				me.onError("Failed to connect or resolve host");
			} else {
				switch(s) {
				case 12007:
					me.req = null;
					me.onError("Unknown host");
					break;
				case 12029:
					me.req = null;
					me.onError("Failed to connect to host");
					break;
				default:
					me.req = null;
					me.responseData = r.responseText;
					me.onError("Http Error #" + r.status);
				}
			}
		};
		if(this.async) {
			r.onreadystatechange = onreadystatechange;
		}
		var uri = this.postData;
		if(uri != null) {
			post = true;
		} else {
			var p = this.params.iterator();
			while(p.hasNext()) {
				var p1 = p.next();
				if(uri == null) {
					uri = "";
				} else {
					uri += "&";
				}
				uri += StringTools.urlEncode(p1.param) + "=" + StringTools.urlEncode(p1.value);
			}
		}
		try {
			if(post) {
				r.open("POST",this.url,this.async);
			} else if(uri != null) {
				var question = this.url.split("?").length <= 1;
				r.open("GET",this.url + (question ? "?" : "&") + uri,this.async);
				uri = null;
			} else {
				r.open("GET",this.url,this.async);
			}
		} catch( e1 ) {
			if (e1 instanceof js._Boot.HaxeError) e1 = e1.val;
			me.req = null;
			this.onError(e1.toString());
			return;
		}
		r.withCredentials = this.withCredentials;
		if(!Lambda.exists(this.headers,function(h) {
			return h.header == "Content-Type";
		}) && post && this.postData == null) {
			r.setRequestHeader("Content-Type","application/x-www-form-urlencoded");
		}
		var h1 = this.headers.iterator();
		while(h1.hasNext()) {
			var h2 = h1.next();
			r.setRequestHeader(h2.header,h2.value);
		}
		r.send(uri);
		if(!this.async) {
			onreadystatechange(null);
		}
	}
	,onData: function(data) {
	}
	,onError: function(msg) {
	}
	,onStatus: function(status) {
	}
	,__class__: haxe.Http
};
haxe.Serializer = $hxClasses["haxe.Serializer"] = function() {
	this.buf = new StringBuf();
	this.cache = [];
	this.useCache = haxe.Serializer.USE_CACHE;
	this.useEnumIndex = haxe.Serializer.USE_ENUM_INDEX;
	this.shash = new haxe.ds.StringMap();
	this.scount = 0;
};
haxe.Serializer.__name__ = ["haxe","Serializer"];
haxe.Serializer.run = function(v) {
	var s = new haxe.Serializer();
	s.serialize(v);
	return s.toString();
};
haxe.Serializer.prototype = {
	buf: null
	,cache: null
	,shash: null
	,scount: null
	,useCache: null
	,useEnumIndex: null
	,toString: function() {
		return this.buf.toString();
	}
	,serializeString: function(s) {
		var x = this.shash.get(s);
		if(x != null) {
			this.buf.add("R");
			this.buf.add(x);
			return;
		}
		this.shash.set(s,this.scount++);
		this.buf.add("y");
		s = StringTools.urlEncode(s);
		this.buf.add(s.length);
		this.buf.add(":");
		this.buf.add(s);
	}
	,serializeRef: function(v) {
		var vt = typeof(v);
		var _g1 = 0;
		var _g = this.cache.length;
		while(_g1 < _g) {
			var i = _g1++;
			var ci = this.cache[i];
			if(typeof(ci) == vt && ci == v) {
				this.buf.add("r");
				this.buf.add(i);
				return true;
			}
		}
		this.cache.push(v);
		return false;
	}
	,serializeFields: function(v) {
		var _g = 0;
		var _g1 = Reflect.fields(v);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.serializeString(f);
			this.serialize(Reflect.field(v,f));
		}
		this.buf.add("g");
	}
	,serialize: function(v) {
		var _g = Type["typeof"](v);
		switch(Type.enumIndex(_g)) {
		case 0:
			this.buf.add("n");
			break;
		case 1:
			var v1 = v;
			if(v1 == 0) {
				this.buf.add("z");
				return;
			}
			this.buf.add("i");
			this.buf.add(v1);
			break;
		case 2:
			var v2 = v;
			if(isNaN(v2)) {
				this.buf.add("k");
			} else if(!isFinite(v2)) {
				this.buf.add(v2 < 0 ? "m" : "p");
			} else {
				this.buf.add("d");
				this.buf.add(v2);
			}
			break;
		case 3:
			this.buf.add(v ? "t" : "f");
			break;
		case 4:
			if(Std["is"](v,Class)) {
				var className = Type.getClassName(v);
				this.buf.add("A");
				this.serializeString(className);
			} else if(Std["is"](v,Enum)) {
				this.buf.add("B");
				this.serializeString(Type.getEnumName(v));
			} else {
				if(this.useCache && this.serializeRef(v)) {
					return;
				}
				this.buf.add("o");
				this.serializeFields(v);
			}
			break;
		case 5:
			throw new js._Boot.HaxeError("Cannot serialize function");
			break;
		case 6:
			var c = _g[2];
			if(c == String) {
				this.serializeString(v);
				return;
			}
			if(this.useCache && this.serializeRef(v)) {
				return;
			}
			switch(c) {
			case Array:
				var ucount = 0;
				this.buf.add("a");
				var l = v["length"];
				var _g1 = 0;
				var _g2 = l;
				while(_g1 < _g2) {
					var i = _g1++;
					if(v[i] == null) {
						++ucount;
					} else {
						if(ucount > 0) {
							if(ucount == 1) {
								this.buf.add("n");
							} else {
								this.buf.add("u");
								this.buf.add(ucount);
							}
							ucount = 0;
						}
						this.serialize(v[i]);
					}
				}
				if(ucount > 0) {
					if(ucount == 1) {
						this.buf.add("n");
					} else {
						this.buf.add("u");
						this.buf.add(ucount);
					}
				}
				this.buf.add("h");
				break;
			case Date:
				var d = v;
				this.buf.add("v");
				this.buf.add(d.getTime());
				break;
			case List:
				this.buf.add("l");
				var v3 = v;
				var i1 = v3.iterator();
				while(i1.hasNext()) {
					var i2 = i1.next();
					this.serialize(i2);
				}
				this.buf.add("h");
				break;
			case haxe.ds.IntMap:
				this.buf.add("q");
				var v4 = v;
				var k = v4.keys();
				while(k.hasNext()) {
					var k1 = k.next();
					this.buf.add(":");
					this.buf.add(k1);
					this.serialize(v4.get(k1));
				}
				this.buf.add("h");
				break;
			case haxe.ds.ObjectMap:
				this.buf.add("M");
				var v5 = v;
				var k2 = v5.keys();
				while(k2.hasNext()) {
					var k3 = k2.next();
					var id = Reflect.field(k3,"__id__");
					Reflect.deleteField(k3,"__id__");
					this.serialize(k3);
					Reflect.setField(k3,"__id__",id);
					this.serialize(v5.get(k3));
				}
				this.buf.add("h");
				break;
			case haxe.ds.StringMap:
				this.buf.add("b");
				var v6 = v;
				var k4 = v6.keys();
				while(k4.hasNext()) {
					var k5 = k4.next();
					this.serializeString(k5);
					this.serialize(v6.get(k5));
				}
				this.buf.add("h");
				break;
			case haxe.io.Bytes:
				var v7 = v;
				this.buf.add("s");
				this.buf.add(Math.ceil(v7.length * 8 / 6));
				this.buf.add(":");
				var i3 = 0;
				var max = v7.length - 2;
				var b64 = haxe.Serializer.BASE64_CODES;
				if(b64 == null) {
					var length = haxe.Serializer.BASE64.length;
					var this1 = new Array(length);
					b64 = this1;
					var _g11 = 0;
					var _g3 = haxe.Serializer.BASE64.length;
					while(_g11 < _g3) {
						var i4 = _g11++;
						b64[i4] = HxOverrides.cca(haxe.Serializer.BASE64,i4);
					}
					haxe.Serializer.BASE64_CODES = b64;
				}
				while(i3 < max) {
					var b1 = v7.get(i3++);
					var b2 = v7.get(i3++);
					var b3 = v7.get(i3++);
					this.buf.addChar(b64[b1 >> 2]);
					this.buf.addChar(b64[(b1 << 4 | b2 >> 4) & 63]);
					this.buf.addChar(b64[(b2 << 2 | b3 >> 6) & 63]);
					this.buf.addChar(b64[b3 & 63]);
				}
				if(i3 == max) {
					var b11 = v7.get(i3++);
					var b21 = v7.get(i3++);
					this.buf.addChar(b64[b11 >> 2]);
					this.buf.addChar(b64[(b11 << 4 | b21 >> 4) & 63]);
					this.buf.addChar(b64[b21 << 2 & 63]);
				} else if(i3 == max + 1) {
					var b12 = v7.get(i3++);
					this.buf.addChar(b64[b12 >> 2]);
					this.buf.addChar(b64[b12 << 4 & 63]);
				}
				break;
			default:
				if(this.useCache) {
					this.cache.pop();
				}
				if(v.hxSerialize != null) {
					this.buf.add("C");
					this.serializeString(Type.getClassName(c));
					if(this.useCache) {
						this.cache.push(v);
					}
					v.hxSerialize(this);
					this.buf.add("g");
				} else {
					this.buf.add("c");
					this.serializeString(Type.getClassName(c));
					if(this.useCache) {
						this.cache.push(v);
					}
					this.serializeFields(v);
				}
			}
			break;
		case 7:
			var e = _g[2];
			if(this.useCache) {
				if(this.serializeRef(v)) {
					return;
				}
				this.cache.pop();
			}
			this.buf.add(this.useEnumIndex ? "j" : "w");
			this.serializeString(Type.getEnumName(e));
			if(this.useEnumIndex) {
				this.buf.add(":");
				this.buf.add(v[1]);
			} else {
				this.serializeString(v[0]);
			}
			this.buf.add(":");
			var l1 = v["length"];
			this.buf.add(l1 - 2);
			var _g12 = 2;
			var _g4 = l1;
			while(_g12 < _g4) {
				var i5 = _g12++;
				this.serialize(v[i5]);
			}
			if(this.useCache) {
				this.cache.push(v);
			}
			break;
		default:
			throw new js._Boot.HaxeError("Cannot serialize " + Std.string(v));
		}
	}
	,__class__: haxe.Serializer
};
haxe.Timer = $hxClasses["haxe.Timer"] = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe.Timer.__name__ = ["haxe","Timer"];
haxe.Timer.delay = function(f,time_ms) {
	var t = new haxe.Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe.Timer.prototype = {
	id: null
	,stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe.Timer
};
if(!haxe._Unserializer) haxe._Unserializer = {};
haxe._Unserializer.DefaultResolver = $hxClasses["haxe._Unserializer.DefaultResolver"] = function() {
};
haxe._Unserializer.DefaultResolver.__name__ = ["haxe","_Unserializer","DefaultResolver"];
haxe._Unserializer.DefaultResolver.prototype = {
	resolveClass: function(name) {
		return Type.resolveClass(name);
	}
	,resolveEnum: function(name) {
		return Type.resolveEnum(name);
	}
	,__class__: haxe._Unserializer.DefaultResolver
};
haxe.Unserializer = $hxClasses["haxe.Unserializer"] = function(buf) {
	this.buf = buf;
	this.length = buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe.Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = new haxe._Unserializer.DefaultResolver();
		haxe.Unserializer.DEFAULT_RESOLVER = r;
	}
	this.resolver = r;
};
haxe.Unserializer.__name__ = ["haxe","Unserializer"];
haxe.Unserializer.initCodes = function() {
	var codes = [];
	var _g1 = 0;
	var _g = haxe.Unserializer.BASE64.length;
	while(_g1 < _g) {
		var i = _g1++;
		codes[StringTools.fastCodeAt(haxe.Unserializer.BASE64,i)] = i;
	}
	return codes;
};
haxe.Unserializer.run = function(v) {
	return new haxe.Unserializer(v).unserialize();
};
haxe.Unserializer.prototype = {
	buf: null
	,pos: null
	,length: null
	,cache: null
	,scache: null
	,resolver: null
	,get: function(p) {
		return StringTools.fastCodeAt(this.buf,p);
	}
	,readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.get(this.pos);
			if(StringTools.isEof(c)) {
				break;
			}
			if(c == 45) {
				if(this.pos != fpos) {
					break;
				}
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) {
				break;
			}
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) {
			k *= -1;
		}
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.get(this.pos);
			if(StringTools.isEof(c)) {
				break;
			}
			if(c >= 43 && c < 58 || c == 101 || c == 69) {
				this.pos++;
			} else {
				break;
			}
		}
		return Std.parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) {
				throw new js._Boot.HaxeError("Invalid object");
			}
			if(this.get(this.pos) == 103) {
				break;
			}
			var k = this.unserialize();
			if(typeof(k) != "string") {
				throw new js._Boot.HaxeError("Invalid object key");
			}
			var v = this.unserialize();
			Reflect.setField(o,k,v);
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.get(this.pos++) != 58) {
			throw new js._Boot.HaxeError("Invalid enum format");
		}
		var nargs = this.readDigits();
		if(nargs == 0) {
			return Type.createEnum(edecl,tag);
		}
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		var _g = this.get(this.pos++);
		switch(_g) {
		case 65:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw new js._Boot.HaxeError("Class not found " + name);
			}
			return cl;
		case 66:
			var name1 = this.unserialize();
			var e = this.resolver.resolveEnum(name1);
			if(e == null) {
				throw new js._Boot.HaxeError("Enum not found " + name1);
			}
			return e;
		case 67:
			var name2 = this.unserialize();
			var cl1 = this.resolver.resolveClass(name2);
			if(cl1 == null) {
				throw new js._Boot.HaxeError("Class not found " + name2);
			}
			var o = Type.createEmptyInstance(cl1);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.get(this.pos++) != 103) {
				throw new js._Boot.HaxeError("Invalid custom data");
			}
			return o;
		case 77:
			var h = new haxe.ds.ObjectMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.get(this.pos) != 104) {
				var s = this.unserialize();
				h.set(s,this.unserialize());
			}
			this.pos++;
			return h;
		case 82:
			var n = this.readDigits();
			if(n < 0 || n >= this.scache.length) {
				throw new js._Boot.HaxeError("Invalid string reference");
			}
			return this.scache[n];
		case 97:
			var buf1 = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.get(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n1 = this.readDigits();
					a[a.length + n1 - 1] = null;
				} else {
					a.push(this.unserialize());
				}
			}
			return a;
		case 98:
			var h1 = new haxe.ds.StringMap();
			this.cache.push(h1);
			var buf2 = this.buf;
			while(this.get(this.pos) != 104) {
				var s1 = this.unserialize();
				h1.set(s1,this.unserialize());
			}
			this.pos++;
			return h1;
		case 99:
			var name3 = this.unserialize();
			var cl2 = this.resolver.resolveClass(name3);
			if(cl2 == null) {
				throw new js._Boot.HaxeError("Class not found " + name3);
			}
			var o1 = Type.createEmptyInstance(cl2);
			this.cache.push(o1);
			this.unserializeObject(o1);
			return o1;
		case 100:
			return this.readFloat();
		case 102:
			return false;
		case 105:
			return this.readDigits();
		case 106:
			var name4 = this.unserialize();
			var edecl = this.resolver.resolveEnum(name4);
			if(edecl == null) {
				throw new js._Boot.HaxeError("Enum not found " + name4);
			}
			this.pos++;
			var index = this.readDigits();
			var tag = Type.getEnumConstructs(edecl)[index];
			if(tag == null) {
				throw new js._Boot.HaxeError("Unknown enum index " + name4 + "@" + index);
			}
			var e1 = this.unserializeEnum(edecl,tag);
			this.cache.push(e1);
			return e1;
		case 107:
			return NaN;
		case 108:
			var l = new List();
			this.cache.push(l);
			var buf3 = this.buf;
			while(this.get(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 109:
			return -Infinity;
		case 110:
			return null;
		case 111:
			var o2 = { };
			this.cache.push(o2);
			this.unserializeObject(o2);
			return o2;
		case 112:
			return Infinity;
		case 113:
			var h2 = new haxe.ds.IntMap();
			this.cache.push(h2);
			var buf4 = this.buf;
			var c1 = this.get(this.pos++);
			while(c1 == 58) {
				var i = this.readDigits();
				h2.set(i,this.unserialize());
				c1 = this.get(this.pos++);
			}
			if(c1 != 104) {
				throw new js._Boot.HaxeError("Invalid IntMap format");
			}
			return h2;
		case 114:
			var n2 = this.readDigits();
			if(n2 < 0 || n2 >= this.cache.length) {
				throw new js._Boot.HaxeError("Invalid reference");
			}
			return this.cache[n2];
		case 115:
			var len = this.readDigits();
			var buf5 = this.buf;
			if(this.get(this.pos++) != 58 || this.length - this.pos < len) {
				throw new js._Boot.HaxeError("Invalid bytes length");
			}
			var codes = haxe.Unserializer.CODES;
			if(codes == null) {
				codes = haxe.Unserializer.initCodes();
				haxe.Unserializer.CODES = codes;
			}
			var i1 = this.pos;
			var rest = len & 3;
			var size = (len >> 2) * 3 + (rest >= 2 ? rest - 1 : 0);
			var max = i1 + (len - rest);
			var bytes = haxe.io.Bytes.alloc(size);
			var bpos = 0;
			while(i1 < max) {
				var c11 = codes[StringTools.fastCodeAt(buf5,i1++)];
				var c2 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c11 << 2 | c2 >> 4);
				var c3 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c2 << 4 | c3 >> 2);
				var c4 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c3 << 6 | c4);
			}
			if(rest >= 2) {
				var c12 = codes[StringTools.fastCodeAt(buf5,i1++)];
				var c21 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c12 << 2 | c21 >> 4);
				if(rest == 3) {
					var c31 = codes[StringTools.fastCodeAt(buf5,i1++)];
					bytes.set(bpos++,c21 << 4 | c31 >> 2);
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 116:
			return true;
		case 118:
			var d;
			if(this.get(this.pos) >= 48 && this.get(this.pos) <= 57 && this.get(this.pos + 1) >= 48 && this.get(this.pos + 1) <= 57 && this.get(this.pos + 2) >= 48 && this.get(this.pos + 2) <= 57 && this.get(this.pos + 3) >= 48 && this.get(this.pos + 3) <= 57 && this.get(this.pos + 4) == 45) {
				d = HxOverrides.strDate(HxOverrides.substr(this.buf,this.pos,19));
				this.pos += 19;
			} else {
				var t = this.readFloat();
				d = new Date(t);
			}
			this.cache.push(d);
			return d;
		case 119:
			var name5 = this.unserialize();
			var edecl1 = this.resolver.resolveEnum(name5);
			if(edecl1 == null) {
				throw new js._Boot.HaxeError("Enum not found " + name5);
			}
			var e2 = this.unserializeEnum(edecl1,this.unserialize());
			this.cache.push(e2);
			return e2;
		case 120:
			throw js._Boot.HaxeError.wrap(this.unserialize());
			break;
		case 121:
			var len1 = this.readDigits();
			if(this.get(this.pos++) != 58 || this.length - this.pos < len1) {
				throw new js._Boot.HaxeError("Invalid string length");
			}
			var s2 = HxOverrides.substr(this.buf,this.pos,len1);
			this.pos += len1;
			s2 = StringTools.urlDecode(s2);
			this.scache.push(s2);
			return s2;
		case 122:
			return 0;
		default:
		}
		this.pos--;
		throw new js._Boot.HaxeError("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe.Unserializer
};
if(!haxe.crypto) haxe.crypto = {};
haxe.crypto.Md5 = $hxClasses["haxe.crypto.Md5"] = function() {
};
haxe.crypto.Md5.__name__ = ["haxe","crypto","Md5"];
haxe.crypto.Md5.encode = function(s) {
	var m = new haxe.crypto.Md5();
	var h = m.doEncode(haxe.crypto.Md5.str2blks(s));
	return m.hex(h);
};
haxe.crypto.Md5.str2blks = function(str) {
	var str1 = haxe.io.Bytes.ofString(str);
	var nblk = (str1.length + 8 >> 6) + 1;
	var blks = [];
	var blksSize = nblk * 16;
	var _g1 = 0;
	var _g = blksSize;
	while(_g1 < _g) {
		var i = _g1++;
		blks[i] = 0;
	}
	var i1 = 0;
	var max = str1.length;
	var l = max * 8;
	while(i1 < max) {
		blks[i1 >> 2] |= str1.get(i1) << (l + i1) % 4 * 8;
		++i1;
	}
	blks[i1 >> 2] |= 128 << (l + i1) % 4 * 8;
	var k = nblk * 16 - 2;
	blks[k] = l & 255;
	blks[k] |= (l >>> 8 & 255) << 8;
	blks[k] |= (l >>> 16 & 255) << 16;
	blks[k] |= (l >>> 24 & 255) << 24;
	return blks;
};
haxe.crypto.Md5.prototype = {
	bitOR: function(a,b) {
		var lsb = a & 1 | b & 1;
		var msb31 = a >>> 1 | b >>> 1;
		return msb31 << 1 | lsb;
	}
	,bitXOR: function(a,b) {
		var lsb = a & 1 ^ b & 1;
		var msb31 = a >>> 1 ^ b >>> 1;
		return msb31 << 1 | lsb;
	}
	,bitAND: function(a,b) {
		var lsb = a & 1 & (b & 1);
		var msb31 = a >>> 1 & b >>> 1;
		return msb31 << 1 | lsb;
	}
	,addme: function(x,y) {
		var lsw = (x & 65535) + (y & 65535);
		var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
		return msw << 16 | lsw & 65535;
	}
	,hex: function(a) {
		var str = "";
		var hex_chr = "0123456789abcdef";
		var _g = 0;
		while(_g < a.length) {
			var num = a[_g];
			++_g;
			var _g1 = 0;
			while(_g1 < 4) {
				var j = _g1++;
				str += hex_chr.charAt(num >> j * 8 + 4 & 15) + hex_chr.charAt(num >> j * 8 & 15);
			}
		}
		return str;
	}
	,rol: function(num,cnt) {
		return num << cnt | num >>> 32 - cnt;
	}
	,cmn: function(q,a,b,x,s,t) {
		return this.addme(this.rol(this.addme(this.addme(a,q),this.addme(x,t)),s),b);
	}
	,ff: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,c),this.bitAND(~b,d)),a,b,x,s,t);
	}
	,gg: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,d),this.bitAND(c,~d)),a,b,x,s,t);
	}
	,hh: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(this.bitXOR(b,c),d),a,b,x,s,t);
	}
	,ii: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(c,this.bitOR(b,~d)),a,b,x,s,t);
	}
	,doEncode: function(x) {
		var a = 1732584193;
		var b = -271733879;
		var c = -1732584194;
		var d = 271733878;
		var step;
		var i = 0;
		while(i < x.length) {
			var olda = a;
			var oldb = b;
			var oldc = c;
			var oldd = d;
			step = 0;
			a = this.ff(a,b,c,d,x[i],7,-680876936);
			d = this.ff(d,a,b,c,x[i + 1],12,-389564586);
			c = this.ff(c,d,a,b,x[i + 2],17,606105819);
			b = this.ff(b,c,d,a,x[i + 3],22,-1044525330);
			a = this.ff(a,b,c,d,x[i + 4],7,-176418897);
			d = this.ff(d,a,b,c,x[i + 5],12,1200080426);
			c = this.ff(c,d,a,b,x[i + 6],17,-1473231341);
			b = this.ff(b,c,d,a,x[i + 7],22,-45705983);
			a = this.ff(a,b,c,d,x[i + 8],7,1770035416);
			d = this.ff(d,a,b,c,x[i + 9],12,-1958414417);
			c = this.ff(c,d,a,b,x[i + 10],17,-42063);
			b = this.ff(b,c,d,a,x[i + 11],22,-1990404162);
			a = this.ff(a,b,c,d,x[i + 12],7,1804603682);
			d = this.ff(d,a,b,c,x[i + 13],12,-40341101);
			c = this.ff(c,d,a,b,x[i + 14],17,-1502002290);
			b = this.ff(b,c,d,a,x[i + 15],22,1236535329);
			a = this.gg(a,b,c,d,x[i + 1],5,-165796510);
			d = this.gg(d,a,b,c,x[i + 6],9,-1069501632);
			c = this.gg(c,d,a,b,x[i + 11],14,643717713);
			b = this.gg(b,c,d,a,x[i],20,-373897302);
			a = this.gg(a,b,c,d,x[i + 5],5,-701558691);
			d = this.gg(d,a,b,c,x[i + 10],9,38016083);
			c = this.gg(c,d,a,b,x[i + 15],14,-660478335);
			b = this.gg(b,c,d,a,x[i + 4],20,-405537848);
			a = this.gg(a,b,c,d,x[i + 9],5,568446438);
			d = this.gg(d,a,b,c,x[i + 14],9,-1019803690);
			c = this.gg(c,d,a,b,x[i + 3],14,-187363961);
			b = this.gg(b,c,d,a,x[i + 8],20,1163531501);
			a = this.gg(a,b,c,d,x[i + 13],5,-1444681467);
			d = this.gg(d,a,b,c,x[i + 2],9,-51403784);
			c = this.gg(c,d,a,b,x[i + 7],14,1735328473);
			b = this.gg(b,c,d,a,x[i + 12],20,-1926607734);
			a = this.hh(a,b,c,d,x[i + 5],4,-378558);
			d = this.hh(d,a,b,c,x[i + 8],11,-2022574463);
			c = this.hh(c,d,a,b,x[i + 11],16,1839030562);
			b = this.hh(b,c,d,a,x[i + 14],23,-35309556);
			a = this.hh(a,b,c,d,x[i + 1],4,-1530992060);
			d = this.hh(d,a,b,c,x[i + 4],11,1272893353);
			c = this.hh(c,d,a,b,x[i + 7],16,-155497632);
			b = this.hh(b,c,d,a,x[i + 10],23,-1094730640);
			a = this.hh(a,b,c,d,x[i + 13],4,681279174);
			d = this.hh(d,a,b,c,x[i],11,-358537222);
			c = this.hh(c,d,a,b,x[i + 3],16,-722521979);
			b = this.hh(b,c,d,a,x[i + 6],23,76029189);
			a = this.hh(a,b,c,d,x[i + 9],4,-640364487);
			d = this.hh(d,a,b,c,x[i + 12],11,-421815835);
			c = this.hh(c,d,a,b,x[i + 15],16,530742520);
			b = this.hh(b,c,d,a,x[i + 2],23,-995338651);
			a = this.ii(a,b,c,d,x[i],6,-198630844);
			d = this.ii(d,a,b,c,x[i + 7],10,1126891415);
			c = this.ii(c,d,a,b,x[i + 14],15,-1416354905);
			b = this.ii(b,c,d,a,x[i + 5],21,-57434055);
			a = this.ii(a,b,c,d,x[i + 12],6,1700485571);
			d = this.ii(d,a,b,c,x[i + 3],10,-1894986606);
			c = this.ii(c,d,a,b,x[i + 10],15,-1051523);
			b = this.ii(b,c,d,a,x[i + 1],21,-2054922799);
			a = this.ii(a,b,c,d,x[i + 8],6,1873313359);
			d = this.ii(d,a,b,c,x[i + 15],10,-30611744);
			c = this.ii(c,d,a,b,x[i + 6],15,-1560198380);
			b = this.ii(b,c,d,a,x[i + 13],21,1309151649);
			a = this.ii(a,b,c,d,x[i + 4],6,-145523070);
			d = this.ii(d,a,b,c,x[i + 11],10,-1120210379);
			c = this.ii(c,d,a,b,x[i + 2],15,718787259);
			b = this.ii(b,c,d,a,x[i + 9],21,-343485551);
			a = this.addme(a,olda);
			b = this.addme(b,oldb);
			c = this.addme(c,oldc);
			d = this.addme(d,oldd);
			i += 16;
		}
		return [a,b,c,d];
	}
	,__class__: haxe.crypto.Md5
};
if(!haxe.ds) haxe.ds = {};
haxe.ds.IntMap = $hxClasses["haxe.ds.IntMap"] = function() {
	this.h = { };
};
haxe.ds.IntMap.__name__ = ["haxe","ds","IntMap"];
haxe.ds.IntMap.__interfaces__ = [haxe.IMap];
haxe.ds.IntMap.prototype = {
	h: null
	,set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty(key);
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) {
			a.push(key | 0);
		}
		return HxOverrides.iter(a);
	}
	,__class__: haxe.ds.IntMap
};
haxe.ds.ObjectMap = $hxClasses["haxe.ds.ObjectMap"] = function() {
	this.h = { __keys__ : { }};
};
haxe.ds.ObjectMap.__name__ = ["haxe","ds","ObjectMap"];
haxe.ds.ObjectMap.__interfaces__ = [haxe.IMap];
haxe.ds.ObjectMap.assignId = function(obj) {
	return obj.__id__ = ++haxe.ds.ObjectMap.count;
};
haxe.ds.ObjectMap.getId = function(obj) {
	return obj.__id__;
};
haxe.ds.ObjectMap.prototype = {
	h: null
	,set: function(key,value) {
		var id = haxe.ds.ObjectMap.getId(key) || haxe.ds.ObjectMap.assignId(key);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[haxe.ds.ObjectMap.getId(key)];
	}
	,exists: function(key) {
		return this.h.__keys__[haxe.ds.ObjectMap.getId(key)] != null;
	}
	,remove: function(key) {
		var id = haxe.ds.ObjectMap.getId(key);
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return HxOverrides.iter(a);
	}
	,__class__: haxe.ds.ObjectMap
};
if(!haxe.ds._StringMap) haxe.ds._StringMap = {};
haxe.ds._StringMap.StringMapIterator = $hxClasses["haxe.ds._StringMap.StringMapIterator"] = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
haxe.ds._StringMap.StringMapIterator.__name__ = ["haxe","ds","_StringMap","StringMapIterator"];
haxe.ds._StringMap.StringMapIterator.prototype = {
	map: null
	,keys: null
	,index: null
	,count: null
	,hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		return this.map.get(this.keys[this.index++]);
	}
	,__class__: haxe.ds._StringMap.StringMapIterator
};
haxe.ds.StringMap = $hxClasses["haxe.ds.StringMap"] = function() {
	this.h = { };
};
haxe.ds.StringMap.__name__ = ["haxe","ds","StringMap"];
haxe.ds.StringMap.__interfaces__ = [haxe.IMap];
haxe.ds.StringMap.prototype = {
	h: null
	,rh: null
	,isReserved: function(key) {
		return __map_reserved[key] != null;
	}
	,set: function(key,value) {
		if(this.isReserved(key)) {
			this.setReserved(key,value);
		} else {
			this.h[key] = value;
		}
	}
	,get: function(key) {
		if(this.isReserved(key)) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	,exists: function(key) {
		if(this.isReserved(key)) {
			return this.existsReserved(key);
		}
		return this.h.hasOwnProperty(key);
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(this.isReserved(key)) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,iterator: function() {
		return new haxe.ds._StringMap.StringMapIterator(this,this.arrayKeys());
	}
	,toString: function() {
		var s = new StringBuf();
		s.add("{");
		var keys = this.arrayKeys();
		var _g1 = 0;
		var _g = keys.length;
		while(_g1 < _g) {
			var i = _g1++;
			var k = keys[i];
			s.add(k);
			s.add(" => ");
			s.add(Std.string(this.get(k)));
			if(i < keys.length - 1) {
				s.add(", ");
			}
		}
		s.add("}");
		return s.toString();
	}
	,__class__: haxe.ds.StringMap
};
if(!haxe.io) haxe.io = {};
haxe.io.Bytes = $hxClasses["haxe.io.Bytes"] = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe.io.Bytes.__name__ = ["haxe","io","Bytes"];
haxe.io.Bytes.alloc = function(length) {
	return new haxe.io.Bytes(new ArrayBuffer(length));
};
haxe.io.Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = StringTools.fastCodeAt(s,i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | StringTools.fastCodeAt(s,i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe.io.Bytes(new Uint8Array(a).buffer);
};
haxe.io.Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe.io.Bytes(b);
};
haxe.io.Bytes.fastGet = function(b,pos) {
	return b.bytes[pos];
};
haxe.io.Bytes.prototype = {
	length: null
	,b: null
	,get: function(pos) {
		return this.b[pos];
	}
	,set: function(pos,v) {
		this.b[pos] = v & 255;
	}
	,__class__: haxe.io.Bytes
};
var js = js || {};
if(!js._Boot) js._Boot = {};
js._Boot.HaxeError = $hxClasses["js._Boot.HaxeError"] = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js._Boot.HaxeError);
	}
};
js._Boot.HaxeError.__name__ = ["js","_Boot","HaxeError"];
js._Boot.HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js._Boot.HaxeError(val);
	}
};
js._Boot.HaxeError.__super__ = Error;
js._Boot.HaxeError.prototype = $extend(Error.prototype,{
	val: null
	,__class__: js._Boot.HaxeError
});
js.Boot = $hxClasses["js.Boot"] = function() { };
js.Boot.__name__ = ["js","Boot"];
js.Boot.isClass = function(o) {
	return o.__name__;
};
js.Boot.isEnum = function(e) {
	return e.__ename__;
};
js.Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js.Boot.__nativeClassName(o);
		if(name != null) {
			return js.Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js.Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (js.Boot.isClass(o) || js.Boot.isEnum(o))) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js.Boot.__string_rec(o[i],s);
					} else {
						str += js.Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js.Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js.Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js.Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js.Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js.Boot.__interfLoop(cc.__super__,cl);
};
js.Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js.Boot.__interfLoop(js.Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js.Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js.Boot.__cast = function(o,t) {
	if(js.Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js._Boot.HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js.Boot.__nativeClassName = function(o) {
	var name = js.Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js.Boot.__isNativeObj = function(o) {
	return js.Boot.__nativeClassName(o) != null;
};
js.Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
js.Browser = $hxClasses["js.Browser"] = function() { };
js.Browser.__name__ = ["js","Browser"];
js.Browser.get_window = function() {
	return window;
};
js.Browser.get_document = function() {
	return window.document;
};
js.Browser.get_location = function() {
	return window.location;
};
js.Browser.get_navigator = function() {
	return window.navigator;
};
js.Browser.createXMLHttpRequest = function() {
	if(typeof XMLHttpRequest != "undefined") {
		return new XMLHttpRequest();
	}
	if(typeof ActiveXObject != "undefined") {
		return new ActiveXObject("Microsoft.XMLHTTP");
	}
	throw new js._Boot.HaxeError("Unable to create XMLHttpRequest object.");
};
js.Browser.alert = function(v) {
	js.Browser.get_window().alert(js.Boot.__string_rec(v,""));
};
js.Lib = $hxClasses["js.Lib"] = function() { };
js.Lib.__name__ = ["js","Lib"];
js.Lib.eval = function(code) {
	return eval(code);
};
js.Lib.get_undefined = function() {
	return undefined;
};
if(!js.html) js.html = {};
if(!js.html.compat) js.html.compat = {};
js.html.compat.ArrayBuffer = $hxClasses["js.html.compat.ArrayBuffer"] = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this.a[i] = 0;
		}
		this.byteLength = len;
	}
};
js.html.compat.ArrayBuffer.__name__ = ["js","html","compat","ArrayBuffer"];
js.html.compat.ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var result = new ArrayBuffer(u.byteLength);
	var resultArray = new Uint8Array(result);
	resultArray.set(u);
	return result;
};
js.html.compat.ArrayBuffer.prototype = {
	byteLength: null
	,a: null
	,slice: function(begin,end) {
		return new js.html.compat.ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js.html.compat.ArrayBuffer
};
js.html.compat.Uint8Array = $hxClasses["js.html.compat.Uint8Array"] = function() { };
js.html.compat.Uint8Array.__name__ = ["js","html","compat","Uint8Array"];
js.html.compat.Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js.html.compat.ArrayBuffer(arr);
	} else if(Std["is"](arg1,js.html.compat.ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset;
		}
		if(offset == 0) {
			arr = buffer.a;
		} else {
			arr = buffer.a.slice(offset,offset + length);
		}
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js.html.compat.ArrayBuffer(arr);
	} else {
		throw new js._Boot.HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js.html.compat.Uint8Array._subarray;
	arr.set = js.html.compat.Uint8Array._set;
	return arr;
};
js.html.compat.Uint8Array._set = function(arg,offset) {
	if(Std["is"](arg.buffer,js.html.compat.ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js._Boot.HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js._Boot.HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js._Boot.HaxeError("TODO");
	}
};
js.html.compat.Uint8Array._subarray = function(start,end) {
	var a = js.html.compat.Uint8Array._new(this.slice(start,end));
	a.byteOffset = start;
	return a;
};
var phylo = phylo || {};
phylo.PhyloAnnotation = $hxClasses["phylo.PhyloAnnotation"] = function() {
	this.hasAnnot = false;
	this.color = [];
	this.text = "";
	this.splitresults = false;
	this.optionSelected = [];
	this.alfaAnnot = [];
	this.hasAnnot = false;
	this.fromresults = [];
	this.auxMap = new haxe.ds.StringMap();
};
phylo.PhyloAnnotation.__name__ = ["phylo","PhyloAnnotation"];
phylo.PhyloAnnotation.prototype = {
	type: null
	,summary: null
	,summary_img: null
	,imgtest: null
	,annotImg: null
	,defaultImg: null
	,shape: null
	,color: null
	,hookName: null
	,text: null
	,options: null
	,optionSelected: null
	,dbData: null
	,legend: null
	,legendClazz: null
	,legendMethod: null
	,hidden: null
	,hasClass: null
	,hasMethod: null
	,divMethod: null
	,familyMethod: null
	,hasAnnot: null
	,alfaAnnot: null
	,splitresults: null
	,popup: null
	,popMethod: null
	,multiChoice: null
	,option: null
	,fromresults: null
	,label: null
	,myleaf: null
	,auxMap: null
	,uploadImg: function(imgList) {
		var i;
		this.annotImg = [];
		var _g1 = 0;
		var _g = imgList.length;
		while(_g1 < _g) {
			var i1 = _g1++;
			this.annotImg[i1] = js.Browser.get_document().createElement("img");
			this.annotImg[i1].src = imgList[i1];
			this.annotImg[i1].onload = function() {
			};
		}
	}
	,uploadSpecificImg: function(imgList,pos) {
		if(this.annotImg == null) {
			this.annotImg = [];
		}
		this.annotImg[pos] = js.Browser.get_document().createElement("img");
		this.annotImg[pos].width = 15;
		this.annotImg[pos].src = imgList;
		this.annotImg[pos].onload = function() {
		};
	}
	,saveAnnotationData: function(annotation,data,option,r) {
		this.type = annotation;
		this.dbData = [];
		this.dbData = data;
		this.option = option;
		if(r[annotation] != null) {
			if(this.color != null) {
				this.color = r[annotation].color;
			} else {
				this.color = [];
				this.color = r[annotation].color;
			}
			this.text = r[annotation].text;
		} else {
			this.defaultImg = r.defImage;
			if(this.color != null) {
				this.color[0] = saturn.core.Util.clone(r.color);
			} else {
				this.color = [];
				this.color[0] = saturn.core.Util.clone(r.color);
			}
			this.text = "" + Std.string(r.text) + "";
		}
		this.hasAnnot = true;
	}
	,delAnnotation: function(annotation) {
	}
	,__class__: phylo.PhyloAnnotation
};
phylo.PhyloAnnotationConfiguration = $hxClasses["phylo.PhyloAnnotationConfiguration"] = function() {
};
phylo.PhyloAnnotationConfiguration.__name__ = ["phylo","PhyloAnnotationConfiguration"];
phylo.PhyloAnnotationConfiguration.prototype = {
	name: null
	,annotationFunction: null
	,styleFunction: null
	,legendFunction: null
	,infoFunction: null
	,shape: null
	,colour: null
	,_skipped: null
	,getColourOldFormat: function() {
		return { color : this.colour, "used" : "false"};
	}
	,isSkip: function() {
		return this._skipped;
	}
	,__class__: phylo.PhyloAnnotationConfiguration
};
phylo.PhyloAnnotationManager = $hxClasses["phylo.PhyloAnnotationManager"] = function() {
	this.menuScroll = 0;
	this.onSubmenu = false;
	this.selectedAnnotationOptions = [];
	this.annotations = [];
	this.activeAnnotation = [];
	this.alreadyGotAnnotation = new haxe.ds.StringMap();
	this.selectedAnnotationOptions = [];
	this.searchedGenes = [];
	this.annotationListeners = [];
	this.skipAnnotation = [];
	this.skipCurrentLegend = [];
};
phylo.PhyloAnnotationManager.__name__ = ["phylo","PhyloAnnotationManager"];
phylo.PhyloAnnotationManager.prototype = {
	annotations: null
	,rootNode: null
	,canvas: null
	,treeType: null
	,numTotalAnnot: null
	,searchedGenes: null
	,annotationListeners: null
	,annotationData: null
	,annotationString: null
	,annotationConfigs: null
	,nameAnnot: null
	,jsonFile: null
	,viewOptions: null
	,activeAnnotation: null
	,alreadyGotAnnotation: null
	,selectedAnnotationOptions: null
	,onSubmenu: null
	,menuScroll: null
	,annotationNameToConfig: null
	,skipAnnotation: null
	,skipCurrentLegend: null
	,showAssociatedData: function(active,data,mx,my) {
		var annotation = this.annotations[data.annotation.type];
		if(!active && annotation.divMethod != null) {
			annotation.divMethod(data,mx,my);
		}
	}
	,showScreenData: function(active,data,mx,my) {
		if(this.canvas == null) {
			return;
		}
		this.showAssociatedData(active,data,mx,my);
	}
	,fillAnnotationwithJSonData: function() {
		var i = 0;
		var j = 0;
		var z = 0;
		this.nameAnnot = [];
		var b = 0;
		while(i < this.jsonFile.btnGroup.length) {
			j = 0;
			while(j < this.jsonFile.btnGroup[i].buttons.length) {
				if(this.jsonFile.btnGroup[i].buttons[j].isTitle == false) {
					var a = this.jsonFile.btnGroup[i].buttons[j].annotCode;
					this.annotations[a] = new phylo.PhyloAnnotation();
					this.selectedAnnotationOptions[a] = null;
					if(this.jsonFile.btnGroup[i].buttons[j].shape == "image") {
						this.annotations[a].uploadImg(this.jsonFile.btnGroup[i].buttons[j].annotImg);
					}
					this.alreadyGotAnnotation.set(this.jsonFile.btnGroup[i].buttons[j].annotCode,false);
					this.annotations[a].shape = this.jsonFile.btnGroup[i].buttons[j].shape;
					this.annotations[a].label = this.jsonFile.btnGroup[i].buttons[j].label;
					this.annotations[a].color = this.jsonFile.btnGroup[i].buttons[j].color;
					this.annotations[a].hookName = this.jsonFile.btnGroup[i].buttons[j].hookName;
					this.annotations[a].splitresults = this.jsonFile.btnGroup[i].buttons[j].splitresults;
					this.annotations[a].popup = this.jsonFile.btnGroup[i].buttons[j].popUpWindows;
					if(this.jsonFile.btnGroup[i].buttons[j].hasClass != null) {
						this.annotations[a].hasClass = this.jsonFile.btnGroup[i].buttons[j].hasClass;
					}
					if(this.jsonFile.btnGroup[i].buttons[j].hasMethod != null) {
						this.annotations[a].hasMethod = this.jsonFile.btnGroup[i].buttons[j].hasMethod;
					}
					if(this.jsonFile.btnGroup[i].buttons[j].divMethod != null) {
						this.annotations[a].divMethod = this.jsonFile.btnGroup[i].buttons[j].divMethod;
					}
					if(this.jsonFile.btnGroup[i].buttons[j].familyMethod != null) {
						this.annotations[a].familyMethod = this.jsonFile.btnGroup[i].buttons[j].familyMethod;
					}
					if(this.jsonFile.btnGroup[i].buttons[j].popUpWindows != null && this.jsonFile.btnGroup[i].buttons[j].popUpWindows == true) {
						this.annotations[a].popMethod = this.jsonFile.btnGroup[i].buttons[j].windowsData[0].popMethod;
					}
					this.annotations[a].options = [];
					if(this.jsonFile.btnGroup[i].buttons[j].legend != null) {
						this.annotations[a].legend = this.jsonFile.btnGroup[i].buttons[j].legend.image;
						if(this.jsonFile.btnGroup[i].buttons[j].legend.clazz != null) {
							this.annotations[a].legendClazz = this.jsonFile.btnGroup[i].buttons[j].legend.clazz;
							this.annotations[a].legendMethod = this.jsonFile.btnGroup[i].buttons[j].legend.method;
						} else if(this.jsonFile.btnGroup[i].buttons[j].legend.method != null) {
							this.annotations[a].legendMethod = this.jsonFile.btnGroup[i].buttons[j].legend.method;
						}
					}
					if(this.jsonFile.btnGroup[i].buttons[j].hidden != null) {
						this.annotations[a].hidden = this.jsonFile.btnGroup[i].buttons[j].hidden;
					}
					if(this.jsonFile.btnGroup[i].buttons[j].submenu == true) {
						var zz;
						var _g1 = 0;
						var _g = this.jsonFile.btnGroup[i].buttons[j].options.length;
						while(_g1 < _g) {
							var zz1 = _g1++;
							this.annotations[a].options[zz1] = this.jsonFile.btnGroup[i].buttons[j].options[zz1].hookName;
							if(this.jsonFile.btnGroup[i].buttons[j].options[zz1].defaultImg != null) {
								this.annotations[a].defaultImg = this.jsonFile.btnGroup[i].buttons[j].options[zz1].defaultImg;
							}
						}
						this.annotations[a].optionSelected[0] = this.jsonFile.btnGroup[i].buttons[j].optionSelected[0];
					}
					this.nameAnnot[b] = this.jsonFile.btnGroup[i].buttons[j].label;
					++b;
				}
				++j;
			}
			this.numTotalAnnot += j;
			++i;
		}
	}
	,setSelectedAnnotationOptions: function(annotation,selectedOptions) {
		this.selectedAnnotationOptions[annotation] = selectedOptions;
	}
	,getSelectedAnnotationOptions: function(annotation) {
		return this.selectedAnnotationOptions[annotation];
	}
	,closeAnnotWindows: function() {
	}
	,generateIcon: function(j,tarname,results) {
		var name = tarname;
		if(name.indexOf("(") != -1 || name.indexOf("/") != -1) {
			var auxArray = name.split("");
			var j1;
			var nn = "";
			var _g1 = 0;
			var _g = auxArray.length;
			while(_g1 < _g) {
				var j2 = _g1++;
				if(auxArray[j2] != "(" && auxArray[j2] != ")" && auxArray[j2] != "/") {
					nn += auxArray[j2];
				}
			}
			name = nn;
		}
		var r1 = 23 - results[1];
		var r2 = 23 - results[2];
		var r3 = 23 - results[3];
		var r4 = 23 - results[4];
		var r5 = 23 - results[5];
		var r6 = 23 - results[6];
		var r7 = 23 - results[7];
		return "<script type=\"text/javascript\">\n        $('.horizontal .progress-fill span').each(function(){\n  var percent = $(this).html();\n  $(this).parent().css('width', percent);\n});\n\n\n$('.vertical .progress-fill span').each(function(){\n  var percent = $(this).html();\n  var pTop = 100 - ( percent.slice(0, percent.length - 1) ) + \"%\";\n  $(this).parent().css({\n    'height' : percent,\n    'top' : pTop\n  });\n});\n                </script>" + "\n                <style type=\"text/css\" media=\"all\">\n                *, *:before, *:after {\n  -moz-box-sizing: border-box; -webkit-box-sizing: border-box; box-sizing: border-box;\n }\n.container {\n  width: 23px;\n  height: 23px;\n  background: #fff;\n  overflow: hidden;\n  border-bottom:1px solid #000;\n}\n\n.vertical .progress-bar {\n  float: left;\n  height: 100%;\n  width: 3px;\n}\n\n.vertical .progress-track {\n  position: relative;\n  width: 3px;\n  height: 100%;\n  background: #ffffff;\n}\n\n.vertical .progress-track-1 {\n   position: relative;\n   width: 3px;\n   height: 100%;\n   background: #2980d6;\n}\n.vertical .progress-fill-1" + name + " {\n  position: relative;\n  height: " + r1 + "px;\n  width: 3px;\n  background-color:#ffffff;\n}\n\n.vertical .progress-track-2 {\n   position: relative;\n   width: 3px;\n   height: 100%;\n   background: #bf0000;\n}\n.vertical .progress-fill-2" + name + " {\n  position: relative;\n  height: " + r2 + "px;\n  width: 3px;\n  background-color:#ffffff;\n}\n.vertical .progress-track-3 {\n  position: relative;\n   width: 3px;\n   height: 100%;\n   background: #63cf1b;\n}\n.vertical .progress-fill-3" + name + " {\n  position: relative;\n  height: " + r3 + "px;\n  width: 3px;\n  background-color:#ffffff;\n}\n.vertical .progress-track-4 {\n  position: relative;\n   width: 3px;\n   height: 100%;\n   background: #ff8000;\n}\n.vertical .progress-fill-4" + name + " {\n  position: relative;\n  height: " + r4 + "px;\n  width: 3px;\n  background-color:#ffffff;\n}\n.vertical .progress-track-5 {\n  position: relative;\n   width: 3px;\n   height: 100%;\n   background: #c05691;\n}\n.vertical .progress-fill-5" + name + " {\n  position: relative;\n  height: " + r5 + "px;\n  width: 3px;\n  background-color:#ffffff;\n}\n.vertical .progress-fill-6" + name + " {\n  position: relative;\n  height: " + r6 + "px;\n  width: 3px;\n  background-color:#ffffff;\n}\n.vertical .progress-track-6 {\n  position: relative;\n   width: 3px;\n   height: 100%;\n   background: #ffcc00;\n}\n.vertical .progress-track-7 {\n  position: relative;\n   width: 3px;\n   height: 100%;\n   background: #793ff3;\n}\n.vertical .progress-fill-7" + name + " {\n  position: relative;\n  height: " + r7 + ";\n  width: 3px;\n  background-color:#ffffff;\n}\n                </style>\n                " + "<a id=\"myLink\" title=\"Click to visualize annotation details\"  href=\"#\" onclick=\"app.getActiveProgram().annotationManager.showDivInTable(" + j + ",'" + tarname + "')\";return false;\">\n                <div class=\"container vertical flat\">\n                          <div class=\"progress-bar\">\n                            <div class=\"progress-track-1\">\n                              <div class=\"progress-fill-1" + name + "\">\n                                <span> </span>\n                              </div>\n                            </div>\n                          </div>\n\n                          <div class=\"progress-bar\">\n                            <div class=\"progress-track-2\">\n                              <div class=\"progress-fill-2" + name + "\">\n                                <span> </span>\n                              </div>\n                            </div>\n                          </div>\n\n                          <div class=\"progress-bar\">\n                            <div class=\"progress-track-3\">\n                              <div class=\"progress-fill-3" + name + "\">\n                                <span> </span>\n                              </div>\n                            </div>\n                          </div>\n\n                          <div class=\"progress-bar\">\n                            <div class=\"progress-track-4\">\n                              <div class=\"progress-fill-4" + name + "\">\n                                <span> </span>\n                              </div>\n                            </div>\n                          </div>\n\n                          <div class=\"progress-bar\">\n                            <div class=\"progress-track-5\">\n                              <div class=\"progress-fill-5" + name + "\">\n                                <span> </span>\n                              </div>\n                            </div>\n                          </div>\n\n                          <div class=\"progress-bar\">\n                            <div class=\"progress-track-6\">\n                              <div class=\"progress-fill-6" + name + "\">\n                                <span> </span>\n                              </div>\n                            </div>\n                          </div>\n\n                          <div class=\"progress-bar\">\n                            <div class=\"progress-track-7\">\n                              <div class=\"progress-fill-7" + name + "\">\n                                <span> </span>\n                              </div>\n                            </div>\n                          </div>\n                        </div></a>";
	}
	,addAnnotData: function(annotData,annotation,option,callback) {
		var i;
		var mapResults = new haxe.ds.StringMap();
		var j = 0;
		var target;
		var _g1 = 0;
		var _g = annotData.length;
		while(_g1 < _g) {
			var i1 = _g1++;
			target = Std.string(annotData[i1].target_id) + "_" + j;
			while(mapResults.exists(target)) {
				++j;
				target = Std.string(annotData[i1].target_id) + "_" + j;
			}
			j = 0;
			mapResults.set(target,annotData[i1]);
		}
		var items = [];
		var _g11 = 0;
		var _g2 = this.rootNode.targets.length;
		while(_g11 < _g2) {
			var i2 = _g11++;
			items[i2] = this.rootNode.targets[i2];
		}
		this.processAnnotationsSimple(items,mapResults,annotation,option,callback);
	}
	,processAnnotationsSimple: function(items,mapResults,annotation,option,cb) {
		var _gthis = this;
		var toComplete = items.length;
		var onDone = function() {
			if(toComplete == 0) {
				cb();
			}
		};
		if(toComplete == 0) {
			cb();
			return;
		}
		var _g = 0;
		while(_g < items.length) {
			var item = [items[_g]];
			++_g;
			var name = item[0] + "_0";
			var res = [mapResults.get(name)];
			if(this.annotations[annotation].hasClass != null && this.annotations[annotation].hasMethod != null) {
				var clazz = this.annotations[annotation].hasClass;
				var method = this.annotations[annotation].hasMethod;
				var _processAnnotation = (function(res1,item1) {
					return function(r) {
						if(r.hasAnnot) {
							var leafaux = _gthis.rootNode.leafNameToNode.get(item1[0]);
							leafaux.activeAnnotation[annotation] = true;
							if(leafaux.annotations[annotation] == null) {
								leafaux.annotations[annotation] = new phylo.PhyloAnnotation();
								leafaux.annotations[annotation].myleaf = leafaux;
								leafaux.annotations[annotation].text = r.text;
								leafaux.annotations[annotation].defaultImg = _gthis.annotations[annotation].defaultImg;
								leafaux.annotations[annotation].saveAnnotationData(annotation,res1[0],option,r);
							} else if(_gthis.annotations[annotation].splitresults == true) {
								leafaux.annotations[annotation].splitresults = true;
								var z = 0;
								while(leafaux.annotations[annotation].alfaAnnot[z] != null) ++z;
								leafaux.annotations[annotation].alfaAnnot[z] = new phylo.PhyloAnnotation();
								leafaux.annotations[annotation].alfaAnnot[z].myleaf = leafaux;
								leafaux.annotations[annotation].alfaAnnot[z].text = "";
								leafaux.annotations[annotation].alfaAnnot[z].defaultImg = _gthis.annotations[annotation].defaultImg;
								leafaux.annotations[annotation].alfaAnnot[z].saveAnnotationData(annotation,res1[0],option,r);
								if(leafaux.annotations[annotation].alfaAnnot[z].text == leafaux.annotations[annotation].text) {
									leafaux.annotations[annotation].alfaAnnot[z] = null;
								}
							} else if(leafaux.annotations[annotation].option != _gthis.annotations[annotation].optionSelected[0]) {
								leafaux.annotations[annotation] = new phylo.PhyloAnnotation();
								leafaux.annotations[annotation].myleaf = leafaux;
								leafaux.annotations[annotation].text = "";
								leafaux.annotations[annotation].defaultImg = _gthis.annotations[annotation].defaultImg;
								leafaux.annotations[annotation].saveAnnotationData(annotation,res1[0],option,r);
							}
						}
						toComplete -= 1;
						onDone();
					};
				})(res,item);
				if(Reflect.isFunction(method)) {
					method(name,res[0],option,this.annotations,item[0],_processAnnotation);
				} else {
					var hook = Reflect.field(Type.resolveClass(clazz),method);
					hook(name,res[0],option,this.annotations,item[0],_processAnnotation);
				}
			} else {
				var col = "";
				if(this.annotations[annotation].color[0] != null) {
					col = this.annotations[annotation].color[0].color;
				}
				var r1 = { hasAnnot : true, text : "", color : { color : col, used : true}, defImage : this.annotations[annotation].defaultImg};
				var leafaux1 = this.rootNode.leafNameToNode.get(item[0]);
				leafaux1.activeAnnotation[annotation] = true;
				if(leafaux1.annotations[annotation] == null) {
					leafaux1.annotations[annotation] = new phylo.PhyloAnnotation();
					leafaux1.annotations[annotation].myleaf = leafaux1;
					leafaux1.annotations[annotation].text = "";
					leafaux1.annotations[annotation].defaultImg = this.annotations[annotation].defaultImg;
					leafaux1.annotations[annotation].saveAnnotationData(annotation,res[0],option,r1);
				} else if(leafaux1.annotations[annotation].splitresults == true) {
					var z1 = 0;
					while(leafaux1.annotations[annotation].alfaAnnot[z1] != null) ++z1;
					leafaux1.annotations[annotation].alfaAnnot[z1] = new phylo.PhyloAnnotation();
					leafaux1.annotations[annotation].alfaAnnot[z1].myleaf = leafaux1;
					leafaux1.annotations[annotation].alfaAnnot[z1].text = "";
					leafaux1.annotations[annotation].alfaAnnot[z1].defaultImg = this.annotations[annotation].defaultImg;
					leafaux1.annotations[annotation].alfaAnnot[z1].saveAnnotationData(annotation,res[0],option,r1);
				} else if(leafaux1.annotations[annotation].option != this.annotations[annotation].optionSelected[0]) {
					leafaux1.annotations[annotation] = new phylo.PhyloAnnotation();
					leafaux1.annotations[annotation].myleaf = leafaux1;
					leafaux1.annotations[annotation].text = "";
					leafaux1.annotations[annotation].defaultImg = this.annotations[annotation].defaultImg;
					leafaux1.annotations[annotation].saveAnnotationData(annotation,res[0],option,r1);
				}
				toComplete -= 1;
				onDone();
			}
		}
	}
	,processFamilyAnnotations: function(items,mapResults,annotation,option,cb) {
		var _gthis = this;
		var toComplete = 0;
		var _g = 0;
		while(_g < items.length) {
			var item = items[_g];
			++_g;
			var name = "";
			var hookCount = 0;
			var index = null;
			var variant = "1";
			var hasName = false;
			if(item.indexOf("(") != -1 || item.indexOf("-") != -1) {
				hasName = true;
				var auxArray = item.split("");
				var _g2 = 0;
				var _g1 = auxArray.length;
				while(_g2 < _g1) {
					var j = _g2++;
					if(auxArray[j] == "(" || auxArray[j] == "-") {
						if(auxArray[j] == "(") {
							index = auxArray[j + 1];
							variant = "1";
						} else if(auxArray[j] == "-") {
							index = null;
							variant = auxArray[j + 1];
						}
						break;
					}
					name += auxArray[j];
				}
			} else {
				name = item;
			}
			var j1 = 0;
			var finished = false;
			var showAsSgc = false;
			while(mapResults.exists(name + "_" + j1) == true && finished == false) {
				var keepgoing = true;
				var res = mapResults.get(name + "_" + j1);
				if(mapResults.get(name + "_" + j1).sgc == 1 || showAsSgc == true) {
					res.sgc = 1;
					showAsSgc = true;
				}
				if(hasName == true) {
					if(res.target_name_index != index || res.variant_index != variant) {
						keepgoing = false;
					}
				}
				if(keepgoing == false) {
					++j1;
				} else {
					toComplete += 1;
					if(this.annotations[annotation].hasClass != null && this.annotations[annotation].hasMethod != null) {
						++j1;
					} else {
						finished = true;
					}
				}
			}
		}
		var onDone = function() {
			if(toComplete == 0) {
				cb();
			}
		};
		if(toComplete == 0) {
			cb();
			return;
		}
		var _g3 = 0;
		while(_g3 < items.length) {
			var item1 = [items[_g3]];
			++_g3;
			var hookCount1 = 0;
			var index1 = null;
			var variant1 = "1";
			var hasName1 = false;
			var name1 = "";
			if(item1[0].indexOf("(") != -1 || item1[0].indexOf("-") != -1) {
				hasName1 = true;
				var auxArray1 = item1[0].split("");
				var _g21 = 0;
				var _g11 = auxArray1.length;
				while(_g21 < _g11) {
					var j2 = _g21++;
					if(auxArray1[j2] == "(" || auxArray1[j2] == "-") {
						if(auxArray1[j2] == "(") {
							index1 = auxArray1[j2 + 1];
							variant1 = "1";
						} else if(auxArray1[j2] == "-") {
							index1 = null;
							variant1 = auxArray1[j2 + 1];
						}
						break;
					}
					name1 += auxArray1[j2];
				}
			} else {
				name1 = item1[0];
			}
			var j3 = 0;
			var finished1 = false;
			var showAsSgc1 = false;
			while(mapResults.exists(name1 + "_" + j3) == true && finished1 == false) {
				var keepGoing = true;
				var res1 = [mapResults.get(name1 + "_" + j3)];
				if(mapResults.get(name1 + "_" + j3).sgc == 1 || showAsSgc1 == true) {
					res1[0].sgc = 1;
					showAsSgc1 = true;
				}
				if(hasName1 == true) {
					if(res1[0].target_name_index != index1 || res1[0].variant_index != variant1) {
						keepGoing = false;
					}
				}
				if(keepGoing == false) {
					++j3;
				} else if(this.annotations[annotation].hasClass != null && this.annotations[annotation].hasMethod != null) {
					var clazz = this.annotations[annotation].hasClass;
					var method = this.annotations[annotation].hasMethod;
					var _processAnnotation = (function(res2,item2) {
						return function(r) {
							if(r.hasAnnot) {
								var leafaux = _gthis.rootNode.leafNameToNode.get(item2[0]);
								leafaux.activeAnnotation[annotation] = true;
								if(leafaux.annotations[annotation] == null) {
									leafaux.annotations[annotation] = new phylo.PhyloAnnotation();
									leafaux.annotations[annotation].myleaf = leafaux;
									leafaux.annotations[annotation].text = r.text;
									leafaux.annotations[annotation].defaultImg = _gthis.annotations[annotation].defaultImg;
									leafaux.annotations[annotation].saveAnnotationData(annotation,res2[0],option,r);
								} else if(_gthis.annotations[annotation].splitresults == true) {
									leafaux.annotations[annotation].splitresults = true;
									var z = 0;
									while(leafaux.annotations[annotation].alfaAnnot[z] != null) ++z;
									leafaux.annotations[annotation].alfaAnnot[z] = new phylo.PhyloAnnotation();
									leafaux.annotations[annotation].alfaAnnot[z].myleaf = leafaux;
									leafaux.annotations[annotation].alfaAnnot[z].text = "";
									leafaux.annotations[annotation].alfaAnnot[z].defaultImg = _gthis.annotations[annotation].defaultImg;
									leafaux.annotations[annotation].alfaAnnot[z].saveAnnotationData(annotation,res2[0],option,r);
									if(leafaux.annotations[annotation].alfaAnnot[z].text == leafaux.annotations[annotation].text) {
										leafaux.annotations[annotation].alfaAnnot[z] = null;
									}
								} else if(leafaux.annotations[annotation].option != _gthis.annotations[annotation].optionSelected[0]) {
									leafaux.annotations[annotation] = new phylo.PhyloAnnotation();
									leafaux.annotations[annotation].myleaf = leafaux;
									leafaux.annotations[annotation].text = "";
									leafaux.annotations[annotation].defaultImg = _gthis.annotations[annotation].defaultImg;
									leafaux.annotations[annotation].saveAnnotationData(annotation,res2[0],option,r);
								}
							}
							toComplete -= 1;
							onDone();
						};
					})(res1,item1);
					if(Reflect.isFunction(method)) {
						method(name1,res1[0],option,this.annotations,item1[0],_processAnnotation);
					} else {
						var hook = Reflect.field(Type.resolveClass(clazz),method);
						hook(name1,res1[0],option,this.annotations,item1[0],_processAnnotation);
					}
					++j3;
				} else {
					finished1 = true;
					var col = "";
					if(this.annotations[annotation].color[0] != null) {
						col = this.annotations[annotation].color[0].color;
					}
					var r1 = { hasAnnot : true, text : "", color : { color : col, used : true}, defImage : this.annotations[annotation].defaultImg};
					var leafaux1 = this.rootNode.leafNameToNode.get(item1[0]);
					leafaux1.activeAnnotation[annotation] = true;
					if(leafaux1.annotations[annotation] == null) {
						leafaux1.annotations[annotation] = new phylo.PhyloAnnotation();
						leafaux1.annotations[annotation].myleaf = leafaux1;
						leafaux1.annotations[annotation].text = "";
						leafaux1.annotations[annotation].defaultImg = this.annotations[annotation].defaultImg;
						leafaux1.annotations[annotation].saveAnnotationData(annotation,res1[0],option,r1);
					} else if(leafaux1.annotations[annotation].splitresults == true) {
						var z1 = 0;
						while(leafaux1.annotations[annotation].alfaAnnot[z1] != null) ++z1;
						leafaux1.annotations[annotation].alfaAnnot[z1] = new phylo.PhyloAnnotation();
						leafaux1.annotations[annotation].alfaAnnot[z1].myleaf = leafaux1;
						leafaux1.annotations[annotation].alfaAnnot[z1].text = "";
						leafaux1.annotations[annotation].alfaAnnot[z1].defaultImg = this.annotations[annotation].defaultImg;
						leafaux1.annotations[annotation].alfaAnnot[z1].saveAnnotationData(annotation,res1[0],option,r1);
					} else if(leafaux1.annotations[annotation].option != this.annotations[annotation].optionSelected[0]) {
						leafaux1.annotations[annotation] = new phylo.PhyloAnnotation();
						leafaux1.annotations[annotation].myleaf = leafaux1;
						leafaux1.annotations[annotation].text = "";
						leafaux1.annotations[annotation].defaultImg = this.annotations[annotation].defaultImg;
						leafaux1.annotations[annotation].saveAnnotationData(annotation,res1[0],option,r1);
					}
					toComplete -= 1;
					onDone();
				}
			}
		}
	}
	,cleanAnnotResults: function(annot) {
		var items = [];
		var _g1 = 0;
		var _g = this.rootNode.targets.length;
		while(_g1 < _g) {
			var i = _g1++;
			var item = this.rootNode.targets[i];
			var leafaux = this.rootNode.leafNameToNode.get(item);
			if(leafaux.annotations[annot] != null) {
				leafaux.annotations[annot].hasAnnot = false;
			}
		}
	}
	,reloadAnnotationConfigurations: function() {
		this.setAnnotationConfigs(this.getAnnotationConfigs(),true,function() {
		});
	}
	,setAnnotationConfigs: function(configs,restoreData,cb) {
		var _gthis = this;
		this.annotationConfigs = configs;
		this.annotationNameToConfig = new haxe.ds.StringMap();
		var _g = 0;
		var _g1 = this.annotationConfigs;
		while(_g < _g1.length) {
			var config = _g1[_g];
			++_g;
			this.annotationNameToConfig.set(config.name,config);
		}
		var oldData = this.annotationData;
		this.annotationData = [];
		var activeAnnotationNames = new haxe.ds.StringMap();
		saturn.client.core.CommonCore.getDefaultProvider(function(err,provider) {
			if(err == null && provider != null) {
				provider.resetCache();
				var _g11 = 0;
				var _g2 = _gthis.activeAnnotation.length;
				while(_g11 < _g2) {
					var i = _g11++;
					if(_gthis.activeAnnotation[i]) {
						activeAnnotationNames.set(_gthis.annotations[i].label,"");
						_gthis.activeAnnotation[i] = false;
					}
				}
				if(_gthis.rootNode != null) {
					_gthis.rootNode.clearAnnotations();
				}
				_gthis.annotations = [];
				_gthis.jsonFile = { btnGroup : [{ title : "Annotations", buttons : []}]};
				var _g12 = 0;
				var _g3 = configs.length;
				while(_g12 < _g3) {
					var i1 = _g12++;
					var config1 = [configs[i1]];
					_gthis.annotationData[i1] = [];
					var hookName = ["STANDALONE_ANNOTATION_" + i1];
					var def = { label : config1[0].name, hookName : hookName[0], annotCode : i1 + 1, isTitle : false, enabled : true, familyMethod : "", hasMethod : config1[0].styleFunction, hasClass : "", legend : { method : config1[0].legendFunction}, divMethod : config1[0].infoFunction, color : [{ color : config1[0].colour, used : "false"}], shape : config1[0].shape};
					_gthis.jsonFile.btnGroup[0].buttons.push(def);
					saturn.client.core.CommonCore.getDefaultProvider((function(hookName1,config2) {
						return function(error,provider1) {
							provider1.resetCache();
							provider1.addHook(config2[0].annotationFunction,hookName1[0]);
						};
					})(hookName,config1));
				}
				_gthis.fillAnnotationwithJSonData();
				if(restoreData) {
					_gthis.annotationData = oldData;
				}
				_gthis.annotationsChanged(activeAnnotationNames);
				cb();
			}
		});
	}
	,getAnnotationConfigs: function() {
		return this.annotationConfigs;
	}
	,getAnnotationConfigByName: function(name) {
		return this.annotationNameToConfig.get(name);
	}
	,getAnnotationConfigById: function(id) {
		return this.getAnnotationConfigByName(this.annotations[id].label);
	}
	,loadAnnotationsFromString: function(annotationString,configs) {
		var _gthis = this;
		this.annotationString = annotationString;
		var lines = annotationString.split("\n");
		var header = lines[0];
		var cols = header.split(",");
		var configMap = new haxe.ds.StringMap();
		if(configs != null) {
			var _g = 0;
			while(_g < configs.length) {
				var config = configs[_g];
				++_g;
				configMap.set(config.name,config);
			}
		}
		var finalConfigs = [];
		var _g1 = 1;
		var _g2 = cols.length;
		while(_g1 < _g2) {
			var i = _g1++;
			var styleAnnotation = function(target,data,selected,annotList,item,callBack) {
				var config1 = _gthis.getAnnotationConfigById(selected);
				var r = { hasAnnot : true, text : "", color : config1.getColourOldFormat(), defImage : 100};
				if(data == null || data.annotation == "No") {
					r.hasAnnot = false;
				}
				callBack(r);
			};
			var legendMethod = function(legendWidget,config2) {
				var row = new phylo.PhyloLegendRowWidget(legendWidget,config2);
			};
			var divMethod = function(data1,mx,my) {
				var $window = new phylo.PhyloWindowWidget(js.Browser.get_document().body,data1.target,false);
				var container = $window.getContainer();
				container.style.left = mx;
				container.style.top = my;
				container.style.width = "400px";
				container.style.height = "200px";
			};
			var name = cols[i];
			var hookFunction = $bind(this,this.handleAnnotation);
			var config3 = new phylo.PhyloAnnotationConfiguration();
			config3.shape = "cercle";
			config3.colour = "green";
			config3.name = name;
			config3.styleFunction = styleAnnotation;
			config3.annotationFunction = hookFunction;
			config3.infoFunction = divMethod;
			config3.legendFunction = legendMethod;
			if(configMap.exists(name)) {
				var configUser = configMap.get(name);
				if(configUser.colour != null) {
					config3.colour = configUser.colour;
				}
				if(configUser.annotationFunction != null) {
					config3.annotationFunction = configUser.annotationFunction;
				}
				if(configUser.styleFunction != null) {
					config3.styleFunction = configUser.styleFunction;
				}
				if(configUser.legendFunction != null) {
					config3.legendFunction = configUser.legendFunction;
				}
				if(configUser.shape != null) {
					config3.shape = configUser.shape;
				}
				if(configUser.infoFunction != null) {
					config3.infoFunction = configUser.infoFunction;
				}
			}
			finalConfigs.push(config3);
		}
		this.annotationData = [];
		var headerCols = header.split(",");
		var _g11 = 1;
		var _g3 = headerCols.length;
		while(_g11 < _g3) {
			var j = _g11++;
			this.annotationData[j - 1] = [];
		}
		var _g12 = 1;
		var _g4 = lines.length;
		while(_g12 < _g4) {
			var i1 = _g12++;
			var cols1 = lines[i1].split(",");
			var _g31 = 1;
			var _g21 = cols1.length;
			while(_g31 < _g21) {
				var j1 = _g31++;
				this.annotationData[j1 - 1].push({ "target_id" : cols1[0], "annotation" : cols1[j1]});
			}
		}
		this.setAnnotationConfigs(finalConfigs,true,function() {
		});
	}
	,handleAnnotation: function(alias,params,clazz,cb) {
		var annotationIndex = Std.parseInt(alias.charAt(alias.length - 1));
		cb(this.annotationData[annotationIndex],null);
	}
	,addAnnotationListener: function(listener) {
		this.annotationListeners.push(listener);
	}
	,annotationsChanged: function(activeAnnotationNames) {
		if(activeAnnotationNames != null) {
			if(this.canvas != null && this.canvas.getConfig().enableAnnotationMenu) {
				this.canvas.getAnnotationMenu().update(activeAnnotationNames);
				return;
			}
		}
		var _g = 0;
		var _g1 = this.annotationListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener();
		}
	}
	,toggleAnnotation: function(annotCode) {
		if(this.isAnnotationActive(annotCode)) {
			this.setActiveAnnotation(annotCode,false);
		} else {
			this.setActiveAnnotation(annotCode,true);
		}
	}
	,isAnnotationActive: function(annotCode) {
		return this.activeAnnotation[annotCode];
	}
	,setActiveAnnotation: function(annotCode,active) {
		var _gthis = this;
		this.activeAnnotation[annotCode] = active;
		if(active) {
			var annot = this.annotations[annotCode];
			saturn.client.core.CommonCore.getDefaultProvider(function(err,provider) {
				var parameters = _gthis.canvas.getRootNode().targets;
				provider.getByNamedQuery(annot.hookName,{ param : parameters},null,true,function(db_results,error) {
					if(error == null) {
						_gthis.canvas.getAnnotationManager().addAnnotData(db_results,annotCode,annotCode,function() {
							_gthis.annotationsChanged();
						});
					}
				});
			});
		} else {
			this.annotationsChanged();
		}
	}
	,getActiveAnnotations: function() {
		var annotations = [];
		var _g1 = 0;
		var _g = this.activeAnnotation.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.activeAnnotation[i]) {
				annotations.push(this.annotations[i]);
			}
		}
		return annotations;
	}
	,getAnnotationString: function() {
		return this.annotationString;
	}
	,setRootNode: function(rootNode) {
		this.rootNode = rootNode;
	}
	,getTreeName: function() {
		return "tree";
	}
	,hideAnnotationWindows: function() {
	}
	,__class__: phylo.PhyloAnnotationManager
};
phylo.PhyloAnnotationMenuWidget = $hxClasses["phylo.PhyloAnnotationMenuWidget"] = function(canvas,activeAnnotations) {
	this.canvas = canvas;
	this.activeAnnotations = activeAnnotations;
	this.build();
};
phylo.PhyloAnnotationMenuWidget.__name__ = ["phylo","PhyloAnnotationMenuWidget"];
phylo.PhyloAnnotationMenuWidget.prototype = {
	canvas: null
	,container: null
	,activeAnnotations: null
	,items: null
	,build: function() {
		this.addContainer();
		this.addAnnotationButtons();
	}
	,getContainer: function() {
		return this.container;
	}
	,update: function(activeAnnotations) {
		this.activeAnnotations = activeAnnotations;
		this.addAnnotationButtons();
	}
	,clearAnnotationItems: function() {
		if(this.items != null) {
			var _g = 0;
			var _g1 = this.items;
			while(_g < _g1.length) {
				var item = _g1[_g];
				++_g;
				this.container.removeChild(item);
			}
		}
	}
	,addContainer: function() {
		this.container = js.Browser.get_document().createElement("div");
		this.container.style.display = "inline-block";
		this.container.style.minWidth = "160px";
		this.container.style.position = "relative";
		this.container.style.verticalAlign = "top";
		this.container.style.height = "100%";
		this.container.style.backgroundColor = "#f7f8fb";
		this.container.marginLeft = "0px";
		this.container.marginTop = "0px";
		this.container.innerHTML = "<h1 style=\"margin-left:5px;margin-right:5px\">Annotations</h1>";
	}
	,addAnnotationButtons: function() {
		var _gthis = this;
		var btnGroups = this.canvas.getAnnotationManager().jsonFile.btnGroup;
		this.clearAnnotationItems();
		this.items = [];
		var _g1 = 0;
		var _g = btnGroups.length;
		while(_g1 < _g) {
			var i = _g1++;
			var btnGroupDef = btnGroups[i];
			var btnDefs = btnGroupDef.buttons;
			var _g2 = 0;
			while(_g2 < btnDefs.length) {
				var btnDef = [btnDefs[_g2]];
				++_g2;
				var row = js.Browser.get_document().createElement("div");
				row.style.display = "flex";
				var tooltipBtn = js.Browser.get_document().createElement("button");
				tooltipBtn.innerText = "?";
				tooltipBtn.style.backgroundColor = "rgb(247, 248, 251)";
				tooltipBtn.style.border = "none";
				tooltipBtn.style.font = "normal 11px/16px tahoma, arial, verdana, sans-serif";
				tooltipBtn.style.cursor = "pointer";
				var enabledBtn = [js.Browser.get_document().createElement("button")];
				enabledBtn[0].innerHTML = " &#9744;";
				enabledBtn[0].style.backgroundColor = "rgb(247, 248, 251)";
				enabledBtn[0].style.border = "none";
				enabledBtn[0].style.font = "normal 16px/20px tahoma, arial, verdana, sans-serif";
				enabledBtn[0].style.cursor = "pointer";
				var btn = [js.Browser.get_document().createElement("button")];
				btn[0].innerText = btnDef[0].label;
				btn[0].style.backgroundColor = "rgb(247, 248, 251)";
				btn[0].style.border = "none";
				btn[0].style.font = "normal 11px/16px tahoma, arial, verdana, sans-serif";
				btn[0].style.cursor = "pointer";
				btn[0].style.textAlign = "left";
				btn[0].style.flexGrow = "1";
				btn[0].setAttribute("title",btnDef[0].helpText);
				var tmp = (function(btn1) {
					return function() {
						btn1[0].style.backgroundColor = "#dddee1";
					};
				})(btn);
				btn[0].addEventListener("mouseover",tmp);
				var tmp1 = (function(btn2) {
					return function() {
						btn2[0].style.backgroundColor = "rgb(247, 248, 251)";
					};
				})(btn);
				btn[0].addEventListener("mouseout",tmp1);
				var tmp2 = (function(enabledBtn1,btnDef1) {
					return function() {
						if(_gthis.canvas.getAnnotationManager().isAnnotationActive(btnDef1[0].annotCode)) {
							enabledBtn1[0].innerHTML = "&#9744;";
						} else {
							enabledBtn1[0].innerHTML = "&#9745;";
						}
						_gthis.canvas.getAnnotationManager().toggleAnnotation(btnDef1[0].annotCode);
					};
				})(enabledBtn,btnDef);
				btn[0].addEventListener("click",tmp2);
				row.appendChild(tooltipBtn);
				row.appendChild(enabledBtn[0]);
				row.appendChild(btn[0]);
				this.items.push(row);
				this.container.appendChild(row);
				if(this.activeAnnotations != null && this.activeAnnotations.exists(btnDef[0].label)) {
					this.canvas.getAnnotationManager().toggleAnnotation(btnDef[0].annotCode);
					enabledBtn[0].innerHTML = "&#9745;";
				}
			}
		}
	}
	,__class__: phylo.PhyloAnnotationMenuWidget
};
phylo.PhyloRendererI = $hxClasses["phylo.PhyloRendererI"] = function() { };
phylo.PhyloRendererI.__name__ = ["phylo","PhyloRendererI"];
phylo.PhyloRendererI.prototype = {
	drawLine: null
	,drawText: null
	,startGroup: null
	,endGroup: null
	,mesureText: null
	,__class__: phylo.PhyloRendererI
};
phylo.PhyloCanvasRenderer = $hxClasses["phylo.PhyloCanvasRenderer"] = function(width,height,parentElement,rootNode,config,annotationManager) {
	this.autoFitting = false;
	this.nodeClickListeners = [];
	this.contextDiv = null;
	this.translateY = 0.;
	this.translateX = 0.;
	this.scale = 1.0;
	this.parent = parentElement;
	this.width = width;
	this.height = height;
	this.annotationManager = annotationManager;
	if(this.annotationManager == null) {
		this.annotationManager = new phylo.PhyloAnnotationManager();
	}
	this.annotationManager.addAnnotationListener($bind(this,this.onAnnotationChange));
	this.annotationManager.rootNode = rootNode;
	this.annotationManager.canvas = this;
	this.rootNode = rootNode;
	var doc;
	if(config == null) {
		config = new phylo.PhyloCanvasConfiguration();
	}
	this.config = config;
	config.dataChanged = true;
	if(config.enableTools) {
		this.addNodeClickListener($bind(this,this.defaultNodeClickListener));
	}
	this.createContainer();
	if(config.enableToolbar) {
		this.toolBar = new phylo.PhyloToolBar(this);
	}
	if(this.getConfig().autoFit) {
		this.autoFitRedraw();
	} else {
		this.redraw(true);
	}
};
phylo.PhyloCanvasRenderer.__name__ = ["phylo","PhyloCanvasRenderer"];
phylo.PhyloCanvasRenderer.__interfaces__ = [phylo.PhyloRendererI];
phylo.PhyloCanvasRenderer.main = function() {
};
phylo.PhyloCanvasRenderer.prototype = {
	canvas: null
	,ctx: null
	,scale: null
	,parent: null
	,rootNode: null
	,cx: null
	,cy: null
	,config: null
	,width: null
	,height: null
	,translateX: null
	,translateY: null
	,selectedNode: null
	,contextDiv: null
	,annotationManager: null
	,nodeClickListeners: null
	,contextMenu: null
	,toolBar: null
	,container: null
	,outerContainer: null
	,autoFitting: null
	,legendWidget: null
	,annotationMenu: null
	,onAnnotationChange: function() {
		this.redraw();
		if(this.config.enableLegend) {
			this.legendWidget.redraw();
		}
	}
	,getRootNode: function() {
		return this.rootNode;
	}
	,getAnnotationManager: function() {
		return this.annotationManager;
	}
	,createContainer: function() {
		this.container = js.Browser.get_document().createElement("div");
		if(this.config.enableAnnotationMenu || this.config.enableLegend || this.config.enableImport) {
			this.outerContainer = js.Browser.get_document().createElement("div");
			this.outerContainer.style.display = "flex";
			this.outerContainer.style.height = "100%";
			var leftContainer = js.Browser.get_document().createElement("div");
			leftContainer.style.height = "100%";
			leftContainer.style.display = "flex";
			leftContainer.style.flexDirection = "column";
			if(this.config.enableAnnotationMenu) {
				this.annotationMenu = new phylo.PhyloAnnotationMenuWidget(this);
				this.annotationMenu.getContainer().style.flexGrow = "1";
				leftContainer.appendChild(this.annotationMenu.getContainer());
			}
			if(this.config.enableImport) {
				var importWidget = new phylo.PhyloImportWidget(this);
				leftContainer.appendChild(importWidget.getContainer());
			}
			this.outerContainer.appendChild(leftContainer);
			this.outerContainer.appendChild(this.container);
			this.container.style.display = "inline-block";
			this.container.style.position = "relative";
			this.container.style.flexGrow = "1";
			if(this.config.enableLegend) {
				this.legendWidget = new phylo.PhyloLegendWidget(this);
				this.outerContainer.appendChild(this.legendWidget.getContainer());
			}
			this.parent.appendChild(this.outerContainer);
		} else {
			this.container.style.height = "100%";
			this.parent.appendChild(this.container);
		}
	}
	,getCanvas: function() {
		return this.canvas;
	}
	,getParent: function() {
		return this.parent;
	}
	,getContainer: function() {
		return this.container;
	}
	,destroy: function() {
		if(this.config.enableAnnotationMenu || this.config.enableLegend || this.config.enableImport) {
			this.parent.removeChild(this.outerContainer);
		} else {
			this.parent.removeChild(this.container);
		}
	}
	,notifyNodeClickListeners: function(node,data,e) {
		var _g = 0;
		var _g1 = this.nodeClickListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(node,data,e);
		}
	}
	,defaultNodeClickListener: function(node,data,e) {
		if(node == null) {
			if(this.contextMenu != null) {
				this.closeContextMenu();
				return;
			}
		} else {
			if(this.contextMenu != null) {
				this.closeContextMenu();
			}
			this.contextMenu = new phylo.PhyloContextMenu(this.parent,this,node,data,e);
		}
	}
	,addNodeClickListener: function(listener) {
		this.nodeClickListeners.push(listener);
	}
	,createCanvas: function() {
		var _gthis = this;
		if(this.config.enableLegend || this.config.enableAnnotationMenu || this.config.enableAnnotationMenu) {
			this.width = this.container.clientWidth;
			this.height = this.container.clientHeight;
		}
		if(this.canvas != null) {
			this.ctx.save();
			this.ctx.setTransform(1,0,0,1,0,0);
			this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height);
			this.ctx.restore();
		} else {
			this.canvas = js.Browser.get_document().createElement("canvas");
			this.container.appendChild(this.canvas);
			this.canvas.width = this.width;
			this.canvas.height = this.height;
			this.ctx = this.canvas.getContext("2d");
			this.cx = Math.round(this.width / 2);
			this.cy = Math.round(this.height / 2);
			this.ctx.translate(this.cx,this.cy);
			if(this.config.enableZoom) {
				this.canvas.addEventListener("wheel",function(e) {
					e.preventDefault();
					if(e.deltaY < 0) {
						_gthis.zoomIn();
					} else {
						_gthis.zoomOut();
					}
				});
				var touchDownX = 0.;
				var touchDownY = 0.;
				var touchDown = false;
				this.canvas.addEventListener("touchstart",function(e1) {
					_gthis.annotationManager.hideAnnotationWindows();
					_gthis.annotationManager.closeAnnotWindows();
					touchDownX = e1.touches[0].clientX - _gthis.translateX;
					touchDownY = e1.touches[0].clientY - _gthis.translateY;
					touchDown = true;
					if(_gthis.contextDiv != null) {
						_gthis.container.removeChild(_gthis.contextDiv);
						_gthis.contextDiv = null;
					}
					_gthis.notifyNodeClickListeners(null,null,null);
				});
				this.canvas.addEventListener("touchmove",function(e2) {
					if(touchDown && touchDownX != 0 && touchDownY != 0) {
						_gthis.newPosition(e2.touches[0].clientX - touchDownX,e2.touches[0].clientY - touchDownY);
						_gthis.notifyNodeClickListeners(null,null,null);
					}
				});
				this.canvas.addEventListener("touchend",function(e3) {
					touchDown = false;
					touchDownX = 0;
					touchDownY = 0;
					var d = _gthis.checkPosition(e3);
					if(d != null) {
						if(d.isAnnot == true) {
							_gthis.annotationManager.showScreenData(false,d,e3.touches[0].clientX,e3.touches[0].clientY);
						} else {
							_gthis.selectedNode = _gthis.rootNode.nodeIdToNode.get(d.nodeId);
							_gthis.notifyNodeClickListeners(_gthis.selectedNode,d,e3);
						}
					} else {
						_gthis.notifyNodeClickListeners(null,null,e3);
					}
				});
				var mouseDownX = 0.;
				var mouseDownY = 0.;
				var mouseDown = false;
				this.canvas.addEventListener("mousedown",function(e4) {
					_gthis.annotationManager.hideAnnotationWindows();
					_gthis.annotationManager.closeAnnotWindows();
					mouseDownX = e4.pageX - _gthis.translateX;
					mouseDownY = e4.pageY - _gthis.translateY;
					mouseDown = true;
					if(_gthis.contextDiv != null) {
						_gthis.container.removeChild(_gthis.contextDiv);
						_gthis.contextDiv = null;
					}
					_gthis.notifyNodeClickListeners(null,null,null);
				});
				this.canvas.addEventListener("mousemove",function(e5) {
					if(mouseDown && mouseDownX != 0 && mouseDownY != 0) {
						_gthis.newPosition(e5.pageX - mouseDownX,e5.pageY - mouseDownY);
						_gthis.notifyNodeClickListeners(null,null,null);
					}
				});
				this.canvas.addEventListener("mouseup",function(e6) {
					mouseDown = false;
					mouseDownX = 0;
					mouseDownY = 0;
					var d1 = _gthis.checkPosition(e6);
					if(d1 != null) {
						if(d1.isAnnot == true) {
							_gthis.annotationManager.showScreenData(false,d1,e6.pageX,e6.pageY);
						} else {
							_gthis.selectedNode = _gthis.rootNode.nodeIdToNode.get(d1.nodeId);
							_gthis.notifyNodeClickListeners(_gthis.selectedNode,d1,e6);
						}
					} else {
						_gthis.notifyNodeClickListeners(null,null,e6);
					}
				});
			}
		}
	}
	,exportPNG: function(cb) {
		this.canvas.toBlob(function(blob) {
			cb(blob);
		});
	}
	,exportPNGToFile: function() {
		var _gthis = this;
		this.exportPNG(function(blob) {
			var uWin = js.Browser.get_window();
			uWin.saveAs(blob,_gthis.getAnnotationManager().getTreeName() + "_tree.png");
		});
	}
	,exportSVG: function() {
		var width = this.width;
		var height = this.height;
		var svgCtx = new C2S(width,height);
		var ctx = this.ctx;
		this.ctx = svgCtx;
		var rTranslateX = this.translateX;
		var rTranslateY = this.translateY;
		this.translateX = width / 2;
		this.translateY = height / 2;
		this.redraw(false);
		this.translateX = rTranslateX;
		this.translateY = rTranslateY;
		this.ctx = ctx;
		return svgCtx.getSerializedSvg(true);
	}
	,exportSVGToFile: function() {
		var svgStr = this.exportSVG();
		var blob = new Blob([svgStr],{ type : "text/plain;charset=utf-8"});
		var uWin = js.Browser.get_window();
		uWin.saveAs(blob,this.getAnnotationManager().getTreeName() + "_tree.svg");
	}
	,showHighlightDialog: function() {
		var dialog = new phylo.PhyloHighlightWidget(this.parent,this);
	}
	,center: function() {
		this.newPosition(0,0);
	}
	,newPosition: function(x,y) {
		this.createCanvas();
		this.translateX = x;
		this.translateY = y;
		this.redraw(false);
	}
	,drawLine: function(x0,y0,x1,y1,strokeStyle,lineWidth) {
		this.ctx.save();
		this.applyDefaultConfiguration();
		this.ctx.strokeStyle = strokeStyle;
		this.ctx.beginPath();
		this.ctx.moveTo(Math.round(x0),Math.round(y0));
		this.ctx.lineTo(Math.round(x1),Math.round(y1));
		this.ctx.lineWidth = lineWidth;
		this.ctx.stroke();
		this.ctx.restore();
	}
	,drawArc: function(x,y,radius,sAngle,eAngle,strokeStyle,lineWidth) {
		this.ctx.save();
		this.applyDefaultConfiguration();
		this.ctx.strokeStyle = strokeStyle;
		this.ctx.beginPath();
		this.ctx.arc(x,y,Math.abs(radius),sAngle,eAngle);
		this.ctx.lineWidth = lineWidth;
		this.ctx.stroke();
		this.ctx.restore();
	}
	,drawWedge: function(x,y,radius,sAngle,eAngle,strokeStyle,lineWidth) {
		this.ctx.save();
		this.ctx.fillStyle = strokeStyle;
		this.ctx.globalAlpha = 0.5;
		this.ctx.strokeStyle = strokeStyle;
		this.ctx.beginPath();
		this.ctx.moveTo(0,0);
		this.ctx.arc(x,y,Math.abs(radius),sAngle,eAngle);
		this.ctx.lineWidth = lineWidth;
		this.ctx.stroke();
		this.ctx.closePath();
		this.ctx.fill();
		this.ctx.restore();
	}
	,bezierCurve: function(x0,y0,x1,y1,firstX,firstY,secondX,secondY,strokeStyle,lineWidth) {
		this.ctx.save();
		this.applyDefaultConfiguration();
		this.ctx.strokeStyle = strokeStyle;
		this.ctx.beginPath();
		this.ctx.moveTo(Math.round(x0),Math.round(y0));
		this.ctx.bezierCurveTo(Math.round(firstX),Math.round(firstY),Math.round(secondX),Math.round(secondY),Math.round(x1),Math.round(y1));
		this.ctx.lineWidth = lineWidth;
		this.ctx.stroke();
		this.ctx.restore();
	}
	,drawText: function(text,tx,ty,x,y,rotation,textAlign,color) {
		this.ctx.save();
		this.applyDefaultConfiguration();
		this.ctx.translate(tx,ty);
		this.ctx.rotate(rotation);
		this.ctx.textAlign = textAlign;
		this.ctx.fillStyle = color;
		this.ctx.fillText(text,x,y);
		this.ctx.restore();
	}
	,drawTextNoTranslate: function(text,tx,ty,x,y,rotation,textAlign,color) {
		this.ctx.save();
		this.applyDefaultConfiguration();
		this.ctx.translate(tx,ty);
		this.ctx.rotate(rotation);
		this.ctx.textAlign = textAlign;
		this.ctx.fillStyle = color;
		this.ctx.fillText(text,x,y);
		this.ctx.restore();
	}
	,drawSquare: function(tx,ty,color) {
		this.ctx.save();
		this.applyDefaultConfiguration();
		this.ctx.beginPath();
		this.ctx.rect(tx,ty,10,10);
		this.ctx.fillStyle = color;
		this.ctx.fill();
		this.ctx.restore();
	}
	,drawCircle: function(tx,ty,color) {
		var radius = 5;
		this.ctx.save();
		this.applyDefaultConfiguration();
		this.ctx.beginPath();
		this.ctx.strokeStyle = color;
		this.ctx.arc(tx,ty,radius,0,2 * Math.PI);
		this.ctx.fillStyle = color;
		this.ctx.fill();
		this.ctx.restore();
	}
	,drawGraphic: function(tx,ty,columns) {
		this.ctx.save();
		this.applyDefaultConfiguration();
		this.ctx.beginPath();
		this.ctx.moveTo(Math.round(tx),Math.round(ty - 10));
		this.ctx.moveTo(Math.round(tx),Math.round(ty + 6));
		this.ctx.lineTo(Math.round(tx + 14),Math.round(ty + 6));
		this.ctx.strokeStyle = "rgb(6,6,6)";
		this.ctx.stroke();
		var len = columns[1];
		var pos = ty + 6 - columns[1];
		this.ctx.fillStyle = "rgb(41,128,214)";
		this.ctx.rect(tx + 1,pos,2,len);
		var len2 = columns[2];
		var pos2 = ty + 6 - columns[2];
		this.ctx.fillStyle = "rgb(191,0,0)";
		this.ctx.fillRect(tx + 3,pos2,2,len2);
		var len3 = columns[3];
		var pos3 = ty + 6 - columns[3];
		this.ctx.fillStyle = "rgb(99,207,27)";
		this.ctx.fillRect(tx + 5,pos3,2,len3);
		var len4 = columns[4];
		var pos4 = ty + 6 - columns[4];
		this.ctx.fillStyle = "rgb(255,128,0)";
		this.ctx.fillRect(tx + 7,pos4,2,len4);
		var len5 = columns[5];
		var pos5 = ty + 6 - columns[5];
		this.ctx.fillStyle = "rgb(192,86,145)";
		this.ctx.fillRect(tx + 9,pos5,2,len5);
		var len6 = columns[6];
		var pos6 = ty + 6 - columns[6];
		this.ctx.fillStyle = "rgb(255,204,0)";
		this.ctx.fillRect(tx + 11,pos6,2,len6);
		var len7 = columns[7];
		var pos7 = ty + 6 - columns[7];
		this.ctx.fillStyle = "rgb(121,63,243)";
		this.ctx.fillRect(tx + 13,pos7,2,len7);
		this.ctx.restore();
	}
	,drawImg: function(tx,ty,img,mode) {
		this.applyDefaultConfiguration();
		if(mode == 0) {
			this.ctx.drawImage(img,tx,ty);
		} else {
			this.ctx.drawImage(img,28,0,125,125,tx,ty,20,20);
		}
	}
	,mesureText: function(text) {
		return this.ctx.measureText(text).width;
	}
	,startGroup: function(groupName) {
	}
	,endGroup: function() {
	}
	,zoomIn: function(scale) {
		if(scale == null) {
			if(this.config.scale <= 4.0) {
				this.config.scale += 0.2;
			}
			scale = this.config.scale;
		}
		this.scale = scale;
		this.redraw();
	}
	,zoomOut: function(scale) {
		if(scale == null) {
			this.config.scale -= 0.2;
			this.config.scale = Math.max(0.2,this.config.scale);
			scale = this.config.scale;
		}
		this.scale = scale;
		this.redraw();
	}
	,updateActions: function() {
		if(this.toolBar != null) {
			this.toolBar.setLineTypeButtonVisible(this.config.drawingMode == phylo.PhyloDrawingMode.STRAIGHT);
			this.toolBar.setTitle(this.config.title);
		}
	}
	,autoFitRedraw: function() {
		var _gthis = this;
		this.autoFitting = true;
		this.config.dataChanged = true;
		this.redraw(true);
		haxe.Timer.delay(function() {
			_gthis.autoFit();
			_gthis.autoFitting = false;
			_gthis.canvas.style.display = "block";
		},1);
	}
	,redraw: function(create) {
		if(create == null) {
			create = true;
		}
		if(!this.autoFitting && this.config.autoFit && this.config.dataChanged) {
			this.autoFitRedraw();
			return;
		}
		this.updateActions();
		if(create) {
			this.createCanvas();
		}
		if(this.autoFitting) {
			this.canvas.style.display = "none";
		}
		var newWidth = this.canvas.width * this.scale;
		var newHeight = this.canvas.height * this.scale;
		this.ctx.save();
		this.ctx.translate(0,0);
		this.ctx.scale(1,1);
		this.ctx.clearRect(0,0,this.width,this.height);
		this.ctx.translate(this.translateX,this.translateY);
		this.ctx.scale(this.scale,this.scale);
		var radialRendererObj = new phylo.PhyloRadialTreeLayout(this.canvas.width,this.canvas.height);
		this.rootNode.screen = [];
		this.rootNode.rectangleLeft = Std["int"](this.rootNode.children[0].x);
		this.rootNode.rectangleRight = Std["int"](this.rootNode.children[0].x);
		this.rootNode.rectangleBottom = Std["int"](this.rootNode.children[0].y);
		this.rootNode.rectangleTop = Std["int"](this.rootNode.children[0].y);
		if(this.config.drawingMode == phylo.PhyloDrawingMode.CIRCULAR) {
			radialRendererObj.renderCircle(this.rootNode,this,this.annotationManager.activeAnnotation,this.annotationManager.annotations);
		} else {
			radialRendererObj.render(this.rootNode,this,this.annotationManager.activeAnnotation,this.annotationManager.annotations);
		}
		this.ctx.restore();
		this.config.dataChanged = false;
	}
	,setConfig: function(config) {
		this.config = config;
	}
	,getConfig: function() {
		return this.config;
	}
	,applyDefaultConfiguration: function() {
		if(this.config.enableShadow) {
			this.ctx.shadowOffsetX = 4;
			this.ctx.shadowOffsetY = 4;
			this.ctx.shadowBlur = 7;
			this.ctx.shadowColor = this.config.shadowColour;
		}
	}
	,checkPosition: function(e) {
		var i;
		var j;
		var sx;
		var sy;
		var res = false;
		var auxx;
		var auxy;
		var elementOffsetX = this.canvas.getBoundingClientRect().left - js.Browser.get_document().getElementsByTagName("html")[0].getBoundingClientRect().left;
		var auxx1 = e.clientX + js.Browser.get_window().pageXOffset - elementOffsetX - this.translateX;
		var elementOffsetY = this.canvas.getBoundingClientRect().top - js.Browser.get_document().getElementsByTagName("html")[0].getBoundingClientRect().top;
		var auxy1 = e.clientY + js.Browser.get_window().pageYOffset - elementOffsetY - this.translateY;
		var x;
		var y;
		x = auxx1 - Math.round(this.cx);
		y = auxy1 - Math.round(this.cy);
		var active = false;
		i = 0;
		while(i < this.rootNode.screen.length && res == false) {
			if(this.rootNode.screen[i].checkMouse(x,y) == true) {
				res = true;
				this.rootNode.screen[i].root = this.rootNode;
				this.rootNode.divactive = i;
			} else {
				this.rootNode.screen[i].created = false;
			}
			++i;
		}
		if(res == true) {
			return this.rootNode.screen[i - 1];
		} else {
			return null;
		}
	}
	,setLineWidth: function(width) {
		this.rootNode.setLineWidth(width);
		this.redraw();
	}
	,toggleType: function() {
		this.dataChanged(true);
		this.translateX = 0;
		this.translateY = 0;
		if(this.config.drawingMode == phylo.PhyloDrawingMode.CIRCULAR) {
			this.config.drawingMode = phylo.PhyloDrawingMode.STRAIGHT;
			this.rootNode.preOrderTraversal2();
		} else {
			this.config.drawingMode = phylo.PhyloDrawingMode.CIRCULAR;
			this.rootNode.preOrderTraversal();
		}
		this.closeContextMenu();
		this.redraw();
	}
	,closeContextMenu: function() {
		if(this.contextMenu != null) {
			this.contextMenu.close();
			this.contextMenu = null;
		}
	}
	,toggleLineMode: function() {
		if(this.config.bezierLines) {
			this.rootNode.setLineMode(phylo.LineMode.STRAIGHT);
			this.config.bezierLines = false;
		} else {
			this.rootNode.setLineMode(phylo.LineMode.BEZIER);
			this.config.bezierLines = true;
		}
		this.redraw();
	}
	,rotateNode: function(node,clockwise) {
		node.rotateNode(clockwise,this.getConfig().drawingMode);
		this.redraw();
	}
	,setShadowColour: function(colour) {
		if(colour == null) {
			this.getConfig().shadowColour = null;
			this.getConfig().enableShadow = false;
		} else {
			this.getConfig().shadowColour = colour;
			this.getConfig().enableShadow = true;
		}
		this.redraw();
	}
	,toggleShadow: function() {
		this.getConfig().enableShadow = !this.getConfig().enableShadow;
		this.redraw();
	}
	,autoFit: function() {
		var minX = null;
		var maxX = null;
		var minY = null;
		var maxY = null;
		var screenDataList = this.rootNode.screen;
		var _g = 0;
		while(_g < screenDataList.length) {
			var screenData = screenDataList[_g];
			++_g;
			var x = screenData.x;
			var y = screenData.y;
			if(minX == null || x < minX) {
				minX = x;
			}
			if(maxX == null || x > maxX) {
				maxX = x;
			}
			if(minY == null || y < minY) {
				minY = y;
			}
			if(maxY == null || y > maxY) {
				maxY = y;
			}
		}
		var requiredWidth = maxX - minX + 300;
		var requiredHeight = maxY - minY + 300;
		var widthScale = 1.;
		var heightScale = 1.;
		widthScale = this.width / requiredWidth;
		heightScale = this.height / requiredHeight;
		var fitScale = 1.;
		if(widthScale < 1 || heightScale < 1) {
			fitScale = Math.min(widthScale,heightScale);
		}
		var tmp = this.config.drawingMode != phylo.PhyloDrawingMode.CIRCULAR;
		if(fitScale != this.scale) {
			this.config.autoFit = true;
			this.config.dataChanged = true;
			this.setScale(fitScale,false);
		}
	}
	,setScale: function(scale,disableAutoFit) {
		if(disableAutoFit == null) {
			disableAutoFit = true;
		}
		this.scale = scale;
		this.config.scale = scale;
		if(disableAutoFit) {
			this.config.autoFit = false;
		}
		this.redraw(true);
	}
	,dataChanged: function(changed) {
		this.getConfig().scale = 1;
		this.scale = 1;
		this.getConfig().dataChanged = changed;
	}
	,setNewickString: function(newickString) {
		var parser = new phylo.PhyloNewickParser();
		var rootNode = parser.parse(newickString);
		rootNode.calculateScale();
		rootNode.postOrderTraversal();
		if(this.config.drawingMode == phylo.PhyloDrawingMode.CIRCULAR) {
			rootNode.preOrderTraversal(1);
		} else {
			rootNode.preOrderTraversal2(1);
		}
		this.rootNode = rootNode;
		this.getAnnotationManager().setRootNode(rootNode);
		if(this.getAnnotationManager().getAnnotationString() != null) {
			this.getAnnotationManager().loadAnnotationsFromString(this.getAnnotationManager().getAnnotationString(),this.getAnnotationManager().getAnnotationConfigs());
			this.redraw(true);
		} else {
			this.redraw(true);
		}
	}
	,getAnnotationMenu: function() {
		return this.annotationMenu;
	}
	,setFromFasta: function(fasta) {
		var _gthis = this;
		saturn.client.BioinformaticsServicesClient.getClient().sendPhyloReportRequest(fasta,function(response,error) {
			var phyloReport = response.json.phyloReport;
			var location = js.Browser.get_window().location;
			var dstURL = location.protocol + "//" + location.hostname + ":" + location.port + "/" + phyloReport;
			var fetchFunc = fetch;
			fetchFunc(dstURL).then(function(response1) {
				response1.text().then(function(text) {
					_gthis.setNewickString(text);
					_gthis.rootNode.setFasta(fasta);
				});
			});
		});
	}
	,__class__: phylo.PhyloCanvasRenderer
};
phylo.PhyloCanvasConfiguration = $hxClasses["phylo.PhyloCanvasConfiguration"] = function() {
	this.enableFastaImport = false;
	this.enableImport = false;
	this.enableLegend = false;
	this.enableAnnotationMenu = false;
	this.dataChanged = false;
	this.autoFit = true;
	this.verticalToolBar = false;
	this.enableToolbar = false;
	this.enableTools = false;
	this.scale = 1;
	this.enableZoom = false;
	this.highlightedGenes = new haxe.ds.StringMap();
	this.editmode = false;
	this.drawingMode = phylo.PhyloDrawingMode.CIRCULAR;
	this.bezierLines = false;
	this.shadowColour = "gray";
	this.enableShadow = false;
};
phylo.PhyloCanvasConfiguration.__name__ = ["phylo","PhyloCanvasConfiguration"];
phylo.PhyloCanvasConfiguration.prototype = {
	enableShadow: null
	,shadowColour: null
	,bezierLines: null
	,drawingMode: null
	,editmode: null
	,highlightedGenes: null
	,enableZoom: null
	,scale: null
	,enableTools: null
	,enableToolbar: null
	,verticalToolBar: null
	,autoFit: null
	,dataChanged: null
	,title: null
	,enableAnnotationMenu: null
	,enableLegend: null
	,enableImport: null
	,enableFastaImport: null
	,__class__: phylo.PhyloCanvasConfiguration
};
phylo.PhyloDrawingMode = $hxClasses["phylo.PhyloDrawingMode"] = { __ename__ : ["phylo","PhyloDrawingMode"], __constructs__ : ["STRAIGHT","CIRCULAR"] };
phylo.PhyloDrawingMode.STRAIGHT = ["STRAIGHT",0];
phylo.PhyloDrawingMode.STRAIGHT.toString = $estr;
phylo.PhyloDrawingMode.STRAIGHT.__enum__ = phylo.PhyloDrawingMode;
phylo.PhyloDrawingMode.CIRCULAR = ["CIRCULAR",1];
phylo.PhyloDrawingMode.CIRCULAR.toString = $estr;
phylo.PhyloDrawingMode.CIRCULAR.__enum__ = phylo.PhyloDrawingMode;
phylo.PhyloContextMenu = $hxClasses["phylo.PhyloContextMenu"] = function(parent,canvas,node,data,e) {
	this.parent = parent;
	this.node = node;
	this.data = data;
	this.e = e;
	this.canvas = canvas;
	this.build();
};
phylo.PhyloContextMenu.__name__ = ["phylo","PhyloContextMenu"];
phylo.PhyloContextMenu.prototype = {
	contextContainer: null
	,parent: null
	,node: null
	,data: null
	,e: null
	,canvas: null
	,build: function() {
		this.addContainer();
		if(this.canvas.getConfig().drawingMode == phylo.PhyloDrawingMode.CIRCULAR) {
			this.addWedgeOptions();
		}
		this.addColourOption();
		if(this.canvas.getConfig().drawingMode == phylo.PhyloDrawingMode.STRAIGHT) {
			this.addRotateNode();
		}
		this.parent.appendChild(this.contextContainer);
	}
	,addContainer: function() {
		this.contextContainer = js.Browser.get_document().createElement("div");
		this.contextContainer.style.position = "absolute";
		this.contextContainer.style.left = this.e.offsetX;
		this.contextContainer.style.top = this.e.offsetY;
		this.contextContainer.style.background = "#f7f8fb";
		this.contextContainer.style.color = "black";
		this.contextContainer.style.padding = "4px";
	}
	,destroyContainer: function() {
		this.parent.removeChild(this.contextContainer);
		this.parent = null;
		this.node = null;
		this.data = null;
		this.e = null;
		this.canvas = null;
	}
	,close: function() {
		this.destroyContainer();
	}
	,addColourOption: function() {
		var _gthis = this;
		var rowContainer = js.Browser.get_document().createElement("div");
		var lineColourInputLabel = js.Browser.get_document().createElement("label");
		var lineColourRemoveButton = js.Browser.get_document().createElement("button");
		lineColourInputLabel.setAttribute("for","line_colour_input");
		lineColourInputLabel.innerText = "Pick line colour";
		lineColourInputLabel.style.width = "100px";
		lineColourInputLabel.style.display = "inline-block";
		var lineInputColour = js.Browser.get_document().createElement("input");
		lineInputColour.setAttribute("type","color");
		lineInputColour.setAttribute("name","line_colour_input");
		lineInputColour.style.width = "100px";
		lineInputColour.addEventListener("change",function() {
			_gthis.node.colour = lineInputColour.value;
			lineColourRemoveButton.style.display = "inline-block";
			_gthis.canvas.redraw();
		});
		rowContainer.appendChild(lineColourInputLabel);
		rowContainer.appendChild(lineInputColour);
		lineColourRemoveButton.setAttribute("for","wedge_colour_input");
		lineColourRemoveButton.innerText = "Remove";
		lineColourRemoveButton.style.marginLeft = "5px";
		lineColourRemoveButton.style.display = "none";
		lineColourRemoveButton.style.width = "100px";
		lineColourRemoveButton.addEventListener("click",function() {
			_gthis.node.colour = null;
			lineColourRemoveButton.style.display = "none";
			_gthis.canvas.redraw();
		});
		rowContainer.appendChild(lineColourRemoveButton);
		if(this.node.colour != null) {
			lineColourRemoveButton.style.display = "inline-block";
		}
		this.contextContainer.appendChild(rowContainer);
	}
	,addWedgeOptions: function() {
		var _gthis = this;
		var rowContainer = js.Browser.get_document().createElement("div");
		var wedgeInputLabel = js.Browser.get_document().createElement("label");
		var wedgeButtonLabel = js.Browser.get_document().createElement("button");
		wedgeInputLabel.setAttribute("for","wedge_colour_input");
		wedgeInputLabel.setAttribute("for","wedge_colour_input");
		wedgeInputLabel.innerText = "Pick wedge colour";
		wedgeInputLabel.style.width = "100px";
		wedgeInputLabel.style.display = "inline-block";
		var wedgeInputColour = js.Browser.get_document().createElement("input");
		wedgeInputColour.setAttribute("type","color");
		wedgeInputColour.setAttribute("name","wedge_colour_input");
		wedgeInputColour.style.width = "100px";
		wedgeInputColour.addEventListener("change",function() {
			_gthis.node.wedgeColour = wedgeInputColour.value;
			wedgeButtonLabel.style.display = "inline-block";
			_gthis.canvas.redraw();
		});
		rowContainer.appendChild(wedgeInputLabel);
		rowContainer.appendChild(wedgeInputColour);
		wedgeButtonLabel.setAttribute("for","wedge_colour_input");
		wedgeButtonLabel.setAttribute("for","wedge_colour_input");
		wedgeButtonLabel.innerText = "Remove";
		wedgeButtonLabel.style.marginLeft = "5px";
		wedgeButtonLabel.style.width = "100px";
		wedgeButtonLabel.style.display = "none";
		wedgeButtonLabel.addEventListener("click",function() {
			_gthis.node.wedgeColour = null;
			wedgeButtonLabel.style.display = "none";
			_gthis.canvas.redraw();
		});
		rowContainer.appendChild(wedgeButtonLabel);
		if(this.node.wedgeColour != null) {
			wedgeButtonLabel.style.display = "inline-block";
		}
		this.contextContainer.appendChild(rowContainer);
	}
	,addRotateNode: function() {
		var _gthis = this;
		var rowContainer = js.Browser.get_document().createElement("div");
		var label = js.Browser.get_document().createElement("label");
		label.innerText = "Rotate branch";
		label.style.display = "inline-block";
		label.style.width = "100px";
		rowContainer.appendChild(label);
		var rotateNodeClockwiseButton = js.Browser.get_document().createElement("button");
		rotateNodeClockwiseButton.innerText = "Clockwise";
		rotateNodeClockwiseButton.style.marginRight = "5px";
		rotateNodeClockwiseButton.style.width = "100px";
		rotateNodeClockwiseButton.style.display = "inline-block";
		rotateNodeClockwiseButton.addEventListener("click",function(e) {
			_gthis.canvas.rotateNode(_gthis.node,true);
		});
		rowContainer.appendChild(rotateNodeClockwiseButton);
		var rotateNodeAnticlockwiseButton = js.Browser.get_document().createElement("button");
		rotateNodeAnticlockwiseButton.innerText = "Anticlockwise";
		rotateNodeAnticlockwiseButton.style.marginRight = "5px";
		rotateNodeAnticlockwiseButton.style.width = "100px";
		rotateNodeAnticlockwiseButton.style.display = "inline-block";
		rotateNodeAnticlockwiseButton.addEventListener("click",function(e1) {
			_gthis.canvas.rotateNode(_gthis.node,false);
		});
		rowContainer.appendChild(rotateNodeAnticlockwiseButton);
		this.contextContainer.appendChild(rowContainer);
	}
	,__class__: phylo.PhyloContextMenu
};
phylo.PhyloWindowWidget = $hxClasses["phylo.PhyloWindowWidget"] = function(parent,title,modal) {
	if(modal == null) {
		modal = false;
	}
	this.parent = parent;
	this.title = title;
	this.modal = modal;
	this.build();
};
phylo.PhyloWindowWidget.__name__ = ["phylo","PhyloWindowWidget"];
phylo.PhyloWindowWidget.prototype = {
	container: null
	,content: null
	,parent: null
	,header: null
	,title: null
	,modal: null
	,onCloseFunc: null
	,setOnCloseEvent: function(func) {
		this.onCloseFunc = func;
	}
	,build: function() {
		this.addContainer();
		this.addWindowHeader();
		this.addContent();
		this.container.appendChild(this.content);
	}
	,getContainer: function() {
		return this.container;
	}
	,getContent: function() {
		return this.content;
	}
	,addContainer: function() {
		this.container = js.Browser.get_document().createElement("div");
		this.container.classList.add("popup-window");
		this.container.style.position = "fixed";
		this.container.style.zIndex = 1;
		this.container.style.left = 0;
		this.container.style.top = 0;
		this.container.style.minWidth = "200px";
		this.container.style.minHeight = "100px";
		this.container.style.overflow = "hidden";
		this.container.style.border = "1px solid rgb(195, 195, 195)";
		this.container.style.borderRadius = "6px";
		this.parent.appendChild(this.container);
	}
	,isModal: function() {
		return this.modal;
	}
	,addWindowHeader: function() {
		this.header = js.Browser.get_document().createElement("div");
		this.header.classList.add("popup-header");
		this.header.style.position = "absolute";
		this.header.style.top = "0px";
		this.header.style.backgroundColor = "rgb(125, 117, 117)";
		this.header.style.height = "24px";
		this.header.style.width = "100%";
		this.header.style.padding = "4px 15px 4px 15px";
		this.header.style.lineHeight = "16px";
		this.header.style.boxSizing = "border-box";
		this.header.style.cursor = "pointer";
		this.addTitle();
		this.addCloseButton();
		if(!this.isModal()) {
			this.installMoveListeners();
		}
		this.container.appendChild(this.header);
	}
	,addTitle: function() {
		var titleSpan = js.Browser.get_document().createElement("span");
		titleSpan.innerText = this.title;
		titleSpan.style.color = "white";
		titleSpan.style.fontSize = "18px";
		titleSpan.style.fontWeight = "bold";
		this.header.appendChild(titleSpan);
	}
	,addCloseButton: function() {
		var _gthis = this;
		var closeButton = js.Browser.get_document().createElement("span");
		closeButton.style.color = "white";
		closeButton.style["float"] = "right";
		closeButton.style.fontSize = "24px";
		closeButton.style.fontWeight = "bold";
		closeButton.innerHTML = "&times;";
		closeButton.style.cursor = "pointer";
		closeButton.addEventListener("click",function(e) {
			_gthis.close();
		});
		this.header.appendChild(closeButton);
	}
	,addContent: function() {
		this.content = js.Browser.get_document().createElement("div");
		this.content.classList.add("popup-content");
		this.content.style.backgroundColor = "rgb(247, 248, 251)";
		this.content.style.width = "100%";
		this.content.style.height = "100%";
		this.content.style.padding = "37px 15px 15px 15px";
		this.content.style.boxSizing = "border-box";
	}
	,close: function() {
		this.onClose();
		this.parent.removeChild(this.container);
	}
	,onClose: function() {
		if(this.onCloseFunc != null) {
			this.onCloseFunc(this);
		}
	}
	,installMoveListeners: function() {
		var _gthis = this;
		var isDown = false;
		var offsetX = 0.;
		var offsetY = 0.;
		var moveListener = function(event) {
			event.preventDefault();
			if(isDown) {
				_gthis.container.style.left = event.clientX + offsetX + "px";
				_gthis.container.style.top = event.clientY + offsetY + "px";
			}
		};
		this.header.addEventListener("mousedown",function(e) {
			isDown = true;
			offsetX = _gthis.container.offsetLeft - e.clientX;
			offsetY = _gthis.container.offsetTop - e.clientY;
			js.Browser.get_document().body.addEventListener("mousemove",moveListener);
		});
		this.header.addEventListener("mouseup",function() {
			isDown = false;
			js.Browser.get_document().body.removeEventListener("mousemove",moveListener);
		});
	}
	,__class__: phylo.PhyloWindowWidget
};
phylo.PhyloGlassPaneWidget = $hxClasses["phylo.PhyloGlassPaneWidget"] = function(parent,title,modal) {
	if(modal == null) {
		modal = true;
	}
	phylo.PhyloWindowWidget.call(this,parent,title,modal);
	this.container.style.width = "100%";
	this.container.style.height = "100%";
	this.container.style.backgroundColor = "rgba(0,0,0,0.4)";
	this.container.className = "glasspane";
	this.header.style.width = "50%";
	this.header.style.margin = "auto";
	this.header.style.position = "initial";
	this.header.style.padding = "20px";
	this.content.style.backgroundColor = "#fefefe";
	this.content.style.margin = "auto";
	this.content.style.padding = "20px";
	this.content.style.width = "50%";
};
phylo.PhyloGlassPaneWidget.__name__ = ["phylo","PhyloGlassPaneWidget"];
phylo.PhyloGlassPaneWidget.__super__ = phylo.PhyloWindowWidget;
phylo.PhyloGlassPaneWidget.prototype = $extend(phylo.PhyloWindowWidget.prototype,{
	addContainer: function() {
		phylo.PhyloWindowWidget.prototype.addContainer.call(this);
	}
	,__class__: phylo.PhyloGlassPaneWidget
});
phylo.PhyloHighlightWidget = $hxClasses["phylo.PhyloHighlightWidget"] = function(parent,canvas) {
	this.canvas = canvas;
	phylo.PhyloGlassPaneWidget.call(this,parent,"Select genes to highlight in tree",true);
};
phylo.PhyloHighlightWidget.__name__ = ["phylo","PhyloHighlightWidget"];
phylo.PhyloHighlightWidget.__super__ = phylo.PhyloGlassPaneWidget;
phylo.PhyloHighlightWidget.prototype = $extend(phylo.PhyloGlassPaneWidget.prototype,{
	highlightInputs: null
	,canvas: null
	,onClose: function() {
		this.canvas.getConfig().highlightedGenes = new haxe.ds.StringMap();
		var _g = 0;
		var _g1 = this.highlightInputs;
		while(_g < _g1.length) {
			var inputElement = _g1[_g];
			++_g;
			if(inputElement.checked) {
				this.canvas.getConfig().highlightedGenes.set(inputElement.getAttribute("value"),true);
			}
		}
		this.canvas.redraw();
	}
	,addContent: function() {
		phylo.PhyloGlassPaneWidget.prototype.addContent.call(this);
		this.addHighlightList();
	}
	,addHighlightList: function() {
		var formContainer = js.Browser.get_document().createElement("div");
		formContainer.setAttribute("id","highlight-box");
		formContainer.style.margin = "auto";
		formContainer.style.overflowY = "scroll";
		formContainer.style.height = "75%";
		this.highlightInputs = [];
		var targets = this.canvas.getRootNode().targets;
		targets.sort(function(a,b) {
			var targetA = a.toUpperCase();
			var targetB = b.toUpperCase();
			if(targetA < targetB) {
				return -1;
			} else if(targetA > targetB) {
				return 1;
			} else {
				return 0;
			}
		});
		var i = 0;
		var _g = 0;
		while(_g < targets.length) {
			var target = targets[_g];
			++_g;
			if(target == null || target == "") {
				continue;
			}
			++i;
			var elementWrapper = js.Browser.get_document().createElement("div");
			elementWrapper.setAttribute("class","element-wrapper");
			elementWrapper.style["float"] = "left";
			elementWrapper.style.marginRight = "28px";
			elementWrapper.style.marginBottom = "10px";
			var name = "target_highlight_" + i;
			var inputLabel = js.Browser.get_document().createElement("label");
			inputLabel.setAttribute("for",name);
			inputLabel.innerText = target;
			inputLabel.style["float"] = "left";
			inputLabel.style.width = "55px";
			inputLabel.style.margin = "0";
			var inputElement = js.Browser.get_document().createElement("input");
			inputElement.setAttribute("type","checkbox");
			inputElement.setAttribute("value",target);
			inputElement.setAttribute("name",name);
			inputElement.style.width = "15px";
			inputElement.style.height = "15px";
			inputElement.style.margin = "1px";
			this.highlightInputs.push(inputElement);
			formContainer.appendChild(elementWrapper);
			elementWrapper.appendChild(inputLabel);
			elementWrapper.appendChild(inputElement);
		}
		this.content.appendChild(formContainer);
	}
	,__class__: phylo.PhyloHighlightWidget
});
phylo.PhyloHubMath = $hxClasses["phylo.PhyloHubMath"] = function() { };
phylo.PhyloHubMath.__name__ = ["phylo","PhyloHubMath"];
phylo.PhyloHubMath.degreesToRadians = function(a) {
	return a * (Math.PI / 180);
};
phylo.PhyloHubMath.radiansToDegrees = function(b) {
	return b * (180 / Math.PI);
};
phylo.PhyloHubMath.getMaxOfArray = function(a) {
	var i;
	var n = a[0];
	var _g1 = 1;
	var _g = a.length;
	while(_g1 < _g) {
		var i1 = _g1++;
		if(n < a[i1]) {
			n = a[i1];
		}
	}
	return n;
};
phylo.PhyloImportWidget = $hxClasses["phylo.PhyloImportWidget"] = function(canvas) {
	this.canvas = canvas;
	this.build();
};
phylo.PhyloImportWidget.__name__ = ["phylo","PhyloImportWidget"];
phylo.PhyloImportWidget.prototype = {
	canvas: null
	,container: null
	,build: function() {
		this.addContainer();
	}
	,getContainer: function() {
		return this.container;
	}
	,addContainer: function() {
		this.container = js.Browser.get_document().createElement("div");
		this.container.style.display = "inline-block";
		this.container.style.minWidth = "160px";
		this.container.style.position = "relative";
		this.container.style.verticalAlign = "top";
		this.container.style.backgroundColor = "#f7f8fb";
		this.container.marginLeft = "0px";
		this.container.marginTop = "0px";
		this.container.innerHTML = "<h1 style=\"margin-left:5px;margin-right:5px\">Import</h1>";
		this.addButtons();
	}
	,addButtons: function() {
		this.addImportNewickButton();
		this.addImportAnnotationsButton();
		if(this.canvas.getConfig().enableFastaImport) {
			this.addGenerateFromFASTAButton();
		}
	}
	,addImportNewickButton: function() {
		var _gthis = this;
		var btn = js.Browser.get_document().createElement("button");
		btn.innerText = "Import Newick";
		btn.style.backgroundColor = "rgb(247, 248, 251)";
		btn.style.border = "none";
		btn.style.font = "normal 11px/16px tahoma, arial, verdana, sans-serif";
		btn.style.cursor = "pointer";
		btn.style.textAlign = "left";
		btn.style.width = "100%";
		btn.setAttribute("title","ImportNewick");
		btn.addEventListener("mouseover",function() {
			btn.style.backgroundColor = "#dddee1";
		});
		btn.addEventListener("mouseout",function() {
			btn.style.backgroundColor = "rgb(247, 248, 251)";
		});
		btn.addEventListener("click",function() {
			var dialog = new phylo.PhyloInputModalWidget(js.Browser.get_document().body,"Newick String","Enter newick string",_gthis.canvas.getRootNode().getNewickString());
			dialog.setOnCloseEvent($bind(_gthis,_gthis.updateTree));
		});
		this.container.appendChild(btn);
	}
	,updateTree: function(dialog) {
		this.canvas.setNewickString(dialog.getText());
	}
	,addImportAnnotationsButton: function() {
		var _gthis = this;
		var btn = js.Browser.get_document().createElement("button");
		btn.innerText = "Import Annotations";
		btn.style.backgroundColor = "rgb(247, 248, 251)";
		btn.style.border = "none";
		btn.style.font = "normal 11px/16px tahoma, arial, verdana, sans-serif";
		btn.style.cursor = "pointer";
		btn.style.textAlign = "left";
		btn.style.width = "100%";
		btn.setAttribute("title","ImportNewick");
		btn.addEventListener("mouseover",function() {
			btn.style.backgroundColor = "#dddee1";
		});
		btn.addEventListener("mouseout",function() {
			btn.style.backgroundColor = "rgb(247, 248, 251)";
		});
		btn.addEventListener("click",function() {
			var dialog = new phylo.PhyloInputModalWidget(js.Browser.get_document().body,"Annotations in CSV format (first column is gene name)","Enter Annotations",_gthis.canvas.getAnnotationManager().getAnnotationString());
			dialog.setOnCloseEvent($bind(_gthis,_gthis.updateAnnotations));
		});
		this.container.appendChild(btn);
	}
	,updateAnnotations: function(dialog) {
		this.canvas.getAnnotationManager().loadAnnotationsFromString(dialog.getText(),this.canvas.getAnnotationManager().getAnnotationConfigs());
	}
	,addGenerateFromFASTAButton: function() {
		var _gthis = this;
		var btn = js.Browser.get_document().createElement("button");
		btn.innerText = "Import FASTA";
		btn.style.backgroundColor = "rgb(247, 248, 251)";
		btn.style.border = "none";
		btn.style.font = "normal 11px/16px tahoma, arial, verdana, sans-serif";
		btn.style.cursor = "pointer";
		btn.style.textAlign = "left";
		btn.style.width = "100%";
		btn.setAttribute("title","Import Fasta");
		btn.addEventListener("mouseover",function() {
			btn.style.backgroundColor = "#dddee1";
		});
		btn.addEventListener("mouseout",function() {
			btn.style.backgroundColor = "rgb(247, 248, 251)";
		});
		btn.addEventListener("click",function() {
			var dialog = new phylo.PhyloInputModalWidget(js.Browser.get_document().body,"FASTA format","Enter sequences",_gthis.canvas.getRootNode().getFasta());
			dialog.setOnCloseEvent($bind(_gthis,_gthis.updateFASTA));
		});
		this.container.appendChild(btn);
	}
	,updateFASTA: function(dialog) {
		this.canvas.setFromFasta(dialog.getText());
	}
	,__class__: phylo.PhyloImportWidget
};
phylo.PhyloInfoWidget = $hxClasses["phylo.PhyloInfoWidget"] = function(parent,message,title) {
	this.message = message;
	phylo.PhyloGlassPaneWidget.call(this,parent,title);
};
phylo.PhyloInfoWidget.__name__ = ["phylo","PhyloInfoWidget"];
phylo.PhyloInfoWidget.__super__ = phylo.PhyloGlassPaneWidget;
phylo.PhyloInfoWidget.prototype = $extend(phylo.PhyloGlassPaneWidget.prototype,{
	message: null
	,addContent: function() {
		phylo.PhyloGlassPaneWidget.prototype.addContent.call(this);
		var p = js.Browser.get_document().createElement("p");
		p.innerText = this.message;
		this.content.appendChild(p);
	}
	,__class__: phylo.PhyloInfoWidget
});
phylo.PhyloInputModalWidget = $hxClasses["phylo.PhyloInputModalWidget"] = function(parent,message,title,initialValue) {
	this.message = message;
	this.initialValue = initialValue;
	phylo.PhyloGlassPaneWidget.call(this,parent,title);
};
phylo.PhyloInputModalWidget.__name__ = ["phylo","PhyloInputModalWidget"];
phylo.PhyloInputModalWidget.__super__ = phylo.PhyloGlassPaneWidget;
phylo.PhyloInputModalWidget.prototype = $extend(phylo.PhyloGlassPaneWidget.prototype,{
	message: null
	,initialValue: null
	,textArea: null
	,addContent: function() {
		phylo.PhyloGlassPaneWidget.prototype.addContent.call(this);
		this.addMessage();
		this.addInputField();
	}
	,addMessage: function() {
		var p = js.Browser.get_document().createElement("p");
		p.innerText = this.message;
		this.content.appendChild(p);
	}
	,addInputField: function() {
		this.textArea = js.Browser.get_document().createElement("textarea");
		this.textArea.value = this.initialValue;
		this.textArea.style.width = "100%";
		this.textArea.setAttribute("rows","10");
		this.content.appendChild(this.textArea);
	}
	,getText: function() {
		return this.textArea.value;
	}
	,__class__: phylo.PhyloInputModalWidget
});
phylo.PhyloLegendRowWidget = $hxClasses["phylo.PhyloLegendRowWidget"] = function(legend,config) {
	this.legend = legend;
	this.config = config;
	this.build();
};
phylo.PhyloLegendRowWidget.__name__ = ["phylo","PhyloLegendRowWidget"];
phylo.PhyloLegendRowWidget.prototype = {
	legend: null
	,config: null
	,container: null
	,build: function() {
		this.addContainer();
		this.addLabel();
		this.addColourChooser();
	}
	,addContainer: function() {
		this.container = js.Browser.get_document().createElement("div");
		this.legend.getLegendContainer().appendChild(this.container);
	}
	,addLabel: function() {
		var label = js.Browser.get_document().createElement("span");
		label.innerText = this.config.name;
		label.style.marginLeft = "5px";
		label.style.width = "100px";
		label.style.display = "inline-block";
		this.container.appendChild(label);
	}
	,addColourChooser: function() {
		var _gthis = this;
		var picker = js.Browser.get_document().createElement("input");
		picker.setAttribute("type","color");
		picker.setAttribute("name","line_colour_input");
		picker.setAttribute("value",this.standardizeColour(this.config.colour));
		picker.style.width = "40px";
		picker.addEventListener("change",function() {
			_gthis.config.colour = picker.value;
			_gthis.legend.getCanvas().getAnnotationManager().reloadAnnotationConfigurations();
		});
		this.container.appendChild(picker);
	}
	,standardizeColour: function(colourStr) {
		var canvas = js.Browser.get_document().createElement("canvas");
		var ctx = canvas.getContext("2d");
		ctx.fillStyle = colourStr;
		return ctx.fillStyle;
	}
	,__class__: phylo.PhyloLegendRowWidget
};
phylo.PhyloLegendWidget = $hxClasses["phylo.PhyloLegendWidget"] = function(canvas) {
	this.canvas = canvas;
	this.build();
};
phylo.PhyloLegendWidget.__name__ = ["phylo","PhyloLegendWidget"];
phylo.PhyloLegendWidget.prototype = {
	canvas: null
	,container: null
	,legendContainer: null
	,build: function() {
		this.addContainer();
	}
	,getCanvas: function() {
		return this.canvas;
	}
	,getContainer: function() {
		return this.container;
	}
	,addContainer: function() {
		this.container = js.Browser.get_document().createElement("div");
		this.container.style.display = "inline-block";
		this.container.style.minWidth = "160px";
		this.container.style.position = "relative";
		this.container.style.verticalAlign = "top";
		this.container.style.height = "100%";
		this.container.style.backgroundColor = "#f7f8fb";
		this.container.marginLeft = "0px";
		this.container.marginTop = "0px";
		this.container.innerHTML = "<h1 style=\"margin-left:5px;margin-right:5px\">Legend</h1>";
		this.legendContainer = js.Browser.get_document().createElement("div");
		this.container.appendChild(this.legendContainer);
		this.redraw();
	}
	,clearLegendContainer: function() {
		while(this.legendContainer.firstChild) this.legendContainer.removeChild(this.legendContainer.firstChild);
	}
	,getLegendContainer: function() {
		return this.legendContainer;
	}
	,redraw: function() {
		this.clearLegendContainer();
		var annotationManager = this.canvas.getAnnotationManager();
		var activeAnnotations = annotationManager.getActiveAnnotations();
		var _g = 0;
		while(_g < activeAnnotations.length) {
			var annotationDef = activeAnnotations[_g];
			++_g;
			var config = this.canvas.getAnnotationManager().getAnnotationConfigByName(annotationDef.label);
			if(config.legendFunction != null) {
				var func = config.legendFunction;
				func(this,config);
			}
		}
	}
	,__class__: phylo.PhyloLegendWidget
};
phylo.PhyloNewickParser = $hxClasses["phylo.PhyloNewickParser"] = function() {
};
phylo.PhyloNewickParser.__name__ = ["phylo","PhyloNewickParser"];
phylo.PhyloNewickParser.prototype = {
	parse: function(newickString) {
		newickString = phylo.PhyloNewickParser.whiteSpaceReg.replace(newickString,"");
		newickString = phylo.PhyloNewickParser.newLineReg.replace(newickString,"");
		newickString = phylo.PhyloNewickParser.carLineReg.replace(newickString,"");
		var rootNode = new phylo.PhyloTreeNode();
		rootNode.newickString = newickString;
		var currentNode = rootNode;
		var a;
		var branch;
		var charArray = newickString.split("");
		var j = 0;
		var _g1 = 0;
		var _g = charArray.length;
		while(_g1 < _g) {
			var j1 = _g1++;
			var i = j1;
			if(charArray[i] == "(" && charArray[i + 1] == "(") {
				var childNode = new phylo.PhyloTreeNode(currentNode,"",false,0);
				currentNode = childNode;
			} else if(charArray[i] == "(" && charArray[i + 1] != "(" && charArray[i - 1] != "/" || charArray[i] == "," && charArray[i + 1] != "(") {
				++i;
				var name = "";
				while(charArray[i] != ":" && charArray[i] != "," && (charArray[i] != ")" || charArray[i] == ")" && charArray[i - 1] == "/")) {
					var p = charArray[i];
					if(charArray[i] == "/" && (charArray[i + 1] == "[" || charArray[i + 1] == "(")) {
						++i;
					}
					if(charArray[i] == "[") {
						name += "(";
					} else if(charArray[i] == "]") {
						name += ")";
					} else {
						name += charArray[i];
					}
					++i;
				}
				if(charArray[i] == ":") {
					++i;
					branch = "";
					while(charArray[i] != "," && (charArray[i] != ")" || charArray[i] == ")" && charArray[i - 1] == "/") && charArray[i] != ";") {
						branch += charArray[i];
						++i;
					}
					--i;
					branch = Std.parseFloat(branch);
				} else {
					branch = 1;
				}
				var child = new phylo.PhyloTreeNode(currentNode,name,true,branch);
			} else if(charArray[i] == "," && charArray[i + 1] == "(") {
				var child1 = new phylo.PhyloTreeNode(currentNode,"",false,0);
				currentNode = child1;
			} else if(charArray[i] == ")" && charArray[i - 1] != "/") {
				if(charArray[i + 1] == ":") {
					i += 2;
					branch = "";
					while(charArray[i] != "," && (charArray[i] != ")" || charArray[i] == ")" && charArray[i - 1] != "/") && charArray[i] != ";") {
						branch += charArray[i];
						++i;
					}
					--i;
					currentNode.branch = Std.parseFloat(branch);
				}
				currentNode = currentNode.parent;
			}
		}
		if(currentNode == null) {
			return rootNode;
		} else {
			return currentNode;
		}
	}
	,__class__: phylo.PhyloNewickParser
};
phylo.PhyloRadialTreeLayout = $hxClasses["phylo.PhyloRadialTreeLayout"] = function(width,height) {
	this.cx = width / 2;
	this.cy = height / 2;
};
phylo.PhyloRadialTreeLayout.__name__ = ["phylo","PhyloRadialTreeLayout"];
phylo.PhyloRadialTreeLayout.prototype = {
	cx: null
	,cy: null
	,annotations: null
	,renderCircle: function(treeNode,renderer,annotations,annotList,lineColour) {
		if(lineColour == null) {
			lineColour = "rgb(28,102,224)";
		}
		if(treeNode.colour != null) {
			lineColour = treeNode.colour;
		}
		this._renderCircle(treeNode,renderer,annotations,annotList,lineColour,lineColour);
	}
	,_renderCircle: function(treeNode,renderer,annotations,annotList,lineColour,parentColour) {
		if(parentColour == null) {
			parentColour = "rgb(28,102,224)";
		}
		if(lineColour == null) {
			lineColour = "rgb(28,102,224)";
		}
		var blue = "rgb(41,128,214)";
		var red = "rgb(255,0,0)";
		var black = "rgb(68,68,68)";
		var tmp = treeNode.parent == null;
		treeNode.space = 0;
		var cx = renderer.cx;
		var cy = renderer.cy;
		var textSize = null;
		var branch = cx * 2 / treeNode.root.getHeight() / (4 - treeNode.root.getHeight() * 0.011);
		var k = 2 * Math.PI / treeNode.root.getLeafCount();
		var fontW = 12;
		var fontH = 12;
		var firstChild = treeNode.children[0];
		var lastChild = treeNode.children[treeNode.children.length - 1];
		var i = treeNode.angle;
		var _g = 0;
		var _g1 = treeNode.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			var childLineColour = lineColour;
			if(child.colour != null) {
				childLineColour = child.colour;
			}
			i = this._renderCircle(child,renderer,annotations,annotList,childLineColour,lineColour);
		}
		var h = null;
		var ph = null;
		var angle = null;
		var y1;
		var y2 = null;
		var x1;
		var x2 = null;
		if(treeNode.parent != null) {
			h = branch * (treeNode.root.getHeight() - treeNode.getHeight());
			ph = branch * (treeNode.root.getHeight() - treeNode.parent.getHeight());
			if(treeNode.wedgeColour != null) {
				var startNode = null;
				var endNode = null;
				if(!treeNode.isLeaf()) {
					startNode = treeNode.findLastLeaf();
					endNode = treeNode.findFirstLeaf();
				} else {
					startNode = treeNode.parent.findLastLeaf();
					endNode = treeNode.parent.findFirstLeaf();
				}
				var wedgeH = treeNode.root.getHeight() * (cx * 2 / treeNode.root.getHeight() / (4 - treeNode.root.getHeight() * 0.011));
				renderer.drawWedge(0,0,wedgeH,endNode.angle,startNode.angle,treeNode.wedgeColour,1);
			}
			if(treeNode.isLeaf()) {
				angle = i;
			} else {
				angle = (lastChild.angle - firstChild.angle) / 2 + firstChild.angle;
				if(Math.abs(phylo.PhyloHubMath.radiansToDegrees(lastChild.angle - firstChild.angle)) < 10) {
					renderer.drawLine(firstChild.x,firstChild.y,lastChild.x,lastChild.y,lineColour,firstChild.lineWidth);
				} else {
					renderer.drawArc(0,0,h,firstChild.angle,lastChild.angle,lineColour,treeNode.lineWidth);
				}
			}
			treeNode.angle = angle;
			if(angle == 0) {
				y1 = 0;
				y2 = 0;
			} else {
				y1 = h * Math.sin(angle);
				y2 = ph * Math.sin(angle);
			}
			x1 = h * Math.cos(angle);
			x2 = ph * Math.cos(angle);
			treeNode.x = x2;
			treeNode.y = y2;
			renderer.drawLine(x1,y1,x2,y2,lineColour,treeNode.lineWidth);
			if(treeNode.isLeaf()) {
				var dy = y1 - y2;
				var dx = x1 - x2;
				var x = 0;
				var y = 0;
				var gap = 2;
				var ta;
				if(dx < 0) {
					ta = Math.atan2(dy,dx) - Math.PI;
					x = -renderer.mesureText(treeNode.name) - gap;
				} else {
					ta = Math.atan2(dy,dx);
					x = gap;
				}
				y = 3;
				var labelColour = black;
				if(renderer.getConfig().highlightedGenes.exists(treeNode.name) == true) {
					labelColour = "red";
				}
				renderer.drawTextNoTranslate(treeNode.name,x2 + dx,y2 + dy,x,y,ta,"top",labelColour);
				i += k;
				var t = treeNode.root.getMaximumLeafNameLength(renderer) + 10;
				treeNode.rad = ta;
				treeNode.x = x1;
				treeNode.y = y1;
				renderer.ctx.save();
				if(treeNode.y > y2 && treeNode.x > x2) {
					treeNode.quad = 1;
				}
				if(treeNode.y < y2 && treeNode.x > x2) {
					treeNode.quad = 2;
				}
				if(treeNode.y < y2 && treeNode.x < x2) {
					treeNode.quad = 3;
				}
				if(treeNode.y > y2 && treeNode.x < x2) {
					treeNode.quad = 4;
				}
				if(treeNode.y == y2 && treeNode.x > x2) {
					treeNode.quad = 5;
				}
				if(treeNode.y == y2 && treeNode.x < x2) {
					treeNode.quad = 6;
				}
				if(treeNode.y > y2 && treeNode.x == x2) {
					treeNode.quad = 7;
				}
				if(treeNode.y < y2 && treeNode.x == x2) {
					treeNode.quad = 8;
				}
				var j;
				var _g11 = 1;
				var _g2 = annotations.length;
				while(_g11 < _g2) {
					var j1 = _g11++;
					if(annotations[j1] == true) {
						var added = this.addAnnotation(treeNode,j1,t,renderer,annotList);
						if(treeNode.annotations[j1] != null && treeNode.annotations[j1].alfaAnnot[0] != null && treeNode.annotations[j1].alfaAnnot.length > 0) {
							var u = 0;
							if(added == true) {
								treeNode.space -= 1;
							}
							treeNode.space += 1;
							var _g3 = 0;
							var _g21 = treeNode.annotations[j1].alfaAnnot.length;
							while(_g3 < _g21) {
								var u1 = _g3++;
								if(annotList[j1].shape == "text" && treeNode.quad == 2) {
									treeNode.space += 2;
								} else if(annotList[j1].shape == "text" && treeNode.quad == 1) {
									treeNode.space += 2;
								} else {
									treeNode.space += 1;
								}
								added = this.addAlfaAnnotation(treeNode,treeNode.annotations[j1].alfaAnnot[u1],j1,t,renderer,annotList);
							}
							if(added == true) {
								treeNode.space += 1;
							}
						} else if(added == true) {
							treeNode.space += 1;
						}
					}
				}
				renderer.ctx.restore();
				treeNode.x = x2;
				treeNode.y = y2;
			}
		}
		var _g4 = 0;
		var _g12 = treeNode.children;
		while(_g4 < _g12.length) {
			var child1 = _g12[_g4];
			++_g4;
			var data = new phylo.PhyloScreenData();
			data.renderer = renderer;
			data.isAnnot = false;
			data.nodeId = child1.nodeId;
			data.point = 5;
			data.width = 10;
			data.height = 10;
			data.parentx = Math.round(treeNode.x);
			data.parenty = Math.round(treeNode.y);
			data.x = Math.round(child1.x);
			data.y = Math.round(child1.y);
			treeNode.root.screen[treeNode.root.screen.length] = data;
		}
		if(treeNode.parent == null) {
			var rootScreen = new phylo.PhyloScreenData();
			rootScreen.x = treeNode.x;
			rootScreen.y = treeNode.y;
			rootScreen.nodeId = treeNode.nodeId;
			rootScreen.renderer = renderer;
			rootScreen.point = 5;
			rootScreen.width = 10;
			rootScreen.height = 10;
			treeNode.screen.push(rootScreen);
		}
		return i;
	}
	,render: function(treeNode,renderer,annotations,annotList,lineColour) {
		if(lineColour == null) {
			lineColour = "rgb(28,102,224)";
		}
		var i = 0;
		var x = treeNode.x;
		var y = treeNode.y;
		if(renderer.getConfig().editmode == true) {
			lineColour = "rgb(234,147,28)";
		}
		while(i < treeNode.children.length) {
			treeNode.children[i].space = 0;
			if(treeNode.children[i].isLeaf()) {
				if(treeNode.children[i].lineMode == phylo.LineMode.BEZIER) {
					var deltaX = Math.abs(x - treeNode.children[i].x);
					var deltaY = Math.abs(y - treeNode.children[i].y);
					var firstY;
					var secondY;
					var firstX;
					var secondX;
					if(treeNode.children[i].xRandom == null) {
						var tmp = Math.random() * 0.3;
						treeNode.children[i].xRandom = tmp + 0.3;
					}
					if(treeNode.children[i].yRandom == null) {
						var tmp1 = Math.random() * 0.4;
						treeNode.children[i].yRandom = tmp1 + 0.4;
					}
					if(treeNode.children[i].y < y) {
						firstY = y - deltaY * treeNode.children[i].yRandom;
						secondY = treeNode.children[i].y + deltaY * treeNode.children[i].yRandom;
					} else {
						firstY = y + deltaY * treeNode.children[i].yRandom;
						secondY = treeNode.children[i].y - deltaY * treeNode.children[i].yRandom;
					}
					if(treeNode.children[i].x > x) {
						firstX = x + deltaX * 0.6;
						secondX = treeNode.children[i].x - deltaX * treeNode.children[i].xRandom;
					} else {
						firstX = x - deltaX * 0.6;
						secondX = treeNode.children[i].x + deltaX * treeNode.children[i].xRandom;
					}
					renderer.bezierCurve(x,y,treeNode.children[i].x,treeNode.children[i].y,firstX,firstY,secondX,secondY,lineColour,treeNode.children[i].lineWidth);
				} else {
					renderer.drawLine(x,y,treeNode.children[i].x,treeNode.children[i].y,lineColour,treeNode.children[i].lineWidth);
				}
				var t;
				var aux;
				var aux1;
				var yequalsign = false;
				if(treeNode.children[i].y > 0 && y > 0) {
					yequalsign = true;
				} else if(treeNode.children[i].y < 0 && y < 0) {
					yequalsign = true;
				}
				var xequalsign = false;
				if(treeNode.children[i].x > 0 && x > 0) {
					xequalsign = true;
				} else if(treeNode.children[i].x < 0 && x < 0) {
					xequalsign = true;
				}
				var deltaY1;
				var deltaX1;
				if(xequalsign == true) {
					deltaX1 = Math.abs(treeNode.children[i].x - x);
				} else {
					deltaX1 = Math.abs(treeNode.children[i].x) + Math.abs(x);
				}
				if(yequalsign == true) {
					deltaY1 = Math.abs(treeNode.children[i].y - y);
				} else {
					deltaY1 = Math.abs(treeNode.children[i].y) + Math.abs(y);
				}
				var tang = deltaY1 / deltaX1;
				treeNode.children[i].rad = Math.atan(tang);
				var rot = 0;
				var orign = "start";
				if(treeNode.children[i].y > y && treeNode.children[i].x > x) {
					rot = treeNode.children[i].rad;
					orign = "start";
					treeNode.children[i].quad = 1;
				}
				if(treeNode.children[i].y < y && treeNode.children[i].x > x) {
					rot = 2 * Math.PI - treeNode.children[i].rad;
					orign = "start";
					treeNode.children[i].quad = 2;
				}
				if(treeNode.children[i].y < y && treeNode.children[i].x < x) {
					rot = treeNode.children[i].rad;
					orign = "end";
					treeNode.children[i].quad = 3;
				}
				if(treeNode.children[i].y > y && treeNode.children[i].x < x) {
					rot = 2 * Math.PI - treeNode.children[i].rad;
					orign = "end";
					treeNode.children[i].quad = 4;
				}
				if(treeNode.children[i].y == y && treeNode.children[i].x > x) {
					treeNode.children[i].quad = 5;
					rot = 0;
				}
				if(treeNode.children[i].y == y && treeNode.children[i].x < x) {
					treeNode.children[i].quad = 6;
					rot = Math.PI;
				}
				if(treeNode.children[i].y > y && treeNode.children[i].x == x) {
					rot = 3 * Math.PI - Math.PI / 2;
					treeNode.children[i].quad = 7;
				}
				if(treeNode.children[i].y < y && treeNode.children[i].x == x) {
					treeNode.children[i].quad = 8;
					rot = 3 * Math.PI / 4;
				}
				var namecolor = "#585b5f";
				var ttar = treeNode.children[i].name;
				if(renderer.getConfig().highlightedGenes.exists(ttar) == true) {
					namecolor = "#ff0000";
				}
				renderer.drawText(" " + treeNode.children[i].name,treeNode.children[i].x,treeNode.children[i].y,-2,3,rot,orign,namecolor);
				this.updateTreeRectangle(treeNode.children[i].x,treeNode.children[i].y,treeNode.root);
				t = renderer.mesureText(treeNode.children[i].name) + 10;
				treeNode.children[i].rad = rot;
				var j;
				var _g1 = 1;
				var _g = annotations.length;
				while(_g1 < _g) {
					var j1 = _g1++;
					if(annotations[j1] == true) {
						var added = this.addAnnotation(treeNode.children[i],j1,t,renderer,annotList);
						if(treeNode.children[i].annotations[j1] != null && treeNode.children[i].annotations[j1].alfaAnnot[0] != null && treeNode.children[i].annotations[j1].alfaAnnot.length > 0) {
							var u = 0;
							if(added == true) {
								treeNode.children[i].space -= 1;
							}
							treeNode.children[i].space += 1;
							var _g3 = 0;
							var _g2 = treeNode.children[i].annotations[j1].alfaAnnot.length;
							while(_g3 < _g2) {
								var u1 = _g3++;
								if(annotList[j1].shape == "text" && treeNode.children[i].quad == 2) {
									treeNode.children[i].space += 2;
								} else if(annotList[j1].shape == "text" && treeNode.children[i].quad == 1) {
									treeNode.children[i].space += 2;
								} else {
									treeNode.children[i].space += 1;
								}
								added = this.addAlfaAnnotation(treeNode.children[i],treeNode.children[i].annotations[j1].alfaAnnot[u1],j1,t,renderer,annotList);
							}
							if(added == true) {
								treeNode.children[i].space += 1;
							}
						} else if(added == true) {
							treeNode.children[i].space += 1;
						}
					}
				}
			} else {
				var childLineColour = lineColour;
				if(treeNode.children[i].colour != null) {
					childLineColour = treeNode.children[i].colour;
				}
				this.render(treeNode.children[i],renderer,annotations,annotList,childLineColour);
				if(treeNode.children[i].lineMode == phylo.LineMode.BEZIER) {
					var deltaX2 = Math.abs(x - treeNode.children[i].x);
					var deltaY2 = Math.abs(y - treeNode.children[i].y);
					var firstY1;
					var secondY1;
					var firstX1;
					var secondX1;
					if(treeNode.children[i].xRandom == null) {
						var tmp2 = Math.random() * 0.3;
						treeNode.children[i].xRandom = tmp2 + 0.3;
					}
					if(treeNode.children[i].yRandom == null) {
						var tmp3 = Math.random() * 0.4;
						treeNode.children[i].yRandom = tmp3 + 0.4;
					}
					if(treeNode.children[i].y < y) {
						firstY1 = y - deltaY2 * treeNode.children[i].yRandom;
						secondY1 = treeNode.children[i].y + deltaY2 * treeNode.children[i].yRandom;
					} else {
						firstY1 = y + deltaY2 * treeNode.children[i].yRandom;
						secondY1 = treeNode.children[i].y - deltaY2 * treeNode.children[i].yRandom;
					}
					if(treeNode.children[i].x > x) {
						firstX1 = x + deltaX2 * 0.6;
						secondX1 = treeNode.children[i].x - deltaX2 * treeNode.children[i].xRandom;
					} else {
						firstX1 = x - deltaX2 * 0.6;
						secondX1 = treeNode.children[i].x + deltaX2 * treeNode.children[i].xRandom;
					}
					renderer.bezierCurve(x,y,treeNode.children[i].x,treeNode.children[i].y,firstX1,firstY1,secondX1,secondY1,lineColour,treeNode.children[i].lineWidth);
				} else {
					renderer.drawLine(x,y,treeNode.children[i].x,treeNode.children[i].y,lineColour,treeNode.children[i].lineWidth);
				}
				var data = new phylo.PhyloScreenData();
				data.renderer = renderer;
				data.isAnnot = false;
				data.nodeId = treeNode.children[i].nodeId;
				data.point = 5;
				data.width = 10;
				data.height = 10;
				data.parentx = Math.round(x);
				data.parenty = Math.round(y);
				data.x = Math.round(treeNode.children[i].x);
				data.y = Math.round(treeNode.children[i].y);
				treeNode.root.screen[treeNode.root.screen.length] = data;
			}
			++i;
		}
		if(treeNode.parent == null) {
			var rootScreen = new phylo.PhyloScreenData();
			rootScreen.x = treeNode.x;
			rootScreen.y = treeNode.y;
			rootScreen.nodeId = treeNode.nodeId;
			rootScreen.renderer = renderer;
			rootScreen.point = 5;
			rootScreen.width = 10;
			rootScreen.height = 10;
			treeNode.screen.push(rootScreen);
		}
	}
	,addAnnotation: function(leave,annotation,$long,renderer,annotList) {
		if(annotList[annotation].optionSelected.length != 0) {
			if(leave.annotations[annotation] != null) {
				if(annotList[annotation].optionSelected[0] != leave.annotations[annotation].option) {
					return false;
				}
			}
		}
		var res = false;
		var data = new phylo.PhyloScreenData();
		data.renderer = renderer;
		data.target = leave.name;
		data.isAnnot = true;
		var name = "";
		if(leave.name.indexOf("(") != -1 || leave.name.indexOf("-") != -1) {
			var auxArray = leave.name.split("");
			var j;
			var _g1 = 0;
			var _g = auxArray.length;
			while(_g1 < _g) {
				var j1 = _g1++;
				if(auxArray[j1] == "(" || auxArray[j1] == "-") {
					break;
				}
				name += auxArray[j1];
			}
			data.targetClean = name;
		} else {
			data.targetClean = leave.name;
		}
		data.annot = annotation;
		data.annotation = leave.annotations[annotation];
		var nx;
		var ny;
		nx = 0.0;
		ny = 0.0;
		if(leave.space == 0) {
			++$long;
		}
		var rootN = leave.root;
		var _g2 = annotList[annotation].shape;
		switch(_g2) {
		case "cercle":
			if(leave.activeAnnotation[annotation] == true) {
				if(leave.annotations[annotation].hasAnnot == true) {
					var _g3 = leave.quad;
					switch(_g3) {
					case 1:
						$long += 23 * leave.space;
						nx = leave.x + Math.cos(leave.rad) * ($long + 3);
						ny = leave.y + Math.sin(leave.rad) * ($long + 3);
						break;
					case 2:
						$long += 20 * leave.space;
						nx = leave.x + Math.cos(leave.rad) * ($long + 3);
						ny = leave.y + Math.sin(leave.rad) * ($long + 3);
						break;
					case 3:
						$long += 23 * leave.space;
						ny = leave.y - Math.sin(leave.rad) * ($long + 3);
						nx = leave.x - Math.cos(leave.rad) * ($long + 3);
						break;
					case 4:
						$long += 20 * leave.space;
						ny = leave.y - Math.sin(leave.rad) * ($long + 3);
						nx = leave.x - Math.cos(leave.rad) * ($long + 3);
						break;
					case 5:
						$long += 20 * leave.space;
						ny = leave.y;
						nx = leave.x + Math.cos(leave.rad) * $long;
						break;
					case 6:
						ny = leave.y;
						$long += 20 * leave.space;
						nx = leave.x - Math.cos(leave.rad) * $long;
						break;
					case 7:
						nx = leave.x;
						$long += 20 * leave.space;
						ny = leave.y + Math.sin(leave.rad) * $long;
						break;
					case 8:
						nx = leave.x;
						$long += 20 * leave.space;
						ny = leave.y - Math.sin(leave.rad) * $long;
						break;
					}
					if(leave.space == 0) {
						++$long;
					}
					renderer.drawCircle(nx,ny,leave.annotations[annotation].color[0].color);
					data.x = Math.round(nx);
					data.y = Math.round(ny);
					data.width = 14;
					data.height = 14;
					data.point = 3;
					res = true;
				} else {
					return false;
				}
			}
			break;
		case "html":
			if(leave.activeAnnotation[annotation] == true) {
				if(leave.annotations[annotation].hasAnnot == true) {
					var _g4 = leave.quad;
					switch(_g4) {
					case 1:
						$long += 23 * leave.space;
						nx = leave.x + Math.cos(leave.rad) * $long;
						ny = leave.y + Math.sin(leave.rad) * $long;
						break;
					case 2:
						$long += 20 * leave.space;
						nx = leave.x + Math.cos(leave.rad) * $long;
						ny = leave.y - 12 + Math.sin(leave.rad) * $long;
						break;
					case 3:
						$long += 23 * leave.space;
						ny = leave.y - 12 - Math.sin(leave.rad) * $long;
						nx = leave.x - 10 - Math.cos(leave.rad) * $long;
						break;
					case 4:
						$long += 20 * leave.space;
						ny = leave.y - Math.sin(leave.rad) * $long;
						nx = leave.x - Math.cos(leave.rad) * $long;
						break;
					case 5:
						$long += 20 * leave.space;
						ny = leave.y;
						nx = leave.x + Math.cos(leave.rad) * $long;
						break;
					case 6:
						$long += 20 * leave.space;
						ny = leave.y;
						nx = leave.x - Math.cos(leave.rad) * $long;
						break;
					case 7:
						nx = leave.x;
						$long += 20 * leave.space;
						ny = leave.y + Math.sin(leave.rad) * $long;
						break;
					case 8:
						nx = leave.x;
						$long += 20 * leave.space;
						ny = leave.y - Math.sin(leave.rad) * $long;
						break;
					}
					if(leave.space == 0) {
						++$long;
					}
					renderer.drawGraphic(nx,ny,leave.results);
					data.x = Math.round(nx);
					data.y = Math.round(ny);
					data.width = 14;
					data.height = 10;
					data.point = 4;
					res = true;
				} else {
					return false;
				}
			}
			break;
		case "image":
			if(leave.activeAnnotation[annotation] == true) {
				if(leave.annotations[annotation].hasAnnot == true) {
					if(annotList[annotation].annotImg[leave.annotations[annotation].defaultImg] != null) {
						var _g5 = leave.quad;
						switch(_g5) {
						case 1:
							$long += 20 * leave.space;
							nx = leave.x + Math.cos(leave.rad) * $long;
							ny = leave.y + Math.sin(leave.rad) * $long;
							break;
						case 2:
							$long += 20 * leave.space;
							nx = leave.x - 5 + Math.cos(leave.rad) * $long;
							ny = leave.y - 12 + Math.sin(leave.rad) * $long;
							break;
						case 3:
							$long += 23 * leave.space;
							ny = leave.y - 12 - Math.sin(leave.rad) * $long;
							nx = leave.x - 10 - Math.cos(leave.rad) * $long;
							break;
						case 4:
							$long += 23 * leave.space;
							ny = leave.y - Math.sin(leave.rad) * $long;
							nx = leave.x - 10 - Math.cos(leave.rad) * $long;
							break;
						case 5:
							$long += 20 * leave.space;
							ny = leave.y;
							nx = leave.x + Math.cos(leave.rad) * $long;
							break;
						case 6:
							$long += 20 * leave.space;
							ny = leave.y;
							nx = leave.x - Math.cos(leave.rad) * $long;
							break;
						case 7:
							$long += 20 * leave.space;
							nx = leave.x;
							ny = leave.y + Math.sin(leave.rad) * $long;
							break;
						case 8:
							$long += 20 * leave.space;
							nx = leave.x;
							ny = leave.y - Math.sin(leave.rad) * $long;
							break;
						}
						if(leave.space == 0) {
							++$long;
						}
						var imge = annotList[annotation].annotImg[leave.annotations[annotation].defaultImg];
						if(imge != null) {
							if(annotation == 1) {
								renderer.drawImg(nx,ny,imge,1);
							} else {
								renderer.drawImg(nx,ny,imge,0);
							}
							data.x = Math.round(nx);
							data.y = Math.round(ny);
							data.width = 14;
							data.height = 14;
							data.point = 1;
						}
					}
					res = true;
				} else {
					return false;
				}
			}
			break;
		case "square":
			if(leave.activeAnnotation[annotation] == true) {
				if(leave.annotations[annotation].hasAnnot == true) {
					var _g6 = leave.quad;
					switch(_g6) {
					case 1:
						$long += 23 * leave.space;
						nx = leave.x + Math.cos(leave.rad) * $long;
						ny = leave.y + Math.sin(leave.rad) * $long;
						break;
					case 2:
						$long += 20 * leave.space;
						nx = leave.x + Math.cos(leave.rad) * $long;
						ny = leave.y - 12 + Math.sin(leave.rad) * $long;
						break;
					case 3:
						$long += 23 * leave.space;
						ny = leave.y - 12 - Math.sin(leave.rad) * $long;
						nx = leave.x - 10 - Math.cos(leave.rad) * $long;
						break;
					case 4:
						$long += 20 * leave.space;
						ny = leave.y - Math.sin(leave.rad) * $long;
						nx = leave.x - Math.cos(leave.rad) * $long;
						break;
					case 5:
						$long += 20 * leave.space;
						ny = leave.y;
						nx = leave.x + Math.cos(leave.rad) * $long;
						break;
					case 6:
						$long += 20 * leave.space;
						ny = leave.y;
						nx = leave.x - Math.cos(leave.rad) * $long;
						break;
					case 7:
						nx = leave.x;
						$long += 20 * leave.space;
						ny = leave.y + Math.sin(leave.rad) * $long;
						break;
					case 8:
						nx = leave.x;
						$long += 20 * leave.space;
						ny = leave.y - Math.sin(leave.rad) * $long;
						break;
					}
					if(leave.space == 0) {
						++$long;
					}
					renderer.drawSquare(nx,ny,leave.annotations[annotation].color[0].color);
					data.x = Math.round(nx);
					data.y = Math.round(ny);
					data.width = 14;
					data.height = 10;
					data.point = 4;
					res = true;
				} else {
					return false;
				}
			}
			break;
		case "text":
			if(leave.activeAnnotation[annotation] == true) {
				if(leave.annotations[annotation].hasAnnot == true) {
					var _g7 = leave.quad;
					switch(_g7) {
					case 1:
						$long += 20 * leave.space;
						nx = leave.x + Math.cos(leave.rad) * ($long + 10);
						ny = leave.y + Math.sin(leave.rad) * ($long + 10);
						break;
					case 2:
						$long += 20 * leave.space;
						nx = leave.x + Math.cos(leave.rad) * ($long + 10);
						ny = leave.y + Math.sin(leave.rad) * ($long + 10);
						break;
					case 3:
						$long += 23 * leave.space;
						ny = leave.y - Math.sin(leave.rad) * ($long + 10);
						nx = leave.x - Math.cos(leave.rad) * ($long + 10);
						break;
					case 4:
						$long += 23 * leave.space;
						ny = leave.y - Math.sin(leave.rad) * ($long + 10);
						nx = leave.x - Math.cos(leave.rad) * ($long + 10);
						break;
					case 5:
						$long += 20 * leave.space;
						ny = leave.y;
						nx = leave.x + Math.cos(leave.rad) * ($long + 10);
						break;
					case 6:
						$long += 20 * leave.space;
						ny = leave.y;
						nx = leave.x - Math.cos(leave.rad) * ($long + 10);
						break;
					case 7:
						$long += 20 * leave.space;
						nx = leave.x;
						ny = leave.y + Math.sin(leave.rad) * ($long + 10);
						break;
					case 8:
						$long += 20 * leave.space;
						nx = leave.x;
						ny = leave.y - Math.sin(leave.rad) * ($long + 5);
						break;
					}
					renderer.drawText(leave.annotations[annotation].text,nx,ny,-2,3,0,"start",leave.annotations[annotation].color[0].color);
					data.x = Math.round(nx);
					data.y = Math.round(ny);
					data.width = 7 * leave.annotations[annotation].text.length;
					data.height = 7;
					data.point = 2;
					res = true;
				} else {
					return false;
				}
			}
			break;
		}
		leave.root.screen[leave.root.screen.length] = data;
		return res;
	}
	,addAlfaAnnotation: function(leave,alfaAnnot,annotation,$long,renderer,annotList) {
		var res = false;
		var data;
		var nx;
		var ny;
		nx = 0.0;
		ny = 0.0;
		data = new phylo.PhyloScreenData();
		data.renderer = renderer;
		data.target = leave.name;
		data.isAnnot = true;
		var name = "";
		if(leave.name.indexOf("(") != -1 || leave.name.indexOf("-") != -1) {
			var auxArray = leave.name.split("");
			var j;
			var _g1 = 0;
			var _g = auxArray.length;
			while(_g1 < _g) {
				var j1 = _g1++;
				if(auxArray[j1] == "(" || auxArray[j1] == "-") {
					break;
				}
				name += auxArray[j1];
			}
			data.targetClean = name;
		} else {
			data.targetClean = leave.name;
		}
		data.annot = annotation;
		data.annotation = alfaAnnot;
		data.suboption = alfaAnnot.option;
		var _g2 = annotList[annotation].shape;
		switch(_g2) {
		case "cercle":
			if(leave.activeAnnotation[annotation] == true) {
				if(alfaAnnot.hasAnnot == true) {
					var _g3 = leave.quad;
					switch(_g3) {
					case 1:
						$long += 23 * leave.space;
						nx = leave.x + Math.cos(leave.rad) * ($long + 3);
						ny = leave.y + Math.sin(leave.rad) * ($long + 3);
						break;
					case 2:
						$long += 20 * leave.space;
						nx = leave.x + Math.cos(leave.rad) * ($long + 3);
						ny = leave.y + Math.sin(leave.rad) * ($long + 3);
						break;
					case 3:
						$long += 23 * leave.space;
						ny = leave.y - Math.sin(leave.rad) * ($long + 3);
						nx = leave.x - Math.cos(leave.rad) * ($long + 3);
						break;
					case 4:
						$long += 20 * leave.space;
						ny = leave.y - Math.sin(leave.rad) * ($long + 3);
						nx = leave.x - Math.cos(leave.rad) * ($long + 3);
						break;
					case 5:
						$long += 20 * leave.space;
						ny = leave.y;
						nx = leave.x + Math.cos(leave.rad) * $long;
						break;
					case 6:
						ny = leave.y;
						$long += 20 * leave.space;
						nx = leave.x - Math.cos(leave.rad) * $long;
						break;
					case 7:
						nx = leave.x;
						$long += 20 * leave.space;
						ny = leave.y + Math.sin(leave.rad) * $long;
						break;
					case 8:
						nx = leave.x;
						$long += 20 * leave.space;
						ny = leave.y - Math.sin(leave.rad) * $long;
						break;
					case 9:
						$long += 20 * leave.space;
						$long = $long;
						break;
					}
					if(leave.space == 0) {
						++$long;
					}
					if(leave.quad == 9) {
						renderer.drawCircle(leave.x + $long,leave.y,alfaAnnot.color[0].color);
					} else {
						renderer.drawCircle(nx,ny,alfaAnnot.color[0].color);
					}
					var aux = nx * renderer.scale;
					data.x = Math.round(aux) - 29;
					aux = ny * renderer.scale;
					data.y = Math.round(aux) - 3;
					aux = 10 * renderer.scale;
					data.width = Math.round(aux);
					data.height = Math.round(aux);
					data.point = 4;
					res = true;
				} else {
					return false;
				}
			}
			break;
		case "image":
			if(leave.activeAnnotation[annotation] == true) {
				if(alfaAnnot.hasAnnot == true) {
					if(annotList[annotation].annotImg[alfaAnnot.defaultImg] != null) {
						var _g4 = leave.quad;
						switch(_g4) {
						case 1:
							$long += 20 * leave.space;
							nx = leave.x + Math.cos(leave.rad) * $long;
							ny = leave.y + Math.sin(leave.rad) * $long;
							break;
						case 2:
							$long += 20 * leave.space;
							nx = leave.x - 5 + Math.cos(leave.rad) * $long;
							ny = leave.y - 12 + Math.sin(leave.rad) * $long;
							break;
						case 3:
							$long += 23 * leave.space;
							ny = leave.y - 12 - Math.sin(leave.rad) * $long;
							nx = leave.x - 10 - Math.cos(leave.rad) * $long;
							break;
						case 4:
							$long += 23 * leave.space;
							ny = leave.y - Math.sin(leave.rad) * $long;
							nx = leave.x - 10 - Math.cos(leave.rad) * $long;
							break;
						case 5:
							$long += 20 * leave.space;
							ny = leave.y;
							nx = leave.x + Math.cos(leave.rad) * $long;
							break;
						case 6:
							$long += 20 * leave.space;
							ny = leave.y;
							nx = leave.x - Math.cos(leave.rad) * $long;
							break;
						case 7:
							$long += 20 * leave.space;
							nx = leave.x;
							ny = leave.y + Math.sin(leave.rad) * $long;
							break;
						case 8:
							$long += 20 * leave.space;
							nx = leave.x;
							ny = leave.y - Math.sin(leave.rad) * $long;
							break;
						}
						var imge = annotList[annotation].annotImg[alfaAnnot.defaultImg];
						if(imge != null) {
							if(annotation == 1) {
								renderer.drawImg(nx,ny,imge,1);
							} else {
								renderer.drawImg(nx,ny,imge,0);
							}
							var aux1 = nx * renderer.scale;
							data.x = Math.round(aux1);
							aux1 = ny * renderer.scale;
							data.y = Math.round(aux1);
							aux1 = 14 * renderer.scale;
							data.width = Math.round(aux1);
							aux1 = 14 * renderer.scale;
							data.height = Math.round(aux1);
							data.point = 1;
						}
					}
					res = true;
				} else {
					return false;
				}
			}
			break;
		case "square":
			if(leave.activeAnnotation[annotation] == true) {
				if(alfaAnnot.hasAnnot == true) {
					var _g5 = leave.quad;
					switch(_g5) {
					case 1:
						$long += 23 * leave.space;
						nx = leave.x + Math.cos(leave.rad) * $long;
						ny = leave.y + Math.sin(leave.rad) * $long;
						break;
					case 2:
						$long += 20 * leave.space;
						nx = leave.x + Math.cos(leave.rad) * $long;
						ny = leave.y - 12 + Math.sin(leave.rad) * $long;
						break;
					case 3:
						$long += 23 * leave.space;
						ny = leave.y - 12 - Math.sin(leave.rad) * $long;
						nx = leave.x - 10 - Math.cos(leave.rad) * $long;
						break;
					case 4:
						$long += 20 * leave.space;
						ny = leave.y - Math.sin(leave.rad) * $long;
						nx = leave.x - Math.cos(leave.rad) * $long;
						break;
					case 5:
						$long += 20 * leave.space;
						ny = leave.y;
						nx = leave.x + Math.cos(leave.rad) * $long;
						break;
					case 6:
						$long += 20 * leave.space;
						ny = leave.y;
						nx = leave.x - Math.cos(leave.rad) * $long;
						break;
					case 7:
						nx = leave.x;
						$long += 20 * leave.space;
						ny = leave.y + Math.sin(leave.rad) * $long;
						break;
					case 8:
						nx = leave.x;
						$long += 20 * leave.space;
						ny = leave.y - Math.sin(leave.rad) * $long;
						break;
					}
					if(leave.space == 0) {
						++$long;
					}
					renderer.drawSquare(nx,ny,alfaAnnot.color[0].color);
					data.point = 1;
					var aux2 = nx * renderer.scale;
					data.x = Math.round(aux2);
					aux2 = ny * renderer.scale;
					data.y = Math.round(aux2);
					aux2 = 20 * renderer.scale;
					data.width = Math.round(aux2);
					aux2 = 20 * renderer.scale;
					data.height = Math.round(aux2);
					res = true;
				} else {
					return false;
				}
			}
			break;
		case "text":
			if(leave.activeAnnotation[annotation] == true) {
				if(alfaAnnot.hasAnnot == true) {
					if(alfaAnnot.text == "H4K5/12") {
						var i = 0;
						var u = 0;
						var ii = 0;
					}
					var _g6 = leave.quad;
					switch(_g6) {
					case 1:
						$long += 20 * leave.space;
						nx = leave.x + Math.cos(leave.rad) * ($long + 10);
						ny = leave.y + Math.sin(leave.rad) * ($long + 10);
						break;
					case 2:
						$long += 20 * leave.space;
						nx = leave.x + Math.cos(leave.rad) * ($long + 10);
						ny = leave.y + Math.sin(leave.rad) * ($long + 10);
						break;
					case 3:
						$long += 23 * leave.space;
						ny = leave.y - Math.sin(leave.rad) * ($long + 10);
						nx = leave.x - Math.cos(leave.rad) * ($long + 10);
						break;
					case 4:
						$long += 23 * leave.space;
						ny = leave.y - Math.sin(leave.rad) * ($long + 10);
						nx = leave.x - Math.cos(leave.rad) * ($long + 10);
						break;
					case 5:
						$long += 20 * leave.space;
						ny = leave.y;
						nx = leave.x + Math.cos(leave.rad) * ($long + 10);
						break;
					case 6:
						$long += 20 * leave.space;
						ny = leave.y;
						nx = leave.x - Math.cos(leave.rad) * ($long + 10);
						break;
					case 7:
						$long += 20 * leave.space;
						nx = leave.x;
						ny = leave.y + Math.sin(leave.rad) * ($long + 10);
						break;
					case 8:
						$long += 20 * leave.space;
						nx = leave.x;
						ny = leave.y - Math.sin(leave.rad) * ($long + 5);
						break;
					}
					renderer.drawText(alfaAnnot.text,nx,ny,-2,3,0,"start",alfaAnnot.color[0].color);
					var aux3 = nx * renderer.scale;
					data.x = Math.round(nx);
					data.y = Math.round(ny);
					data.width = 7 * alfaAnnot.text.length;
					data.y = Math.round(ny);
					data.height = 7;
					data.point = 2;
					res = true;
				} else {
					return false;
				}
			}
			break;
		}
		leave.root.screen[leave.root.screen.length] = data;
		return res;
	}
	,updateTreeRectangle: function(x,y,treeNode) {
		var top = Std["int"](treeNode.rectangleTop);
		var right = Std["int"](treeNode.rectangleRight);
		var bottom = Std["int"](treeNode.rectangleBottom);
		var left = Std["int"](treeNode.rectangleLeft);
		x = Std["int"](x);
		y = Std["int"](y);
		if(x < left) {
			treeNode.rectangleLeft = x;
		}
		if(x > right) {
			treeNode.rectangleRight = x;
		}
		if(y < bottom) {
			treeNode.rectangleBottom = y;
		}
		if(y > top) {
			treeNode.rectangleTop = y;
		}
	}
	,__class__: phylo.PhyloRadialTreeLayout
};
phylo.PhyloScreenData = $hxClasses["phylo.PhyloScreenData"] = function() {
	this.suboption = 0;
	this.annotation = new phylo.PhyloAnnotation();
	this.created = false;
	this.divAccessed = false;
};
phylo.PhyloScreenData.__name__ = ["phylo","PhyloScreenData"];
phylo.PhyloScreenData.prototype = {
	point: null
	,x: null
	,y: null
	,parentx: null
	,parenty: null
	,width: null
	,height: null
	,annotation: null
	,created: null
	,target: null
	,targetClean: null
	,annot: null
	,root: null
	,div: null
	,divAccessed: null
	,suboption: null
	,family: null
	,renderer: null
	,isAnnot: null
	,nodeId: null
	,title: null
	,checkMouse: function(mx,my) {
		var scaleX = this.x * this.renderer.scale;
		var scaleY = this.y * this.renderer.scale;
		var scaleWidth = this.width * this.renderer.scale;
		var scaleHeight = this.height * this.renderer.scale;
		var _g = this.point;
		switch(_g) {
		case 1:
			if(mx >= scaleX && mx < scaleX + scaleWidth && my < scaleY + scaleHeight && my >= scaleY) {
				return true;
			} else {
				return false;
			}
			break;
		case 2:
			if(mx >= scaleX && mx < scaleX + scaleWidth && my > scaleY - scaleHeight && my <= scaleY) {
				return true;
			} else {
				return false;
			}
			break;
		case 3:
			scaleWidth = this.width * this.renderer.scale / 2;
			scaleHeight = this.height * this.renderer.scale / 2;
			var inXBoundary = mx >= scaleX && mx < scaleX + scaleWidth || mx <= scaleX && mx > scaleX - scaleWidth;
			var inYBoundary = my > scaleY - scaleHeight && my <= scaleY || my < scaleY + scaleHeight && my > scaleY;
			if(inXBoundary && inYBoundary) {
				return true;
			} else {
				return false;
			}
			break;
		case 4:
			if(mx >= scaleX && mx < scaleX + scaleWidth && my < scaleY + scaleHeight && my >= scaleY) {
				return true;
			} else {
				return false;
			}
			break;
		case 5:
			if(mx + 5 >= scaleX && mx < scaleX + scaleWidth - 5 && my < scaleY + scaleHeight + 5 && my >= scaleY - 5) {
				return true;
			} else {
				return false;
			}
			break;
		default:
			return false;
		}
	}
	,__class__: phylo.PhyloScreenData
};
phylo.PhyloToolBar = $hxClasses["phylo.PhyloToolBar"] = function(canvas,parent) {
	this.positionTop = false;
	this.canvas = canvas;
	this.build();
};
phylo.PhyloToolBar.__name__ = ["phylo","PhyloToolBar"];
phylo.PhyloToolBar.prototype = {
	canvas: null
	,parent: null
	,container: null
	,positionTop: null
	,titleElement: null
	,toolbarContainer: null
	,lineTypeButton: null
	,build: function() {
		if(this.parent == null) {
			this.parent = this.canvas.getContainer();
			this.positionTop = true;
		}
		this.createContainer();
		this.parent.appendChild(this.container);
	}
	,createContainer: function() {
		this.container = js.Browser.get_document().createElement("div");
		if(this.positionTop) {
			this.container.style.position = "absolute";
			this.container.style.top = "15px";
			this.container.style.left = "35px";
		}
		this.createTitleElement();
		this.createToolBar();
	}
	,createTitleElement: function() {
		this.titleElement = js.Browser.get_document().createElement("label");
		this.titleElement.style.color = "#1c66e0";
		this.titleElement.style.fontSize = "19px";
		this.titleElement.style.margin = "10px 0px 0px 0px";
		this.titleElement.style.left = "35px";
		this.setTitle(this.canvas.getConfig().title);
		this.container.appendChild(this.titleElement);
	}
	,createToolBar: function() {
		this.toolbarContainer = js.Browser.get_document().createElement("div");
		this.toolbarContainer.style.marginTop = "10px";
		this.addCenterButton();
		this.addZoomInButton();
		this.addZoomOutButton();
		this.addExportPNGButton();
		this.addExportSVGButton();
		this.addHighlightButton();
		this.addSetLineWidthButton();
		this.addTreeTypeButton();
		this.addTreeLineTypeButton();
		this.addShadowTypeButton();
		this.addAutoFitButton();
		this.container.appendChild(this.toolbarContainer);
	}
	,position: function(element) {
		if(this.canvas.getConfig().verticalToolBar) {
			element.style.display = "block";
			element.style.marginLeft = "0px";
			element.style.marginBottom = "20px";
		} else {
			element.style.display = "inline-block";
		}
	}
	,addCenterButton: function() {
		var _gthis = this;
		var button = js.Browser.get_document().createElement("button");
		this.position(button);
		button.style.backgroundImage = "url(js/images/center-single.png)";
		button.style.backgroundRepeat = "no-repeat";
		button.style.backgroundPosition = "center center";
		button.style.backgroundSize = "30px";
		button.style.height = "25px";
		button.style.width = "25px";
		button.style.backgroundColor = "initial";
		button.style.border = "none";
		button.style.cursor = "pointer";
		button.style.marginRight = "20px";
		button.addEventListener("click",function() {
			_gthis.canvas.center();
		});
		this.toolbarContainer.appendChild(button);
	}
	,addZoomInButton: function() {
		var _gthis = this;
		var button = js.Browser.get_document().createElement("button");
		this.position(button);
		button.style.backgroundImage = "url(js/images/mag_plus-single.png)";
		button.style.backgroundRepeat = "no-repeat";
		button.style.backgroundPosition = "center center";
		button.style.height = "25px";
		button.style.width = "25px";
		button.style.backgroundColor = "initial";
		button.style.border = "none";
		button.style.cursor = "pointer";
		button.style.marginRight = "20px";
		button.addEventListener("click",function() {
			_gthis.canvas.zoomIn();
		});
		this.toolbarContainer.appendChild(button);
	}
	,addZoomOutButton: function() {
		var _gthis = this;
		var button = js.Browser.get_document().createElement("button");
		this.position(button);
		button.style.backgroundImage = "url(js/images/mag_minus-single.png)";
		button.style.backgroundRepeat = "no-repeat";
		button.style.backgroundPosition = "center center";
		button.style.height = "25px";
		button.style.width = "25px";
		button.style.backgroundColor = "initial";
		button.style.border = "none";
		button.style.cursor = "pointer";
		button.style.marginRight = "20px";
		button.addEventListener("click",function() {
			_gthis.canvas.zoomOut();
		});
		this.toolbarContainer.appendChild(button);
	}
	,addExportPNGButton: function() {
		var _gthis = this;
		var button = js.Browser.get_document().createElement("button");
		this.position(button);
		button.style.backgroundImage = "url(js/images/png-single.png)";
		button.style.backgroundRepeat = "no-repeat";
		button.style.backgroundPosition = "center center";
		button.style.height = "25px";
		button.style.width = "25px";
		button.style.backgroundColor = "initial";
		button.style.border = "none";
		button.style.cursor = "pointer";
		button.style.marginRight = "20px";
		button.addEventListener("click",function() {
			_gthis.canvas.exportPNGToFile();
		});
		this.toolbarContainer.appendChild(button);
	}
	,addExportSVGButton: function() {
		var _gthis = this;
		var button = js.Browser.get_document().createElement("button");
		this.position(button);
		button.style.backgroundImage = "url(js/images/svg-single.png)";
		button.style.backgroundRepeat = "no-repeat";
		button.style.backgroundPosition = "center center";
		button.style.height = "25px";
		button.style.width = "25px";
		button.style.backgroundColor = "initial";
		button.style.border = "none";
		button.style.cursor = "pointer";
		button.style.marginRight = "20px";
		button.addEventListener("click",function() {
			_gthis.canvas.exportSVGToFile();
		});
		this.toolbarContainer.appendChild(button);
	}
	,addHighlightButton: function() {
		var _gthis = this;
		var button = js.Browser.get_document().createElement("button");
		this.position(button);
		button.style.backgroundImage = "url(js/images/hightlight-single.png)";
		button.style.backgroundRepeat = "no-repeat";
		button.style.backgroundPosition = "center center";
		button.style.backgroundSize = "30px";
		button.style.height = "25px";
		button.style.width = "25px";
		button.style.backgroundColor = "initial";
		button.style.border = "none";
		button.style.cursor = "pointer";
		button.style.marginRight = "20px";
		button.addEventListener("click",function() {
			_gthis.canvas.showHighlightDialog();
		});
		this.toolbarContainer.appendChild(button);
	}
	,setTitle: function(title) {
		this.titleElement.innerText = title;
	}
	,addSetLineWidthButton: function() {
		var _gthis = this;
		var inputLabel = js.Browser.get_document().createElement("label");
		inputLabel.setAttribute("for","tree_line_width");
		inputLabel.innerText = "Pen width";
		inputLabel.style.padding = "2px";
		inputLabel.style.display = "inline-block";
		var inputElement = js.Browser.get_document().createElement("input");
		inputElement.setAttribute("type","text");
		inputElement.style.width = "30px";
		inputElement.setAttribute("value","1");
		inputElement.style.padding = "2px";
		inputElement.style.marginLeft = "5px";
		this.position(inputElement);
		inputElement.addEventListener("input",function(e) {
			_gthis.canvas.setLineWidth(Std.parseFloat(inputElement.value));
		});
		this.toolbarContainer.appendChild(inputLabel);
		this.toolbarContainer.appendChild(inputElement);
	}
	,addTreeTypeButton: function() {
		var _gthis = this;
		var button = js.Browser.get_document().createElement("button");
		this.position(button);
		button.innerText = "Toggle Type";
		button.style.border = "1px solid #c1c1c1";
		button.style.cursor = "pointer";
		button.style.padding = "3px 6px";
		button.style.marginLeft = "25px";
		button.style.marginRight = "25px";
		this.position(button);
		button.addEventListener("click",function() {
			_gthis.canvas.toggleType();
		});
		this.toolbarContainer.appendChild(button);
	}
	,addTreeLineTypeButton: function() {
		var _gthis = this;
		var button = js.Browser.get_document().createElement("button");
		button.innerText = "Toggle Line Type";
		button.style.border = "1px solid #c1c1c1";
		button.style.cursor = "pointer";
		button.style.padding = "3px 6px";
		button.style.marginRight = "25px";
		this.position(button);
		button.addEventListener("click",function() {
			_gthis.canvas.toggleLineMode();
		});
		this.toolbarContainer.appendChild(button);
		this.lineTypeButton = button;
	}
	,setLineTypeButtonVisible: function(visible) {
		if(visible) {
			this.position(this.lineTypeButton);
		} else {
			this.lineTypeButton.style.display = "none";
		}
	}
	,addShadowTypeButton: function() {
		var _gthis = this;
		var shadowInputColourLabel = js.Browser.get_document().createElement("label");
		shadowInputColourLabel.innerText = "Shadow colour";
		this.toolbarContainer.appendChild(shadowInputColourLabel);
		var shadowInputColour = js.Browser.get_document().createElement("input");
		var removeShadowButton = js.Browser.get_document().createElement("button");
		shadowInputColour.style.marginLeft = "5px";
		shadowInputColour.setAttribute("type","color");
		shadowInputColour.setAttribute("name","shadow_colour_input");
		shadowInputColour.style.width = "50px";
		shadowInputColour.addEventListener("change",function() {
			_gthis.canvas.setShadowColour(shadowInputColour.value);
		});
		removeShadowButton.innerText = "Toggle Shadow";
		removeShadowButton.style.border = "1px solid #c1c1c1";
		removeShadowButton.style.cursor = "pointer";
		removeShadowButton.style.padding = "3px 6px";
		removeShadowButton.style.marginLeft = "25px";
		this.position(shadowInputColour);
		this.position(removeShadowButton);
		removeShadowButton.addEventListener("click",function() {
			_gthis.canvas.toggleShadow();
		});
		this.toolbarContainer.appendChild(shadowInputColour);
		this.toolbarContainer.appendChild(removeShadowButton);
	}
	,addAutoFitButton: function() {
		var _gthis = this;
		var button = js.Browser.get_document().createElement("button");
		button.innerText = "Fit";
		button.style.border = "1px solid #c1c1c1";
		button.style.cursor = "pointer";
		button.style.padding = "3px 6px";
		button.style.marginLeft = "25px";
		this.position(button);
		button.addEventListener("click",function() {
			_gthis.canvas.autoFit();
		});
		this.toolbarContainer.appendChild(button);
	}
	,__class__: phylo.PhyloToolBar
};
phylo.PhyloTooltipWidget = $hxClasses["phylo.PhyloTooltipWidget"] = function(parent,message,title) {
	phylo.PhyloInfoWidget.call(this,parent,message,title);
	this.container.className = "icons-tooltip";
};
phylo.PhyloTooltipWidget.__name__ = ["phylo","PhyloTooltipWidget"];
phylo.PhyloTooltipWidget.__super__ = phylo.PhyloInfoWidget;
phylo.PhyloTooltipWidget.prototype = $extend(phylo.PhyloInfoWidget.prototype,{
	addContent: function() {
		phylo.PhyloInfoWidget.prototype.addContent.call(this);
		this.addConfirmationCheckbox();
	}
	,addConfirmationCheckbox: function() {
		var checkbox = js.Browser.get_document().createElement("div");
		checkbox.setAttribute("class","icons-tooltip-checkbox");
		var label = js.Browser.get_document().createElement("label");
		label.innerHTML = "Do not show this message again";
		var input = js.Browser.get_document().createElement("input");
		input.setAttribute("type","checkbox");
		this.content.appendChild(checkbox);
		checkbox.appendChild(label);
		checkbox.appendChild(input);
		input.addEventListener("change",function(event) {
			if(input.checked) {
				var cookies = Cookies;
				cookies.set("annot-icons-tip",true);
			}
		});
	}
	,__class__: phylo.PhyloTooltipWidget
});
phylo.PhyloTreeNode = $hxClasses["phylo.PhyloTreeNode"] = function(parent,name,leaf,branch) {
	this.wedgeColour = null;
	this.maxNameLength = -1;
	this.angle_new = 0;
	this.lineMode = phylo.LineMode.STRAIGHT;
	this.lineWidth = 1;
	this.yRandom = null;
	this.xRandom = null;
	this.maxBranch = null;
	this.minBranch = null;
	this.numchild = 0;
	this.leaves = 0;
	this.ratio = 0.00006;
	this.dist = 50;
	this.space = 0;
	this.parent = parent;
	this.children = [];
	this.name = name;
	this.leaf = leaf;
	this.branch = branch;
	if(this.parent != null) {
		this.parent.addChild(this);
		this.root = this.parent.root;
	} else {
		this.targets = [];
		this.root = this;
		this.screen = [];
		this.divactive = 99999;
		this.leafNameToNode = new haxe.ds.StringMap();
		this.nodeIdToNode = new haxe.ds.IntMap();
	}
	this.angle = 0;
	this.x = 0;
	this.y = 0;
	this.wedge = 0;
	this.length = 0;
	this.targetFamilyGene = [];
	this.l = 0;
};
phylo.PhyloTreeNode.__name__ = ["phylo","PhyloTreeNode"];
phylo.PhyloTreeNode.prototype = {
	parent: null
	,nodeId: null
	,name: null
	,targetFamily: null
	,targetFamilyGene: null
	,leaf: null
	,branch: null
	,angle: null
	,x: null
	,y: null
	,wedge: null
	,length: null
	,l: null
	,root: null
	,rad: null
	,quad: null
	,annotations: null
	,activeAnnotation: null
	,targets: null
	,screen: null
	,divactive: null
	,space: null
	,colour: null
	,children: null
	,dist: null
	,ratio: null
	,leaves: null
	,numchild: null
	,leafNameToNode: null
	,nodeIdToNode: null
	,rectangleTop: null
	,rectangleRight: null
	,rectangleBottom: null
	,rectangleLeft: null
	,results: null
	,minBranch: null
	,maxBranch: null
	,xRandom: null
	,yRandom: null
	,lineWidth: null
	,lineMode: null
	,angle_new: null
	,maxNameLength: null
	,wedgeColour: null
	,newickString: null
	,fasta: null
	,postOrderTraversal: function() {
		if(this.isLeaf() == true) {
			this.l = 1;
			this.root.targets[this.root.leaves] = this.name;
			this.root.leaves += 1;
			this.annotations = [];
			this.activeAnnotation = [];
			this.root.leafNameToNode.set(this.name,this);
		} else {
			var i = 0;
			while(i < this.children.length) {
				this.children[i].postOrderTraversal();
				this.l += this.children[i].l;
				++i;
			}
		}
	}
	,preOrderTraversal2: function(mode) {
		if(this.parent != null) {
			var parent = this.parent;
			this.x = parent.x + Math.cos(this.angle + this.wedge / 2) * this.root.dist;
			this.y = parent.y + Math.sin(this.angle + this.wedge / 2) * this.root.dist;
			if(mode == 1) {
				this.nodeId = this.root.numchild;
				this.root.nodeIdToNode.set(this.nodeId,this);
			}
		} else if(mode == 1) {
			this.nodeId = 0;
		}
		var n = this.angle;
		var i = 0;
		while(i < this.children.length) {
			if(mode == 1) {
				this.root.numchild += 1;
			}
			this.children[i].wedge = this.children[i].l / this.children[i].root.l * 2 * Math.PI + Math.PI / 50;
			this.children[i].angle = n;
			n += this.children[i].wedge;
			this.children[i].preOrderTraversal2(mode);
			++i;
		}
	}
	,areAllChildrenLeaf: function() {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(!child.isLeaf()) {
				return false;
			}
		}
		return true;
	}
	,preOrderTraversal: function(mode) {
		if(this.parent != null) {
			if(mode == 1) {
				this.nodeId = this.root.numchild;
				this.root.nodeIdToNode.set(this.nodeId,this);
			}
			var a = this.getDepth() * this.root.ratio;
			if(this.angle > this.parent.angle) {
				this.angle += phylo.PhyloHubMath.degreesToRadians(a);
			} else {
				this.angle -= phylo.PhyloHubMath.degreesToRadians(a);
			}
			this.angle_new = this.angle + this.wedge / 2;
			this.x = this.parent.x + Math.cos(this.angle_new) * this.root.dist;
			this.y = this.parent.y + Math.sin(this.angle_new) * this.root.dist;
		} else if(mode == 1) {
			this.nodeId = 0;
		}
		var n = this.angle;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(mode == 1) {
				this.root.numchild += 1;
			}
			child.wedge = 2 * Math.PI * child.getLeafCount() / child.root.getLeafCount();
			child.angle = n;
			child.angle_new = child.angle + child.wedge / 2;
			n += child.wedge;
			child.preOrderTraversal(mode);
		}
	}
	,calculateScale: function() {
		if(this.branch != null) {
			if(this.root.maxBranch == null || this.branch > this.root.maxBranch) {
				this.root.maxBranch = this.branch;
			}
			if(this.root.minBranch == null || this.branch < this.root.minBranch) {
				this.root.minBranch = this.branch;
			}
		}
		var _g1 = 0;
		var _g = this.children.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.children[i].calculateScale();
		}
	}
	,getChildren: function() {
		return this.children;
	}
	,getChildN: function(i) {
		return this.children[i];
	}
	,addChild: function(child) {
		this.children[this.children.length] = child;
	}
	,isLeaf: function() {
		return this.leaf;
	}
	,getLeafCount: function() {
		if(this.isLeaf() == true) {
			return 1;
		} else {
			var total = 0;
			var i = 0;
			var _g1 = 0;
			var _g = this.children.length;
			while(_g1 < _g) {
				var i1 = _g1++;
				total += this.children[i1].getLeafCount();
			}
			return total;
		}
	}
	,getDepth: function() {
		if(this.parent == null) {
			return 0;
		} else {
			return 1 + this.parent.getDepth();
		}
	}
	,getHeight: function() {
		if(this.isLeaf()) {
			return 0;
		} else {
			var heightList = [];
			var i = 0;
			var _g1 = 0;
			var _g = this.children.length;
			while(_g1 < _g) {
				var i1 = _g1++;
				heightList[i1] = this.children[i1].getHeight() + 1;
			}
			return phylo.PhyloHubMath.getMaxOfArray(heightList);
		}
	}
	,getMaximumLeafNameLength: function(renderer) {
		if(this.maxNameLength != -1) {
			return this.maxNameLength;
		}
		var nodes = [];
		nodes.push(this);
		this.maxNameLength = 0;
		var maxName = "";
		var _g = 0;
		while(_g < nodes.length) {
			var node = nodes[_g];
			++_g;
			if(node.isLeaf()) {
				var nodeNameLength = node.name.length;
				if(nodeNameLength > this.maxNameLength) {
					this.maxNameLength = nodeNameLength;
					maxName = node.name;
				}
			} else {
				var _g1 = 0;
				var _g2 = node.children;
				while(_g1 < _g2.length) {
					var child = _g2[_g1];
					++_g1;
					nodes.push(child);
				}
			}
		}
		if(renderer != null) {
			this.maxNameLength = renderer.mesureText(maxName);
		}
		return this.maxNameLength;
	}
	,findFirstLeaf: function() {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.isLeaf()) {
				return child;
			} else {
				return child.findFirstLeaf();
			}
		}
		return null;
	}
	,findLastLeaf: function() {
		var lastChild = null;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.isLeaf()) {
				lastChild = child;
			} else {
				lastChild = child.findLastLeaf();
			}
		}
		return lastChild;
	}
	,setLineWidth: function(width) {
		this.lineWidth = width;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.setLineWidth(width);
		}
	}
	,setLineMode: function(mode) {
		this.lineMode = mode;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.setLineMode(mode);
		}
	}
	,rotateNode: function(clockwise,drawingMode) {
		var delta = -0.3;
		if(clockwise) {
			delta = 0.3;
		}
		this.x = (this.x - this.parent.x) * Math.cos(delta) - (this.y - this.parent.y) * Math.sin(delta) + this.parent.x;
		this.y = (this.x - this.parent.x) * Math.sin(delta) + (this.y - this.parent.y) * Math.cos(delta) + this.parent.y;
		var n = this.angle += delta;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.wedge = child.l / this.root.l * 2 * Math.PI + Math.PI / 20;
			child.angle = n;
			n += child.wedge;
			if(drawingMode == phylo.PhyloDrawingMode.STRAIGHT) {
				child.preOrderTraversal2(0);
			} else if(drawingMode == phylo.PhyloDrawingMode.CIRCULAR) {
				child.preOrderTraversal(0);
			}
		}
	}
	,clearAnnotations: function() {
		this.annotations = [];
		if(this.activeAnnotation != null) {
			var _g1 = 0;
			var _g = this.activeAnnotation.length;
			while(_g1 < _g) {
				var i = _g1++;
				this.activeAnnotation[i] = false;
			}
		}
		var _g2 = 0;
		var _g11 = this.children;
		while(_g2 < _g11.length) {
			var child = _g11[_g2];
			++_g2;
			child.clearAnnotations();
		}
	}
	,getNewickString: function() {
		return this.newickString;
	}
	,setFasta: function(fasta) {
		this.fasta = fasta;
	}
	,getFasta: function() {
		return this.fasta;
	}
	,__class__: phylo.PhyloTreeNode
};
phylo.LineMode = $hxClasses["phylo.LineMode"] = { __ename__ : ["phylo","LineMode"], __constructs__ : ["STRAIGHT","BEZIER"] };
phylo.LineMode.STRAIGHT = ["STRAIGHT",0];
phylo.LineMode.STRAIGHT.toString = $estr;
phylo.LineMode.STRAIGHT.__enum__ = phylo.LineMode;
phylo.LineMode.BEZIER = ["BEZIER",1];
phylo.LineMode.BEZIER.toString = $estr;
phylo.LineMode.BEZIER.__enum__ = phylo.LineMode;
phylo.PhyloUtil = $hxClasses["phylo.PhyloUtil"] = function() {
};
phylo.PhyloUtil.__name__ = ["phylo","PhyloUtil"];
phylo.PhyloUtil.drawRadialFromNewick = function(newickStr,parent,config,annotationManager) {
	var parser = new phylo.PhyloNewickParser();
	var rootNode = parser.parse(newickStr);
	return phylo.PhyloUtil.drawRadialFromTree(rootNode,parent,config,annotationManager);
};
phylo.PhyloUtil.drawRadialFromTree = function(rootNode,parent,config,annotationManager) {
	rootNode.calculateScale();
	rootNode.postOrderTraversal();
	rootNode.preOrderTraversal(1);
	var parentWidth = parent.clientWidth;
	var parentHeight = parent.clientHeight;
	if(config == null) {
		config = new phylo.PhyloCanvasConfiguration();
	}
	var canvas = new phylo.PhyloCanvasRenderer(parentWidth,parentHeight,parent,rootNode,config,annotationManager);
	return canvas;
};
phylo.PhyloUtil.showMessage = function(message,title) {
	var dialog = new phylo.PhyloInfoWidget(js.Browser.get_document().body,message,title);
};
phylo.PhyloUtil.prototype = {
	__class__: phylo.PhyloUtil
};
var saturn = saturn || {};
if(!saturn.client) saturn.client = {};
saturn.client.WorkspaceApplication = $hxClasses["saturn.client.WorkspaceApplication"] = function(applicationTitle,navigationTitle,southTitle,detailsTitle,tabContainerTitle,searchBarTitle,nakedMode) {
	this.alwaysShowProgressWindow = false;
	this.progressWindow = null;
	this.screenMode = saturn.client.ScreenMode.DEFAULT;
	this.qtSaveFileContents = null;
	this.isInQtWebEngine = false;
	saturn.client.WorkspaceApplication.setApplication(this);
	this.nakedMode = nakedMode;
	this.theClipBoard = new saturn.client.ClipBoard();
	this.printBuffer = new StringBuf();
	this.searchBarListeners = [];
	this.outlineListeners = [];
	this.theProgramRegistry = new saturn.client.ProgramRegistry();
	this.applicationTitle = applicationTitle;
	this.navigationTitle = navigationTitle;
	this.southTitle = southTitle;
	this.detailsTitle = detailsTitle;
	this.tabContainerTitle = tabContainerTitle;
	this.searchBarTitle = searchBarTitle;
	this.programIdToTab = new haxe.ds.StringMap();
	debug.enable("haxe:app");
	this.debugLogger = debug("haxe:app");
	this.clientCore = saturn.client.core.ClientCore.startClientCore();
	this.clientCore.onProviderUp($bind(this,this.onProviderUp));
	this.clientCore.setShowMessage($bind(this,this.showMessage));
	this.clientCore.refreshSession(null);
};
saturn.client.WorkspaceApplication.__name__ = ["saturn","client","WorkspaceApplication"];
saturn.client.WorkspaceApplication.theApplication = null;
saturn.client.WorkspaceApplication.getApplication = function() {
	return saturn.client.WorkspaceApplication.theApplication;
};
saturn.client.WorkspaceApplication.setApplication = function(application) {
	saturn.client.WorkspaceApplication.theApplication = application;
};
saturn.client.WorkspaceApplication.resumeUpdates = function(b,force) {
	if(force == null) {
		force = false;
	}
	if(force) {
		saturn.client.WorkspaceApplication.layoutsSuspended = 0;
	} else {
		saturn.client.WorkspaceApplication.layoutsSuspended--;
	}
	if(saturn.client.WorkspaceApplication.layoutsSuspended == 0) {
		Ext.resumeLayouts(b);
	}
};
saturn.client.WorkspaceApplication.suspendUpdates = function(force) {
	if(force == null) {
		force = false;
	}
	saturn.client.WorkspaceApplication.layoutsSuspended++;
	if(saturn.client.WorkspaceApplication.layoutsSuspended == 0 || force) {
		Ext.suspendLayouts();
	}
};
saturn.client.WorkspaceApplication.updatesSuspended = function() {
	return saturn.client.WorkspaceApplication.layoutsSuspended > 0;
};
saturn.client.WorkspaceApplication.prototype = {
	theWorkspace: null
	,theProgramRegistry: null
	,applicationTitle: null
	,navigationTitle: null
	,southTitle: null
	,detailsTitle: null
	,tabContainerTitle: null
	,searchBarTitle: null
	,printBuffer: null
	,programIdToTab: null
	,theActiveProgram: null
	,searchBarListeners: null
	,outlineListeners: null
	,nakedMode: null
	,theClipBoard: null
	,debugLogger: null
	,rawQtChannel: null
	,isInQtWebEngine: null
	,qtSaveFileContents: null
	,fileHostCB: null
	,screenMode: null
	,progressWindow: null
	,alwaysShowProgressWindow: null
	,clientCore: null
	,onProviderUp: function() {
		this.clientCore.addUpdateListener($bind(this,this.updateProgress));
		this.clientCore.addRefreshListener($bind(this,this.refreshSession));
		this.createProgressWindow();
		this.checkBrowser();
	}
	,refreshSession: function() {
		this.getWorkspace().installRemoteWorkspaceStore();
	}
	,checkBrowser: function() {
		if(js.Browser.get_navigator().userAgent.indexOf("QtWebEngine") > -1) {
			this.isInQtWebEngine = true;
			this.loadQtLibrary();
		}
	}
	,isHostEnvironmentAvailable: function() {
		return this.isInQtWebEngine;
	}
	,makeAliasesAvailable: function() {
		var dwin = js.Browser.get_window();
		dwin.models = { };
		var pack = saturn.core.domain;
		var _g = 0;
		var _g1 = Reflect.fields(pack);
		while(_g < _g1.length) {
			var field = _g1[_g];
			++_g;
			var qualifiedName = "saturn.core.domain." + field;
			var clazz = Type.resolveClass(qualifiedName);
			if(clazz != null) {
				Reflect.setField(dwin,field,clazz);
				var model = this.getProvider().getModel(clazz);
				if(model != null) {
					Reflect.setField(dwin.models,field,{ });
					saturn.core.Util.debug("Alias " + qualifiedName + " created");
					var _g2 = 0;
					var _g3 = model.getAttributes();
					while(_g2 < _g3.length) {
						var modelField = _g3[_g2];
						++_g2;
						Reflect.setField(Reflect.field(dwin.models,field),modelField,new saturn.db.query_lang.Field(clazz,modelField));
					}
				}
			}
		}
		var pack1 = saturn.db.query_lang;
		var _g4 = 0;
		var _g11 = Reflect.fields(pack1);
		while(_g4 < _g11.length) {
			var field1 = _g11[_g4];
			++_g4;
			if(field1 == "Function") {
				continue;
			}
			var qualifiedName1 = "saturn.db.query_lang." + field1;
			var clazz1 = Type.resolveClass(qualifiedName1);
			if(clazz1 != null) {
				saturn.core.Util.debug("Alias " + field1 + " created");
				Reflect.setField(dwin,field1,clazz1);
			} else {
				saturn.core.Util.debug("Skipping " + qualifiedName1);
			}
		}
	}
	,setProvider: function(provider) {
		saturn.client.core.CommonCore.setDefaultProvider(provider,null,true);
	}
	,getProvider: function() {
		return saturn.client.core.CommonCore.getDefaultProvider();
	}
	,getActiveProgramId: function() {
		if(this.theActiveProgram != null) {
			return this.theActiveProgram.getId();
		} else {
			return "-1";
		}
	}
	,installOutlineTree: function(name,enableDrop,enableContainerDrop,modelName,mode) {
		if(mode == null) {
			mode = "STANDARD";
		}
	}
	,cleanEnvironment: function() {
		js.Browser.get_window().console.log("Cleaning!");
		saturn.client.WorkspaceApplication.suspendUpdates();
		this.destroyMenu();
		this.destroyToolBar();
		this.createToolBar();
		this.createMenuBar();
		this.populateNewMenu();
		this.clearDetailsPanel();
		this.clearSouthPanel();
		this.clearProgramSearchField();
		saturn.client.WorkspaceApplication.resumeUpdates(true);
	}
	,destroyToolBar: function() {
		js.Browser.get_window().console.log("Destroying tool bar");
	}
	,createToolBar: function() {
	}
	,getToolBar: function() {
		return null;
	}
	,onkeyup: function(event) {
	}
	,onkeydown: function(event) {
	}
	,setActiveProgram: function(program) {
		if(program == null) {
			this.theActiveProgram = null;
			return;
		}
		if(this.theActiveProgram != null && this.theActiveProgram == program) {
			return;
		}
		var programId = Std.string(program.getId());
		if(this.programIdToTab.exists(programId)) {
			var tab = this.programIdToTab.get(programId);
			if(this.theActiveProgram != null) {
				if(this.theActiveProgram != program) {
					if(!this.theActiveProgram.isClosed()) {
						this.theActiveProgram.onBlur();
						this.theActiveProgram.onBlurNotifyPlugins();
						this.cleanEnvironment();
					}
				}
			}
			if(this.theActiveProgram == null || this.theActiveProgram != program) {
				this.theActiveProgram = program;
				if(saturn.client.WorkspaceApplication.getApplication().isNaked() == false) {
					this.getTabContainer().setActiveTab(tab);
				}
				program.focusProgram();
			}
		} else {
			throw new js._Boot.HaxeError(new saturn.util.HaxeException("Program with ID " + programId + " is not known to the main application"));
		}
	}
	,getProgramTab: function(program) {
		return this.programIdToTab.get(program.getId());
	}
	,setProgramTabTitle: function(program,title) {
		var tab = this.getProgramTab(program);
		tab.tab.setText(title);
	}
	,getActiveProgram: function() {
		return this.theActiveProgram;
	}
	,addProgram: function(program,active) {
		if(program.getId() == null) {
			this.getWorkspace().registerProgram(program);
		} else {
			var prog = program.getComponent();
			var self = this;
			prog.tabConfig = { listeners : { afterrender : function(tabHeader,b) {
				var contextMenu = function(event) {
					var contextMenu1 = Ext.create("Ext.menu.Menu",{ items : [{ text : "Close", handler : function() {
						self.getWorkspace().closeObject(prog.parentBuildingBlock.getActiveObjectId());
					}},{ text : "Close & Delete", handler : function() {
						self.getWorkspace().closeObjectAndDelete(prog.parentBuildingBlock.getActiveObjectId());
					}},{ text : "Close All", handler : function() {
						self.getWorkspace().closeAllObjects();
					}},{ text : "Close Others", handler : function() {
						self.getWorkspace().closeOtherObjects(prog.parentBuildingBlock.getActiveObjectId());
					}}]});
					contextMenu1.showAt(event.clientX,event.clientY);
					event.preventDefault();
				};
				tabHeader.el.dom.onmouseup = function(event1) {
					if(event1.ctrlKey) {
						contextMenu(event1);
					}
				};
				tabHeader.el.dom.oncontextmenu = contextMenu;
			}}};
			var tab = this.getTabContainer().add(prog);
			tab.parentBuildingBlock = program;
			this.programIdToTab.set(program.getId(),tab);
			if(active && !this.getWorkspace().isReloading()) {
				this.setActiveProgram(program);
			}
		}
	}
	,addSaveAsOptions: function() {
	}
	,closeProgram: function(program) {
		program.close();
		if(!this.getWorkspace().isReloading()) {
			this.cleanEnvironment();
		}
		var tab = this.programIdToTab.get(program.getId());
		this.getTabContainer().remove(tab);
		this.programIdToTab.remove(program.getId());
	}
	,getProgramRegistry: function() {
		return this.theProgramRegistry;
	}
	,initApplication: function() {
		this.createCentralPanel();
		this.createSearchBar(this.searchBarTitle);
		this.createMenuBar();
		this.createNavigationPanel(this.navigationTitle);
		this.createMiddleSouthPanel(this.southTitle);
		this.createSouthPanel(this.southTitle);
		this.createDetailsPanel(this.detailsTitle);
		this.createTabContainer(this.tabContainerTitle);
		this.createCentralInfoPanel();
		this.registerPrograms();
		this.populateNewMenu();
		var quickLaunchItems = this.getProgramRegistry().getQuickLaunchItems();
		var _g = 0;
		while(_g < quickLaunchItems.length) {
			var quickLaunchItem = quickLaunchItems[_g];
			++_g;
			this.getQuickLaunchBar().add(quickLaunchItem);
		}
	}
	,createMenuBar: function() {
	}
	,destroyMenu: function() {
	}
	,createNavigationPanel: function(navigationTitle) {
	}
	,createMiddleSouthPanel: function(southTitle) {
	}
	,createSouthPanel: function(southTitle) {
	}
	,createDetailsPanel: function(detailsTitle) {
	}
	,clearDetailsPanel: function() {
	}
	,clearSouthPanel: function() {
	}
	,createTabContainer: function(tabContainerTitle) {
	}
	,createCentralPanel: function() {
	}
	,createCentralInfoPanel: function() {
	}
	,setCentralInfoPanelText: function(txt) {
	}
	,registerPrograms: function() {
	}
	,createSearchBar: function(searchBarTitle) {
	}
	,populateNewMenu: function() {
		var shortNames = this.getProgramRegistry().getRegisteredWorkspaceObjectShortNames();
		var menuItems = [];
		var menuTextToShortName = new haxe.ds.StringMap();
		var shortName = shortNames.keys();
		while(shortName.hasNext()) {
			var shortName1 = shortName.next();
			var clazzName = shortNames.get(shortName1);
			var clazz = Type.resolveClass(clazzName);
			var newText = null;
			var model = this.getProvider().getModel(clazz);
			if(model != null) {
				newText = model.getFileNewLabel();
			}
			if(newText != null) {
				menuTextToShortName.set(newText,shortName1);
				menuItems.push(newText);
			}
		}
		menuItems.sort(function(a,b) {
			a = a.toLowerCase();
			b = b.toLowerCase();
			if(a < b) {
				return -1;
			}
			if(a > b) {
				return 1;
			}
			return 0;
		});
		var _g = 0;
		while(_g < menuItems.length) {
			var menuItem = menuItems[_g];
			++_g;
			var shortName2 = menuTextToShortName.get(menuItem);
			var clazzName1 = shortNames.get(shortName2);
			this.addNewMenuItem(menuItem,clazzName1);
		}
		this.addSaveMenuItem();
		this.addOpenDefaultWorkspaceMenuItem();
		this.addSaveWorkspaceMenuItem();
		this.addSaveWorkspaceAsMenuItem();
		this.addOpenSavedWorkspaceMenuItem();
	}
	,addNewMenuItem: function(shortName,clazzName) {
	}
	,addSaveMenuItem: function() {
	}
	,addSaveWorkspaceMenuItem: function() {
	}
	,addOpenDefaultWorkspaceMenuItem: function() {
	}
	,addSaveWorkspaceAsMenuItem: function() {
	}
	,addOpenSavedWorkspaceMenuItem: function() {
	}
	,getWorkspace: function() {
		return this.theWorkspace;
	}
	,getFileNewMenu: function() {
		return null;
	}
	,getFileMenu: function() {
		return null;
	}
	,getToolsMenu: function() {
		return null;
	}
	,getExportMenu: function() {
		return null;
	}
	,getImportMenu: function() {
		return null;
	}
	,getUpdateMenu: function() {
		return null;
	}
	,getWorkspaceExportMenu: function() {
		return null;
	}
	,getViewMenu: function() {
		return null;
	}
	,getEditMenu: function() {
		return null;
	}
	,getOpenMenu: function() {
		return null;
	}
	,getSaveMenu: function() {
		return null;
	}
	,getSaveAsMenu: function() {
		return null;
	}
	,getMenuBar: function() {
		return null;
	}
	,getNavigationPanel: function() {
		return null;
	}
	,getMiddleSouthPanel: function() {
		return null;
	}
	,getOultineTree: function(name) {
		return null;
	}
	,getOutlineDataStore: function(name) {
		return null;
	}
	,getDetailsPanel: function() {
		return null;
	}
	,getTabContainer: function() {
		return null;
	}
	,getOutlineTree: function(name) {
		return null;
	}
	,printInfo: function(message) {
	}
	,isNaked: function() {
		return this.nakedMode;
	}
	,getEastPanel: function() {
		return null;
	}
	,addSearchBarListener: function(listener) {
		this.searchBarListeners.unshift(listener);
	}
	,removeSearchBarListeners: function(listener) {
		HxOverrides.remove(this.searchBarListeners,listener);
	}
	,fireSearchObjectSelected: function(objSelected) {
		var _gthis = this;
		var it = HxOverrides.iter(this.searchBarListeners);
		it.realNext = it.next;
		var next = function() {
			if(it.hasNext()) {
				var listener = it.realNext();
				listener.objectSelected(_gthis,objSelected,it);
			}
		};
		it.next = next;
		it.next();
	}
	,fireSearchTermChanged: function(searchTerm) {
		var _gthis = this;
		var it = HxOverrides.iter(this.searchBarListeners);
		it.realNext = it.next;
		var next = function() {
			if(it.hasNext()) {
				var listener = it.realNext();
				listener.textChanged(_gthis,searchTerm,it);
			}
		};
		it.next = next;
		it.next();
	}
	,addOutlineListener: function(listener) {
		var _g = 0;
		var _g1 = this.outlineListeners;
		while(_g < _g1.length) {
			var eListener = _g1[_g];
			++_g;
			if(listener == eListener) {
				return;
			}
		}
		this.outlineListeners.unshift(listener);
	}
	,removeOutlineListener: function(listener) {
		HxOverrides.remove(this.outlineListeners,listener);
	}
	,fireOutlineItemClicked: function(view,rec,item,index) {
		var _g = 0;
		var _g1 = this.outlineListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener.onClick(view,rec,item,index);
		}
	}
	,autocomplete_update: function(items) {
	}
	,processException: function(ex) {
		this.showMessage("Warning",ex.getMessage());
	}
	,showMessage: function(title,obj) {
		var message = "Missing message<br/>Contact Developers";
		if(obj != null) {
			if(typeof(obj) == "string") {
				if(StringTools.startsWith(obj,"\"")) {
					message = JSON.parse(obj);
				} else {
					message = obj;
				}
			} else if(Reflect.hasField(obj,"message")) {
				message = obj.message;
			}
		}
		Ext.Msg.alert(title,message);
	}
	,userPrompt: function(title,question,onYes,onNo,onCancel) {
		Ext.Msg.show({ title : title, msg : question, buttons : Ext.Msg.YESNOCANCEL, icon : Ext.Msg.QUESTION, fn : function(btn) {
			if(btn == "yes") {
				onYes();
			} else if(btn == "no") {
				if(onNo != null) {
					onNo();
				}
			} else if(onCancel != null) {
				onCancel();
			}
		}});
	}
	,userValuePrompt: function(title,question,onOk,onCancel) {
		Ext.Msg.prompt(title,question,function(btn,text) {
			if(btn == "ok") {
				onOk(text);
			} else if(onCancel != null) {
				onCancel();
			}
		});
	}
	,showELN: function() {
	}
	,openLocalURL: function(path) {
		var location = js.Browser.get_window().location;
		var dstURL = location.protocol + "//" + location.hostname + ":" + location.port + "/" + path;
		this.openUrl(dstURL);
	}
	,openUrl: function(url) {
		if(this.inIcm()) {
			saturn.client.ICMClient.getClient().openUrl(url,false);
		} else {
			js.Browser.get_window().open(url,"_blank");
		}
	}
	,inIcm: function() {
		return Reflect.hasField(js.Browser.get_window(),"ICMScript");
	}
	,getClipBoard: function() {
		return this.theClipBoard;
	}
	,saveFile: function(blob,fileName) {
		if(Reflect.hasField(js.Browser.get_window(),"ICMScript")) {
			blob = StringTools.replace(blob,"\n","<__MOLBIO__N>");
			blob = StringTools.replace(blob,"\t","<__MOLBIO_SEP>");
			var icmSetCommand = saturn.client.ICMClient.getClient().generateSetStringCommand("MOLBIO_FILE",blob);
			saturn.client.ICMClient.getClient().runCommand(icmSetCommand + "\n" + "sgc.molbio.exportToFileDialog(MOLBIO_FILE,'" + fileName + "')\n",function(data,err) {
				var tmp = err != null;
			});
		} else {
			var dWin = js.Browser.get_window();
			dWin.saveAs(blob,fileName);
		}
	}
	,saveTextFile: function(content,fileName) {
		var blob;
		if(Reflect.hasField(js.Browser.get_window(),"ICMScript")) {
			blob = content;
		} else {
			blob = new Blob([content],{ type : "text/plain;charset=utf-8"});
		}
		this.saveFile(blob,fileName);
	}
	,canvasToBlob: function(canvas) {
		var extractPattern = new EReg("data:([^;]*)(;base64)?,([0-9A-Za-z+/]+)","");
		extractPattern.match(canvas.toDataURL());
		var binStr = js.Browser.get_window().atob(extractPattern.matched(3));
		var buf = new ArrayBuffer(binStr.length);
		var view = new Uint8Array(buf);
		var _g1 = 0;
		var _g = view.length;
		while(_g1 < _g) {
			var i = _g1++;
			view[i] = HxOverrides.cca(binStr,i);
		}
		var blob = new Blob([view],{ type : extractPattern.matched(1)});
		return blob;
	}
	,saveCanvasToFile: function(canvas,fileName) {
		this.saveFile(this.canvasToBlob(canvas),fileName);
	}
	,createProgressWindow: function() {
		this.progressWindow = Ext.create("Ext.window.Window",{ title : "Progress", height : 200, width : 400, layout : "fit", closeAction : "hide", items : { xtype : "panel", html : "", autoScroll : true, style : { "overflow-y" : "scroll"}}});
	}
	,updateProgress: function() {
		var _gthis = this;
		var html = "";
		var showMsgIds = [];
		var _g = 0;
		var _g1 = saturn.client.core.ClientCore.getClientCore().msgIds;
		while(_g < _g1.length) {
			var msgId = _g1[_g];
			++_g;
			var job = saturn.client.core.ClientCore.getClientCore().msgIdToJobInfo.get(msgId);
			var json = Reflect.field(job,"JSON");
			var msg = Reflect.field(job,"MSG");
			if(msg == "_remote_provider_._data_request_objects_namedquery") {
				if(Reflect.field(json,"queryId") == "saturn.workflow") {
					if(Reflect.field(json,"class_name") == "saturn.workflow.HMMerResponse") {
						showMsgIds.push(msgId);
					}
				}
			} else if(msg == "_clustal_" || msg == "_thmm_" || msg == "_blast_" || msg == "_phylo_" || msg == "_psipred_" || msg == "_blast_updater_") {
				showMsgIds.push(msgId);
			}
		}
		var runTimer = false;
		if(showMsgIds.length == 0 && !this.alwaysShowProgressWindow) {
			this.progressWindow.hide();
		} else {
			if(!this.progressWindow.isVisible()) {
				this.progressWindow.show();
			}
			html = "<ul>";
			var _g2 = 0;
			while(_g2 < showMsgIds.length) {
				var msgId1 = showMsgIds[_g2];
				++_g2;
				var job1 = saturn.client.core.ClientCore.getClientCore().msgIdToJobInfo.get(msgId1);
				var json1 = Reflect.field(job1,"JSON");
				var msg1 = Reflect.field(job1,"MSG");
				if(msg1 == "_remote_provider_._data_request_objects_namedquery") {
					if(Reflect.field(json1,"queryId") == "saturn.workflow") {
						if(Reflect.field(json1,"class_name") == "saturn.workflow.HMMerResponse") {
							msg1 = "Running domain prediction";
						}
					}
				} else if(msg1 == "_clustal_") {
					msg1 = "Running clustal alignment";
				} else if(msg1 == "_thmm_") {
					msg1 = "Running transmembrane prediction";
				} else if(msg1 == "_blast_") {
					msg1 = "Running BLAST";
				} else if(msg1 == "_phylo_") {
					msg1 = "Generating phylogenetic tree";
				} else if(msg1 == "_psipred_") {
					msg1 = "Running secondary structure prediction";
				}
				var startTime = Reflect.field(job1,"START_TIME");
				var endTime = Reflect.field(job1,"END_TIME");
				if(endTime == null) {
					endTime = Date.now();
					runTimer = true;
				} else {
					msg1 += " <font color='green'>DONE</font>:";
				}
				var diff = endTime - startTime;
				if(diff > 1000) {
					msg1 = msg1 + " " + Std.string(diff / 1000) + "s";
				} else {
					msg1 = msg1 + " " + (diff == null ? "null" : "" + diff) + "ms";
				}
				html += "<li>" + msg1 + "</li>";
			}
			html += "</ul>";
		}
		if(this.progressWindow.down("panel").el != null) {
			this.progressWindow.down("panel").el.dom.innerHTML = html;
			if(runTimer) {
				haxe.Timer.delay(function() {
					if(_gthis.progressWindow.isVisible()) {
						_gthis.updateProgress();
					}
				},1000);
			}
		}
	}
	,setInformationPanelText: function(content,isHtml) {
	}
	,setProgramSearchFieldEmptyText: function(emptyText) {
	}
	,enableProgramSearchField: function(enable) {
	}
	,getPrintBufferContent: function() {
		return this.printBuffer.toString();
	}
	,addToPrintBuffer: function(content) {
		this.printBuffer.add("&lt;" + Std.string(content) + "\n<br/>");
	}
	,clearPrintBuffer: function() {
		this.printBuffer = new StringBuf();
	}
	,flushBufferToPanel: function() {
		this.setInformationPanelText("<font style=\"font-family:Consolas,Monaco,Lucida Console,Liberation Mono,DejaVu Sans Mono,Bitstream Vera Sans Mono,Courier New, monospace;\">" + saturn.client.WorkspaceApplication.getApplication().getPrintBufferContent() + "</font>",true);
	}
	,loginPrompt: function() {
	}
	,getQuickLaunchBar: function() {
		return null;
	}
	,hideMiddleSouthPanel: function() {
	}
	,showMiddleSouthPanel: function() {
	}
	,clearProgramSearchField: function() {
	}
	,debug: function(message) {
		this.debugLogger(message);
	}
	,setLoggedIn: function(user) {
		saturn.client.core.ClientCore.getClientCore().setLoggedIn(user);
	}
	,setLoggedOut: function() {
		saturn.client.core.ClientCore.getClientCore().setLoggedOut();
	}
	,loadQtLibrary: function() {
		var scriptElem = js.Browser.get_document().createElement("script");
		scriptElem.setAttribute("type","text/javascript");
		scriptElem.setAttribute("src","qrc:///qtwebchannel/qwebchannel.js");
		js.Browser.get_document().getElementsByTagName("head")[0].appendChild(scriptElem);
		this.connectQtWebChannel();
	}
	,connectQtWebChannel: function() {
		var _gthis = this;
		haxe.Timer.delay(function() {
			try {
				new QWebChannel(qt.webChannelTransport,function(channel) {
					_gthis.rawQtChannel = channel;
					var dialog = _gthis.rawQtChannel.objects.fileDialog;
					dialog.fileSelected.connect(function(filePath) {
						if(js.Browser.get_navigator().userAgent.indexOf("Windows") > -1) {
							filePath = "/" + filePath;
						}
						if(_gthis.qtSaveFileContents == null) {
							_gthis.rawQtChannel.objects.HostFileReader.read_b64(filePath,function(contents) {
								var file = new saturn.core.FileShim(filePath,contents);
								_gthis.fileHostCB(file);
							});
						} else {
							saturn.core.Util.getNewExternalProcess(function(process) {
								process.writeFile(filePath,_gthis.qtSaveFileContents);
							});
						}
					});
				});
				return;
			} catch( exception ) {
				_gthis.connectQtWebChannel();
			}
		},100);
	}
	,refreshNewQtWebChannelObjects: function(cb) {
		var _gthis = this;
		this.rawQtChannel.exec({type:QWebChannelMessageTypes.init},function(data) {
			var _g = 0;
			var _g1 = Reflect.fields(data);
			while(_g < _g1.length) {
				var objectName = _g1[_g];
				++_g;
				saturn.core.Util.debug("Looking for " + objectName);
				if(!_gthis.rawQtChannel.objects.hasOwnProperty(objectName)) {
					saturn.core.Util.debug("Found " + objectName);
					var object = new QObject(objectName, data[objectName], _g2.rawQtChannel);
					Reflect.field(_gthis.rawQtChannel.objects,objectName).unwrapProperties();
				}
			}
			_gthis.rawQtChannel.exec({type: QWebChannelMessageTypes.idle});
			cb(_gthis.rawQtChannel);
		});
	}
	,getNewQtProcess: function(cb) {
		var _gthis = this;
		this.rawQtChannel.objects.foo.createNewProcess(function(objectId) {
			_gthis.refreshNewQtWebChannelObjects(function(channel) {
				var tmp = Reflect.field(channel.objects,objectId);
				cb(tmp);
			});
		});
	}
	,getNewFileDialog: function(cb) {
		var _gthis = this;
		this.rawQtChannel.objects.foo.createNewDialog(function(objectId) {
			_gthis.refreshNewQtWebChannelObjects(function(channel) {
				var tmp = Reflect.field(channel.objects,objectId);
				cb(null,tmp);
			});
		});
	}
	,openHostFile: function(cb) {
		this.fileHostCB = cb;
		var dialog = this.rawQtChannel.objects.fileDialog;
		dialog.visible = true;
	}
	,getScreenMode: function() {
		return this.screenMode;
	}
	,setMode: function(mode) {
		if(mode == this.screenMode) {
			return;
		}
		var oldMode = this.screenMode;
		this.screenMode = mode;
		if(mode == saturn.client.ScreenMode.SINGLE_APP) {
			this.enterSingleAppMode();
		} else if(mode == saturn.client.ScreenMode.DEFAULT) {
			if(oldMode == saturn.client.ScreenMode.SINGLE_APP) {
				this.exitSingleMode();
			}
		}
	}
	,getSingleAppContainer: function() {
		return null;
	}
	,enterSingleAppMode: function() {
	}
	,exitSingleMode: function() {
	}
	,getGlobalSearchFieldObj: function() {
		return null;
	}
	,afterLoad: function() {
	}
	,__class__: saturn.client.WorkspaceApplication
};
saturn.client.EXTApplication = $hxClasses["saturn.client.EXTApplication"] = function(applicationTitle,navigationTitle,southTitle,detailsTitle,tabContainerTitle,searchBarTitle,nakedMode) {
	saturn.client.WorkspaceApplication.call(this,applicationTitle,navigationTitle,southTitle,detailsTitle,tabContainerTitle,searchBarTitle,nakedMode);
};
saturn.client.EXTApplication.__name__ = ["saturn","client","EXTApplication"];
saturn.client.EXTApplication.getCurrentApplication = function() {
	return js.Boot.__cast(saturn.client.WorkspaceApplication.getApplication() , saturn.client.EXTApplication);
};
saturn.client.EXTApplication.__super__ = saturn.client.WorkspaceApplication;
saturn.client.EXTApplication.prototype = $extend(saturn.client.WorkspaceApplication.prototype,{
	viewPoint: null
	,menuBar: null
	,navigatorPanel: null
	,middleSouthPanel: null
	,southPanel: null
	,eastPanel: null
	,centralPanel: null
	,searchBar: null
	,tabPanel: null
	,centralInfoPanel: null
	,searchBarStore: null
	,appkeydown: null
	,appkeyup: null
	,fileMenu: null
	,exportMenu: null
	,importMenu: null
	,updateMenu: null
	,workspaceExportMenu: null
	,editMenu: null
	,openMenu: null
	,saveMenu: null
	,saveAsMenu: null
	,newMenu: null
	,viewMenu: null
	,helpMenu: null
	,toolsMenu: null
	,outlineDataStores: null
	,outlineTrees: null
	,jConsole: null
	,enableOutlineDD: null
	,theToolBar: null
	,searchField: null
	,northPanel: null
	,rightMenu: null
	,loginMenu: null
	,loginMenuItem: null
	,logoutMenuItem: null
	,quickLaunchBar: null
	,toolBar: null
	,searchPanel: null
	,northContainer: null
	,appToolBar: null
	,databaseMenu: null
	,appContainer: null
	,oldToolBar: null
	,reattachIndex: null
	,oldTitle: null
	,onProviderUp: function() {
		var _gthis = this;
		saturn.client.WorkspaceApplication.prototype.onProviderUp.call(this);
		this.enableOutlineDD = false;
		this.outlineTrees = new haxe.ds.StringMap();
		this.outlineDataStores = new haxe.ds.StringMap();
		Ext.Loader.setConfig({ enabled : true, paths : { "Ext.ux" : "js/ext/ux", "Ext.grid.filters" : "js/ext/src/grid/filters"}});
		Ext.require("Ext.toolbar.Toolbar");
		Ext.require("Ext.data.TreeStore");
		Ext.require("Ext.container.Viewport");
		Ext.require("Ext.layout.container.Border");
		Ext.require("Ext.form.field.ComboBox");
		Ext.require("Ext.tree.Panel");
		Ext.require("Ext.tree.plugin.TreeViewDragDrop");
		Ext.require("Ext.grid.filters.Filters");
		Ext.define("org.sgc.TabReorder",{ extend : "Ext.tab.Panel", plugins : "tabreorderer", requires : ["Ext.ux.TabReorderer"], xtype : "reorderable-tabs"});
		Ext.onReady(function() {
			Ext.application({ name : "Saturn", launch : function() {
				_gthis.viewPoint = Ext.create("Ext.container.Viewport",{ layout : "border"});
				_gthis.northContainer = Ext.create("Ext.Container",{ layout : "vbox", width : "100%", region : "north", border : false});
				_gthis.northPanel = Ext.create("Ext.Container",{ layout : { type : "hbox", align : "center"}, width : "100%", region : "north", border : false});
				_gthis.northContainer.add(_gthis.northPanel);
				_gthis.createAppToolBar();
				_gthis.viewPoint.add(_gthis.northContainer);
				js.Browser.get_window().onbeforeunload = function(event) {
					return "Are you sure you want to close this window";
				};
				_gthis.initApplication();
				_gthis.afterLoad();
			}});
		});
		this.initialiseWindowListeners();
		this.jConsole = console;
		this.clientCore.addLoginListener($bind(this,this.setLoggedIn));
		this.clientCore.addLogoutListener($bind(this,this.setLoggedOut));
	}
	,initApplication: function() {
		saturn.client.WorkspaceApplication.prototype.initApplication.call(this);
	}
	,getGlobalSearchFieldObj: function() {
		return this.searchBar;
	}
	,getResourcesMenu: function() {
		return this.databaseMenu;
	}
	,createAppToolBar: function() {
		var _gthis = this;
		this.appToolBar = Ext.create("Ext.toolbar.Toolbar",{ region : "south", width : "100%", minHeight : 26, maxHeight : 26, style : { "background-color" : "#6C6C6C"}, flex : 1, border : false});
		this.appToolBar.add({ iconCls : "x-btn-save-small", handler : function() {
			_gthis.getWorkspace().saveWorkspace();
		}, tooltip : { dismissDelay : 10000, text : "Save workspace"}});
		this.appToolBar.add({ iconCls : "x-btn-saveas-small", handler : function() {
			_gthis.promptSaveAs();
		}, tooltip : { dismissDelay : 10000, text : "Save workspace as"}});
		this.appToolBar.add({ iconCls : "x-btn-open-small", handler : function() {
			_gthis.getWorkspace().openDefaultWorkspace();
		}, tooltip : { dismissDelay : 10000, text : "Open workspace (default)"}});
		this.appToolBar.add({ iconCls : "x-btn-openas-small", handler : function() {
			_gthis.promptOpenWorkspace();
		}, tooltip : { dismissDelay : 10000, text : "Open workspace (named)"}});
		this.appToolBar.add({ iconCls : "x-btn-close-small", handler : function() {
			_gthis.getWorkspace().closeWorkspace();
		}, tooltip : { dismissDelay : 10000, text : "Close workspace"}});
		this.northContainer.add(this.appToolBar);
	}
	,addSaveAsOptions: function() {
		var p = this.getProvider();
		var activeProg = this.getActiveProgram();
		if(p == null || activeProg == null) {
			return;
		}
		var progClazz = Type.getClass(this.getActiveProgram());
		var models = activeProg.getSaveAsModelsForProgram();
		var _g = 0;
		while(_g < models.length) {
			var model = [models[_g]];
			++_g;
			var name = model[0].getAlias();
			if(name == null) {
				name = Type.getClassName(model[0].getClass());
			}
			var tmp = this.getSaveAsMenu();
			var tmp1 = (function(model1) {
				return function() {
					activeProg.saveObjectAsGUI(model1[0]);
				};
			})(model);
			tmp.add({ text : name, handler : tmp1});
		}
	}
	,getConsole: function() {
		return this.jConsole;
	}
	,printInfo: function(message) {
		this.getConsole().info(message);
	}
	,initialiseWindowListeners: function() {
		var _gthis = this;
		var dWindow = js.Browser.get_document();
		dWindow.onmouseup = function(event) {
			var activeProg = _gthis.getActiveProgram();
			if(activeProg != null) {
				activeProg.mouseup(event);
			}
		};
		dWindow.onmousedown = function(event1) {
			var activeProg1 = _gthis.getActiveProgram();
			if(activeProg1 != null) {
				activeProg1.mousedown(event1);
			}
		};
		var ctl = false;
		dWindow.onkeydown = function(event2) {
			if(event2.altKey) {
				ctl = true;
				event2.preventDefault();
				event2.stopPropagation();
			}
		};
		this.appkeydown = dWindow.onkeydown;
		dWindow.onkeyup = function(event3) {
			if(event3.keyCode == 18) {
				ctl = false;
			}
		};
		this.appkeyup = dWindow.onkeyup;
	}
	,onkeyup: function(event) {
		this.appkeyup(event);
	}
	,onkeydown: function(event) {
		this.appkeydown(event);
	}
	,addNewMenuItem: function(shortName,clazzName) {
		if(this.isNaked()) {
			return;
		}
		var self = this;
		var fileNewMenu = this.getFileNewMenu();
		fileNewMenu.add({ cls : "menu-item-" + StringTools.replace(clazzName,".","-"), text : shortName, handler : function() {
			var workspaceObject = Type.createInstance(Type.resolveClass(clazzName),[null,null]);
			self.getWorkspace().addObject(workspaceObject,true);
		}});
	}
	,addSaveMenuItem: function() {
		if(this.nakedMode) {
			return;
		}
	}
	,addOpenDefaultWorkspaceMenuItem: function() {
		var _gthis = this;
		if(this.nakedMode) {
			return;
		}
		var openMenu = this.getOpenMenu();
		if(this.isHostEnvironmentAvailable()) {
			openMenu.add({ text : "Open File", handler : function() {
				_gthis.openHostFile(function(file) {
					_gthis.getWorkspace().openFile(file,true);
				});
			}});
		}
		openMenu.add({ text : "Open Default Workspace", handler : Ext.bind(function() {
			_gthis.theWorkspace.openDefaultWorkspace();
		},this)});
		var self = this;
		this.getFileNewMenu().add({ text : "New workspace", handler : function() {
			Ext.Msg.show({ title : "Save Changes?", msg : "Save workspace before opening a new one?", buttons : Ext.Msg.YESNOCANCEL, icon : Ext.Msg.QUESTION, fn : function(btn) {
				if(btn == "yes") {
					self.getWorkspace().saveWorkspace();
				}
				if(btn != "cancel") {
					self.getWorkspace().closeWorkspace();
					Ext.Msg.prompt("New Workspace","Enter New Workspace name",function(btn1,text) {
						self.getWorkspace().setWorkspaceName(text);
						self.getWorkspace().saveWorkspace();
					});
				}
			}});
		}});
	}
	,addSaveWorkspaceMenuItem: function() {
		var _gthis = this;
		if(this.isNaked()) {
			return;
		}
		var tmp = this.getSaveMenu();
		var tmp1 = Ext.bind(function() {
			_gthis.theWorkspace.saveWorkspace();
		},this);
		tmp.add({ text : "Save Workspace", handler : tmp1});
	}
	,addSaveWorkspaceAsMenuItem: function() {
		var _gthis = this;
		if(this.isNaked()) {
			return;
		}
		var self = this;
		this.getSaveMenu().add({ text : "Save Workspace As", handler : function() {
			_gthis.promptSaveAs();
		}});
	}
	,addOpenSavedWorkspaceMenuItem: function() {
		var _gthis = this;
		if(this.isNaked()) {
			return;
		}
		var self = this;
		this.getOpenMenu().add({ text : "Open Workspace", handler : function() {
			_gthis.promptOpenWorkspace();
		}});
	}
	,promptOpenWorkspace: function() {
		var _gthis = this;
		this.getWorkspace().getWorkspaceNames(function(workspaceNames) {
			var workspaceData = [];
			var _g = 0;
			while(_g < workspaceNames.length) {
				var workspaceName = workspaceNames[_g];
				++_g;
				workspaceData.push({ "name" : workspaceName});
			}
			var workspaces = Ext.create("Ext.data.Store",{ fields : ["name"], data : workspaceData});
			var windowId = Ext.id(null,"UNIQUE_");
			var uniqueId = Ext.id(null,"UNIQUE_");
			var vBoxLayout = [];
			vBoxLayout.push({ xtype : "combobox", fieldLabel : "Select workspace", store : workspaces, queryMode : "local", displayField : "name", valueField : "name", id : uniqueId});
			var buttonLayoutItems = [];
			buttonLayoutItems.push({ xtype : "button", text : "Open", handler : function() {
				var comp = Ext.getCmp(uniqueId);
				var workspaceName1 = comp.getValue();
				_gthis.getWorkspace().openWorkspace(workspaceName1);
				Ext.getCmp(windowId).close();
			}});
			buttonLayoutItems.push({ xtype : "button", text : "Cancel", handler : function() {
				Ext.getCmp(windowId).close();
			}});
			vBoxLayout.push({ xtype : "panel", layout : { type : "hbox", pack : "center", padding : "2px", defaultMargins : "2px"}, items : buttonLayoutItems});
			Ext.create("Ext.window.Window",{ title : "Open Workspace", modal : true, id : windowId, layout : { type : "vbox", align : "stretch", padding : "2px"}, items : vBoxLayout, width : 600}).show();
		});
	}
	,promptSaveAs: function() {
		var _gthis = this;
		this.getWorkspace().getWorkspaceNames(function(workspaceNames) {
			var workspaceData = [];
			var _g = 0;
			while(_g < workspaceNames.length) {
				var workspaceName = workspaceNames[_g];
				++_g;
				workspaceData.push({ "name" : workspaceName});
			}
			var workspaces = Ext.create("Ext.data.Store",{ fields : ["name"], data : workspaceData});
			var vBoxLayout = [];
			vBoxLayout.push({ xtype : "form", layout : { type : "hbox", pack : "center", padding : "2px", defaultMargins : "2px"}, items : { xtype : "combobox", fieldLabel : "Save As", store : workspaces, queryMode : "local", displayField : "name", valueField : "name", name : "workspace"}, buttons : [{ xtype : "button", text : "Save", handler : function(btn) {
				var win = btn.up("window");
				var form = win.down("form");
				var name = form.getForm().findField("workspace").getValue();
				_gthis.getWorkspace().setWorkspaceName(name);
				_gthis.getWorkspace().saveWorkspace();
				win.close();
			}},{ xtype : "button", text : "Cancel", handler : function(btn1) {
				btn1.up("window").close();
			}}]});
			Ext.create("Ext.window.Window",{ title : "Save As", modal : true, layout : { type : "vbox", align : "stretch", padding : "2px"}, items : vBoxLayout}).show();
		});
	}
	,createMenuBar: function() {
		var _gthis = this;
		if(this.isNaked()) {
			return;
		}
		Ext.suspendLayouts();
		var self = this;
		this.menuBar = Ext.create("Ext.toolbar.Toolbar",{ region : "west", width : 500, listener : { render : function() {
		}}, flex : 2, border : false});
		this.rightMenu = Ext.create("Ext.toolbar.Toolbar",{ region : "east", listener : { render : function() {
		}}, border : false});
		this.loginMenu = Ext.create("Ext.menu.Menu",{ margin : "0 0 10 0", "z-index" : 1000000});
		var loginText = saturn.client.core.ClientCore.getClientCore().isLoggedIn() ? saturn.client.core.ClientCore.getClientCore().getUser().fullname : "Login";
		this.loginMenuItem = this.rightMenu.add({ text : loginText, iconCls : "bmenu", menu : this.loginMenu, cls : "menu-item-FILE", handler : function() {
			if(!saturn.client.core.ClientCore.getClientCore().loggedIn) {
				_gthis.loginMenu.hide();
				_gthis.loginPrompt();
			}
		}});
		this.logoutMenuItem = this.loginMenu.add({ text : "Logout", handler : function() {
			saturn.client.core.ClientCore.getClientCore().logout();
		}, hidden : !saturn.client.core.ClientCore.getClientCore().isLoggedIn()});
		this.northPanel.add(this.menuBar);
		this.northPanel.add(this.searchBar);
		this.northPanel.add(this.rightMenu);
		this.menuBar.suspendLayouts();
		this.fileMenu = Ext.create("Ext.menu.Menu",{ margin : "0 0 10 0", "z-index" : 1000000});
		this.menuBar.add({ text : "File", iconCls : "bmenu", menu : this.fileMenu, cls : "menu-item-FILE"});
		this.newMenu = Ext.create("Ext.menu.Menu",{ margin : "0 0 10 0"});
		this.fileMenu.add({ text : "New", iconCls : "bmenu", menu : this.newMenu, cls : "menu-item-NEW"});
		this.openMenu = Ext.create("Ext.menu.Menu",{ margin : "0 0 10 0"});
		this.fileMenu.add({ text : "Open", iconCls : "bmenu", menu : this.openMenu});
		this.saveMenu = Ext.create("Ext.menu.Menu",{ margin : "0 0 10 0"});
		this.fileMenu.add({ text : "Save", iconCls : "bmenu", menu : this.saveMenu});
		this.saveAsMenu = Ext.create("Ext.menu.Menu",{ margin : "0 0 10 0"});
		this.fileMenu.add({ text : "Save As", iconCls : "bmenu", menu : this.saveAsMenu});
		this.exportMenu = Ext.create("Ext.menu.Menu",{ margin : "0 0 10 0", "z-index" : 1000000});
		this.fileMenu.add({ text : "Export", iconCls : "bmenu", menu : this.exportMenu, cls : "menu-item-FILE"});
		this.workspaceExportMenu = Ext.create("Ext.menu.Menu",{ margin : "0 0 10 0", "z-index" : 1000000});
		this.fileMenu.add({ text : "Workspace Export", iconCls : "bmenu", menu : this.workspaceExportMenu, cls : "menu-item-FILE"});
		this.workspaceExportMenu.add({ text : "Export to file", handler : function() {
			_gthis.getWorkspace().saveWorkspaceToFile(_gthis.getWorkspace().getWorkspaceName() + ".sat");
		}});
		this.importMenu = Ext.create("Ext.menu.Menu",{ margin : "0 0 10 0", "z-index" : 1000000});
		this.fileMenu.add({ text : "Import", iconCls : "bmenu", menu : this.importMenu, cls : "menu-item-FILE"});
		this.updateMenu = Ext.create("Ext.menu.Menu",{ margin : "0 0 10 0", "z-index" : 1000000});
		this.fileMenu.add({ text : "Update", iconCls : "bmenu", menu : this.updateMenu, cls : "menu-item-FILE"});
		this.editMenu = Ext.create("Ext.menu.Menu",{ margin : "0 0 10 0", "z-index" : 1000000});
		this.menuBar.add({ text : "Edit", iconCls : "bmenu", menu : this.editMenu});
		this.viewMenu = Ext.create("Ext.menu.Menu",{ margin : "0 0 10 0", "z-index" : 1000000});
		this.menuBar.add({ text : "View", iconCls : "bmenu", menu : this.viewMenu});
		this.toolsMenu = Ext.create("Ext.menu.Menu",{ margin : "0 0 10 0", "z-index" : 1000000});
		this.menuBar.add({ text : "Tools", iconCls : "bmenu", menu : this.toolsMenu});
		this.databaseMenu = Ext.create("Ext.menu.Menu",{ margin : "0 0 10 0", "z-index" : 1000000});
		this.toolsMenu.add({ text : "Resources", iconCls : "bmenu", menu : this.databaseMenu});
		this.toolsMenu.add({ text : "Toggle Progress Window", handler : function() {
			if(!_gthis.progressWindow.isVisible()) {
				_gthis.progressWindow.show();
				_gthis.alwaysShowProgressWindow = true;
				_gthis.updateProgress();
			} else {
				_gthis.progressWindow.hide();
				_gthis.alwaysShowProgressWindow = false;
			}
		}});
		this.databaseMenu.add({ text : "Clear cache", handler : function() {
			_gthis.getProvider().resetCache();
		}});
		this.databaseMenu.add({ text : "Alias active", handler : function() {
			_gthis.userValuePrompt("Alias Active","Enter global variable name",function(name) {
				var d = js.Browser.get_window();
				Reflect.setField(d,name,_gthis.getActiveProgram());
			},null);
		}});
		this.helpMenu = Ext.create("Ext.menu.Menu",{ margin : "0 0 10 0", "z-index" : 1000000});
		this.helpMenu.add({ text : "About", handler : function() {
			Ext.create("Ext.window.Window",{ title : "About", modal : true, html : "<div style=\"margin-left:5px;margin-right:5px\">" + "<h1><img style=\"vertical-align:middle;margin-left: -5\" src=\"/static/js/images/saturn.png\"></img><a target=\"_blank\" href=\"https://ddamerell53.github.io/SATurn/\">SATurn</a></h1>" + "<h2>Contributors</h2>" + "David Damerell<br/>Claire Strain-Damerell<br/>Sefa Garsot<br/>Paul Barrett<br/>Stephen Joyce<br/>Narayanan Krishnan<br/>Brian Marsden<br/>" + "<h2>SATurn License</h2>" + "The SATurn source code is released under the Creative Commons CC0 license which you can find <a target=\"_blank\" href=\"/static/licenses/LICENSE\">here</a><br/>" + "<h2>Third-party License</h2>" + "SATurn uses third-party programs and libraries which come with their own licenses which can be found below<br/><br/>" + "<b>By using or distributing SATurn you must comply with all licenses</b><br/><ul>" + "<li><a target=\"_blank\" href=\"/static/licenses/LICENSE_NODEJS\">NodeJS (web-server)</a></li>" + "<li><a target=\"_blank\" href=\"/static/licenses/LICENSE_BIOINFORMATICS\">Bioinformatics Tools (Clustal, BLAST, etc.)</a></li>" + "<li><a target=\"_blank\" href=\"/static/licenses/LICENSE_THIRD_PARTY\">Third-party JavaScript libraries (ExtJS, etc.)</a></li>" + "<li><a target=\"_blank\" href=\"/static/licenses/NODE_LICENSES\">Third-party NodeJS libraries</a></li>" + "<li><a target=\"_blank\" href=\"/static/licenses/LICENSE_REDIS\">Redis License</a></li></ul><br/></div>", height : "500px"}).show();
		}});
		this.helpMenu.add({ text : "Online Manual", handler : function() {
			js.Browser.get_window().open("https://ddamerell53.github.io/SATurn/","_blank");
		}});
		this.helpMenu.add({ text : "Local Manual", handler : function() {
			js.Browser.get_window().open("/static/manual/index.html","_blank");
		}});
		this.menuBar.add({ text : "Help", iconCls : "bmenu", menu : this.helpMenu});
		this.getFileMenu().add({ text : "Close workspace", handler : function() {
			Ext.Msg.show({ title : "Save Changes?", msg : "Save workspace before closing?", buttons : Ext.Msg.YESNOCANCEL, icon : Ext.Msg.QUESTION, fn : function(btn) {
				if(btn == "yes") {
					self.getWorkspace().saveWorkspace();
				}
				if(btn != "cancel") {
					self.getWorkspace().closeWorkspace();
				}
			}});
		}});
		this.getFileMenu().add({ text : "Close all programs", handler : function() {
			self.getWorkspace().closeAllObjects();
		}});
		this.menuBar.resumeLayouts(true);
		Ext.resumeLayouts(true);
	}
	,destroyMenu: function() {
		this.northPanel.remove(this.menuBar);
		this.northPanel.remove(this.rightMenu);
	}
	,getOpenMenu: function() {
		return this.openMenu;
	}
	,getSaveMenu: function() {
		return this.saveMenu;
	}
	,getSaveAsMenu: function() {
		return this.saveAsMenu;
	}
	,getFileMenu: function() {
		return this.fileMenu;
	}
	,getExportMenu: function() {
		return this.exportMenu;
	}
	,getImportMenu: function() {
		return this.importMenu;
	}
	,getUpdateMenu: function() {
		return this.updateMenu;
	}
	,getWorkspaceExportMenu: function() {
		return this.workspaceExportMenu;
	}
	,getViewMenu: function() {
		return this.viewMenu;
	}
	,getToolsMenu: function() {
		return this.toolsMenu;
	}
	,getFileNewMenu: function() {
		return this.newMenu;
	}
	,getMenuBar: function() {
		return this.menuBar;
	}
	,getEditMenu: function() {
		return this.editMenu;
	}
	,createNavigationPanel: function(navTitle) {
		this.theWorkspace = new saturn.client.workspace.Workspace();
		if(this.isNaked()) {
			return;
		}
		this.navigatorPanel = Ext.create("Ext.panel.Panel",{ region : "west", collapsible : true, collapseMode : "mini", hideCollapseTool : true, title : navTitle, split : true, width : 150, layout : "fit"});
		this.navigatorPanel.add(this.theWorkspace.getComponent());
		this.viewPoint.add(this.navigatorPanel);
	}
	,getNavigationPanel: function() {
		return this.navigatorPanel;
	}
	,createMiddleSouthPanel: function(southTitle) {
		if(this.isNaked()) {
			return;
		}
		this.middleSouthPanel = Ext.create("Ext.panel.Panel",{ region : "south", title : southTitle, collapsible : true, collapseMode : "mini", hideCollapseTool : true, html : "", split : true, height : 100, minHeight : 100, border : false, autoScroll : true});
		this.centralPanel.add(this.middleSouthPanel);
	}
	,createSouthPanel: function(southTitle) {
		if(this.isNaked()) {
			return;
		}
		js.Browser.get_window().console.log("Creating south panel");
		this.southPanel = Ext.create("Ext.Container",{ region : "south", title : southTitle, collapsible : false, collapseMode : "mini", hideCollapseTool : true, html : "", split : true, height : 50, minHeight : 50, border : false, style : { "background-color" : "white"}});
		this.quickLaunchBar = Ext.create("Ext.toolbar.Toolbar",{ flex : 1, border : false, style : { "background-color" : "white"}, overflowHandler : "menu"});
		this.southPanel.add(this.quickLaunchBar);
		this.viewPoint.add(this.southPanel);
	}
	,clearSouthPanel: function() {
		if(this.isNaked()) {
			return;
		}
		this.showMiddleSouthPanel();
	}
	,getMiddleSouthPanel: function() {
		return this.middleSouthPanel;
	}
	,hideMiddleSouthPanel: function() {
		this.middleSouthPanel.setVisible(false);
		this.centralInfoPanel.setVisible(false);
	}
	,showMiddleSouthPanel: function() {
		this.middleSouthPanel.setVisible(true);
		this.centralInfoPanel.setVisible(true);
	}
	,getQuickLaunchBar: function() {
		return this.quickLaunchBar;
	}
	,createDetailsPanel: function(detailsTitle) {
		if(this.isNaked()) {
			return;
		}
		this.eastPanel = Ext.create("Ext.panel.Panel",{ region : "east", title : detailsTitle, collapsible : true, split : true, width : 150, layout : "border", border : true, collapseMode : "mini", hideCollapseTool : true, height : "100%"});
		this.installOutlineTree("DEFAULT",false,false,null);
		this.viewPoint.add(this.eastPanel);
	}
	,installOutlineTree: function(name,enableDrop,enableContainerDrop,modelName,mode) {
		if(mode == null) {
			mode = "STANDARD";
		}
		var _gthis = this;
		var self = this;
		if(this.outlineTrees.exists(name)) {
			this.eastPanel.remove(this.outlineTrees.get(name));
		}
		var outlineDataStore = null;
		if(modelName == null) {
			outlineDataStore = Ext.create("Ext.data.TreeStore",{ root : { expanded : true, autoSync : true}, proxy : { type : "memory"}});
		} else {
			outlineDataStore = Ext.create("Ext.data.TreeStore",{ model : modelName, root : { expanded : true, autoSync : true, allowDrop : enableContainerDrop}, proxy : { type : "memory"}});
		}
		if(this.isNaked()) {
			return;
		}
		var region = name == "MODELS" ? "center" : "north";
		var plugins = "";
		var columns = null;
		if(mode == "GRID") {
			plugins = "cellediting";
			columns = [{ xtype : "treecolumn", dataIndex : "folder", flex : 1},{ dataIndex : "text", flex : 1, editor : { xtype : "textfield", readonly : false}}];
		}
		var viewConfig = { };
		if(name == "DEFAULT") {
			viewConfig = { plugins : { ptype : "treeviewdragdrop", enableDrag : true, enableDrop : enableDrop, pluginId : "treedd", allowContainerDrops : false, appendOnly : true}, copy : true, listeners : { "beforedrop" : function(node,data,overModel,dropPosition,dropHandlers,eOpts) {
				return self.onOutlineDrop(node,data,overModel,dropPosition,dropHandlers,eOpts);
			}, itemclick : function(view,rec,item,index) {
				_gthis.fireOutlineItemClicked(view,rec,item,index);
			}}, region : region};
		}
		var outlineTree = Ext.create("Ext.tree.Panel",{ store : outlineDataStore, rootVisible : false, hideHeaders : true, viewConfig : viewConfig, border : false, columns : columns, plugins : plugins, region : region});
		this.outlineTrees.set(name,outlineTree);
		this.outlineDataStores.set(name,outlineDataStore);
		this.eastPanel.add(outlineTree);
		this.eastPanel.doLayout();
	}
	,getEastPanel: function() {
		return this.eastPanel;
	}
	,getOutlineTree: function(name) {
		return this.outlineTrees.get(name);
	}
	,onOutlineDrop: function(node,data,overModel,dropPosition,dropHandlers,eOpts) {
		return this.getActiveProgram().onOutlineDrop(node,data,overModel,dropPosition,dropHandlers,eOpts);
	}
	,clearDetailsPanel: function() {
		if(this.isNaked()) {
			return;
		}
		var name = this.outlineDataStores.keys();
		while(name.hasNext()) {
			var name1 = name.next();
			var dataStore = this.getOutlineDataStore(name1);
			var rootNode = dataStore.getRootNode();
			rootNode.removeAll();
		}
	}
	,getOultineTree: function(name) {
		return this.outlineTrees.get(name);
	}
	,getOutlineDataStore: function(name) {
		return this.outlineDataStores.get(name);
	}
	,getDetailsPanel: function() {
		return this.eastPanel;
	}
	,createCentralPanel: function() {
		var regionPosition = "center";
		if(this.isNaked()) {
			regionPosition = "north";
		}
		this.centralPanel = Ext.create("Ext.Container",{ layout : "border", region : regionPosition, height : "100%"});
		this.viewPoint.add(this.centralPanel);
	}
	,setCentralInfoPanelText: function(txt) {
		this.centralInfoPanel.body.update(txt);
	}
	,createSearchBar: function(searchBarTitle) {
		var _gthis = this;
		if(this.isNaked()) {
			return;
		}
		var fieldArray = [{ name : "title", mapping : function(raw) {
			return raw.title;
		}},{ name : "id", mapping : function(raw1) {
			return raw1.id;
		}},{ name : "icon", mapping : function(raw2) {
			return raw2.icon;
		}}];
		this.searchBarStore = Ext.create("Ext.data.Store",{ fields : fieldArray, storeId : "SEARCH_BAR"});
		var self = this;
		var tmp = Ext.data.StoreManager.lookup("SEARCH_BAR");
		var tmp1 = Ext.create("Ext.XTemplate","<tpl for=\".\">" + "<tpl if=\"this.group != values.group\">" + "<tpl exec=\"this.group = values.group\"></tpl>" + "<div  style=\"background-color:grey;color:white;padding-left:2px\" title=\"{group}\">{group}</div>" + "</tpl>" + "<div class=\"x-boundlist-item\" style=\"background-image: url(/static/js/images/{icon});padding-left:20px;background-position: left center;background-repeat: no-repeat; \">{title}</div>" + "</tpl>");
		this.searchBar = Ext.create("Ext.form.field.ComboBox",{ displayField : "title", focusOnToFront : false, valueField : "id", region : "west", emptyText : searchBarTitle, store : tmp, enableKeyEvents : true, doQuery : function(queryStr) {
			if(queryStr == "") {
				if(_gthis.searchBar.rawValue == "") {
					self.autocomplete_update([]);
					_gthis.searchBar.setRawValue("");
				} else {
					_gthis.searchBar.expand();
				}
				return true;
			} else {
				var value = _gthis.searchBar.rawValue;
				self.autoCompleteSearchBar(queryStr);
				return true;
			}
		}, listeners : { select : function(comboBox,records) {
			self.fireSearchObjectSelected(records);
		}, "afterrender" : function() {
			Ext.QuickTips.register({ dismissDelay : 10000, target : _gthis.searchBar.getEl(), text : "Prefix searches (cp-Construct Plate, ap-Allele Plate, pdb-PDB ID"});
		}}, flex : 1, tpl : tmp1, defaultListConfig : { maxHeight : 500}});
		this.searchPanel = Ext.create("Ext.Panel",{ layout : { type : "hbox", padding : 5, align : "center"}, region : "north", border : false});
		var searchFN = function() {
			var value1 = _gthis.searchField.getValue();
			_gthis.getActiveProgram().search(value1);
		};
		this.searchField = Ext.create("Ext.form.field.Text",{ name : "name", enableKeyEvents : true, valueField : "searchBox", emptyText : "Type to search", listeners : { keyup : { fn : searchFN}, focus : { fn : searchFN}}, disabled : true, style : { "margin-left" : "4px"}});
		this.createToolBar();
		this.searchPanel.add(this.searchField);
		this.centralPanel.add(this.searchPanel);
	}
	,destroyToolBar: function() {
		js.Browser.get_window().console.log("Removing toolbar");
		Ext.suspendLayouts();
		this.toolBar.removeAll();
		Ext.resumeLayouts(true);
	}
	,createToolBar: function() {
		js.Browser.get_window().console.log("Creating toolbar");
		if(this.toolBar == null) {
			this.toolBar = Ext.create("Ext.toolbar.Toolbar",{ region : "east", width : 500, minHeight : 26, listener : { render : function() {
			}}, flex : 1, border : false, enableOverflow : true});
			this.searchPanel.add(this.toolBar);
		}
	}
	,setProgramSearchFieldEmptyText: function(emptyText) {
		this.searchField.emptyText = emptyText;
		this.searchField.applyEmptyText();
	}
	,clearProgramSearchField: function() {
		this.searchField.setValue("");
	}
	,enableProgramSearchField: function(enable) {
		this.searchField.setDisabled(!enable);
	}
	,autoCompleteSearchBar: function(queryStr) {
		this.fireSearchTermChanged(queryStr);
	}
	,createTabContainer: function(tabTitle) {
		var _gthis = this;
		var regionPosition = "center";
		var regionHeight = "90%";
		if(this.isNaked()) {
			regionPosition = "north";
			regionHeight = "100%";
			this.tabPanel = Ext.create("Ext.Panel",{ region : regionPosition, layout : "fit", height : regionHeight, xtype : "panel"});
			this.centralPanel.add(this.tabPanel);
		} else {
			this.tabPanel = Ext.create("org.sgc.TabReorder",{ border : false, region : regionPosition, layout : "fit", height : regionHeight, activeTab : 0});
			this.centralPanel.add(this.tabPanel);
			this.tabPanel.addListener("tabchange",function(tabContainer,newTab,previousTab) {
				if(_gthis.screenMode != saturn.client.ScreenMode.SINGLE_APP) {
					_gthis.setProgramSearchFieldEmptyText("Type to search");
					_gthis.enableProgramSearchField(false);
					if(Std["is"](newTab.parentBuildingBlock,saturn.client.BuildingBlock)) {
						var buildingBlock = newTab.parentBuildingBlock;
						var program = buildingBlock;
						if(_gthis.theActiveProgram == null || _gthis.theActiveProgram != program && !_gthis.getWorkspace().isReloading()) {
							_gthis.setActiveProgram(program);
						}
					}
				}
			});
		}
	}
	,createCentralInfoPanel: function() {
		if(this.isNaked()) {
			return;
		}
		this.centralInfoPanel = Ext.create("Ext.Panel",{ region : "south", height : 20, layout : "auto", border : false, cls : "saturn-info-panel", style : { "background-color" : "grey"}});
		this.centralPanel.add(this.centralInfoPanel);
	}
	,getTabContainer: function() {
		return this.tabPanel;
	}
	,autocomplete_update: function(items) {
		js.Browser.get_window().console.log("Size: " + items.length);
		this.searchBarStore.loadData(items);
		this.searchBar.picker.navigationModel.recordIndex = 0;
		this.searchBar.picker.navigationModel.record = null;
		this.searchBar.bindStore(this.searchBarStore,true);
		if(items.length > 0) {
			this.searchBar.expand();
		}
	}
	,setInformationPanelText: function(content,isHtml) {
		var southPanel = this.getMiddleSouthPanel();
		var node = this.middleSouthPanel.getEl().dom.childNodes[1];
		if(isHtml) {
			node.innerHTML = content;
		} else {
			node.innerText = content;
		}
	}
	,loginPrompt: function() {
		var windowId = Ext.id(null,"UNIQUE_");
		var loginfn = function(obj) {
			var win = obj.up("window");
			var form = win.down("form");
			var username = form.getForm().findField("username").getValue();
			var password = form.getForm().findField("password").getValue();
			saturn.client.core.ClientCore.getClientCore().login(username,password,function(err,user) {
				if(err) {
					Ext.Msg.alert(err);
				} else {
					win.close();
				}
			});
		};
		var onSpecialKey = function(obj1,e) {
			var win1 = obj1.up("window");
			var form1 = win1.down("form");
			if(e.getKey() == e.ENTER) {
				var values = form1.query("field{isValid()==false}");
				if(values.length == 0) {
					loginfn(obj1);
				}
			} else if(e.getKey() == e.TAB) {
				var isUsernameField = false;
				if(obj1.getFieldLabel() == "Username") {
					isUsernameField = true;
				}
				if(isUsernameField) {
					form1.getForm().findField("password").focus(false,200);
				} else {
					form1.getForm().findField("username").focus(false,200);
				}
			}
		};
		var components = [{ fieldLabel : "Username", name : "username", listeners : { specialkey : onSpecialKey}},{ fieldLabel : "Password", name : "password", inputType : "password", allowBlank : false, listeners : { specialkey : onSpecialKey}}];
		var items = [];
		items.push({ xtype : "form", height : 150, width : 300, bodyPadding : 10, defaultType : "textfield", items : components, buttons : [{ xtype : "button", text : "Login", formBind : true, disabled : true, handler : function(obj2) {
			loginfn(obj2);
		}}]});
		Ext.create("Ext.window.Window",{ title : "Login", modal : true, id : windowId, layout : { type : "vbox", align : "stretch", padding : "2px"}, items : items, autoShow : true, defaultFocus : "form textfield"});
	}
	,getLoginMenuItem: function() {
		return this.loginMenuItem;
	}
	,setLoggedIn: function(user) {
		this.loginMenuItem.setText(user.fullname);
		if(!saturn.client.core.ClientCore.getClientCore().isLogoutDisabled()) {
			this.logoutMenuItem.show();
		} else {
			this.loginMenuItem.menu = null;
		}
	}
	,setLoggedOut: function() {
		this.loginMenuItem.setText("Login");
		this.logoutMenuItem.hide();
	}
	,getToolBar: function() {
		return this.toolBar;
	}
	,exitSingleMode: function() {
		var prog = this.getActiveProgram();
		if(prog != null) {
			this.tabPanel.insert(this.reattachIndex,prog.getComponent());
			this.centralPanel.add(this.middleSouthPanel);
			this.centralPanel.add(this.centralInfoPanel);
			this.viewPoint.remove(this.appContainer.getComponent());
			this.viewPoint.doLayout();
			this.viewPoint.add(this.northContainer);
			this.viewPoint.add(this.navigatorPanel);
			this.viewPoint.add(this.eastPanel);
			this.viewPoint.add(this.southPanel);
			this.viewPoint.add(this.centralPanel);
			this.toolBar = this.oldToolBar;
			this.viewPoint.doLayout();
			this.tabPanel.setActiveTab(this.reattachIndex);
			prog.setTitle(this.oldTitle);
		}
	}
	,enterSingleAppMode: function() {
		var prog = this.getActiveProgram();
		if(prog != null) {
			this.oldTitle = prog.getComponent().tab.text;
			this.reattachIndex = this.tabPanel.items.findIndex("id",this.tabPanel.getActiveTab().id);
			this.viewPoint.remove(this.northContainer,false);
			this.viewPoint.remove(this.navigatorPanel,false);
			this.viewPoint.remove(this.eastPanel,false);
			this.viewPoint.remove(this.southPanel,false);
			this.viewPoint.remove(this.centralPanel,false);
			this.viewPoint.doLayout();
			this.appContainer = new saturn.client.SingleAppContainer();
			this.viewPoint.add(this.appContainer.getComponent());
			this.oldToolBar = this.toolBar;
			this.toolBar = this.appContainer.getControlToolBar();
			this.appContainer.setProgram(prog);
			this.appContainer.getCentralContainer().add(this.middleSouthPanel);
			this.appContainer.getCentralContainer().add(this.centralInfoPanel);
			this.viewPoint.show();
			this.viewPoint.doLayout();
		}
	}
	,getSingleAppContainer: function() {
		return this.appContainer;
	}
	,__class__: saturn.client.EXTApplication
});
saturn.client.SearchBarListener = $hxClasses["saturn.client.SearchBarListener"] = function() { };
saturn.client.SearchBarListener.__name__ = ["saturn","client","SearchBarListener"];
saturn.client.SearchBarListener.prototype = {
	objectSelected: null
	,textChanged: null
	,__class__: saturn.client.SearchBarListener
};
if(!saturn.app) saturn.app = {};
saturn.app.SaturnClient = $hxClasses["saturn.app.SaturnClient"] = function(applicationTitle,navigationTitle,southTitle,detailsTitle,tabContainerTitle,searchBarTitle,nakedMode) {
	saturn.client.EXTApplication.call(this,applicationTitle,navigationTitle,southTitle,detailsTitle,tabContainerTitle,searchBarTitle,nakedMode);
};
saturn.app.SaturnClient.__name__ = ["saturn","app","SaturnClient"];
saturn.app.SaturnClient.__interfaces__ = [saturn.client.SearchBarListener];
saturn.app.SaturnClient.main = function() {
	var inScarab = false;
	var client = new saturn.app.SaturnClient("SATurn Framework","Workspace","Notifications","Outline","Editor","Type to search (targets/constructs/alleles/entry clones/primers/compounds)",false);
	saturn.client.WorkspaceApplication.setApplication(client);
};
saturn.app.SaturnClient.getSaturn = function() {
	return js.Boot.__cast(saturn.client.WorkspaceApplication.getApplication() , saturn.app.SaturnClient);
};
saturn.app.SaturnClient.addProteinsFromNCBIGene = function(geneIds,editor) {
	var _g = 0;
	while(_g < geneIds.length) {
		var geneId = geneIds[_g];
		++_g;
		saturn.core.EUtils.getProteinsForGene(Std.parseInt(geneId),function(err,objs) {
			if(err == null) {
				if(editor != null) {
					var obj = objs.pop();
					var tmp = obj.getSequence();
					editor.setSequence(tmp);
					editor.getEntity().setDNA(obj.getDNA());
					editor.getWorkspace().renameWorkspaceObject(editor.getActiveObjectId(),obj.getMoleculeName());
					editor = null;
				}
				var _g1 = 0;
				while(_g1 < objs.length) {
					var obj1 = objs[_g1];
					++_g1;
					saturn.client.WorkspaceApplication.getApplication().getWorkspace().addObject(obj1,false);
				}
			} else {
				saturn.client.WorkspaceApplication.getApplication().showMessage("Fetch failure","Unable to fetch proteins from NCBI " + err);
			}
		});
	}
};
saturn.app.SaturnClient.addProteinsFromUniProtKB = function(accessions,editor) {
	var _g = 0;
	while(_g < accessions.length) {
		var accession = accessions[_g];
		++_g;
		var url = "http://www.uniprot.org/uniprot/" + accession + ".fasta";
		saturn.client.core.CommonCore.getContent(url,function(content) {
			var entities = saturn.core.FastaEntity.parseFasta(content);
			if(editor != null) {
				var entity = entities.pop();
				var tmp = entity.getSequence();
				editor.setSequence(tmp);
				editor.getEntity().setDNA(null);
				editor.getWorkspace().renameWorkspaceObject(editor.getActiveObjectId(),entity.getName());
				editor = null;
			}
			var _g1 = 0;
			while(_g1 < entities.length) {
				var entity1 = entities[_g1];
				++_g1;
				var prot = new saturn.core.Protein(entity1.getSequence());
				prot.setMoleculeName(entity1.getName());
				saturn.client.WorkspaceApplication.getApplication().getWorkspace().addObject(prot,false);
			}
		});
	}
};
saturn.app.SaturnClient.__super__ = saturn.client.EXTApplication;
saturn.app.SaturnClient.prototype = $extend(saturn.client.EXTApplication.prototype,{
	initApplication: function() {
		saturn.client.EXTApplication.prototype.initApplication.call(this);
		haxe.Serializer.USE_CACHE = true;
		saturn.client.core.CommonCore.getAnnotationManager().registerAnnotationSupplier(new saturn.core.annotations.PfamSupplier(),"PFAM");
		var dwin = js.Browser.get_window();
		dwin.app = this;
		dwin.WK = this.getWorkspace();
		dwin.wk = this.getWorkspace();
		dwin.ASYNC = function(objs,error) {
			dwin.result = objs;
			dwin.error = error;
		};
		dwin.EntryClone = saturn.core.domain.SgcEntryClone;
		dwin.Allele = saturn.core.domain.SgcAllele;
		dwin.Construct = saturn.core.domain.SgcConstruct;
		dwin.Vector = saturn.core.domain.SgcVector;
		dwin.DNA = saturn.core.DNA;
		dwin.Protein = saturn.core.Protein;
		dwin.Frame = saturn.core.Frame;
		dwin.StandardCode = saturn.core.GeneticCodes.STANDARD;
		dwin.DNAWO = saturn.client.workspace.DNAWorkspaceObject;
		dwin.ProteinWO = saturn.client.workspace.ProteinWorkspaceObject;
		dwin.PCR = saturn.core.PCRProduct;
		dwin.Primer = saturn.core.Primer;
		dwin.print = $bind(this,this.addToPrintBuffer);
		dwin.flush = $bind(this,this.flushBufferToPanel);
		dwin.LabPage = saturn.core.scarab.LabPage;
		this.debug("Saturn loaded");
	}
	,createMenuBar: function() {
		var _gthis = this;
		saturn.client.EXTApplication.prototype.createMenuBar.call(this);
		this.getResourcesMenu().add({ text : "Clear compound image cache", handler : function() {
			_gthis.clearCompoundImageCache();
		}});
		var exportMenu = this.getWorkspaceExportMenu();
		exportMenu.add({ text : "Protein -> FASTA", handler : function() {
			var workspace = _gthis.getWorkspace();
			var strBuf = new StringBuf();
			var woProteins = workspace.getAllObjects(saturn.core.Protein);
			var _g = 0;
			while(_g < woProteins.length) {
				var protein = woProteins[_g];
				++_g;
				var name = protein.getName();
				name = StringTools.replace(name," (Protein)","");
				strBuf.add(saturn.core.FastaEntity.formatFastaFile(name,protein.getSequence()));
			}
			var tmp = strBuf.toString();
			_gthis.saveTextFile(tmp,"Workspace_Proteins.fasta");
		}});
		exportMenu.add({ text : "DNA -> FASTA", handler : function() {
			var workspace1 = _gthis.getWorkspace();
			var strBuf1 = new StringBuf();
			var objs = workspace1.getAllObjects(saturn.core.DNA);
			var _g1 = 0;
			while(_g1 < objs.length) {
				var dna = objs[_g1];
				++_g1;
				var name1 = dna.getName();
				name1 = StringTools.replace(name1," (DNA)","");
				strBuf1.add(saturn.core.FastaEntity.formatFastaFile(name1,dna.getSequence()));
			}
			var tmp1 = strBuf1.toString();
			_gthis.saveTextFile(tmp1,"Workspace_DNA.fasta");
		}});
		var _g2 = new haxe.ds.StringMap();
		_g2.set("construct_protein","Update Construct Protein BLASTDB");
		_g2.set("construct_protein_no_tag","Update Construct Protein (No Tag) BLASTDB");
		_g2.set("construct_nucleotide","Update Construct Nucleotide BLASTDB");
		_g2.set("allele_nucleotide","Update PCR Products Nucleotide BLASTDB");
		_g2.set("allele_protein","Update PCR Products Protein BLASTDB");
		_g2.set("entryclone_nucleotide","Update Entry Clone Nucleotide BLASTDB");
		_g2.set("entryclone_protein","Update Entry Clone Protein BLASTDB");
		_g2.set("target_nucleotide","Update Target Nucleotide BLASTDB");
		_g2.set("target_protein","Update Target Protein BLASTDB");
		_g2.set("vector_nucleotide","Update Vector Nucleotide BLASTDB");
		var databases = _g2;
		this.getUpdateMenu().add({ text : "All Local BLASTDBs", handler : function() {
			var databaseNames = [];
			var databaseName = databases.keys();
			while(databaseName.hasNext()) {
				var databaseName1 = databaseName.next();
				databaseNames.push(databaseName1);
			}
			var next = null;
			next = function() {
				var databaseName2 = databaseNames.pop();
				saturn.client.BioinformaticsServicesClient.getClient().sendBLASTDBUpdateRequest(databaseName2,function(response,error) {
					if(error != null) {
						_gthis.showMessage("BLASTDB update failed on " + databaseName2,error);
					}
					if(databaseNames.length == 0) {
						_gthis.showMessage("BLAST Updates","BLASTDB updates completed");
					} else {
						next();
					}
				});
			};
			next();
		}});
		var databaseName3 = databases.keys();
		while(databaseName3.hasNext()) {
			var databaseName4 = databaseName3.next();
			var databaseName5 = [databaseName4];
			var tmp2 = this.getUpdateMenu();
			var tmp3 = databases.get(databaseName5[0]);
			var tmp4 = (function(databaseName6) {
				return function() {
					saturn.client.BioinformaticsServicesClient.getClient().sendBLASTDBUpdateRequest(databaseName6[0],(function() {
						return function(response1,error1) {
							if(error1 != null) {
								_gthis.showMessage("BLASTDB update failed",error1);
							} else {
								_gthis.showMessage("BLASTDB updated","BLASTDB updated");
							}
						};
					})());
				};
			})(databaseName5);
			tmp2.add({ text : tmp3, handler : tmp4});
		}
	}
	,registerPrograms: function() {
		saturn.client.EXTApplication.prototype.registerPrograms.call(this);
		this.getProgramRegistry().registerPlugin(saturn.client.programs.ProteinSequenceEditor,saturn.client.programs.plugins.SVGDomainAnnotationPlugin);
		this.getProgramRegistry().registerPlugin(saturn.client.programs.ProteinSequenceEditor,saturn.client.programs.plugins.SSAnnotationPlugin);
		this.getProgramRegistry().registerPlugin(saturn.client.programs.ProteinSequenceEditor,saturn.client.programs.plugins.TMHMMAnnotationPlugin);
		this.getProgramRegistry().registerPlugin(saturn.client.programs.GridVarViewer,saturn.client.programs.plugins.FASTAGridVarPlugin);
		this.getProgramRegistry().registerPlugin(saturn.client.programs.PDBViewer,saturn.client.programs.plugins.ThreeDMolViewer);
		this.getProgramRegistry().registerPlugin(saturn.client.programs.PDBViewer,saturn.client.programs.plugins.GLmolViewerPlugin);
		this.getProgramRegistry().registerPlugin(saturn.client.programs.GridVarViewer,saturn.client.programs.plugins.AlignmentGVPlugin);
		this.getProgramRegistry().registerProgram(saturn.client.programs.WebPageViewer,true);
		this.getProgramRegistry().registerProgram(saturn.client.programs.ProteinSequenceEditor,true);
		this.getProgramRegistry().registerProgram(saturn.client.programs.DNASequenceEditor,true);
		this.getProgramRegistry().registerProgram(saturn.client.programs.AlignmentViewer,true);
		this.getProgramRegistry().registerProgram(saturn.client.programs.ABITraceViewer,true);
		this.getProgramRegistry().registerProgram(saturn.client.programs.ConstructDesigner,true);
		this.getProgramRegistry().registerProgram(saturn.client.programs.MultiAlleleHelper,true);
		this.getProgramRegistry().registerProgram(saturn.client.programs.MultiConstructHelper,true);
		this.getProgramRegistry().registerProgram(saturn.client.programs.Phylo5Viewer,true);
		this.getProgramRegistry().registerProgram(saturn.client.programs.TableHelper,true);
		this.getProgramRegistry().registerProgram(saturn.client.programs.GridVarViewer,true);
		this.getProgramRegistry().registerProgram(saturn.client.programs.PDBViewer,true);
		this.getProgramRegistry().registerProgram(saturn.client.programs.TextEditor,true);
		this.getProgramRegistry().registerProgram(saturn.client.programs.BasicTableViewer,true);
		this.getProgramRegistry().registerProgram(saturn.client.programs.CompoundViewer,true);
		this.getProgramRegistry().registerProgram(saturn.client.programs.HomePage,true);
		this.getProgramRegistry().registerProgram(saturn.client.programs.ComplexHelper,true);
		this.addSearchBarListener(this);
	}
	,objectSelected: function(app,records,it) {
		var targetId = records[0].data.targetId;
		var seqType = records[0].data.type;
		var item = records[0].data;
		var self = this;
		if(!this.autocomplete_retrieveModel(item)) {
			if(targetId.indexOf("PAGE") != -1) {
				this.autocomplete_retrievePage(targetId);
			} else {
				this.autocomplete_retrieveTargetSequence(targetId,seqType,item);
			}
		}
	}
	,textChanged: function(app,queryStr,it) {
		var _gthis = this;
		var sequenceEntered = false;
		if(queryStr.length > 30) {
			if(queryStr.indexOf(">") == -1) {
				var regex = new EReg("\\s","g");
				var regex2 = new EReg("\n","g");
				var convertedString = regex.replace(queryStr,"");
				var convertedString1 = regex2.replace(convertedString,"");
				if(saturn.core.DNA.isDNA(convertedString1) || saturn.core.Protein.isProtein(convertedString1)) {
					queryStr = ">Sequence\n" + convertedString1 + "\n";
					sequenceEntered = true;
				}
			} else {
				sequenceEntered = true;
			}
			if(sequenceEntered) {
				saturn.client.programs.DNASequenceEditor.parseFastaString(queryStr,true);
				return;
			}
		}
		var modifier = null;
		if(queryStr.indexOf("edit ") > -1) {
			modifier = "edit";
			queryStr = saturn.app.SaturnClient.reg_edit.replace(queryStr,"");
			if(queryStr.length == 0) {
				this.autocomplete_update([]);
				return;
			}
		}
		if(queryStr == "me") {
			if(saturn.client.core.ClientCore.getClientCore().getUser() != null) {
				queryStr = saturn.client.core.ClientCore.getClientCore().getUser().fullname;
			}
		}
		var units = [];
		var provider = this.getProvider();
		if(provider != null) {
			var model = provider.getModel(saturn.app.SaturnClient);
			if(model != null) {
				if(model.hasFlag("SGC")) {
					units.push({ indexof : null, func : $bind(this,this.autocomplete_targets), minlen : null, name : "Targets", limit : 10});
					units.push({ indexof : "pdb-", func : $bind(this,this.retrieve_pdb), minlen : null, name : "PDB", limit : 10});
					units.push({ indexof : "PAGE", func : $bind(this,this.autocomplete_eln), minlen : null, name : "ELN", limit : 10});
				}
			}
		}
		units.push({ indexof : null, func : $bind(this,this.autocomplete_fts_models), minlen : null, name : "FTS", limit : 10});
		var foundItems = [];
		var i = 0;
		var completed = 0;
		var toComplete = 0;
		var onComplete = function(items) {
			completed += 1;
			if(items != null) {
				var _g = 0;
				while(_g < items.length) {
					var item = items[_g];
					++_g;
					i += 1;
					item.id = i - 1;
					foundItems.push(item);
				}
			}
			if(completed == toComplete) {
				foundItems.sort(function(a,b) {
					var aUnitSortPosition = Reflect.field(a,"unitSortPosition");
					var bUnitSortPosition = Reflect.field(b,"unitSortPosition");
					var aInternalSortPosition = Reflect.field(a,"internalSortPosition");
					var bInternalSortPosition = Reflect.field(b,"internalSortPosition");
					if(aUnitSortPosition < bUnitSortPosition) {
						return -1;
					}
					if(aUnitSortPosition > bUnitSortPosition) {
						return 1;
					}
					if(aInternalSortPosition > bInternalSortPosition) {
						return 1;
					}
					if(aInternalSortPosition < bInternalSortPosition) {
						return -1;
					}
					return 0;
				});
				_gthis.autocomplete_update(foundItems);
				it.next();
			}
		};
		var _g1 = 0;
		while(_g1 < units.length) {
			var unit = units[_g1];
			++_g1;
			var indexof = unit.indexof;
			var minlen = unit.minlen;
			if(!(indexof != null && queryStr.indexOf(indexof) == -1)) {
				if(!(minlen != null && queryStr.length < minlen)) {
					toComplete += 1;
				}
			}
		}
		var unitSortPosition = 0;
		var _g2 = 0;
		while(_g2 < units.length) {
			var unit1 = units[_g2];
			++_g2;
			var indexof1 = unit1.indexof;
			var minlen1 = unit1.minlen;
			var func = unit1.func;
			var name = unit1.name;
			var limit = unit1.limit;
			if(!(indexof1 != null && queryStr.indexOf(indexof1) == -1)) {
				if(!(minlen1 != null && queryStr.length < minlen1)) {
					++unitSortPosition;
					func(queryStr,onComplete,limit,unitSortPosition);
				}
			}
		}
	}
	,autocomplete_models: function(queryStr,nextSearch,limit) {
		var _gthis = this;
		var match = false;
		var _g = 0;
		var _g1 = this.getProvider().getModelClasses();
		while(_g < _g1.length) {
			var model = [_g1[_g]];
			++_g;
			var searchMap = model[0].getSearchMap();
			if(searchMap == null) {
				continue;
			}
			var field = searchMap.keys();
			while(field.hasNext()) {
				var field1 = field.next();
				var field2 = [field1];
				var regex = searchMap.get(field2[0]);
				if(regex.match(queryStr)) {
					match = true;
					if(model[0].stripPrefixes()) {
						queryStr = regex.replace(queryStr,"");
					}
					var idField = model[0].getFirstKey();
					var icon = [model[0].getIcon()];
					this.getProvider().getByIdStartsWith(queryStr,field2[0],model[0].getClass(),limit,(function(icon1,field3,model1) {
						return function(objs,exception) {
							if(exception == null) {
								if(objs == null || objs.length == 0) {
									nextSearch(null);
								} else {
									var storeList = [];
									var objIds = [];
									var _g2 = 0;
									while(_g2 < objs.length) {
										var obj = objs[_g2];
										++_g2;
										var id = Reflect.field(obj,field3[0]);
										objIds.push(id);
									}
									objIds.sort((function() {
										return function(a,b) {
											return Reflect.compare((a == null ? "null" : "" + a).toLowerCase(),(b == null ? "null" : "" + b).toLowerCase());
										};
									})());
									var i = 0;
									var _g21 = 0;
									while(_g21 < objIds.length) {
										var objId = objIds[_g21];
										++_g21;
										storeList.push({ icon : icon1[0], title : objId, id : i++, targetId : objId, type : model1[0], field : field3[0]});
									}
									nextSearch(storeList);
								}
							} else {
								_gthis.lookupException(exception);
							}
						};
					})(icon,field2,model));
				}
			}
		}
		if(!match) {
			nextSearch(null);
		}
	}
	,autocomplete_fts_models: function(queryStr,nextSearch,limit,unitSortPosition) {
		var _gthis = this;
		var match = false;
		var model = null;
		var models = [];
		var ftsMap = new haxe.ds.StringMap();
		var ftsColumns = [];
		var next = null;
		var foundItems = [];
		var queryItems = null;
		if(queryStr.indexOf(" ") > -1) {
			var reg = new EReg("\\s+","g");
			queryItems = reg.split(queryStr);
			if(queryItems.length > 1) {
				var _g = 0;
				var _g1 = this.getProvider().getModelClasses();
				while(_g < _g1.length) {
					var model1 = _g1[_g];
					++_g;
					var ftsColumn = model1.getFirstKey();
					var cleanedItems = queryItems;
					if(model1.stripPrefixes()) {
						cleanedItems = [];
						var _g3 = 0;
						var _g2 = queryItems.length;
						while(_g3 < _g2) {
							var i = _g3++;
							cleanedItems[i] = model1.getIdRegEx().replace(queryItems[i],"");
						}
					}
					this.getProvider().getByValues(cleanedItems,model1.getClass(),ftsColumn,function(objs,err) {
						if(err == null) {
							if(objs != null) {
								var _g21 = 0;
								while(_g21 < objs.length) {
									var obj = objs[_g21];
									++_g21;
									_gthis.getWorkspace().addObject(obj,true);
								}
							}
						}
					});
				}
				return;
			}
		}
		var _g4 = 0;
		var _g11 = this.getProvider().getModelClasses();
		while(_g4 < _g11.length) {
			var model2 = _g11[_g4];
			++_g4;
			models.push(model2);
		}
		var toComplete = 0;
		var _g5 = 0;
		while(_g5 < models.length) {
			var model3 = models[_g5];
			++_g5;
			var ftsMap1 = model3.getFTSColumns();
			if(ftsMap1 != null) {
				var column = ftsMap1.keys();
				while(column.hasNext()) {
					var column1 = column.next();
					toComplete += 1;
				}
			}
		}
		var completed = 0;
		var storeList = [];
		var internalSortPosition = 0;
		var _g6 = 0;
		while(_g6 < models.length) {
			var model4 = [models[_g6]];
			++_g6;
			ftsMap = model4[0].getFTSColumns();
			if(ftsMap == null) {
				continue;
			}
			var ftsColumn1 = ftsMap.keys();
			while(ftsColumn1.hasNext()) {
				var ftsColumn2 = ftsColumn1.next();
				var ftsColumn3 = [ftsColumn2];
				var searchDef = ftsMap.get(ftsColumn3[0]);
				++internalSortPosition;
				var regex = searchDef.regex;
				if(regex != null) {
					if(!regex.match(queryStr)) {
						completed += 1;
						continue;
					} else if(searchDef.replaceWith != null) {
						queryStr = searchDef.regex.replace(queryStr,searchDef.replaceWith);
					}
				}
				var icon = [model4[0].getIcon()];
				var actions = [model4[0].getActions("search_bar")];
				var _internalSortPosition = [internalSortPosition];
				var handler = [(function(_internalSortPosition1,actions1,icon1,ftsColumn4,model5) {
					return function(objs1,exception) {
						completed += 1;
						if(exception == null) {
							if(!(objs1 == null || objs1.length == 0)) {
								objs1.sort((function(ftsColumn5) {
									return function(a,b) {
										return Reflect.compare(Reflect.field(a,ftsColumn5[0]),Reflect.field(b,ftsColumn5[0]));
									};
								})(ftsColumn4));
								var i1 = 0;
								var idField = model5[0].getFirstKey();
								var _g12 = 0;
								while(_g12 < objs1.length) {
									var obj1 = objs1[_g12];
									++_g12;
									var idValue = Reflect.field(obj1,idField);
									var title = saturn.db.Model.extractField(obj1,ftsColumn4[0]);
									if(idField != ftsColumn4[0]) {
										title += " - " + idValue;
									}
									if(Reflect.field(obj1,"getShortDescription") != null) {
										title = obj1.getShortDescription();
									}
									if(actions1[0].exists("DEFAULT")) {
										var action = actions1[0].get("DEFAULT");
										var _internalSortPosition2 = _internalSortPosition1[0];
										var icon2 = icon1[0];
										var model6 = model5[0];
										var handler1 = model5[0].getAlias();
										storeList.push({ internalSortPosition : _internalSortPosition2, unitSortPosition : unitSortPosition, action : action, icon : icon2, title : title, id : i1++, targetId : idValue, type : model6, field : idField, group : handler1});
									} else {
										var _internalSortPosition3 = _internalSortPosition1[0];
										var icon3 = icon1[0];
										var model7 = model5[0];
										var handler2 = model5[0].getAlias();
										storeList.push({ internalSortPosition : _internalSortPosition3, unitSortPosition : unitSortPosition, icon : icon3, title : title, id : i1++, targetId : idValue, type : model7, field : idField, group : handler2});
									}
									var actionName = actions1[0].keys();
									while(actionName.hasNext()) {
										var actionName1 = actionName.next();
										if(actionName1 == "DEFAULT") {
											continue;
										}
										var action1 = actions1[0].get(actionName1);
										var actionIcon = icon1[0];
										if(action1.icon != null) {
											actionIcon = action1.icon;
										}
										var _internalSortPosition4 = _internalSortPosition1[0];
										var handler3 = title + " (" + action1.userSuffix + ")";
										var model8 = model5[0];
										var handler4 = model5[0].getAlias();
										storeList.push({ internalSortPosition : _internalSortPosition4, unitSortPosition : unitSortPosition, action : action1, icon : actionIcon, title : handler3, id : i1++, targetId : idValue, type : model8, field : idField, group : handler4});
									}
								}
							}
						} else {
							var handler5 = saturn.client.core.CommonCore.getStringError(exception) == "You must be logged in to use this provider";
						}
						if(completed == toComplete) {
							nextSearch(storeList);
						}
					};
				})(_internalSortPosition,actions,icon,ftsColumn3,model4)];
				if(ftsColumn3[0].indexOf(".") > -1) {
					this.getProvider().queryPath(model4[0].getClass(),ftsColumn3[0],queryStr,"getByValues",(function(handler6) {
						return function(err1,objs2) {
							handler6[0](objs2,err1);
						};
					})(handler));
				} else if(queryItems == null) {
					if(model4[0].stripPrefixes()) {
						queryStr = model4[0].getIdRegEx().replace(queryStr,"");
					}
					this.getProvider().getByIdStartsWith(queryStr,ftsColumn3[0],model4[0].getClass(),limit,handler[0]);
				}
			}
		}
	}
	,autocomplete_retrieveModel: function(item) {
		var _gthis = this;
		var model = item.type;
		var id = item.targetId;
		var field = item.field;
		if(Std["is"](model,saturn.db.Model)) {
			var clazz = model.getClass();
			var wrapperClazz = model.getWorkspaceWrapperClass();
			this.getProvider().getByValue(id,clazz,field,function(obj,exception) {
				if(exception == null && obj != null) {
					var append = function(obj1) {
						if(obj1 != null) {
							var wo;
							if(wrapperClazz != null) {
								wo = Type.createInstance(wrapperClazz,[obj1,id]);
							} else {
								wo = obj1;
							}
							_gthis.getWorkspace().addObject(wo,true);
						}
					};
					if(item.action != null) {
						item.action.run(obj,append);
					} else {
						append(obj);
					}
				} else if(exception != null) {
					_gthis.lookupException(exception.message);
				}
			});
			return true;
		} else {
			return false;
		}
	}
	,autocomplete_eln: function(query,nextSearch,limit) {
		var _gthis = this;
		this.getProvider().getByIdStartsWith(query,null,saturn.core.scarab.LabPage,limit,function(pages,exception) {
			if(exception == null) {
				if(pages == null || pages.length == 0) {
					nextSearch(null);
					return;
				}
				var storeList = [];
				var i = 0;
				var _g = 0;
				while(_g < pages.length) {
					var page = pages[_g];
					++_g;
					storeList.push({ title : page.experimentNo, id : i++, targetId : page.experimentNo, type : "eln"});
				}
				nextSearch(storeList);
			} else if(exception != null) {
				_gthis.lookupException(exception.message);
				nextSearch(null);
			}
		});
	}
	,autocomplete_retrievePage: function(query) {
		var _gthis = this;
		this.getProvider().getById(query,saturn.core.scarab.LabPage,function(page,exception) {
			if(exception == null && page != null) {
				_gthis.getProvider().activate([page],2,function(error) {
					var wo = new saturn.client.workspace.ScarabELNWO(page,query);
					_gthis.getWorkspace().addObject(wo,true);
				});
			} else if(exception != null) {
				_gthis.lookupException(exception.message);
			}
		});
	}
	,lookupException: function(msg) {
		saturn.client.WorkspaceApplication.getApplication().showMessage("Lookup exception",msg);
	}
	,autocomplete_targets: function(query,nextSearch,limit,unitSortPosition) {
		var _gthis = this;
		var modifierStr = "";
		var modifier = "";
		this.getProvider().getByIdStartsWith(query,null,saturn.core.domain.SgcTarget,limit,function(targets,exception) {
			if(exception == null) {
				var internalSortPosition = 0;
				if(targets == null || targets.length == 0) {
					nextSearch(null);
					return;
				}
				var storeList = [];
				var uniqueMap = new haxe.ds.StringMap();
				var _g = 0;
				while(_g < targets.length) {
					var target = targets[_g];
					++_g;
					var targetId = HxOverrides.substr(target.targetId,0,target.targetId.length - 1);
					uniqueMap.set(targetId,"");
				}
				var baseCount = 0;
				var key = uniqueMap.keys();
				while(key.hasNext()) {
					var key1 = key.next();
					++baseCount;
				}
				var lastBaseName = null;
				var i = 0;
				var _g1 = 0;
				while(_g1 < targets.length) {
					var target1 = targets[_g1];
					++_g1;
					var baseName = HxOverrides.substr(target1.targetId,0,target1.targetId.length - 1);
					var group = "Targets";
					if(target1.targetId.toUpperCase() == query.toUpperCase() || baseCount <= 2 && (lastBaseName == null || baseName != lastBaseName)) {
						lastBaseName = baseName;
						group = target1.targetId;
						storeList.push({ unitSortPosition : unitSortPosition, internalSortPosition : internalSortPosition, icon : "gridvar_16.png", title : target1.targetId + " (Target Summary)", id : i++, targetId : target1.targetId, type : "Constructs Protein - No Tag Summary", group : group});
						++internalSortPosition;
						storeList.push({ unitSortPosition : unitSortPosition, internalSortPosition : internalSortPosition, icon : "structure_16.png", title : modifierStr + baseName + " (All Isoforms - Protein)", id : i++, targetId : target1.targetId, type : "All Isoforms - Protein", modifier : modifier, group : group});
						++internalSortPosition;
						storeList.push({ unitSortPosition : unitSortPosition, internalSortPosition : internalSortPosition, icon : "dna_16.png", title : modifierStr + baseName + " (All Isoforms - Nucleotide)", id : i++, targetId : target1.targetId, type : "All Isoforms - Nucleotide", modifier : modifier, group : group});
						++internalSortPosition;
					}
					storeList.push({ unitSortPosition : unitSortPosition, internalSortPosition : internalSortPosition, icon : "structure_16.png", title : modifierStr + target1.targetId + " (Protein)", id : i++, targetId : target1.targetId, type : "Protein", modifier : modifier, group : group});
					++internalSortPosition;
					storeList.push({ unitSortPosition : unitSortPosition, internalSortPosition : internalSortPosition, icon : "dna_16.png", title : modifierStr + target1.targetId + " (DNA)", id : i++, targetId : target1.targetId, type : "Nucleotide", modifier : modifier, group : group});
					++internalSortPosition;
					if(target1.targetId.toUpperCase() == query.toUpperCase() || targets.length <= 3) {
						group = target1.targetId;
						storeList.push({ unitSortPosition : unitSortPosition, internalSortPosition : internalSortPosition, icon : "dna_16.png", title : modifierStr + target1.targetId + " (Entry Clones DNA)", id : i++, targetId : target1.targetId, type : "Entry Clones DNA", modifier : modifier, group : group});
						++internalSortPosition;
						storeList.push({ unitSortPosition : unitSortPosition, internalSortPosition : internalSortPosition, icon : "structure_16.png", title : modifierStr + target1.targetId + " (Entry Clones - Translation)", id : i++, targetId : target1.targetId, type : "Entry Clones Translation", modifier : modifier, group : group});
						++internalSortPosition;
						storeList.push({ unitSortPosition : unitSortPosition, internalSortPosition : internalSortPosition, icon : "structure_16.png", title : modifierStr + target1.targetId + " (Alleles Protein)", id : i++, targetId : target1.targetId, type : "Alleles Protein", modifier : modifier, group : group});
						++internalSortPosition;
						storeList.push({ unitSortPosition : unitSortPosition, internalSortPosition : internalSortPosition, icon : "dna_16.png", title : modifierStr + target1.targetId + " (Alleles DNA)", id : i++, targetId : target1.targetId, type : "Alleles DNA", modifier : modifier, group : group});
						++internalSortPosition;
						storeList.push({ unitSortPosition : unitSortPosition, internalSortPosition : internalSortPosition, icon : "structure_16.png", title : modifierStr + target1.targetId + " (Constructs Protein)", id : i++, targetId : target1.targetId, type : "Constructs Protein", modifier : modifier, group : group});
						++internalSortPosition;
						storeList.push({ unitSortPosition : unitSortPosition, internalSortPosition : internalSortPosition, icon : "structure_16.png", title : modifierStr + target1.targetId + " (Constructs Protein - No Tag)", id : i++, targetId : target1.targetId, type : "Constructs Protein - No Tag", modifier : modifier, group : group});
						++internalSortPosition;
						storeList.push({ unitSortPosition : unitSortPosition, internalSortPosition : internalSortPosition, icon : "dna_16.png", title : modifierStr + target1.targetId + " (Constructs DNA)", id : i++, targetId : target1.targetId, type : "Constructs DNA", modifier : modifier, group : group});
						++internalSortPosition;
						storeList.push({ unitSortPosition : unitSortPosition, internalSortPosition : internalSortPosition, icon : "aln_16.png", title : "Align " + target1.targetId + " (Constructs DNA)", id : i++, targetId : target1.targetId, type : "Constructs DNA Align", group : group});
						++internalSortPosition;
						storeList.push({ unitSortPosition : unitSortPosition, internalSortPosition : internalSortPosition, icon : "aln_16.png", title : "Align " + target1.targetId + " (Constructs Protein)", id : i++, targetId : target1.targetId, type : "Constructs Protein Align", group : group});
						++internalSortPosition;
						storeList.push({ unitSortPosition : unitSortPosition, internalSortPosition : internalSortPosition, icon : "aln_16.png", title : "Align " + target1.targetId + " (Constructs Protein - No Tag)", id : i++, targetId : target1.targetId, type : "Constructs Protein - No Tag Align", group : group});
						++internalSortPosition;
					}
				}
				nextSearch(storeList);
			} else if(exception != null) {
				_gthis.lookupException(exception.message);
			}
		});
	}
	,autocomplete_retrieveTargetSequence: function(targetId,seqType,item) {
		var _gthis = this;
		if(seqType == "All Isoforms - Protein" || seqType == "All Isoforms - Nucleotide") {
			var type = "Protein";
			var label = "Protein";
			if(seqType == "All Isoforms - Nucleotide") {
				label = "DNA";
				type = "Nucleotide";
			}
			this.getProvider().getById(targetId,saturn.core.domain.SgcTarget,function(obj,ex) {
				if(ex != null) {
					_gthis.lookupException(ex.message);
					return;
				}
				_gthis.getProvider().getByValues([obj.geneId],saturn.core.domain.SgcTarget,"geneId",function(objs,ex1) {
					if(ex1 != null) {
						_gthis.lookupException(ex1.message);
						return;
					}
					if(objs.length == 0) {
						_gthis.lookupException("No isoforms found");
					}
					var autoOpen = true;
					_gthis.getWorkspace().beginUpdate();
					var _g = 0;
					while(_g < objs.length) {
						var obj1 = objs[_g];
						++_g;
						if(type == "Protein") {
							_gthis.getWorkspace().addObject(obj1,false);
							obj1.proteinSequenceObj.setName(obj1.targetId + " (Translation)");
							_gthis.getWorkspace().addObject(obj1.proteinSequenceObj,true);
						} else if(type == "Nucleotide") {
							_gthis.getWorkspace().addObject(obj1,true);
						}
						autoOpen = false;
					}
					_gthis.getWorkspace().reloadWorkspace();
				});
			});
		} else if(seqType == "Protein" || seqType == "Nucleotide") {
			this.getProvider().getById(targetId,saturn.core.domain.SgcTarget,function(obj2,ex2) {
				if(ex2 != null) {
					_gthis.lookupException(ex2.message);
					return;
				}
				if(seqType == "Protein") {
					_gthis.getWorkspace().addObject(obj2,false);
					obj2.proteinSequenceObj.setName(obj2.targetId + " (Translation)");
					_gthis.getWorkspace().addObject(obj2.proteinSequenceObj,true);
				} else if(seqType == "Nucleotide") {
					_gthis.getWorkspace().addObject(obj2,true);
				}
			});
		} else if(seqType == "Entry Clones DNA") {
			this.getProvider().getByNamedQuery("TARGET_TO_ENTRY_CLONES",[targetId],saturn.core.domain.SgcEntryClone,false,function(clones,exception) {
				if(exception == null && clones != null && clones.length != 0) {
					var autoOpen1 = true;
					var folderName = targetId + " (Entry Clone DNA)";
					var folder = _gthis.getWorkspace()._addFolder(folderName);
					_gthis.getWorkspace().beginUpdate();
					var added = 0;
					var _g1 = 0;
					while(_g1 < clones.length) {
						var clone = clones[_g1];
						++_g1;
						if(clone.dnaSeq != null) {
							_gthis.getWorkspace()._addObject(clone,autoOpen1,false,folder);
							autoOpen1 = false;
							++added;
						}
					}
					if(added > 0) {
						_gthis.getWorkspace().reloadWorkspace();
					} else {
						_gthis.showMessage("No data","No alleles with a Protein sequence");
					}
				} else if(exception != null) {
					_gthis.lookupException(exception.message);
				} else if(clones == null || clones.length == 0) {
					_gthis.showMessage("No entries","No entries in database");
				}
			});
		} else if(seqType == "Entry Clones Translation") {
			this.getProvider().getByNamedQuery("TARGET_TO_ENTRY_CLONES",[targetId],saturn.core.domain.SgcEntryClone,false,function(clones1,exception1) {
				if(exception1 == null && clones1 != null && clones1.length != 0) {
					var autoOpen2 = true;
					var folderName1 = targetId + " (Entry Clone Translation)";
					var folder1 = _gthis.getWorkspace()._addFolder(folderName1);
					_gthis.getWorkspace().beginUpdate();
					var added1 = 0;
					var _g2 = 0;
					while(_g2 < clones1.length) {
						var clone1 = clones1[_g2];
						++_g2;
						if(clone1.dnaSeq != null) {
							try {
								var tx = clone1.getTranslation(saturn.core.GeneticCodes.STANDARD,0,false);
								var prot = new saturn.core.Protein(tx);
								prot.setName(clone1.entryCloneId + " (Protein)");
								_gthis.getWorkspace()._addObject(prot,autoOpen2,false,folder1);
								autoOpen2 = false;
								++added1;
							} catch( ex3 ) {
								if (ex3 instanceof js._Boot.HaxeError) ex3 = ex3.val;
								if( js.Boot.__instanceof(ex3,saturn.util.HaxeException) ) {
								} else throw(ex3);
							}
						}
					}
					if(added1 > 0) {
						_gthis.getWorkspace().reloadWorkspace();
					} else {
						_gthis.showMessage("No data","No alleles with a Protein sequence");
					}
				} else if(exception1 != null) {
					_gthis.lookupException(exception1.message);
				} else if(clones1 == null || clones1.length == 0) {
					_gthis.showMessage("No entries","No entries in database");
				}
			});
		} else if(seqType == "Alleles Protein") {
			this.getProvider().getByNamedQuery("TARGET_TO_ALLELES",[targetId],saturn.core.domain.SgcAllele,false,function(alleles,exception2) {
				if(exception2 == null && alleles != null && alleles.length != 0) {
					var autoOpen3 = true;
					var folderName2 = targetId + " (Allele Protein)";
					var folder2 = _gthis.getWorkspace()._addFolder(folderName2);
					_gthis.getWorkspace().beginUpdate();
					var added2 = 0;
					var _g3 = 0;
					while(_g3 < alleles.length) {
						var allele = alleles[_g3];
						++_g3;
						if(allele.proteinSeq != null) {
							allele.proteinSequenceObj.setName(allele.getName() + " (Protein)");
							_gthis.getWorkspace()._addObject(allele.proteinSequenceObj,autoOpen3,false,folder2);
							autoOpen3 = false;
							++added2;
						}
					}
					if(added2 > 0) {
						_gthis.getWorkspace().reloadWorkspace();
					} else {
						_gthis.showMessage("No data","No alleles with a Protein sequence");
					}
				} else if(exception2 != null) {
					_gthis.lookupException(exception2.message);
				} else if(alleles == null || alleles.length == 0) {
					_gthis.showMessage("No entries","No entries in database");
				}
			});
		} else if(seqType == "Alleles DNA") {
			this.getProvider().getByNamedQuery("TARGET_TO_ALLELES",[targetId],saturn.core.domain.SgcAllele,false,function(alleles1,exception3) {
				if(exception3 == null && alleles1 != null && alleles1.length != 0) {
					var autoOpen4 = true;
					var folderName3 = targetId + " (Allele DNA)";
					var folder3 = _gthis.getWorkspace()._addFolder(folderName3);
					_gthis.getWorkspace().beginUpdate();
					var added3 = 0;
					var _g4 = 0;
					while(_g4 < alleles1.length) {
						var allele1 = alleles1[_g4];
						++_g4;
						if(allele1.dnaSeq != null) {
							_gthis.getWorkspace()._addObject(allele1,autoOpen4,false,folder3);
							++added3;
							autoOpen4 = false;
						}
					}
					if(added3 > 0) {
						_gthis.getWorkspace().reloadWorkspace();
					} else {
						_gthis.showMessage("No data","No alleles with a DNA sequence");
					}
				} else if(exception3 != null) {
					_gthis.lookupException(exception3.message);
				} else if(alleles1 == null || alleles1.length == 0) {
					_gthis.showMessage("No entries","No entries in database");
				}
			});
		} else if(seqType == "Constructs Protein") {
			this.getProvider().getByNamedQuery("TARGET_TO_CONSTRUCTS",[targetId],saturn.core.domain.SgcConstruct,false,function(constructs,exception4) {
				if(exception4 == null && constructs != null && constructs.length != 0) {
					var autoOpen5 = true;
					var folderName4 = targetId + " (Constructs Protein)";
					var folder4 = _gthis.getWorkspace()._addFolder(folderName4);
					_gthis.getWorkspace().beginUpdate();
					var added4 = 0;
					var _g5 = 0;
					while(_g5 < constructs.length) {
						var construct = constructs[_g5];
						++_g5;
						if(construct.proteinSeq != null) {
							var protein = construct.proteinSequenceObj;
							protein.setName(construct.constructId + " - Protein");
							_gthis.getWorkspace()._addObject(protein,autoOpen5,false,folder4);
							autoOpen5 = false;
							++added4;
						}
					}
					if(added4 > 0) {
						_gthis.getWorkspace().reloadWorkspace();
					} else {
						_gthis.showMessage("No data","No constructs with a protein sequence");
					}
				} else if(exception4 != null) {
					_gthis.lookupException(exception4.message);
				} else if(constructs == null || constructs.length == 0) {
					_gthis.showMessage("No entries","No entries in database");
				}
			});
		} else if(seqType == "Constructs DNA") {
			this.getProvider().getByNamedQuery("TARGET_TO_CONSTRUCTS",[targetId],saturn.core.domain.SgcConstruct,false,function(constructs1,exception5) {
				if(exception5 == null && constructs1 != null && constructs1.length != 0) {
					var autoOpen6 = true;
					var folderName5 = targetId + " (Constructs DNA)";
					var folder5 = _gthis.getWorkspace()._addFolder(folderName5);
					_gthis.getWorkspace().beginUpdate();
					var added5 = 0;
					var _g6 = 0;
					while(_g6 < constructs1.length) {
						var construct1 = constructs1[_g6];
						++_g6;
						if(construct1.proteinSeq != null) {
							_gthis.getWorkspace()._addObject(construct1,autoOpen6,false,folder5);
							autoOpen6 = false;
							++added5;
						}
					}
					if(added5 > 0) {
						_gthis.getWorkspace().reloadWorkspace();
					} else {
						_gthis.showMessage("No data","No constructs with a DNA sequence");
					}
				} else if(exception5 != null) {
					_gthis.lookupException(exception5.message);
				} else if(constructs1 == null || constructs1.length == 0) {
					_gthis.showMessage("No entries","No entries in database");
				}
			});
		} else if(seqType == "Constructs Protein - No Tag") {
			this.getProvider().getByNamedQuery("TARGET_TO_CONSTRUCTS",[targetId],saturn.core.domain.SgcConstruct,false,function(constructs2,exception6) {
				if(exception6 == null && constructs2 != null && constructs2.length != 0) {
					var autoOpen7 = true;
					var folderName6 = targetId + " (Constructs Protein - No tag)";
					var folder6 = _gthis.getWorkspace()._addFolder(folderName6);
					_gthis.getWorkspace().beginUpdate();
					var added6 = 0;
					var _g7 = 0;
					while(_g7 < constructs2.length) {
						var construct2 = constructs2[_g7];
						++_g7;
						if(construct2.proteinSeq != null) {
							var protein1 = construct2.proteinSequenceNoTagObj;
							protein1.setName(construct2.constructId + " - Protein No Tag");
							_gthis.getWorkspace()._addObject(protein1,autoOpen7,false,folder6);
							autoOpen7 = false;
							++added6;
						}
					}
					if(added6 > 0) {
						_gthis.getWorkspace().reloadWorkspace();
					} else {
						_gthis.showMessage("No data","No constructs with a DNA sequence");
					}
				} else if(exception6 != null) {
					_gthis.lookupException(exception6.message);
				} else if(constructs2 == null || constructs2.length == 0) {
					_gthis.showMessage("No entries","No entries in database");
				}
			});
		} else if(seqType == "Constructs DNA Align") {
			this.getProvider().getByNamedQuery("TARGET_TO_CONSTRUCTS",[targetId],saturn.core.domain.SgcConstruct,false,function(constructs3,exception7) {
				if(exception7 == null && constructs3 != null) {
					var objs1 = [];
					var folderName7 = targetId + " (Constructs DNA)";
					var folder7 = _gthis.getWorkspace()._addFolder(folderName7);
					_gthis.getWorkspace().beginUpdate();
					var _g8 = 0;
					while(_g8 < constructs3.length) {
						var construct3 = constructs3[_g8];
						++_g8;
						if(construct3.proteinSeq != null) {
							_gthis.getWorkspace()._addObject(construct3,false,false,folder7);
							objs1.push(construct3.getUUID());
						}
					}
					var alignObj = new saturn.core.domain.Alignment();
					alignObj.setAlignmentObjectIds(objs1);
					var wo = new saturn.client.workspace.AlignmentWorkspaceObject(alignObj,targetId + " Construct DNA Alignment");
					var _g9 = 0;
					while(_g9 < objs1.length) {
						var obj3 = objs1[_g9];
						++_g9;
						wo.addReference("Sequences",obj3);
					}
					_gthis.getWorkspace()._addObject(wo,true,false);
					_gthis.getWorkspace().reloadWorkspace();
				} else if(exception7 != null) {
					_gthis.lookupException(exception7.message);
				}
			});
		} else if(seqType == "Constructs Protein Align") {
			this.getProvider().getByNamedQuery("TARGET_TO_CONSTRUCTS",[targetId],saturn.core.domain.SgcConstruct,false,function(constructs4,exception8) {
				if(exception8 == null && constructs4 != null) {
					var objs2 = [];
					var folderName8 = targetId + " (Constructs Protein)";
					var folder8 = _gthis.getWorkspace()._addFolder(folderName8);
					_gthis.getWorkspace().beginUpdate();
					var _g10 = 0;
					while(_g10 < constructs4.length) {
						var construct4 = constructs4[_g10];
						++_g10;
						if(construct4.proteinSeq != null) {
							var protObj = construct4.proteinSequenceObj;
							protObj.setName(construct4.constructId + " (Protein)");
							_gthis.getWorkspace()._addObject(protObj,false,false,folder8);
							objs2.push(protObj.getUUID());
						}
					}
					var alignObj1 = new saturn.core.domain.Alignment();
					var wo1 = new saturn.client.workspace.AlignmentWorkspaceObject(alignObj1,targetId + " Construct Protein Alignment");
					var _g11 = 0;
					while(_g11 < objs2.length) {
						var obj4 = objs2[_g11];
						++_g11;
						wo1.addReference("Sequences",obj4);
					}
					_gthis.getWorkspace()._addObject(wo1,true,false);
					_gthis.getWorkspace().reloadWorkspace();
				} else if(exception8 != null) {
					_gthis.lookupException(exception8.message);
				}
			});
		} else if(seqType == "Constructs Protein - No Tag Align") {
			this.getProvider().getByNamedQuery("TARGET_TO_CONSTRUCTS",[targetId],saturn.core.domain.SgcConstruct,false,function(constructs5,exception9) {
				if(exception9 == null && constructs5 != null) {
					var objs3 = [];
					var folderName9 = targetId + " (Constructs Protein - No Tag)";
					var folder9 = _gthis.getWorkspace()._addFolder(folderName9);
					_gthis.getWorkspace().beginUpdate();
					var _g12 = 0;
					while(_g12 < constructs5.length) {
						var construct5 = constructs5[_g12];
						++_g12;
						if(construct5.proteinSeq != null) {
							var protObj1 = construct5.proteinSequenceNoTagObj;
							protObj1.setName(construct5.constructId + " (Protein - No Tag)");
							_gthis.getWorkspace()._addObject(protObj1,false,false,folder9);
							objs3.push(protObj1.getUUID());
						}
					}
					var alignObj2 = new saturn.core.domain.Alignment();
					alignObj2.setAlignmentObjectIds(objs3);
					var wo2 = new saturn.client.workspace.AlignmentWorkspaceObject(alignObj2,targetId + " Construct Protein - No Tag Alignment");
					var _g13 = 0;
					while(_g13 < objs3.length) {
						var obj5 = objs3[_g13];
						++_g13;
						wo2.addReference("Sequences",obj5);
					}
					_gthis.getWorkspace()._addObject(wo2,true,false);
					_gthis.getWorkspace().reloadWorkspace();
				} else if(exception9 != null) {
					_gthis.lookupException(exception9.message);
				}
			});
		} else if(seqType == "Constructs Protein - No Tag Summary") {
			var targetSummary = new saturn.client.programs.blocks.TargetSummary(targetId);
			targetSummary.generateSummary();
		} else if(seqType == "WONKA") {
			var session = new saturn.core.WONKASession();
			session.src = "/WONKA/" + targetId + "/Summarise/";
			var wo3 = new saturn.client.workspace.WONKAWO(session,targetId + " (WONKA)");
			this.getWorkspace()._addObject(wo3,true,false);
			this.getWorkspace().reloadWorkspace();
		} else if(seqType == "Assay Summary") {
			saturn.client.WorkspaceApplication.getApplication().getProvider().getByNamedQuery("target_assay_search",[targetId],null,false,function(json,error) {
				var dwin = js.Browser.get_window();
				dwin.results = json;
				dwin.error = error;
				if(error == null) {
					var table = new saturn.core.Table();
					table.setFixedRowHeight(50);
					table.setData(json,{ "SDF" : { "renderer" : function(value) {
						return "<div>" + saturn.core.domain.Compound.getMolImage(value,"SDF") + "</div>";
					}}});
					table.name = targetId + " (Assay Results)";
					saturn.client.WorkspaceApplication.getApplication().getWorkspace().addObject(table,true);
				}
			});
		}
	}
	,showELN: function() {
		var wo = this.getActiveProgram().getActiveObject(saturn.client.workspace.WorkspaceObject);
		if(wo != null) {
			saturn.client.ICMClient.getClient().callFunction("sys.showELN",[wo.getDocId()],function(data) {
			},function(exception) {
			});
		}
	}
	,retrieve_pdb: function(query) {
		var pdb_id = HxOverrides.substr(query,4,4);
		var obj = new saturn.core.domain.StructureModel();
		obj.modelId = pdb_id;
		var wo = new saturn.client.workspace.StructureModelWO(obj,pdb_id);
		this.getWorkspace()._addObject(wo,true,true);
	}
	,getAlignment: function(fasta,cb) {
		saturn.client.BioinformaticsServicesClient.getClient().sendClustalReportRequest(fasta,function(response,err) {
			if(err == null) {
				var clustalReport = response.json.clustalReport;
				var location = js.Browser.get_window().location;
				var url = location.protocol + "//" + location.hostname + ":" + location.port + "/" + clustalReport;
				saturn.client.core.CommonCore.getContent(url,function(content) {
					var msa = saturn.core.ClustalOmegaParser.read(content);
					cb(null,msa);
				},function(err1) {
					cb(err1,null);
				});
			} else {
				cb(err,null);
			}
		});
	}
	,clearCompoundImageCache: function() {
		saturn.core.domain.Compound.clearMolCache();
	}
	,__class__: saturn.app.SaturnClient
});
saturn.client.OutlineListener = $hxClasses["saturn.client.OutlineListener"] = function() { };
saturn.client.OutlineListener.__name__ = ["saturn","client","OutlineListener"];
saturn.client.OutlineListener.prototype = {
	onClick: null
	,__class__: saturn.client.OutlineListener
};
saturn.client.BuildingBlock = $hxClasses["saturn.client.BuildingBlock"] = function() { };
saturn.client.BuildingBlock.__name__ = ["saturn","client","BuildingBlock"];
saturn.client.BuildingBlock.prototype = {
	onFocus: null
	,onBlur: null
	,getComponent: null
	,getRawComponent: null
	,__class__: saturn.client.BuildingBlock
};
saturn.client.Program = $hxClasses["saturn.client.Program"] = function() { };
saturn.client.Program.__name__ = ["saturn","client","Program"];
saturn.client.Program.__interfaces__ = [saturn.client.BuildingBlock];
saturn.client.Program.prototype = {
	addWorkspaceObject: null
	,closeWorkspaceObject: null
	,getSaveAsModelsForProgram: null
	,saveObjectAsGUI: null
	,close: null
	,getWorkspaceContextMenuItems: null
	,setId: null
	,getId: null
	,setActiveObject: null
	,_setActiveObject: null
	,getActiveObject: null
	,getActiveObjectId: null
	,mouseup: null
	,mousedown: null
	,openFile: null
	,setModelOutlineValue: null
	,saveWait: null
	,serialise: null
	,deserialise: null
	,emptyInit: null
	,postRestore: null
	,installWindowListeners: null
	,uninstallWindowListeners: null
	,getWorkspace: null
	,getApplication: null
	,setTitle: null
	,onOutlineDrop: null
	,getCentralPanelLayout: null
	,convertDragToWorkspaceObject: null
	,addPlugin: null
	,focusProgram: null
	,blurProgram: null
	,onFocusNotifyPlugins: null
	,onBlurNotifyPlugins: null
	,processException: null
	,arePluginsInstalled: null
	,setPluginsInstalled: null
	,search: null
	,getActiveObjectName: null
	,isActivationDelayed: null
	,isClosed: null
	,getPlugins: null
	,getEntity: null
	,__class__: saturn.client.Program
};
saturn.client.BaseProgram = $hxClasses["saturn.client.BaseProgram"] = function() {
	this.saveable = false;
	this.closed = false;
	this.delayedActivation = false;
	this.emptyInit();
};
saturn.client.BaseProgram.__name__ = ["saturn","client","BaseProgram"];
saturn.client.BaseProgram.__interfaces__ = [saturn.client.OutlineListener,saturn.client.Program];
saturn.client.BaseProgram.prototype = {
	theId: null
	,theActiveObjectId: null
	,objectIds: null
	,plugins: null
	,pluginsInstalled: null
	,delayedActivation: null
	,closed: null
	,saveable: null
	,lastSearch: null
	,getPlugins: function() {
		return this.plugins;
	}
	,saveWait: function(cb) {
		cb();
	}
	,getReferences: function(name) {
		var obj = this.getObject();
		if(obj != null) {
			return obj.getReferences(name);
		} else {
			return null;
		}
	}
	,getCentralPanelLayout: function() {
		return "hbox";
	}
	,onOutlineDrop: function(node,data,overModel,dropPosition,dropHandlers,eOpts) {
		return true;
	}
	,emptyInit: function() {
		this.objectIds = [];
		this.plugins = [];
		this.pluginsInstalled = false;
	}
	,arePluginsInstalled: function() {
		return this.pluginsInstalled;
	}
	,setPluginsInstalled: function() {
		this.pluginsInstalled = true;
	}
	,openFile: function(file,asNew,asNewOpenProgram) {
		if(asNewOpenProgram == null) {
			asNewOpenProgram = true;
		}
	}
	,setActiveObject: function(objectId) {
		this._setActiveObject(objectId);
		this.delayedActivation = false;
		this.updateActions();
	}
	,isActivationDelayed: function() {
		return this.delayedActivation;
	}
	,_setActiveObject: function(objectId) {
		this.theActiveObjectId = objectId;
		this.delayedActivation = true;
	}
	,getState: function() {
		return this.getActiveObject(saturn.client.workspace.WorkspaceObject);
	}
	,getObject: function() {
		var obj = this.getWorkspace().getObject(this.theActiveObjectId);
		if(Std["is"](obj,saturn.client.workspace.WorkspaceObject)) {
			return obj.getObject();
		} else {
			return obj;
		}
	}
	,getWorkspaceObject: function() {
		return this.getWorkspace().getObject(this.theActiveObjectId);
	}
	,getObjectName: function() {
		return this.getWorkspaceObject().getName();
	}
	,getActiveObject: function(type) {
		var obj = this.getWorkspace().getObjectSafely(this.theActiveObjectId,type);
		return obj;
	}
	,getActiveObjectObject: function() {
		var wo = this.getActiveObject(saturn.client.workspace.WorkspaceObject);
		if(wo == null) {
			return null;
		} else {
			return wo.getObject();
		}
	}
	,getActiveObjectName: function() {
		var obj = this.getWorkspace().getObject(this.getActiveObjectId());
		return obj.getName();
	}
	,getActiveObjectId: function() {
		return this.theActiveObjectId;
	}
	,addWorkspaceObject: function(objectId) {
		this.objectIds.push(objectId);
		if(this.theActiveObjectId == null) {
			this.setActiveObject(objectId);
		}
	}
	,closeWorkspaceObject: function(objectId) {
		HxOverrides.remove(this.objectIds,objectId);
		if(objectId == this.theActiveObjectId) {
			this.theActiveObjectId = null;
		}
	}
	,convertDragToWorkspaceObject: function(data) {
		return null;
	}
	,close: function() {
		saturn.client.WorkspaceApplication.getApplication().removeOutlineListener(this);
		this.closed = true;
	}
	,isClosed: function() {
		return this.closed;
	}
	,getComponent: function() {
		return null;
	}
	,getRawComponent: function() {
		return this.getComponent();
	}
	,setId: function(id) {
		this.theId = id;
	}
	,getId: function() {
		return this.theId;
	}
	,onFocus: function() {
		this.getApplication().addSaveAsOptions();
	}
	,onBlur: function() {
		if(this.isSaveable()) {
			this.syncModelFromOutline();
		}
	}
	,setModelOutlineValue: function(field,value) {
		var dataStore = this.getApplication().getOutlineDataStore("MODELS");
		if(dataStore == null) {
			return;
		}
		var rootNode = dataStore.getRootNode();
		var entity = this.getEntity();
		var model = this.getProvider().getModel(Type.getClass(entity));
		var busKey = model.getFirstKey();
		var folderName = Reflect.field(entity,busKey);
		var fields = model.getUserFieldDefinitions();
		var folderId = "_folder_" + folderName;
		var modelNode = rootNode.findChild("id",folderId,false);
		if(modelNode == null) {
			return;
		}
		if(field == busKey) {
			modelNode.set("id","_folder_" + Std.string(value));
		}
		var children = modelNode.childNodes;
		var _g = 0;
		while(_g < children.length) {
			var childNode = children[_g];
			++_g;
			var label = childNode.data.folder;
			var modelField = model.convertUserFieldName(label);
			if(modelField == field) {
				childNode.set("text",value);
				childNode.commit();
				break;
			}
		}
	}
	,syncModelFromOutline: function() {
		var dataStore = this.getApplication().getOutlineDataStore("MODELS");
		if(dataStore == null) {
			return;
		}
		var rootNode = dataStore.getRootNode();
		var entity = this.getEntity();
		var model = this.getProvider().getModel(Type.getClass(entity));
		var busKey = model.getFirstKey();
		var folderName = Reflect.field(entity,busKey);
		var fields = model.getUserFieldDefinitions();
		var folderId = "_folder_" + folderName;
		var modelNode = rootNode.findChild("id",folderId,false);
		if(modelNode == null) {
			return;
		}
		var children = modelNode.childNodes;
		var _g = 0;
		while(_g < children.length) {
			var childNode = children[_g];
			++_g;
			var label = childNode.data.folder;
			var modelField = model.convertUserFieldName(label);
			if(modelField != null) {
				var psueodSyntheticField = model.getPseudoSyntheticObjectName(modelField);
				if(psueodSyntheticField != null) {
					Reflect.field(entity,psueodSyntheticField).setValue(childNode.data.text);
				} else {
					this.updateModelField(entity,modelField,childNode.data.text);
				}
			}
		}
	}
	,updateModelField: function(obj,field,value) {
		saturn.db.Model.setField(obj,field,value,true);
	}
	,focusProgram: function() {
		saturn.client.WorkspaceApplication.getApplication().addOutlineListener(this);
		this.onFocus();
		this.onFocusNotifyPlugins();
		this.updateActions();
	}
	,updateActions: function() {
		this.setSaveVisible(this.isSaveable());
	}
	,blurProgram: function() {
		saturn.client.WorkspaceApplication.getApplication().removeOutlineListener(this);
		this.onBlur();
		this.onBlurNotifyPlugins();
	}
	,onFocusNotifyPlugins: function() {
		var _g = 0;
		var _g1 = this.plugins;
		while(_g < _g1.length) {
			var plugin = _g1[_g];
			++_g;
			plugin.onFocus();
		}
	}
	,onBlurNotifyPlugins: function() {
		var _g = 0;
		var _g1 = this.plugins;
		while(_g < _g1.length) {
			var plugin = _g1[_g];
			++_g;
			plugin.onBlur();
		}
	}
	,mouseup: function(event) {
	}
	,mousedown: function(event) {
	}
	,serialise: function() {
		var clazz = Type.getClass(this);
		return { "ID" : this.getId(), "CLASS" : Type.getClassName(clazz), "ACTIVE_ID" : this.theActiveObjectId};
	}
	,deserialise: function(object) {
		this.setId(object.ID);
		this.theActiveObjectId = object.ACTIVE_ID;
	}
	,postRestore: function() {
		var objectId = this.theActiveObjectId;
		this.setActiveObject(objectId);
	}
	,installWindowListeners: function(window) {
	}
	,uninstallWindowListeners: function(window) {
	}
	,getWorkspace: function() {
		return this.getApplication().getWorkspace();
	}
	,getApplication: function() {
		return saturn.client.WorkspaceApplication.getApplication();
	}
	,setTitle: function(title) {
	}
	,onClick: function(view,rec,item,index) {
	}
	,addPlugin: function(plugin) {
		this.plugins.push(plugin);
		plugin.setProgram(this);
		plugin.emptyInit();
	}
	,removePlugin: function(plugin) {
		HxOverrides.remove(this.plugins,plugin);
	}
	,processException: function(ex) {
		this.getApplication().processException(ex);
	}
	,getProvider: function() {
		return this.getApplication().getProvider();
	}
	,search: function(regex) {
		this.lastSearch = regex;
	}
	,getLastSearch: function() {
		return this.lastSearch;
	}
	,isLoggedIn: function() {
		return saturn.client.core.ClientCore.getClientCore().isLoggedIn();
	}
	,isSaveable: function() {
		if(!this.isLoggedIn()) {
			return false;
		}
		var object = this.getEntity();
		var model = this.getProvider().getModel(Type.getClass(object));
		if(model != null) {
			return model.isProgramSaveAs(Type.getClassName(Type.getClass(this)));
		} else {
			return false;
		}
	}
	,saveObject: function(cb) {
		var _gthis = this;
		var object = this.getEntity();
		this.syncModelFromOutline();
		this.saveAsync(function(err) {
			if(err != null) {
				_gthis.getApplication().showMessage("Error",err);
			} else {
				_gthis.getProvider().save(object,function(err1) {
					if(err1 == null) {
						_gthis.getProvider().attach([object],false,function(err2) {
							if(err2 == null) {
								var dataStore = _gthis.getApplication().getOutlineDataStore("MODELS");
								if(dataStore != null) {
									dataStore.commitChanges();
								}
								cb(null);
							} else {
								cb(err2);
							}
						});
					}
					cb(err1);
				},true);
			}
		});
	}
	,saveAsync: function(cb) {
		cb(null);
	}
	,saveObjectAsGUI: function(model) {
		this.changeObjectType(model);
		this.saveObjectGUI();
	}
	,changeObjectType: function(model) {
		var obj = this.getWorkspace().changeObjectType(this.getActiveObjectId(),model);
		this.updateActions();
		return obj;
	}
	,getWorkspaceContextMenuItems: function() {
		return null;
	}
	,deleteObject: function(cb) {
		var object = this.getObject();
		this.getProvider()["delete"](object,cb);
	}
	,saveObjectGUI: function() {
		var _gthis = this;
		this.saveObject(function(err) {
			if(err != null) {
				_gthis.getApplication().showMessage("Save failure","Unable to save to database");
			} else {
				_gthis.getApplication().showMessage("Saved","Save successfull");
			}
		});
	}
	,deleteObjectGUI: function() {
		var _gthis = this;
		this.deleteObject(function(err) {
			if(err != null) {
				_gthis.getApplication().showMessage("Delete failure","Unable to delete from database");
			} else {
				_gthis.getApplication().showMessage("Deleted","Delete successfull");
			}
		});
	}
	,setSaveVisible: function(visble) {
	}
	,getSaveAsModelsForProgram: function() {
		var models = [];
		var clazzes = this.getApplication().getProgramRegistry().getClassesForProgram(Type.getClass(this));
		var _g = 0;
		while(_g < clazzes.length) {
			var clazz = clazzes[_g];
			++_g;
			var model = this.getProvider().getModel(clazz);
			if(model != null) {
				if(model.isProgramSaveAs(Type.getClassName(Type.getClass(this)))) {
					models.push(model);
				}
			}
		}
		return models;
	}
	,getEntity: function() {
		var obj = this.getWorkspaceObject();
		if(obj != null) {
			if(Std["is"](obj,saturn.client.workspace.WorkspaceObject)) {
				obj = (js.Boot.__cast(obj , saturn.client.workspace.WorkspaceObject)).getObject();
			}
			if(Reflect.isFunction(obj.isLinked) && obj.isLinked()) {
				if(Reflect.isFunction(obj.getParent) && obj.getParent() != null) {
					obj = obj.getParent();
				}
			}
			return obj;
		} else {
			return null;
		}
	}
	,__class__: saturn.client.BaseProgram
};
saturn.client.BioinformaticsServicesClient = $hxClasses["saturn.client.BioinformaticsServicesClient"] = function(socket,helper) {
	var _gthis = this;
	this.helper = helper;
	this.cbsAwaitingIds = [];
	this.cbsAwaitingResponse = new haxe.ds.StringMap();
	saturn.client.core.ClientCore.getClientCore().getNodeSocket().on("__response__",function(data) {
		var cb = _gthis.getCb(data);
		if(cb != null) {
			if(data == null) {
				cb(null,"Invalid, empty response from server");
			} else {
				cb(data.json,data.error);
			}
		}
	});
	this.initialise();
};
saturn.client.BioinformaticsServicesClient.__name__ = ["saturn","client","BioinformaticsServicesClient"];
saturn.client.BioinformaticsServicesClient.theClient = null;
saturn.client.BioinformaticsServicesClient.getClient = function(socket,helper) {
	if(saturn.client.BioinformaticsServicesClient.theClient == null) {
		saturn.client.BioinformaticsServicesClient.theClient = new saturn.client.BioinformaticsServicesClient(socket,helper);
	}
	return saturn.client.BioinformaticsServicesClient.theClient;
};
saturn.client.BioinformaticsServicesClient.prototype = {
	theSocket: null
	,cbsAwaitingIds: null
	,cbsAwaitingResponse: null
	,blastList: null
	,helper: null
	,getCb: function(data) {
		var jobId = data.bioinfJobId;
		if(this.cbsAwaitingResponse.exists(jobId)) {
			var cb = this.cbsAwaitingResponse.get(jobId);
			this.cbsAwaitingResponse.remove(jobId);
			return cb;
		} else {
			return null;
		}
	}
	,sendBlastReportRequest: function(sequence,name,database,cb) {
		this.helper.sendRequest("_blast_",{ blastDatabase : database, fasta : ">" + name + "\n" + sequence},cb);
	}
	,sendPsiPredReportRequest: function(sequence,name,cb) {
		this.helper.sendRequest("_psipred_",{ fasta : ">" + name + "\n" + sequence},cb);
	}
	,sendDisoPredReportRequest: function(sequence,name,cb) {
		this.helper.sendRequest("_disopred_",{ fasta : ">" + name + "\n" + sequence},cb);
	}
	,sendTMHMMReportRequest: function(sequence,name,cb) {
		this.helper.sendRequest("_thmm_",{ fasta : ">" + name + "\n" + sequence},cb);
	}
	,sendClustalReportRequest: function(fasta,cb) {
		this.helper.sendRequest("_clustal_",{ fasta : fasta},cb);
	}
	,sendPhyloReportRequest: function(fasta,cb) {
		this.helper.sendRequest("_phylo_",{ fasta : fasta},cb);
	}
	,sendBlastDatabaseListRequest: function(cb) {
		this.helper.sendRequest("_blast_.database_list",{ },cb);
	}
	,sendABIReportRequest: function(abiContents,cb) {
		this.helper.sendRequest("_abi_",{ abiFile : abiContents},cb);
	}
	,sendBLASTDBUpdateRequest: function(databaseName,cb) {
		this.helper.sendRequest("_blast_updater_",{ database : databaseName},cb);
	}
	,upload: function(icbContents,extension,cb) {
		this.helper.sendRequest("_uploader_.upload",{ fileContents : icbContents, extension : extension},cb);
	}
	,sendPDBRequest: function(pdbId,cb) {
		this.helper.sendRequest("_pdb_",{ pdbId : pdbId},cb);
	}
	,sendTestEmail: function() {
		this.helper.sendRequest("_email_.test",{ },function(data,err) {
			if(err != null) {
				saturn.client.WorkspaceApplication.getApplication().showMessage("Error",err);
			}
		});
	}
	,initialise: function() {
		var _gthis = this;
		this.sendBlastDatabaseListRequest(function(data,err) {
			if(err != null) {
				saturn.client.WorkspaceApplication.getApplication().showMessage("Request failure","Failed to get list of BLAST DBs");
			} else {
				_gthis.blastList = data.json.dbList;
			}
		});
	}
	,getBlastList: function() {
		return this.blastList;
	}
	,getAlignment: function(fasta,cb) {
		saturn.client.BioinformaticsServicesClient.getClient().sendClustalReportRequest(fasta,function(response,err) {
			if(err == null) {
				var clustalReport = response.json.clustalReport;
				var location = js.Browser.get_window().location;
				var url = location.protocol + "//" + location.hostname + ":" + location.port + "/" + clustalReport;
				saturn.client.core.CommonCore.getContent(url,function(content) {
					var msa = saturn.core.ClustalOmegaParser.read(content);
					cb(null,msa);
				},function(err1) {
					cb(err1,null);
				});
			} else {
				cb(err,null);
			}
		});
	}
	,__class__: saturn.client.BioinformaticsServicesClient
};
saturn.client.ClipBoard = $hxClasses["saturn.client.ClipBoard"] = function() {
};
saturn.client.ClipBoard.__name__ = ["saturn","client","ClipBoard"];
saturn.client.ClipBoard.prototype = {
	theContents: null
	,setContents: function(contents) {
		this.theContents = contents;
	}
	,getContents: function() {
		return this.theContents;
	}
	,__class__: saturn.client.ClipBoard
};
saturn.client.ConversationHelper = $hxClasses["saturn.client.ConversationHelper"] = function() { };
saturn.client.ConversationHelper.__name__ = ["saturn","client","ConversationHelper"];
saturn.client.ConversationHelper.prototype = {
	sendRequest: null
	,__class__: saturn.client.ConversationHelper
};
saturn.client.ICMClient = $hxClasses["saturn.client.ICMClient"] = function(asCommandProxy,forwardICMCommands) {
	var _gthis = this;
	this.callBackMap = new haxe.ds.StringMap();
	this.commandsWaiting = [];
	this.forwardICMCommands = forwardICMCommands;
	if(forwardICMCommands == false && asCommandProxy == false) {
		return;
	}
	this.nodeSocket = new bindings.NodeSocket(io.connect("http://localhost"));
	var self = this;
	if(asCommandProxy) {
		this.nodeSocket.emit("registerAsICMNode",{ });
		this.nodeSocket.on("icmForwardCommmand",function(data) {
			var command = data.COMMAND;
			try {
				ICMScript.execute(command);
				var c_out = ICMScript.getVarJSON("cout");
				if(c_out == null) {
					_gthis.nodeSocket.emit("icmForwardResponse",{ "ID" : data.ID});
				} else {
					var res = js.Lib.eval("(" + c_out + ")");
					_gthis.nodeSocket.emit("icmForwardResponse",res.cout);
				}
			} catch( e ) {
				_gthis.nodeSocket.emit("icmForwardResponse",{ "ID" : data.ID});
			}
		});
	} else {
		this.nodeSocket.on("icmForward",function(data1) {
			var g = js.Browser.get_window();
			g.myData = data1;
			var passVal = null;
			if(Reflect.hasField(data1,"RAW")) {
				var r = saturn.client.ICMClient.reg_jsonStart.replace(data1.RAW,"");
				r = saturn.client.ICMClient.reg_jsonStop.replace(r,"");
				passVal = js.Lib.eval("(" + r + ")");
			}
			var callBack = self.callBackMap.get(data1.ID);
			if(Reflect.hasField(data1,"error")) {
				callBack(data1);
			} else {
				callBack(passVal);
			}
			self.callBackMap.remove(data1.ID);
		});
		this.nodeSocket.on("recieveCommandID",function(data2) {
			var id = data2.ID;
			var job = _gthis.commandsWaiting.shift();
			job.params.COMMAND = StringTools.replace(job.params.COMMAND,"<COMMAND_ID>",id);
			job.params.ID = id;
			_gthis.nodeSocket.emit(job.socketCommand,job.params);
			var v = job.callBack;
			_gthis.callBackMap.set(id,v);
		});
	}
};
saturn.client.ICMClient.__name__ = ["saturn","client","ICMClient"];
saturn.client.ICMClient.theClient = null;
saturn.client.ICMClient.inScarab = function() {
	return Reflect.hasField(js.Browser.get_window(),"ICMScript");
};
saturn.client.ICMClient.setup = function(asCommandProxy,forwardICMCommands) {
	saturn.client.ICMClient.theClient = new saturn.client.ICMClient(asCommandProxy,forwardICMCommands);
};
saturn.client.ICMClient.getClient = function() {
	return saturn.client.ICMClient.theClient;
};
saturn.client.ICMClient.instanceOf = function(obj,className) {
	if(Reflect.hasField(obj,"__INTERNAL__CLASS_LIST")) {
		var clazz = Reflect.field(obj,"__INTERNAL__CLASS_LIST");
		if(Reflect.hasField(clazz,className)) {
			return true;
		}
	}
	return false;
};
saturn.client.ICMClient.getError = function(data) {
	if(data != null && Reflect.hasField(data,"__EXCEPTION")) {
		return Reflect.field(data,"__EXCEPTION");
	} else if(data == null) {
		return { message : "An unexpected Scarab exception has occurred"};
	} else {
		return null;
	}
};
saturn.client.ICMClient.prototype = {
	nodeSocket: null
	,callBackMap: null
	,forwardICMCommands: null
	,commandsWaiting: null
	,generateSetStringCommand: function(varName,value) {
		var varLen = value.length;
		var blockSize = 4000;
		if(varLen < blockSize) {
			return varName + " = '" + value + "'\n";
		} else {
			var done = blockSize;
			var setCode = varName + " = '" + HxOverrides.substr(value,0,blockSize) + "'\n";
			while(done < varLen) {
				setCode = setCode + varName + " = " + varName + " + '" + HxOverrides.substr(value,done,blockSize) + "'\n";
				done += blockSize;
			}
			return setCode;
		}
	}
	,callFunction: function(functionName,arguments,onSuccess,onFailure) {
		var icmCommand = functionName + "(";
		var _g1 = 0;
		var _g = arguments.length;
		while(_g1 < _g) {
			var i = _g1++;
			var argument = arguments[i];
			if((argument instanceof Array) && argument.__enum__ == null) {
				var arrayType = "StringArray";
				var valueStr = "{";
				if(argument.length > 0) {
					var value = argument[0];
					if(Std["is"](value,haxe.ds.StringMap)) {
						arrayType = "ObjectList";
						valueStr = "Collection(\"ITEMS\", Collection(";
					}
				}
				var _g3 = 0;
				var _g2 = argument.length;
				while(_g3 < _g2) {
					var j = _g3++;
					var value1 = argument[j];
					if(arrayType == "ObjectList") {
						var map = value1;
						valueStr += "\"" + (j + 1) + "\",Collection(";
						var keys = [];
						var key = map.keys();
						while(key.hasNext()) {
							var key1 = key.next();
							keys.push(key1);
						}
						var _g5 = 0;
						var _g4 = keys.length;
						while(_g5 < _g4) {
							var j1 = _g5++;
							var key2 = keys[j1];
							var value2 = value1.get(key2);
							if(value2 == null) {
								value2 = "__MOLBIO_NULL_TYPE__";
							}
							valueStr += "'" + key2 + "','" + Std.string(value2) + "'";
							if(j1 != keys.length - 1) {
								valueStr += ",";
							}
						}
						valueStr += ")";
					} else {
						valueStr += "'" + value1.toString() + "'";
					}
					if(j != argument.length - 1) {
						valueStr += ",";
					}
				}
				if(arrayType == "StringArray") {
					icmCommand += valueStr + "}";
				} else {
					icmCommand += valueStr + "),\"POS\"," + Std.string(argument.length) + ")";
				}
			} else if(Std["is"](argument,haxe.ds.StringMap)) {
				var map1 = argument;
				var valueStr1 = "Collection(";
				var keys1 = [];
				var key3 = map1.keys();
				while(key3.hasNext()) {
					var key4 = key3.next();
					keys1.push(key4);
				}
				var _g31 = 0;
				var _g21 = keys1.length;
				while(_g31 < _g21) {
					var j2 = _g31++;
					var key5 = keys1[j2];
					valueStr1 += "'" + key5 + "','" + Std.string(argument.get(key5)) + "'";
					if(j2 != keys1.length - 1) {
						valueStr1 += ",";
					}
				}
				valueStr1 += ")";
				icmCommand += valueStr1;
			} else {
				icmCommand += "'" + Std.string(arguments[i]) + "'";
			}
			if(i < arguments.length - 1) {
				icmCommand += ",";
			}
		}
		icmCommand += "));\n";
		var callBack = function(data) {
			if(data != null && Reflect.hasField(data,"__EXCEPTION")) {
				var callBack1 = Reflect.field(data,"__EXCEPTION");
				onFailure(callBack1);
			} else if(data != null && Reflect.hasField(data,"error")) {
				onFailure({ message : data.error});
			} else if(data == null) {
				onFailure({ message : "An unexpected Scarab exception has occurred"});
			} else {
				onSuccess(data);
			}
		};
		if(this.forwardICMCommands == false) {
			ICMScript.execute("delete cout\ntry\ncout=sgc.molbio.wrap('PSEUDO'," + icmCommand);
			if(callBack != null) {
				try {
					var c_out = ICMScript.getVarJSON("cout");
					if(c_out == null) {
						callBack(null);
					} else {
						var r = saturn.client.ICMClient.reg_jsonStart.replace(c_out,"");
						r = saturn.client.ICMClient.reg_jsonStop.replace(r,"");
						var data1 = js.Lib.eval("(" + r + ")");
						data1 = js.Lib.eval("(" + Std.string(data1.cout.RAW) + ")");
						callBack(data1);
					}
				} catch( e ) {
					callBack(null);
				}
			}
			return;
		}
		icmCommand = "delete cout\ntry\ncout=sgc.molbio.wrap('<COMMAND_ID>'," + icmCommand;
		this.commandsWaiting.push({ socketCommand : "icmForwardCommandRequest", params : { COMMAND : icmCommand, time : new Date().getTime()}, callBack : callBack});
		this.nodeSocket.emit("sendCommandID",{ });
	}
	,runCommand: function(icmCommand,callBack) {
		var ourCallBack = function(data) {
			if(data != null && Reflect.hasField(data,"__EXCEPTION")) {
				var ourCallBack1 = Reflect.field(data,"__EXCEPTION");
				callBack(null,ourCallBack1);
			} else if(data == null) {
				callBack(null,"An unexpected Scarab exception has occurred");
			} else {
				callBack(data,null);
			}
		};
		if(this.forwardICMCommands == false) {
			icmCommand = "delete cout\ntry\nparams=Collection();\n" + icmCommand + "cout = sgc.forwardData(params)\n";
			try {
				ICMScript.execute(icmCommand);
				if(callBack != null) {
					var c_out = ICMScript.getVarJSON("cout");
					if(c_out != null) {
						var r = saturn.client.ICMClient.reg_jsonStart.replace(c_out,"");
						r = saturn.client.ICMClient.reg_jsonStop.replace(r,"");
						var data1 = js.Lib.eval("(" + r + ")");
						data1 = js.Lib.eval("(" + Std.string(data1.cout.RAW) + ")");
						ourCallBack(data1);
					} else {
						ourCallBack(null);
					}
				}
			} catch( e ) {
				callBack(null);
			}
			return;
		}
		icmCommand = "delete cout\ntry\nsgc.NextCommandId = \"<COMMAND_ID\"" + "\n" + "params=Collection();\n" + icmCommand + "cout = sgc.forwardData(params)\n";
		this.commandsWaiting.push({ socketCommand : "icmForwardCommandRequest", params : { COMMAND : icmCommand, time : new Date().getTime()}, callBack : ourCallBack});
		this.nodeSocket.emit("sendCommandID",{ });
	}
	,getVarJSON: function(varName) {
		var retVal = js.Lib.eval("(" + Std.string(ICMScript.getVarString(varName)) + ")");
		return retVal;
	}
	,runTestCommand: function() {
		ICMScript.execute("params = Collection('ID','1');");
		ICMScript.execute("sys.curl.post('http://localhost:8080/ICMForwardRequest', params)");
	}
	,forwardCommands: function(forwardCommands) {
		this.forwardICMCommands = forwardCommands;
	}
	,openUrl: function(url,useInternalViewer) {
		if(useInternalViewer) {
			this.runCommand("read html \"" + url + "\"\n",function() {
			});
		} else {
			this.runCommand("sys.openWithDefaultViewer(\"" + url + "\")\n",function() {
			});
		}
	}
	,saveToFile: function(fileName,content,cbSuccess,cbFailure) {
		var arguments = [fileName,content];
		this.callFunction("sgc.molbio.exportToFile",arguments,cbSuccess,cbFailure);
	}
	,saveToFileWithDialog: function(suggestion,content,cbSuccess,cbFailure) {
		var arguments = [content,suggestion];
		this.callFunction("sgc.molbio.exportToFileDialog",arguments,cbSuccess,cbFailure);
	}
	,__class__: saturn.client.ICMClient
};
saturn.client.ProgramPlugin = $hxClasses["saturn.client.ProgramPlugin"] = function() { };
saturn.client.ProgramPlugin.__name__ = ["saturn","client","ProgramPlugin"];
saturn.client.ProgramPlugin.prototype = {
	emptyInit: null
	,onFocus: null
	,onBlur: null
	,close: null
	,getProgram: null
	,setProgram: null
	,destroy: null
	,openFile: null
	,__class__: saturn.client.ProgramPlugin
};
saturn.client.BaseProgramPlugin = $hxClasses["saturn.client.BaseProgramPlugin"] = function() {
};
saturn.client.BaseProgramPlugin.__name__ = ["saturn","client","BaseProgramPlugin"];
saturn.client.BaseProgramPlugin.__interfaces__ = [saturn.client.ProgramPlugin];
saturn.client.BaseProgramPlugin.prototype = {
	theProgram: null
	,openFile: function(file,next) {
	}
	,emptyInit: function() {
	}
	,onFocus: function() {
	}
	,onBlur: function() {
	}
	,close: function() {
	}
	,getProgram: function() {
		return this.theProgram;
	}
	,setProgram: function(program) {
		this.theProgram = program;
	}
	,destroy: function() {
		this.theProgram = null;
	}
	,__class__: saturn.client.BaseProgramPlugin
};
saturn.client.ProgramRegistry = $hxClasses["saturn.client.ProgramRegistry"] = function() {
	this.programList = [];
	this.clazzNameToDefaultProgram = new haxe.ds.ObjectMap();
	this.clazzNameToPrograms = new haxe.ds.ObjectMap();
	this.fileExtensionToDefaultProgram = new haxe.ds.StringMap();
	this.programToPlugins = new haxe.ds.ObjectMap();
};
saturn.client.ProgramRegistry.__name__ = ["saturn","client","ProgramRegistry"];
saturn.client.ProgramRegistry.prototype = {
	programList: null
	,clazzNameToPrograms: null
	,clazzNameToDefaultProgram: null
	,fileExtensionToDefaultProgram: null
	,programToPlugins: null
	,registerPlugin: function(progClazz,pluginClazz) {
		if(!this.programToPlugins.exists(progClazz)) {
			this.programToPlugins.set(progClazz,new List());
		}
		this.programToPlugins.get(progClazz).push(pluginClazz);
		if(Reflect.hasField(pluginClazz,"loadResources")) {
			Reflect.callMethod(pluginClazz,Reflect.field(pluginClazz,"loadResources"),[]);
		}
	}
	,installPlugins: function(program) {
		if(!program.arePluginsInstalled()) {
			var progClazz = Type.getClass(program);
			if(this.programToPlugins.exists(progClazz)) {
				var pluginClazz = this.programToPlugins.get(progClazz).iterator();
				while(pluginClazz.hasNext()) {
					var pluginClazz1 = pluginClazz.next();
					var plugin = Type.createInstance(pluginClazz1,[]);
					program.addPlugin(plugin);
				}
			}
			program.setPluginsInstalled();
		}
	}
	,getRegisteredWorkspaceObjectShortNames: function() {
		var shortNames = new haxe.ds.StringMap();
		var clazz = this.clazzNameToPrograms.keys();
		while(clazz.hasNext()) {
			var clazz1 = clazz.next();
			var clazzName = Type.getClassName(clazz1);
			var parts = clazzName.split(".");
			shortNames.set(parts.pop(),clazzName);
		}
		return shortNames;
	}
	,getQuickLaunchItems: function() {
		var items = [];
		var _g = 0;
		var _g1 = this.programList;
		while(_g < _g1.length) {
			var clazz = _g1[_g];
			++_g;
			var clazzName = Type.getClassName(clazz);
			if(Reflect.hasField(clazz,"getQuickLaunchItems")) {
				var func = Reflect.field(clazz,"getQuickLaunchItems");
				var clazzItems = Reflect.callMethod(clazz,func,[]);
				var _g2 = 0;
				while(_g2 < clazzItems.length) {
					var item = clazzItems[_g2];
					++_g2;
					items.push(item);
				}
			}
		}
		return items;
	}
	,getPrograms: function() {
		var newList = new List();
		var _g = 0;
		var _g1 = this.programList;
		while(_g < _g1.length) {
			var programDef = _g1[_g];
			++_g;
			newList.push(programDef);
		}
		return newList;
	}
	,registerProgram: function(type,defaults) {
		this.programList.push(type);
		var classFields = Type.getClassFields(type);
		if(Reflect.hasField(type,"CLASS_SUPPORT")) {
			var supported = Reflect.field(type,"CLASS_SUPPORT");
			var _g = 0;
			while(_g < supported.length) {
				var clazz = supported[_g];
				++_g;
				var clazzName = Type.getClassName(type);
				if(!this.clazzNameToPrograms.exists(clazz)) {
					this.clazzNameToPrograms.set(clazz,new List());
				}
				this.clazzNameToPrograms.get(clazz).add(type);
				if(defaults) {
					this.clazzNameToDefaultProgram.set(clazz,type);
					var fileFormats = Reflect.field(clazz,"FILE_IMPORT_FORMATS");
					var _g1 = 0;
					while(_g1 < fileFormats.length) {
						var fileFormat = fileFormats[_g1];
						++_g1;
						this.fileExtensionToDefaultProgram.set(fileFormat,type);
					}
				}
			}
		}
	}
	,openWith: function(progClazz,defaults,typeClazz) {
		var clazzName = Type.getClassName(progClazz);
		if(!this.clazzNameToPrograms.exists(typeClazz)) {
			this.clazzNameToPrograms.set(typeClazz,new List());
		}
		this.clazzNameToPrograms.get(typeClazz).add(progClazz);
		if(defaults) {
			this.clazzNameToDefaultProgram.set(typeClazz,progClazz);
			if(Reflect.hasField(typeClazz,"FILE_IMPORT_FORMATS")) {
				var fileFormats = Reflect.field(typeClazz,"FILE_IMPORT_FORMATS");
				var _g = 0;
				while(_g < fileFormats.length) {
					var fileFormat = fileFormats[_g];
					++_g;
					this.fileExtensionToDefaultProgram.set(fileFormat,progClazz);
				}
			}
		}
	}
	,getDefaultProgramByFileExtension: function(fileExtension) {
		if(this.fileExtensionToDefaultProgram.exists(fileExtension.toLowerCase())) {
			return this.fileExtensionToDefaultProgram.get(fileExtension.toLowerCase());
		} else {
			return null;
		}
	}
	,removeProgram: function(program) {
		if(!HxOverrides.remove(this.programList,program)) {
			throw new js._Boot.HaxeError(new saturn.client.ProgramNotFoundException("Program " + Type.getClassName(program)));
		}
		var clazz = this.clazzNameToPrograms.keys();
		while(clazz.hasNext()) {
			var clazz1 = clazz.next();
			this.clazzNameToPrograms.get(clazz1).remove(program);
			if(this.clazzNameToDefaultProgram.exists(clazz1) && this.clazzNameToDefaultProgram.get(clazz1) == program) {
				this.clazzNameToDefaultProgram.remove(clazz1);
			}
		}
	}
	,getDefaultProgram: function(clazz) {
		if(this.clazzNameToDefaultProgram.exists(clazz)) {
			var d = this.clazzNameToDefaultProgram.get(clazz);
			return d;
		}
		return null;
	}
	,getClassesForProgram: function(progClazz) {
		var clazzList = [];
		var clazz = this.clazzNameToPrograms.keys();
		while(clazz.hasNext()) {
			var clazz1 = clazz.next();
			var programClazz = this.clazzNameToPrograms.get(clazz1).iterator();
			while(programClazz.hasNext()) {
				var programClazz1 = programClazz.next();
				if(progClazz == programClazz1) {
					clazzList.push(clazz1);
				}
			}
		}
		return clazzList;
	}
	,getProgramList: function() {
		return this.programList;
	}
	,__class__: saturn.client.ProgramRegistry
};
if(!saturn.util) saturn.util = {};
saturn.util.HaxeException = $hxClasses["saturn.util.HaxeException"] = function(message) {
	this.errorMessage = message;
};
saturn.util.HaxeException.__name__ = ["saturn","util","HaxeException"];
saturn.util.HaxeException.prototype = {
	errorMessage: null
	,getMessage: function() {
		return this.errorMessage;
	}
	,toString: function() {
		return this.errorMessage;
	}
	,__class__: saturn.util.HaxeException
};
saturn.client.ProgramNotFoundException = $hxClasses["saturn.client.ProgramNotFoundException"] = function(message) {
	saturn.util.HaxeException.call(this,message);
};
saturn.client.ProgramNotFoundException.__name__ = ["saturn","client","ProgramNotFoundException"];
saturn.client.ProgramNotFoundException.__super__ = saturn.util.HaxeException;
saturn.client.ProgramNotFoundException.prototype = $extend(saturn.util.HaxeException.prototype,{
	__class__: saturn.client.ProgramNotFoundException
});
saturn.client.SingleAppContainer = $hxClasses["saturn.client.SingleAppContainer"] = function(layout) {
	if(layout == null) {
		layout = "border";
	}
	this.hbox = Ext.create("Ext.panel.Panel",{ layout : "border", width : "100%", height : "100%", region : "north", border : false, flex : 1});
	this.deflayout = layout;
	this.createComponents();
	this.annotWindow = new haxe.ds.IntMap();
};
saturn.client.SingleAppContainer.__name__ = ["saturn","client","SingleAppContainer"];
saturn.client.SingleAppContainer.prototype = {
	hbox: null
	,centralPanel: null
	,centralTargetPanel: null
	,controlToolBar: null
	,modeToolBar: null
	,legendPanel: null
	,geneListBar: null
	,optionsToolBar: null
	,editToolBar: null
	,hideHelp: null
	,subMenuToolBar: null
	,helpingDiv: null
	,exportSubMenu: null
	,popUpWindow: null
	,ultraDDWindow: null
	,highlightWindow: null
	,annotWindow: null
	,messageWindow: null
	,messageDomainWindow: null
	,tipWindow: null
	,demoWindow: null
	,progressBar: null
	,deflayout: null
	,program: null
	,createComponents: function() {
		this.createModeToolBar();
		this.createControlToolBar();
		this.createCentralPanel();
	}
	,createCentralPanel: function() {
		var _gthis = this;
		this.centralPanel = Ext.create("Ext.panel.Panel",{ layout : "border", width : "100%", height : "100%", region : "center", cls : "x-centralPanel-single", border : false, scrollable : true, flex : 1, id : "id-centralPanel", listener : { focus : function(e) {
			_gthis.getApplication().getSingleAppContainer().hideSubMenuToolBar();
		}}});
		this.hbox.add(this.centralPanel);
	}
	,clearCentralPanel: function() {
		var _gthis = this;
		var itemslist = this.centralPanel.items;
		itemslist.each(function(item,index,length) {
			if(item.id == "panel-domain-architecture") {
				var itemslist2 = item.items;
				itemslist2.each(function(it,ind,leng) {
					item.remove(it,true);
				});
				_gthis.centralPanel.remove(item,true);
			} else if(item.id == "chromo-legend") {
				_gthis.centralPanel.remove(item,true);
			} else {
				_gthis.centralPanel.remove(item,false);
			}
		});
		this.centralPanel.doLayout();
	}
	,setCentralComponent: function(component) {
		this.clearCentralPanel();
		this.centralPanel.add(component);
		this.centralPanel.doLayout();
	}
	,addComponentToCentralPanel: function(component) {
		this.centralPanel.add(component);
		this.centralPanel.doLayout();
	}
	,getCentralPanel: function() {
		return this.centralPanel;
	}
	,createLegendPanel: function() {
		this.legendPanel = Ext.create("Ext.panel.Panel",{ width : "100%", height : "20px", border : true, cls : "x-tree-legend", region : "south", split : true, id : "chromo-legend", vertical : true, collapsible : true, collapsed : true, title : "Legend"});
		this.addComponentToCentralPanel(this.legendPanel);
	}
	,hideLegendPanel: function() {
		this.legendPanel.hide();
	}
	,showLegendPanel: function() {
		this.legendPanel.doLayout();
		this.legendPanel.show();
		this.legendPanel.doLayout();
	}
	,addImageToLegend: function(image,id) {
		var changingImage = Ext.create("Ext.Img",{ src : image, id : id, padding : "5 0 15 0"});
		this.legendPanel.insert(2,changingImage);
		this.legendPanel.doLayout();
		this.hbox.doLayout();
	}
	,removeComponentFromLegend: function(component) {
		var comp = this.legendPanel.getComponent(component);
		this.legendPanel.remove(comp);
	}
	,expandLegend: function() {
	}
	,emptyLegend: function() {
		var _gthis = this;
		var itemslist = this.legendPanel.items;
		var items = [];
		itemslist.each(function(item,index,length) {
			_gthis.legendPanel.remove(item,true);
		});
		this.legendPanel.doLayout();
	}
	,getLegendPanel: function() {
		return this.legendPanel;
	}
	,createModeToolBar: function() {
		this.modeToolBar = Ext.create("Ext.toolbar.Toolbar",{ width : "20px", id : "modeToolBarId", height : "100%", border : false, region : "west", cls : "x-modetoolbar-single", vertical : true});
		this.hbox.add(this.modeToolBar);
	}
	,hideModeToolBar: function() {
		this.modeToolBar.hide();
	}
	,showModeToolBar: function() {
		this.modeToolBar.doLayout();
		this.modeToolBar.show();
		this.modeToolBar.doLayout();
	}
	,getModeToolBar: function() {
		return this.modeToolBar;
	}
	,clearModeToolBar: function() {
		var _gthis = this;
		var itemslist = this.modeToolBar.items;
		itemslist.each(function(item,index,length) {
			_gthis.modeToolBar.remove(item,false);
		});
		this.modeToolBar.doLayout();
	}
	,addElemToModeToolBar: function(elem) {
		this.modeToolBar.add(elem);
		this.modeToolBar.doLayout();
	}
	,createControlToolBar: function(attachPosition) {
		if(attachPosition == null) {
			attachPosition = 1;
		}
		this.controlToolBar = Ext.create("Ext.toolbar.Toolbar",{ width : "35px", height : "100px", border : false, vertical : true, region : "east", cls : "x-toolbar-2nd"});
		this.hbox.insert(attachPosition,this.controlToolBar);
	}
	,getControlToolBar: function() {
		return this.controlToolBar;
	}
	,hideControlToolBar: function() {
		this.controlToolBar.hide();
	}
	,showControlToolBar: function() {
		this.controlToolBar.doLayout();
		this.controlToolBar.show();
		this.controlToolBar.doLayout();
	}
	,clearControlToolBar: function() {
		var attachPosition = this.hbox.items.findIndex("id",this.controlToolBar.id);
		this.hbox.remove(this.controlToolBar);
		this.createControlToolBar(attachPosition);
	}
	,addElemToControlToolBar: function(elem) {
		this.controlToolBar.add(elem);
		this.controlToolBar.doLayout();
	}
	,refreshControlToolBar: function() {
		this.controlToolBar.doLayout();
	}
	,createEditToolBar: function(attachPosition) {
		if(attachPosition == null) {
			attachPosition = 2;
		}
		this.editToolBar = Ext.create("Ext.toolbar.Toolbar",{ width : "35px", height : "100px", border : false, vertical : true, region : "east", cls : "x-toolbar-2nd"});
		this.hbox.insert(attachPosition,this.editToolBar);
	}
	,getEditToolBar: function() {
		return this.editToolBar;
	}
	,hideEditToolBar: function() {
		this.editToolBar.hide();
	}
	,showEditToolBar: function() {
		this.editToolBar.doLayout();
		this.editToolBar.show();
		this.editToolBar.doLayout();
	}
	,clearEditToolBar: function() {
		var attachPosition = this.hbox.items.findIndex("id",this.editToolBar.id);
		this.hbox.remove(this.editToolBar);
		this.createEditToolBar(attachPosition);
	}
	,addElemToEditToolBar: function(elem) {
		this.editToolBar.add(elem);
		this.editToolBar.doLayout();
	}
	,refreshEditToolBar: function() {
		this.controlToolBar.doLayout();
	}
	,removeComponentFromEditToolBar: function(component) {
		this.editToolBar.remove(component);
		this.editToolBar.doLayout();
	}
	,createGeneListToolBar: function(attachPosition) {
		if(attachPosition == null) {
			attachPosition = 1;
		}
		this.geneListBar = Ext.create("Ext.toolbar.Toolbar",{ top : "0px", left : "30px", width : "470px", height : "100%", border : false, vertical : true, cls : "x-viewoptionsbar", alwaysOnTop : true, region : "west", title : "Options Tool Bar", autoScroll : true});
		this.geneListBar.add({ xtype : "label", text : "Gene List", cls : "targetclass-title"});
		this.hbox.insert(attachPosition,this.geneListBar);
	}
	,getGeneListBar: function() {
		return this.geneListBar;
	}
	,hideGeneListBar: function() {
		this.geneListBar.hide();
	}
	,showGeneListBar: function() {
		this.geneListBar.show();
	}
	,clearGeneListBar: function() {
		this.geneListBar.removeAll(true);
	}
	,addGeneToGeneListBar: function(gene) {
		var _gthis = this;
		this.geneListBar.add({ xtype : "button", iconCls : "x-btn-gene-searched", text : gene, handler : function(e) {
			_gthis.getApplication().debug(e.text);
		}, tooltip : { dismissDelay : 10000, text : gene}});
	}
	,removeGeneFromGeneListBar: function(elem) {
		this.geneListBar.add(elem);
		this.geneListBar.doLayout();
	}
	,createOptionsToolBar: function(attachPosition) {
		if(attachPosition == null) {
			attachPosition = 1;
		}
		this.optionsToolBar = Ext.create("Ext.toolbar.Toolbar",{ top : "0px", left : "30px", id : "optionToolBarId", width : "700px", height : "100%", border : false, vertical : true, cls : "x-viewoptionsbar", alwaysOnTop : true, region : "west", title : "Options Tool Bar", autoScroll : true});
		this.hbox.insert(attachPosition,this.optionsToolBar);
	}
	,viewClose: function(active) {
	}
	,updateOptionsToolBar: function(active) {
	}
	,getOptionsToolBar: function() {
		if(this.optionsToolBar == null) {
			return null;
		} else {
			return this.optionsToolBar;
		}
	}
	,hideOptionsToolBar: function() {
		this.optionsToolBar.hide();
	}
	,showOptionsToolBar: function() {
		this.optionsToolBar.show();
	}
	,clearOptionsToolBar: function() {
		var _gthis = this;
		var itemslist = this.optionsToolBar.items;
		itemslist.each(function(item,index,length) {
			_gthis.optionsToolBar.remove(item,false);
		});
		this.optionsToolBar.doLayout();
	}
	,addElemToOptionsToolBar: function(elem) {
		this.optionsToolBar.add(elem);
		this.optionsToolBar.doLayout();
	}
	,createExportSubMenu: function(viewer,attachPosition) {
		if(attachPosition == null) {
			attachPosition = 10000;
		}
		this.exportSubMenu = Ext.create("Ext.toolbar.Toolbar",{ top : "0px", width : "120px", height : "50px", border : false, vertical : true, cls : "x-exsubmenu-toolsbar", modal : false, floating : true, alwaysOnTop : true, listeners : { "mouseleave" : function(menu,e,eOpts) {
			menu.hide();
		}}});
		this.exportSubMenu.add({ iconCls : "x-btn-exportpng-single", handler : function() {
			viewer.exportPNG();
		}, tooltip : { dismissDelay : 10000, text : "Export Tree as PNG file"}});
		this.exportSubMenu.add({ iconCls : "x-btn-exportsvg-single", handler : function() {
			viewer.exportSVG();
		}, tooltip : { dismissDelay : 10000, text : "Export Tree as SVG file"}});
		this.hbox.insert(attachPosition,this.exportSubMenu);
	}
	,hideExportSubMenu: function() {
		this.exportSubMenu.hide();
	}
	,showExportSubMenu: function(x) {
		this.exportSubMenu.setPosition(x);
		this.exportSubMenu.show();
	}
	,getExportSubMenu: function() {
		return this.exportSubMenu;
	}
	,createSubMenuToolBar: function(attachPosition) {
		if(attachPosition == null) {
			attachPosition = 10000;
		}
		this.subMenuToolBar = Ext.create("Ext.toolbar.Toolbar",{ top : "0px", left : "150px", width : "1px", height : "100px", border : false, vertical : true, cls : "x-submenu-toolsbar", modal : false, floating : true, alwaysOnTop : true, title : "SubMenu Tool Bar"});
		this.hbox.insert(attachPosition,this.subMenuToolBar);
	}
	,clearSubMenuToolBar: function() {
		var attachPosition = this.hbox.items.findIndex("id",this.subMenuToolBar.id);
		this.hbox.remove(this.subMenuToolBar);
		this.setTopSubMenuToolBar(0);
		this.createSubMenuToolBar(attachPosition);
	}
	,hideSubMenuToolBar: function() {
		this.subMenuToolBar.hide();
	}
	,showSubMenuToolBar: function() {
		this.subMenuToolBar.show();
	}
	,getSubMenuToolBar: function() {
		return this.subMenuToolBar;
	}
	,addElemToSubMenuToolBar: function(elem) {
		this.subMenuToolBar.add(elem);
	}
	,setTopSubMenuToolBar: function(top) {
		this.subMenuToolBar.setPosition(435,top);
	}
	,setHeightSubMenuToolBar: function(height) {
		this.subMenuToolBar.setHeight(height);
	}
	,createHelpingDiv: function(attachPosition) {
		if(attachPosition == null) {
			attachPosition = 10000;
		}
		var _gthis = this;
		this.helpingDiv = Ext.create("Ext.Container",{ top : "0px", left : "5px", width : "1px", vertical : true, cls : "x-helpingDiv", floating : true, alwaysOnTop : true, id : "helpingDiv", title : "Helping Div", listeners : { mouseout : function(e) {
			_gthis.helpingDiv.hide();
		}, mouseover : function(e1) {
			_gthis.hideHelp = false;
		}}});
		this.hbox.insert(attachPosition,this.helpingDiv);
	}
	,clearHelpingDiv: function() {
		var attachPosition = this.hbox.items.findIndex("id",this.helpingDiv.id);
		this.hbox.remove(this.helpingDiv);
		this.setTopHelpingDiv(0);
		this.createHelpingDiv(attachPosition);
	}
	,hideHelpingDiv: function() {
		this.helpingDiv.hide();
	}
	,showHelpingDiv: function() {
		this.hideSubMenuToolBar();
		this.helpingDiv.show();
	}
	,getHelpingDiv: function() {
		return this.helpingDiv;
	}
	,addHtmlTextHelpingDiv: function(text) {
		this.helpingDiv.html = text;
	}
	,setTopHelpingDiv: function(top) {
		this.helpingDiv.setPosition(135,top);
	}
	,setHeightHelpingDiv: function(height) {
		this.helpingDiv.setHeight(height);
	}
	,showAnnotWindow: function(text,px,py,title,ident,data) {
		var _gthis = this;
		if(this.alreadyOpen(ident) == false) {
			var r = Math.random() * 299 + 1;
			var id = Std["int"](r);
			var myWindow = Ext.create("Ext.window.Window",{ x : px, y : py, maxHeight : 500, cls : "x-annot-window", id : "annotWin-" + ident, modal : false, autoscroll : true, overflowY : "auto", layout : "fit", shadow : true, resizable : true, title : title, html : text, listeners : { close : function(win) {
				_gthis.annotWindow.remove(id);
				data.created = false;
			}, hide : function(win1) {
				_gthis.annotWindow.remove(id);
				data.created = false;
			}}});
			myWindow.show();
			this.annotWindow.set(id,myWindow);
			this.annotWindowDoLayout();
		}
	}
	,alreadyOpen: function(ident) {
		var key;
		var key1 = this.annotWindow.keys();
		while(key1.hasNext()) {
			var key2 = key1.next();
			var elem = this.annotWindow.get(key2);
			if(elem.id == "annotWin-" + ident) {
				return true;
			}
		}
		return false;
	}
	,removeAnnotWindows: function() {
		var key;
		var key1 = this.annotWindow.keys();
		while(key1.hasNext()) {
			var key2 = key1.next();
			var elem = this.annotWindow.get(key2);
			elem.close();
			this.annotWindow.remove(key2);
		}
	}
	,annotWindowDoLayout: function() {
		var key;
		var key1 = this.annotWindow.keys();
		while(key1.hasNext()) {
			var key2 = key1.next();
			var elem = this.annotWindow.get(key2);
			elem.doLayout();
		}
	}
	,showAnnotWindowTable: function(text,px,py) {
		var annotWindowT = Ext.create("Ext.window.Window",{ x : px, y : py, cls : "x-annot-window", modal : false, autoscroll : true, overflowY : "auto", layout : "fit", shadow : true, resizable : true, html : text});
		annotWindowT.show();
	}
	,showUltraDDWindow: function(item,px,py,title,viewer) {
		var _gthis = this;
		this.cleanALlWindows();
		this.ultraDDWindow = Ext.create("Ext.window.Window",{ x : px, width : "800px", maxHeight : 600, cls : "x-ultradd-window", modal : true, autoScroll : true, overflowY : "auto", shadow : true, resizable : true, maximizable : true, title : "UltraDD Genes"});
		this.ultraDDWindow.add({ xtype : "form", iconCls : "x-popup-form", defaultType : "checkboxfield", id : "wform", items : item, title : "Select the genes you want to add into annotations table.Total number of genes: " + title, buttons : [{ iconCls : "x-btn-accept", text : "Accept", handler : function() {
			var form = _gthis.ultraDDWindow.getComponent("wform");
			viewer.geneMap = new haxe.ds.StringMap();
			if(form.isValid()) {
				var i = 0;
				var j = 0;
				var mylist = [];
				var _g1 = 0;
				var _g = form.items.items.length;
				while(_g1 < _g) {
					var i1 = _g1++;
					if(form.items.items[i1].checked == true) {
						mylist.push(form.items.items[i1].inputValue);
						viewer.treeName = "";
						viewer.treeType = "gene";
						viewer.newickStr = "";
						viewer.annotationManager.searchedGenes = [];
						viewer.annotationManager.searchedGenes = mylist;
						var geneNode = new phylo.PhyloTreeNode(null,form.items.items[i1].inputValue,true,0);
						geneNode.l = 1;
						geneNode.annotations = [];
						geneNode.activeAnnotation = [];
						viewer.geneMap.set(form.items.items[i1].inputValue,geneNode);
					}
				}
				if(mylist.length > 0) {
					saturn.client.WorkspaceApplication.getApplication().showMessage("Alert","This process might take some time. Please wait.");
					viewer.renderTable();
				}
				_gthis.ultraDDWindow.hide();
			}
		}},{ iconCls : "x-btn-accept", text : "Cancel", handler : function() {
			_gthis.ultraDDWindow.hide();
		}}]});
		this.ultraDDWindow.show();
	}
	,cleanALlWindows: function() {
		var _gthis = this;
		if(this.highlightWindow != null) {
			this.highlightWindow.removeAll(true);
			this.highlightWindow.doLayout();
		}
		if(this.ultraDDWindow != null) {
			var itemslist = this.ultraDDWindow.items;
			itemslist.each(function(item,index,length) {
				_gthis.ultraDDWindow.remove(item,true);
			});
			this.ultraDDWindow.removeAll(true);
			this.ultraDDWindow.doLayout();
		}
		if(this.popUpWindow != null) {
			var itemslist1 = this.popUpWindow.items;
			itemslist1.each(function(item1,index1,length1) {
				_gthis.popUpWindow.remove(item1,true);
			});
			this.popUpWindow.removeAll(true);
			this.popUpWindow.doLayout();
		}
		if(this.tipWindow != null) {
			var itemslist2 = this.tipWindow.items;
			itemslist2.each(function(item2,index2,length2) {
				_gthis.tipWindow.remove(item2,true);
			});
			this.tipWindow.removeAll(true);
			this.tipWindow.doLayout();
		}
	}
	,showHighlightWindow: function(item,px,py,title,viewer) {
		var _gthis = this;
		this.cleanALlWindows();
		var compare = function(a,b) {
			var geneNameA = a.boxLabel.toUpperCase();
			var geneNameB = b.boxLabel.toUpperCase();
			var comparison = 0;
			if(geneNameA > geneNameB) {
				comparison = 1;
			} else if(geneNameA < geneNameB) {
				comparison = -1;
			}
			return comparison;
		};
		item.sort(compare);
		this.highlightWindow = Ext.create("Ext.window.Window",{ x : px, width : "800px", maxHeight : 600, cls : "x-highlight-window", modal : true, autoScroll : true, overflowY : "auto", shadow : true, resizable : true, maximizable : true, title : "Highlight Genes"});
		this.highlightWindow.add({ xtype : "form", iconCls : "x-popup-form", defaultType : "checkboxfield", id : "wform", items : item, title : "Select the genes you want to highlight in tree.Total number of genes: " + title, buttons : [{ iconCls : "x-btn-accept", text : "Accept", handler : function() {
			var form = _gthis.highlightWindow.getComponent("wform");
			viewer.config.highlightedGenes = new haxe.ds.StringMap();
			if(form.isValid()) {
				var i = 0;
				var j = 0;
				var _g1 = 0;
				var _g = form.items.items.length;
				while(_g1 < _g) {
					var i1 = _g1++;
					if(form.items.items[i1].checked == true) {
						if(viewer.config.highlightedGenes.exists(viewer.rootNode.targets[i1]) == false) {
							viewer.config.highlightedGenes.set(form.items.items[i1].inputValue,true);
						}
					}
				}
				viewer.newposition(0,0);
				_gthis.highlightWindow.hide();
			}
		}},{ iconCls : "x-btn-accept", text : "Remove highlights", handler : function() {
			viewer.config.highlightedGenes = new haxe.ds.StringMap();
			viewer.newposition(0,0);
			_gthis.highlightWindow.hide();
		}},{ iconCls : "x-btn-accept", text : "Cancel", handler : function() {
			_gthis.highlightWindow.hide();
		}}]});
		this.highlightWindow.doLayout();
		this.highlightWindow.show();
	}
	,createMessageDomainWindow: function(viewer) {
		var _gthis = this;
		this.messageDomainWindow = Ext.create("Ext.window.Window",{ width : "500px", cls : "x-popup-window", modal : true, title : "Message"});
		this.messageDomainWindow.add({ xtype : "form", iconCls : "x-popup-form", height : "200px", id : "w1form", defaultType : "checkboxfield", items : [{ xtype : "label", text : "There is no domain-based alignment for this family. This phylogenetic tree is based on full-length alignment.", cls : "x-label-message", boxLabel : "", id : ""},{ xtype : "checkboxfield", text : "Don't show this message again", boxLabel : "Don't show this message again", cls : "x-checkbox-message", id : "click_message_finish"}], buttons : [{ iconCls : "x-btn-accept", text : "Accept", handler : function() {
			var form = _gthis.messageDomainWindow.getComponent("w1form");
			if(form.isValid()) {
				if(form.items.items[1].lastValue == true) {
					viewer.adviseDomainUser(false);
				}
				_gthis.hideMessageDomainWindow();
			}
		}}]});
	}
	,showMessageDomainWindow: function() {
		this.messageDomainWindow.show();
	}
	,hideMessageDomainWindow: function() {
		this.messageDomainWindow.hide();
	}
	,showProgressBar: function() {
		this.cleanALlWindows();
		this.progressBar = Ext.create("Ext.window.Window",{ width : 230, height : 210, cls : "x-progressbar", modal : true, resizable : false, closable : false, title : "Please wait ...", items : [{ xtype : "container", cls : "x-progress-bar", width : 200, height : 130, html : "<img src=\"/static/js/images/giphy.gif\">", boxLabel : "", id : "id-tip-html"}]});
		this.progressBar.show();
	}
	,hideProgressBar: function() {
		if(this.progressBar != null) {
			this.progressBar.hide();
		}
	}
	,createTipWindow: function(viewer,top,left,width,height,text) {
		var _gthis = this;
		var th = Std["int"](height * 0.85);
		var fh = Std["int"](th * 0.85);
		var bh = height - fh;
		this.tipWindow = Ext.create("Ext.window.Window",{ width : width, height : height, maxHeight : 600, y : 5, x : left, cls : "x-tip-window", modal : true, resizable : false, closable : true, title : "Tip of the Day"});
		this.tipWindow.add({ xtype : "form", iconCls : "x-popup-form", width : width, buttonAlign : "left", id : "tipForm", items : [{ xtype : "container", cls : "x-sefa-form", width : width, height : height - 150, html : text, boxLabel : "", id : "id-tip-html"}], buttons : [{ iconCls : "x-previous-tip-btn", text : "Prev Tip", id : "previous-tip-btn", handler : function() {
			var t = viewer.tipActive;
			if(t == 0) {
				t = viewer.tips.length - 1;
			} else {
				--t;
			}
			viewer.tipActive = t;
			var title = viewer.tips[viewer.tipActive].title;
			var html = viewer.tips[viewer.tipActive].html;
			var text1 = "<h2>" + title + "</h2>" + html;
			_gthis.changeContentTipWindow(text1);
		}},{ iconCls : "x-next-tip-btn", text : "Next Tip", id : "next-tip-btn", handler : function() {
			var t1 = viewer.tipActive;
			++t1;
			if(t1 == viewer.tips.length) {
				t1 = 0;
			}
			viewer.tipActive = t1;
			var title1 = viewer.tips[viewer.tipActive].title;
			var html1 = viewer.tips[viewer.tipActive].html;
			var text2 = "<h2>" + title1 + "</h2>" + html1;
			_gthis.changeContentTipWindow(text2);
		}},{ iconCls : "x-close-tip-btn", text : "Close", id : "close-tip-btn", handler : function() {
			var checkoption = _gthis.tipWindow.getComponent("click_tip_finish");
			if(checkoption.lastValue == true) {
				viewer.showTips(true);
			} else {
				viewer.showTips(false);
			}
			_gthis.hideTipWindow();
		}}], listeners : { close : function(win) {
			var checkoption1 = _gthis.tipWindow.getComponent("click_tip_finish");
			if(checkoption1.lastValue == true) {
				viewer.showTips(true);
			} else {
				viewer.showTips(false);
			}
			_gthis.hideTipWindow();
		}, hide : function(win1) {
			var checkoption2 = _gthis.tipWindow.getComponent("click_tip_finish");
			if(checkoption2.lastValue == true) {
				viewer.showTips(true);
			} else {
				viewer.showTips(false);
			}
			_gthis.hideTipWindow();
		}}});
		this.tipWindow.add({ xtype : "checkboxfield", html : "", width : 135, height : 30, checked : true, boxLabel : "Show Tips on Startup", cls : "x-checkbox-message", id : "click_tip_finish"});
		this.tipWindow.show();
	}
	,changeContentTipWindow: function(html) {
		var item = this.tipWindow.items.items[0].items.items[0];
		if(item.id == "id-tip-html") {
			item.html = html;
		}
		item.update(html);
		this.tipWindow.doLayout();
	}
	,hideTipWindow: function() {
		this.tipWindow.hide();
	}
	,showTipWindow: function() {
		if(this.subMenuToolBar != null) {
			this.hideSubMenuToolBar();
		}
		if(this.helpingDiv != null) {
			this.hideHelpingDiv();
		}
		this.tipWindow.show();
	}
	,getTipWindow: function() {
		return this.tipWindow;
	}
	,createDemoWindow: function(viewer,top,left,width,height,text) {
		var _gthis = this;
		var th = Std["int"](height * 0.85);
		var fh = Std["int"](th * 0.85);
		var bh = height - fh;
		this.demoWindow = Ext.create("Ext.window.Window",{ width : width, height : height, maxHeight : 600, y : 5, x : left, cls : "x-tip-window", modal : true, resizable : false, closable : true, title : "Demo"});
		this.demoWindow.add({ xtype : "form", iconCls : "x-popup-form", width : width, buttonAlign : "left", id : "demoForm", items : [{ xtype : "container", cls : "x-leo-form", width : width, height : height - 150, html : text, boxLabel : "", id : "id-demo-html"}], buttons : [{ iconCls : "x-close-demo-btn", text : "Close", id : "close-demo-btn", handler : function() {
			var checkoption = _gthis.demoWindow.getComponent("click_demo_finish");
			_gthis.hideDemoWindow();
		}}], listeners : { close : function(win) {
			var checkoption1 = _gthis.demoWindow.getComponent("click_demo_finish");
			_gthis.hideDemoWindow();
		}}});
		this.demoWindow.show();
	}
	,hideDemoWindow: function() {
		this.demoWindow.hide();
	}
	,showDemoWindow: function() {
		if(this.subMenuToolBar != null) {
			this.hideSubMenuToolBar();
		}
		if(this.helpingDiv != null) {
			this.hideHelpingDiv();
		}
		this.demoWindow.show();
	}
	,getDemoWindow: function() {
		return this.demoWindow;
	}
	,createMessageWindow: function(viewer) {
		var _gthis = this;
		this.messageWindow = Ext.create("Ext.window.Window",{ width : "500px", cls : "x-popup-window", modal : true, title : "Message"});
		this.messageWindow.add({ xtype : "form", iconCls : "x-popup-form", height : "200px", id : "w2form", defaultType : "checkboxfield", items : [{ xtype : "label", text : "Click on the annotation icon for more details.", cls : "x-label-message", boxLabel : "", id : ""},{ xtype : "checkboxfield", text : "Don't show this message again", boxLabel : "Don't show this message again", cls : "x-checkbox-message", id : "click_moremessage_finish"}], buttons : [{ iconCls : "x-btn-accept", text : "Accept", handler : function() {
			var form = _gthis.messageWindow.getComponent("w2form");
			if(form.isValid()) {
				if(form.items.items[1].lastValue == true) {
					viewer.adviseUser(false);
				}
				_gthis.hideMessageWindow();
			}
		}}]});
	}
	,showMessageWindow: function() {
		this.messageWindow.show();
	}
	,hideMessageWindow: function() {
		this.messageWindow.hide();
	}
	,createPopUpWindow: function() {
		this.cleanALlWindows();
		this.popUpWindow = Ext.create("Ext.window.Window",{ x : "300px", y : "30px", width : "500px", cls : "x-popup-window", modal : true, title : "Windows POP UP"});
		this.popUpWindow.doLayout();
	}
	,clearPopUpWindow: function() {
		var attachPosition = this.hbox.items.findIndex("id",this.popUpWindow.id);
		this.hbox.remove(this.popUpWindow);
		this.popUpWindow.removeAll();
		this.setPosPopUpWindow(0,0);
		this.createPopUpWindow();
	}
	,hidePopUpWindow: function() {
		this.popUpWindow.hide();
	}
	,showPopUpWindow: function() {
		this.popUpWindow.show();
	}
	,getPopUpWindow: function() {
		return this.popUpWindow;
	}
	,addElemToPopUpWindow: function(elem) {
		this.popUpWindow.add(elem);
	}
	,addFormItemToPopUpWindow: function(item,annot,hasClass,popMethod,tree_type,family,searchGenes,annotationManager) {
		var _gthis = this;
		this.popUpWindow.add({ xtype : "form", iconCls : "x-popup-form", height : "200px", defaultType : "checkboxfield", id : "wform", items : item, buttons : [{ iconCls : "x-btn-accept", text : "Accept", handler : function() {
			var form = _gthis.popUpWindow.getComponent("wform");
			if(form.isValid()) {
				annotationManager.cleanAnnotResults(annot);
				var hook = Reflect.field(Type.resolveClass(hasClass),popMethod);
				hook(annot,form,tree_type,family,searchGenes,annotationManager,function() {
				});
				if(annotationManager.skipAnnotation[annot] != true) {
					if(annotationManager.skipCurrentLegend[annot] != true) {
						_gthis.addImageToLegend(annotationManager.annotations[annot].legend,annot);
					}
					_gthis.legendPanel.expand();
					_gthis.hidePopUpWindow();
					if(annotationManager.skipCurrentLegend[annot] != true) {
						annotationManager.activeAnnotation[annot] = true;
					}
					annotationManager.activeAnnotation[annot] = true;
					_gthis.clearOptionsToolBar();
					annotationManager.createViewOptions();
					_gthis.addElemToOptionsToolBar(annotationManager.viewOptions);
					var elem = js.Browser.get_document().getElementById("optionToolBarId");
					elem.scrollTop = annotationManager.menuScroll;
				} else {
					_gthis.hidePopUpWindow();
					_gthis.clearOptionsToolBar();
					annotationManager.createViewOptions();
					_gthis.addElemToOptionsToolBar(annotationManager.viewOptions);
				}
			}
		}},{ iconCls : "x-btn-accept", text : "Cancel", handler : function() {
			_gthis.hidePopUpWindow();
		}}]});
	}
	,setPosPopUpWindow: function(left,top) {
		this.popUpWindow.setPosition(left,top);
	}
	,setPopUpWindowTitle: function(title) {
		this.popUpWindow.title = title;
	}
	,getComponent: function() {
		return this.hbox;
	}
	,setProgram: function(program) {
		this.program = program;
		var progComponent = this.program.getRawComponent();
		this.centralPanel.add(progComponent);
		this.centralPanel.doLayout();
		progComponent.doLayout();
		progComponent.show();
		this.centralPanel.doLayout();
		program.focusProgram();
	}
	,getApplication: function() {
		return saturn.client.WorkspaceApplication.getApplication();
	}
	,getCentralContainer: function() {
		return this.centralPanel;
	}
	,__class__: saturn.client.SingleAppContainer
};
saturn.client.ScreenMode = $hxClasses["saturn.client.ScreenMode"] = { __ename__ : ["saturn","client","ScreenMode"], __constructs__ : ["SINGLE_APP","DEFAULT"] };
saturn.client.ScreenMode.SINGLE_APP = ["SINGLE_APP",0];
saturn.client.ScreenMode.SINGLE_APP.toString = $estr;
saturn.client.ScreenMode.SINGLE_APP.__enum__ = saturn.client.ScreenMode;
saturn.client.ScreenMode.DEFAULT = ["DEFAULT",1];
saturn.client.ScreenMode.DEFAULT.toString = $estr;
saturn.client.ScreenMode.DEFAULT.__enum__ = saturn.client.ScreenMode;
if(!saturn.client.core) saturn.client.core = {};
saturn.client.core.ClientCore = $hxClasses["saturn.client.core.ClientCore"] = function() {
	this.disabledLogout = false;
	this.keepProgress = true;
	this.loggedIn = false;
	this.nextMsgId = 0;
	this.updateListeners = [];
	this.refreshListeners = [];
	this.listeners = new haxe.ds.StringMap();
	this.loginListeners = [];
	this.logoutListeners = [];
	debug.enable("saturn:plugin");
	this.debugLogger = debug("saturn:plugin");
};
saturn.client.core.ClientCore.__name__ = ["saturn","client","core","ClientCore"];
saturn.client.core.ClientCore.__interfaces__ = [saturn.client.ConversationHelper];
saturn.client.core.ClientCore.clientCore = null;
saturn.client.core.ClientCore.startClientCore = function() {
	saturn.client.core.ClientCore.clientCore = new saturn.client.core.ClientCore();
	return saturn.client.core.ClientCore.clientCore;
};
saturn.client.core.ClientCore.getClientCore = function() {
	return saturn.client.core.ClientCore.clientCore;
};
saturn.client.core.ClientCore.main = function() {
	saturn.client.core.ClientCore.startClientCore();
};
saturn.client.core.ClientCore.prototype = {
	theSocket: null
	,cbsAwaitingIds: null
	,msgIdToJobInfo: null
	,msgIds: null
	,cbsAwaitingResponse: null
	,listeners: null
	,nextMsgId: null
	,loggedIn: null
	,theUser: null
	,keepProgress: null
	,updateListeners: null
	,refreshListeners: null
	,showMessage: null
	,disabledLogout: null
	,loginListeners: null
	,logoutListeners: null
	,debugLogger: null
	,providerUpListener: null
	,addUpdateListener: function(listener) {
		this.updateListeners.push(listener);
	}
	,addRefreshListener: function(listener) {
		this.refreshListeners.push(listener);
	}
	,addLoginListener: function(listener) {
		this.loginListeners.push(listener);
	}
	,addLogoutListener: function(listener) {
		this.logoutListeners.push(listener);
	}
	,setShowMessage: function(func) {
		this.showMessage = func;
	}
	,installNodeSocket: function() {
		if(this.theSocket != null) {
			this.theSocket.disconnect();
			this.theSocket = null;
		}
		var wsProtocol = "ws";
		if(js.Browser.get_window().location.protocol == "https:") {
			wsProtocol = "wss";
		}
		this.theSocket = new bindings.NodeSocket(io.connect(wsProtocol + "://" + js.Browser.get_window().location.hostname + ":" + js.Browser.get_window().location.port,{ forceNew : true, tryTransportsOnConnectTimeout : false, rememberTransport : false, transports : ["websocket"]}));
		this.initialiseSocket(this.theSocket);
	}
	,login: function(username,password,cb) {
		var _gthis = this;
		var req = new haxe.Http("/login");
		req.setParameter("username",username);
		req.setParameter("password",password);
		req.onData = function(data) {
			var obj = JSON.parse(data);
			if(obj.error) {
				_gthis.showMessage("Login failed","Unable to authenticate");
				return;
			}
			var cookies = Cookies;
			cookies.set("user",{ "fullname" : obj.full_name, "token" : obj.token, "username" : username.toUpperCase()},{ "expires" : 14});
			var user = new saturn.core.User();
			user.fullname = obj.full_name;
			user.token = obj.token;
			user.username = username.toUpperCase();
			_gthis.refreshSession(cb);
		};
		req.onError = function(err) {
			cb(err);
		};
		req.request(true);
	}
	,refreshSession: function(cb) {
		var _gthis = this;
		var cookies = Cookies;
		var cookie = cookies.getJSON("user");
		if(cookie != null) {
			saturn.core.Util.debug("Installing authenticated node socket");
			var user = new saturn.core.User();
			user.fullname = cookie.fullname;
			user.token = cookie.token;
			user.username = cookie.username;
			this.authenticateSocket(user,function(err,user1) {
				if(err == null) {
					_gthis.installProviders();
				}
				if(cb != null) {
					cb(err);
				}
			});
		} else {
			saturn.core.Util.debug("Installing unauthenticated node socket");
			this.installNodeSocket();
			this.installProviders();
			var _g = 0;
			var _g1 = this.refreshListeners;
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener();
			}
			if(cb != null) {
				cb(null);
			}
		}
	}
	,installProviders: function() {
		saturn.client.core.CommonCore.setDefaultProvider(new saturn.db.NodeProvider(),null,true);
		saturn.client.BioinformaticsServicesClient.getClient(null,this);
		var dwin = js.Browser.get_window();
		dwin.DB = saturn.client.core.CommonCore.getDefaultProvider();
	}
	,authenticateSocket: function(user,cb) {
		var _gthis = this;
		saturn.core.Util.debug("Authenticating: " + user.token + "/" + user.fullname);
		if(this.theSocket != null) {
			this.theSocket.disconnect();
			this.theSocket = null;
		}
		var wsProtocol = "ws";
		if(js.Browser.get_window().location.protocol == "https:") {
			wsProtocol = "wss";
		}
		var sock = io.connect(wsProtocol + "://" + js.Browser.get_window().location.hostname + ":" + js.Browser.get_window().location.port,{ forceNew : true, tryTransportsOnConnectTimeout : false, rememberTransport : false, transports : ["websocket"]});
		sock.on("error",function(error) {
			if(error.type == "UnauthorizedError" || error.code == "invalid_token") {
				Ext.Msg.info("Login failed","Unable to authenticate");
			} else if(error.type == "TransportError") {
				_gthis.showMessage("Server unavailable","Unable to contact server<br/>Not all functionaility will be available.<br/>Attempting reconnection in the background");
			} else {
				_gthis.theSocket = null;
				_gthis.showMessage("Unexpected server error","An unexpected server error has occurred\nPlease contact your saturn administrator");
			}
		});
		sock.on("connect",function(socket) {
			sock.reconnecting = true;
			sock.emit("authenticate",{ token : user.token});
		});
		sock.on("authenticated",function() {
			saturn.core.Util.debug("Authenticated");
			_gthis.setLoggedIn(user);
			cb(null,user);
		});
		sock.on("unauthorized",function() {
			_gthis.logout(true);
			cb("rejected",null);
		});
		this.theSocket = new bindings.NodeSocket(sock);
		this.initialiseSocket(this.theSocket);
	}
	,initialiseSocket: function(socket) {
		var _gthis = this;
		this.cbsAwaitingIds = [];
		this.cbsAwaitingResponse = new haxe.ds.StringMap();
		this.msgIdToJobInfo = new haxe.ds.StringMap();
		this.msgIds = [];
		this.theSocket.on("receiveMsgId",function(data) {
			var cb = _gthis.cbsAwaitingIds.shift();
			if(Reflect.hasField(data,"msgId")) {
				cb(data.msgId,null);
			} else {
				cb(null,"Node has failed to return a valid message ID response");
			}
		});
		this.theSocket.on("receiveError",function(data1) {
			var cb1 = _gthis.getCb(data1);
			if(cb1 != null) {
				var err = data1.error;
				if(err != null) {
					if(typeof(err) == "string") {
						if(StringTools.startsWith(err,"\"")) {
							err = JSON.parse(err);
						}
					}
				}
				cb1(data1,err);
			}
		});
		this.theSocket.on("__response__",function(data2) {
			var cb2 = _gthis.getCb(data2);
			if(cb2 != null) {
				if(data2 == null) {
					cb2(null,"Invalid, empty response from server");
				} else {
					var err1 = data2.error;
					if(err1 != null) {
						if(typeof(err1) == "string") {
							if(StringTools.startsWith(err1,"\"")) {
								err1 = JSON.parse(err1);
							}
						}
					}
					cb2(data2,data2.error);
				}
			} else {
				js.Browser.get_window().console.log("Untracked message recieved ");
			}
		});
	}
	,setLoggedIn: function(user) {
		this.setUser(user);
		this.loggedIn = true;
		var _g = 0;
		var _g1 = this.loginListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(user);
		}
	}
	,disableLogout: function() {
		this.disabledLogout = true;
	}
	,isLogoutDisabled: function() {
		return this.disabledLogout;
	}
	,setUser: function(user) {
		this.theUser = user;
	}
	,getUser: function() {
		return this.theUser;
	}
	,isLoggedIn: function() {
		return this.loggedIn;
	}
	,logout: function(skipLogoutEmit) {
		if(skipLogoutEmit == null) {
			skipLogoutEmit = false;
		}
		if(this.isLogoutDisabled()) {
			return;
		}
		var cookies = Cookies;
		cookies.remove("user");
		if(!skipLogoutEmit) {
			this.getNodeSocket().emit("logout",{ });
		}
		this.setLoggedOut();
		var _g = 0;
		var _g1 = this.logoutListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener();
		}
		this.refreshSession(function(err) {
		});
	}
	,setLoggedOut: function() {
		this.loggedIn = false;
	}
	,getNodeSocket: function() {
		return this.theSocket;
	}
	,registerResponse: function(msg) {
		var _gthis = this;
		this.theSocket.on(msg,function(data) {
			saturn.core.Util.debug("Message!!!!!");
			var cb = _gthis.getCb(data);
			if(cb != null) {
				if(data == null) {
					cb(null,"Invalid, empty response from server");
				} else {
					cb(data,data.error);
				}
			} else {
				js.Browser.get_window().console.log("Untracked message recieved " + msg);
			}
		});
	}
	,registerListener: function(msg,cb) {
		var _gthis = this;
		if(!this.listeners.exists(msg)) {
			this.theSocket.on(msg,function(data) {
				if(_gthis.listenersRegistered(msg)) {
					_gthis.notifyListeners(msg,data);
				}
			});
			var this1 = this.listeners;
			var value = [];
			this1.set(msg,value);
		}
		this.listeners.get(msg).push(cb);
	}
	,removeListener: function(msg,cb) {
		if(this.listeners.exists(msg)) {
			HxOverrides.remove(this.listeners.get(msg),cb);
		}
	}
	,listenersRegistered: function(msg) {
		return this.listeners.exists(msg);
	}
	,notifyListeners: function(msg,data) {
		if(this.listeners.exists(msg)) {
			var _g = 0;
			var _g1 = this.listeners.get(msg);
			while(_g < _g1.length) {
				var cb = _g1[_g];
				++_g;
				cb(data);
			}
		}
	}
	,sendRequest: function(msg,json,cb) {
		var msgId = Std.string(this.nextMsgId++);
		json.msgId = msgId;
		this.cbsAwaitingResponse.set(msgId,cb);
		this.msgIdToJobInfo.set(msgId,{ "MSG" : msg, "JSON" : json, "START_TIME" : Date.now()});
		this.msgIds.unshift(msgId);
		this.theSocket.emit(msg,json);
		var _g = 0;
		var _g1 = this.updateListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener();
		}
		return msgId;
	}
	,printQueryTimes: function() {
		var msgId = this.msgIdToJobInfo.keys();
		while(msgId.hasNext()) {
			var msgId1 = msgId.next();
			if(Reflect.hasField(this.msgIdToJobInfo.get(msgId1),"END_TIME")) {
				saturn.core.Util.debug(">" + msgId1 + "\t\t" + Std.string(this.msgIdToJobInfo.get(msgId1).msg) + "\t\t" + (this.msgIdToJobInfo.get(msgId1).END_TIME - this.msgIdToJobInfo.get(msgId1).START_TIME) / 1000);
				saturn.core.Util.debug(this.msgIdToJobInfo.get(msgId1).JSON);
			}
		}
	}
	,getCb: function(data) {
		var msgId = data.msgId;
		if(this.cbsAwaitingResponse.exists(msgId)) {
			var cb = this.cbsAwaitingResponse.get(msgId);
			this.cbsAwaitingResponse.remove(msgId);
			if(!this.keepProgress) {
				this.msgIdToJobInfo.remove(msgId);
				HxOverrides.remove(this.msgIds,msgId);
			} else {
				Reflect.setField(this.msgIdToJobInfo.get(msgId),"END_TIME",Date.now());
			}
			var _g = 0;
			var _g1 = this.updateListeners;
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener();
			}
			return cb;
		} else {
			return null;
		}
	}
	,requestNodeMsgId: function(cb) {
		this.cbsAwaitingIds.push(cb);
		this.theSocket.emit("sendMsgId",{ });
	}
	,debug: function(message) {
		this.debugLogger(message);
	}
	,onProviderUp: function(cb) {
		this.providerUpListener = cb;
	}
	,providerUp: function() {
		if(this.providerUpListener != null) {
			var a = this.providerUpListener;
			this.providerUpListener = null;
			a();
		}
	}
	,__class__: saturn.client.core.ClientCore
};
if(!saturn.core) saturn.core = {};
if(!saturn.core.annotations) saturn.core.annotations = {};
saturn.core.annotations.AnnotationManager = $hxClasses["saturn.core.annotations.AnnotationManager"] = function() {
	this.annotationSuppliers = new haxe.ds.StringMap();
};
saturn.core.annotations.AnnotationManager.__name__ = ["saturn","core","annotations","AnnotationManager"];
saturn.core.annotations.AnnotationManager.prototype = {
	annotationSuppliers: null
	,annotateSequence: function(sequence,name,annotationName,config,cb) {
		if(this.annotationSuppliers.exists(annotationName)) {
			this.annotationSuppliers.get(annotationName).annotate(sequence,name,annotationName,config,cb);
		}
	}
	,annotateMolecule: function(molecule,annotationName,config,cb) {
		if(this.annotationSuppliers.exists(annotationName)) {
			this.annotationSuppliers.get(annotationName).annotateMolecule(molecule,annotationName,config,cb);
		}
	}
	,registerAnnotationSupplier: function($as,annotationName) {
		this.annotationSuppliers.set(annotationName,$as);
	}
	,__class__: saturn.core.annotations.AnnotationManager
};
saturn.client.core.CommonCore = $hxClasses["saturn.client.core.CommonCore"] = function() { };
saturn.client.core.CommonCore.__name__ = ["saturn","client","core","CommonCore"];
saturn.client.core.CommonCore.DEFAULT_POOL_NAME = null;
saturn.client.core.CommonCore.setDefaultProvider = function(provider,name,defaultProvider) {
	if(name == null) {
		name = "DEFAULT";
	}
	saturn.client.core.CommonCore.providers.set(name,provider);
	if(defaultProvider) {
		saturn.client.core.CommonCore.DEFAULT_POOL_NAME = name;
	}
};
saturn.client.core.CommonCore.getAnnotationManager = function() {
	return saturn.client.core.CommonCore.annotationManager;
};
saturn.client.core.CommonCore.closeProviders = function() {
	var name = saturn.client.core.CommonCore.providers.keys();
	while(name.hasNext()) {
		var name1 = name.next();
		saturn.client.core.CommonCore.providers.get(name1)._closeConnection();
	}
};
saturn.client.core.CommonCore.getStringError = function(error) {
	var dwin = js.Browser.get_window();
	dwin.error = error;
	return error;
};
saturn.client.core.CommonCore.getCombinedModels = function() {
	if(saturn.client.core.CommonCore.combinedModels == null) {
		saturn.client.core.CommonCore.combinedModels = new haxe.ds.StringMap();
		var _g = 0;
		var _g1 = saturn.client.core.CommonCore.getProviderNames();
		while(_g < _g1.length) {
			var name = _g1[_g];
			++_g;
			var models = saturn.client.core.CommonCore.getDefaultProvider(null,name).getModels();
			var key = models.keys();
			while(key.hasNext()) {
				var key1 = key.next();
				saturn.client.core.CommonCore.combinedModels.set(key1,models.get(key1));
			}
		}
	}
	return saturn.client.core.CommonCore.combinedModels;
};
saturn.client.core.CommonCore.getProviderNameForModel = function(name) {
	var models = saturn.client.core.CommonCore.getCombinedModels();
	if(models.exists(name)) {
		if(models.get(name).exists("provider_name")) {
			return models.get(name).get("provider_name");
		} else {
			return null;
		}
	} else {
		return null;
	}
};
saturn.client.core.CommonCore.getProviderForNamedQuery = function(name) {
	var providerName = saturn.client.core.CommonCore.providers.keys();
	while(providerName.hasNext()) {
		var providerName1 = providerName.next();
		var provider = saturn.client.core.CommonCore.providers.get(providerName1);
		var config = provider.getConfig();
		if(Reflect.hasField(config,"named_queries")) {
			if(Reflect.hasField(Reflect.field(config,"named_queries"),name)) {
				return providerName1;
			}
		}
	}
	return null;
};
saturn.client.core.CommonCore.getDefaultProvider = function(cb,name) {
	if(name == null) {
		name = saturn.client.core.CommonCore.getDefaultProviderName();
	}
	if(saturn.client.core.CommonCore.providers.exists(name)) {
		if(cb != null) {
			cb(null,saturn.client.core.CommonCore.providers.get(name));
		}
		return saturn.client.core.CommonCore.providers.get(name);
	} else if(name != null) {
		saturn.client.core.CommonCore.getResource(name,cb);
		return -1;
	}
	return null;
};
saturn.client.core.CommonCore.getProviderNames = function() {
	var names = [];
	var name = saturn.client.core.CommonCore.providers.keys();
	while(name.hasNext()) {
		var name1 = name.next();
		names.push(name1);
	}
	var name2 = saturn.client.core.CommonCore.pools.keys();
	while(name2.hasNext()) {
		var name3 = name2.next();
		names.push(name3);
	}
	return names;
};
saturn.client.core.CommonCore.getFileExtension = function(fileName) {
	var r = new EReg("\\.(\\w+)","");
	r.match(fileName);
	return r.matched(1);
};
saturn.client.core.CommonCore.getBinaryFileAsArrayBuffer = function(file) {
	var fileReader = new FileReader();
	return fileReader.readAsArrayBuffer(file);
};
saturn.client.core.CommonCore.convertArrayBufferToBase64 = function(buffer) {
	var binary = "";
	var bytes = new Uint8Array(buffer);
	var len = bytes.byteLength;
	var _g1 = 0;
	var _g = len;
	while(_g1 < _g) {
		var i = _g1++;
		binary += String.fromCharCode(bytes[i]);
	}
	return js.Browser.get_window().btoa(binary);
};
saturn.client.core.CommonCore.getFileAsText = function(file,cb) {
	if(Std["is"](file,saturn.core.FileShim)) {
		var tmp = file.getAsText();
		cb(tmp);
	} else if(Reflect.hasField(file,"_data")) {
		var tmp1 = file.asText();
		cb(tmp1);
	} else {
		var fileReader = new FileReader();
		fileReader.onload = function(e) {
			cb(e.target.result);
		};
		fileReader.readAsText(file);
	}
};
saturn.client.core.CommonCore.getFileInChunks = function(file,chunkSize,cb) {
	var offset = 0;
	var fileSize = file.size;
	var chunker = null;
	chunker = function() {
		var reader = new FileReader();
		var reader1 = reader;
		var chunker1 = file.slice(offset,offset + chunkSize);
		reader1.readAsDataURL(chunker1);
		reader.onloadend = function(event) {
			if(event.target.error == null) {
				var chunker2 = reader.result.split(",")[1];
				cb(null,chunker2,function() {
					offset += chunkSize;
					if(offset >= fileSize) {
						cb(null,null,null);
					} else {
						chunker();
					}
				});
			} else {
				cb(event.target.error,null,null);
			}
		};
	};
	chunker();
};
saturn.client.core.CommonCore.getFileAsArrayBuffer = function(file,cb) {
	if(Std["is"](file,saturn.core.FileShim)) {
		var tmp = file.getAsArrayBuffer();
		cb(tmp);
	} else if(Reflect.hasField(file,"_data")) {
		var tmp1 = file.asUint8Array();
		cb(tmp1);
	} else {
		var fileReader = new FileReader();
		fileReader.onload = function(e) {
			cb(e.target.result);
		};
		fileReader.readAsArrayBuffer(file);
	}
};
saturn.client.core.CommonCore.setPool = function(poolName,pool,isDefault) {
	if(poolName == null) {
		poolName = "DEFAULT";
	}
	saturn.client.core.CommonCore.pools.set(poolName,pool);
	if(isDefault) {
		saturn.client.core.CommonCore.DEFAULT_POOL_NAME = poolName;
	}
};
saturn.client.core.CommonCore.getPool = function(poolName) {
	if(poolName == null) {
		poolName = "DEFAULT";
	}
	if(saturn.client.core.CommonCore.pools.exists(poolName)) {
		return saturn.client.core.CommonCore.pools.get(poolName);
	} else {
		return null;
	}
};
saturn.client.core.CommonCore.getResource = function(poolName,cb) {
	if(poolName == null) {
		poolName = "DEFAULT";
	}
	var pool = saturn.client.core.CommonCore.getPool(poolName);
	if(pool != null) {
		pool.acquire(function(err,resource) {
			if(err == null) {
				saturn.client.core.CommonCore.resourceToPool.set(resource,poolName);
			}
			cb(err,resource);
		});
	} else {
		cb("Invalid pool name",null);
	}
};
saturn.client.core.CommonCore.releaseResource = function(resource) {
	if(saturn.client.core.CommonCore.resourceToPool.exists(resource)) {
		var poolName = saturn.client.core.CommonCore.resourceToPool.get(resource);
		if(saturn.client.core.CommonCore.pools.exists(poolName)) {
			var pool = saturn.client.core.CommonCore.pools.get(poolName);
			pool.release(resource);
			return -3;
		} else {
			return -2;
		}
	} else {
		return -1;
	}
};
saturn.client.core.CommonCore.makeFullyQualified = function(path) {
	var location = js.Browser.get_location();
	return location.protocol + "//" + location.hostname + ":" + location.port + "/" + path;
};
saturn.client.core.CommonCore.getContent = function(url,onSuccess,onFailure) {
	if(onFailure == null) {
		onFailure = function(err) {
			saturn.client.WorkspaceApplication.getApplication().showMessage("Error retrieving resource",url);
		};
	}
	Ext.Ajax.request({ url : url, success : function(response,opts) {
		onSuccess(response.responseText);
	}, failure : function(response1,opts1) {
		onFailure(response1);
	}});
};
saturn.client.core.CommonCore.getDefaultProviderName = function() {
	return saturn.client.core.CommonCore.DEFAULT_POOL_NAME;
};
if(!saturn.client.workspace) saturn.client.workspace = {};
saturn.client.workspace.WorkspaceListener = $hxClasses["saturn.client.workspace.WorkspaceListener"] = function() { };
saturn.client.workspace.WorkspaceListener.__name__ = ["saturn","client","workspace","WorkspaceListener"];
saturn.client.workspace.WorkspaceListener.prototype = {
	objectAdded: null
	,objectRemoved: null
	,objectRenamed: null
	,__class__: saturn.client.workspace.WorkspaceListener
};
if(!saturn.client.programs) saturn.client.programs = {};
saturn.client.programs.SimpleExtJSProgram = $hxClasses["saturn.client.programs.SimpleExtJSProgram"] = function() {
	this.autoConfigureOutline = false;
	this.nextObjectValue = 0;
	saturn.client.BaseProgram.call(this);
};
saturn.client.programs.SimpleExtJSProgram.__name__ = ["saturn","client","programs","SimpleExtJSProgram"];
saturn.client.programs.SimpleExtJSProgram.__interfaces__ = [saturn.client.workspace.WorkspaceListener,saturn.client.BuildingBlock];
saturn.client.programs.SimpleExtJSProgram.__super__ = saturn.client.BaseProgram;
saturn.client.programs.SimpleExtJSProgram.prototype = $extend(saturn.client.BaseProgram.prototype,{
	folderToDropClass: null
	,folderToAllowMany: null
	,folderToObjects: null
	,objectToFolder: null
	,nextObjectValue: null
	,mouseDown: null
	,inMouseMove: null
	,autoConfigureOutline: null
	,groupToTreeItem: null
	,saveButton: null
	,deleteButton: null
	,getDOMComponent: function() {
		return this.getComponent().el.dom;
	}
	,emptyInit: function() {
		this.folderToDropClass = new haxe.ds.StringMap();
		this.folderToAllowMany = new haxe.ds.StringMap();
		this.folderToObjects = new haxe.ds.StringMap();
		this.objectToFolder = new haxe.ds.StringMap();
		this.groupToTreeItem = new haxe.ds.StringMap();
		saturn.client.BaseProgram.prototype.emptyInit.call(this);
		this.getWorkspace().addListener(this);
	}
	,onFocus: function() {
		var _gthis = this;
		saturn.client.BaseProgram.prototype.onFocus.call(this);
		this.getApplication().enableProgramSearchField(false);
		this.getApplication().setProgramSearchFieldEmptyText("");
		this.installWindowListeners(js.Browser.get_window());
		this.restoreDropFolders();
		this.saveButton = this.getApplication().getToolBar().add({ iconCls : "x-btn-save", text : "Save", handler : function() {
			_gthis.saveObjectGUI();
		}});
		this.deleteButton = this.getApplication().getToolBar().add({ iconCls : "x-btn-delete", text : "Delete", handler : function() {
			_gthis.deleteObjectGUI();
		}});
	}
	,onBlur: function() {
		saturn.client.BaseProgram.prototype.onBlur.call(this);
		this.uninstallWindowListeners(js.Browser.get_window());
		this.getApplication().setInformationPanelText("",false);
		this.getApplication().setCentralInfoPanelText("");
	}
	,getComponent: function() {
		return null;
	}
	,postRender: function() {
		this.initialiseDOMComponent();
	}
	,getCentralPanelLayout: function() {
		return "border";
	}
	,initialiseDOMComponent: function() {
		this.initialiseDragAndDrop();
	}
	,initialiseDragAndDrop: function() {
		var elem = this.getDOMComponent();
		var self = this;
		elem.onmousemove = function() {
			if(self.mouseDown == true) {
				self.inMouseMove = true;
				self.selectionUpdated();
			}
		};
		elem.addEventListener("dragenter",function(e) {
			e.preventDefault();
			elem.style.backgroundColor = "rgba(168,168,168,0.5) ";
			return false;
		});
		elem.addEventListener("dragexit",function(e1) {
			e1.preventDefault();
			elem.style.backgroundColor = "green";
			return false;
		});
		elem.addEventListener("dragover",function(e2) {
			e2.preventDefault();
			return false;
		});
		elem.addEventListener("dragleave",function(e3) {
			e3.preventDefault();
			elem.style.backgroundColor = "white";
			return false;
		});
		elem.addEventListener("drop",function(e4) {
			e4.preventDefault();
			var file = e4.dataTransfer.files[0];
			self.openFile(file,false);
			elem.style.backgroundColor = "white";
			return false;
		});
	}
	,setActiveObject: function(objectId) {
		saturn.client.BaseProgram.prototype.setActiveObject.call(this,objectId);
		if(!this.delayedActivation) {
			this.restoreDropFolders();
		}
	}
	,postRestore: function() {
		saturn.client.BaseProgram.prototype.postRestore.call(this);
		this.restoreDropFolders();
	}
	,printInfo: function(message) {
		this.getApplication().printInfo(message);
	}
	,isNaked: function() {
		return this.getApplication().isNaked();
	}
	,printStackTrace: function() {
		var error = new Error();
		this.printInfo(error.stack);
	}
	,objectRenamed: function(object) {
		var progObj = this.getState();
		var refs = progObj.getMatchingReferences(object.getUUID());
		var _g = 0;
		while(_g < refs.length) {
			var ref = refs[_g];
			++_g;
			var node = this.getApplication().getOutlineDataStore("DEFAULT").getRootNode().findChild("objectId",ref,true);
			if(node != null) {
				var tmp = object.getName();
				node.set("text",tmp);
				node.commit();
			}
		}
	}
	,objectAdded: function(object) {
	}
	,objectRemoved: function(object) {
		this.removeObjectFromOutline(object.getUUID());
	}
	,registerDropFolder: function(folderName,acceptClazz,allowMany) {
		this.folderToDropClass.set(folderName,acceptClazz);
		this.folderToAllowMany.set(folderName,allowMany);
		this.folderToObjects.set(folderName,[]);
		this.autoConfigureOutline = true;
	}
	,restoreDropFolders: function() {
		if(this.autoConfigureOutline) {
			this.getApplication().installOutlineTree("DEFAULT",true,false,"WorkspaceObject");
			Ext.suspendLayouts();
			var folderName = this.folderToObjects.keys();
			while(folderName.hasNext()) {
				var folderName1 = folderName.next();
				this.restoreDropFolder(folderName1);
			}
			Ext.resumeLayouts(true);
		}
	}
	,restoreDropFolder: function(folderName) {
		var _gthis = this;
		var app = this.getApplication();
		var dataStore = app.getOutlineDataStore("DEFAULT");
		var rootNode = dataStore.getRootNode();
		var workspaceFolder = rootNode.appendChild({ text : folderName, leaf : false, expanded : true, id : "_folder_" + folderName});
		this.groupToTreeItem.set(folderName,workspaceFolder);
		var obj = this.getState();
		if(obj != null) {
			var _g = 0;
			var _g1 = obj.getReferences(folderName);
			while(_g < _g1.length) {
				var objectId = _g1[_g];
				++_g;
				var object = app.getWorkspace()._getObject(objectId);
				workspaceFolder.appendChild(Ext.create("WorkspaceObject",{ text : object.getName(), leaf : true, objectId : objectId, id : objectId, icon : object.getIconPath()}));
			}
			this.getApplication().getOutlineTree("DEFAULT").on("itemcontextmenu",$bind(this,this.showTreeContextMenu),this);
			this.getApplication().getOutlineTree("DEFAULT").on("itemclick",function(view,rec,item,index,event) {
				if(event.ctrlKey) {
					_gthis.showTreeContextMenu(view,rec,item,index,event);
				}
			},this);
		}
	}
	,showTreeContextMenu: function(view,record,item,index,event) {
		var _gthis = this;
		var objectId = record.get("objectId");
		js.Browser.get_window().console.log("ID: " + Std.string(record.get("id")));
		if(record.get("id").indexOf("_folder_") == -1) {
			if(objectId != "") {
				var contextMenu = Ext.create("Ext.menu.Menu",{ items : [{ text : "Remove", handler : function() {
					_gthis.removeObjectFromOutline(objectId);
				}}]});
				contextMenu.showAt(event.getXY());
				event.stopEvent();
			}
		} else {
			var contextMenu1 = Ext.create("Ext.menu.Menu",{ items : [{ text : "Remove All", handler : function() {
				var group = record.get("text");
				var refs = _gthis.getState().getReferences(group);
				var _g = 0;
				while(_g < refs.length) {
					var ref = refs[_g];
					++_g;
					_gthis.removeObjectFromOutline(ref);
				}
			}}]});
			contextMenu1.showAt(event.getXY());
			event.stopEvent();
		}
	}
	,registerReference: function(objectId,group) {
		var newId = objectId + "_" + this.getNextObjectId();
		this.objectAddedToOutline(group,newId);
		if(this.groupToTreeItem.exists(group)) {
			this.groupToTreeItem.get(group).appendChild(Ext.create("WorkspaceObject",{ text : this.getWorkspace()._getObject(objectId).getName(), leaf : true, objectId : newId, id : newId}));
		}
	}
	,addWorkspaceDropFolder: function(folderName,object,dropClass,allowMany) {
		var _gthis = this;
		this.folderToDropClass.set(folderName,dropClass);
		this.folderToAllowMany.set(folderName,allowMany);
		if(!this.folderToObjects.exists(folderName)) {
			this.folderToObjects.set(folderName,[]);
		}
		var webApp = saturn.client.WorkspaceApplication.getApplication();
		var dataStore = webApp.getOutlineDataStore("DEFAULT");
		var rootNode = dataStore.getRootNode();
		var workspaceFolder = rootNode.appendChild({ text : folderName, leaf : false, expanded : true, id : folderName});
		if(object != null) {
			var objectId = object.getUUID();
			var pseudoObjectId = objectId + "_" + this.getNextObjectId();
			this.folderToObjects.get(folderName).push(pseudoObjectId);
			workspaceFolder.appendChild(Ext.ModelManager.create({ text : object.getName(), leaf : true, objectId : pseudoObjectId, id : pseudoObjectId},"WorkspaceObject"));
			this.objectAddedToOutline(folderName,pseudoObjectId);
		}
		this.getApplication().getOutlineTree("DEFAULT").on("itemcontextmenu",$bind(this,this.showTreeContextMenu),this);
		this.getApplication().getOutlineTree("DEFAULT").on("itemclick",function(view,rec,item,index,event) {
			if(event.ctrlKey) {
				_gthis.showTreeContextMenu(view,rec,item,index,event);
			}
		},this);
	}
	,close: function() {
		saturn.client.BaseProgram.prototype.close.call(this);
		this.getWorkspace().removeListener(this);
		var _g = 0;
		var _g1 = this.plugins;
		while(_g < _g1.length) {
			var plugin = _g1[_g];
			++_g;
			plugin.destroy();
		}
		this.getComponent().parentBuildingBlock = null;
	}
	,objectAddedToOutline: function(dropFolder,objectId) {
		var state = this.getState();
		state.addReference(dropFolder,objectId);
	}
	,hasReference: function(dropFolder,objectId) {
		var state = this.getState();
		return state.hasReference(dropFolder,objectId);
	}
	,removeObjectFromOutline: function(objectId) {
		var state = this.getState();
		if(state != null) {
			var removed = state.removeReferences(objectId);
			var _g = 0;
			while(_g < removed.length) {
				var objectId1 = removed[_g];
				++_g;
				var node = this.getApplication().getOutlineDataStore("DEFAULT").getRootNode().findChild("objectId",objectId1,true);
				if(node != null) {
					node.parentNode.removeChild(node);
				}
			}
		}
	}
	,workspaceObjectUpdated: function() {
	}
	,onOutlineDrop: function(node,data,overModel,dropPosition,dropHandlers,eOpts) {
		var objectId = data.records[0].get("objectId");
		var dropFolder = overModel.data.id;
		dropFolder = StringTools.replace(dropFolder,"_folder_","");
		if(data.records[0].get("type") == "folder") {
			var nodes = [];
			var childIds = this.getWorkspace().getObjectIdsBelow(data.records[0]);
			var count = 0;
			var _g = 0;
			while(_g < childIds.length) {
				var childId = childIds[_g];
				++_g;
				if(!this.hasReference(dropFolder,childId)) {
					var wo = this.getWorkspace().getObject(childId);
					if(this.folderToDropClass.get(dropFolder) == null || Std["is"](wo,this.folderToDropClass.get(dropFolder))) {
						var childNode = this.getWorkspace().findNode(childId);
						if(childNode != null) {
							var copy = childNode.copy();
							var pseudoObjectId = childId + "_" + this.getNextObjectId();
							copy.set("id",pseudoObjectId);
							copy.set("objectId",pseudoObjectId);
							nodes.unshift(copy);
							this.objectAddedToOutline(dropFolder,pseudoObjectId);
							++count;
						}
					}
				}
			}
			if(count > 0) {
				data.records = nodes;
				return true;
			}
		} else if(this.folderToDropClass.exists(dropFolder)) {
			var wo1 = this.getWorkspace().getObject(objectId);
			if(this.folderToDropClass.get(dropFolder) == null || Std["is"](wo1,this.folderToDropClass.get(dropFolder))) {
				var match = this.hasReference(dropFolder,objectId);
				if(!match) {
					var pseudoObjectId1 = objectId + "_" + this.getNextObjectId();
					data.records[0] = data.records[0].copy();
					data.records[0].data.id = pseudoObjectId1;
					data.records[0].data.objectId = pseudoObjectId1;
					this.objectAddedToOutline(dropFolder,pseudoObjectId1);
					return true;
				}
			}
		}
		dropHandlers.cancelDrop();
		return false;
	}
	,getNextObjectId: function() {
		var oldValue = this.nextObjectValue;
		this.nextObjectValue += 1;
		return oldValue;
	}
	,setTitle: function(title) {
		this.getComponent().setTitle(title);
	}
	,registerAllFromWorkspace: function(clazz,group) {
		var workspace = this.getWorkspace();
		var objs = workspace.getAllObjects(clazz);
		if(clazz == saturn.client.workspace.DNAWorkspaceObject) {
			var objs2 = workspace.getAllObjects(saturn.core.DNA);
			if(objs2 != null) {
				var _g = 0;
				while(_g < objs2.length) {
					var obj = objs2[_g];
					++_g;
					objs.push(obj);
				}
			}
		}
		if(clazz == saturn.client.workspace.ProteinWorkspaceObject) {
			var objs21 = workspace.getAllObjects(saturn.core.Protein);
			if(objs21 != null) {
				var _g1 = 0;
				while(_g1 < objs21.length) {
					var obj1 = objs21[_g1];
					++_g1;
					objs.push(obj1);
				}
			}
		}
		saturn.client.WorkspaceApplication.suspendUpdates();
		var _g2 = 0;
		while(_g2 < objs.length) {
			var obj2 = objs[_g2];
			++_g2;
			var objectId = obj2.getUUID();
			this.registerReference(objectId,group);
		}
		saturn.client.WorkspaceApplication.resumeUpdates(true);
	}
	,addModelToOutline: function(obj,clearAll,folderName) {
		var dataStore = this.getApplication().getOutlineDataStore("MODELS");
		if(dataStore == null) {
			return;
		}
		var rootNode = dataStore.getRootNode();
		if(clearAll) {
			rootNode.removeAll();
		}
		Ext.suspendLayouts();
		var model = this.getProvider().getModel(Type.getClass(obj));
		var busKey = model.getFirstKey();
		if(folderName == null) {
			folderName = Reflect.field(obj,busKey);
		}
		var fields = model.getUserFieldDefinitions();
		if(fields == null) {
			return;
		}
		var workspaceFolder = rootNode.appendChild({ folder : folderName, leaf : false, expanded : true, id : "_folder_" + folderName});
		var _g = 0;
		while(_g < fields.length) {
			var field = fields[_g];
			++_g;
			var nodeName = field.name;
			if(nodeName == "__HIDDEN__PKEY__") {
				continue;
			}
			var modelField = field.field;
			var value = saturn.db.Model.extractField(obj,modelField);
			if(value == null) {
				value = "";
			}
			if(Std["is"](value,Date)) {
				value = Std.string(value.getDate()) + "/" + Std.string(value.getMonth()) + "/" + Std.string(value.getFullYear());
			}
			var name = value;
			workspaceFolder.appendChild({ folder : nodeName, text : name, id : name + "," + folderName, leaf : true});
		}
		Ext.resumeLayouts(false);
	}
	,debug: function(msg) {
		this.getApplication().debug(msg);
	}
	,setSaveVisible: function(visible) {
		this.saveButton.setVisible(visible);
		this.deleteButton.setVisible(visible);
		if(visible) {
			this.getApplication().installOutlineTree("MODELS",true,false,"WorkspaceObject","GRID");
			var obj = this.getEntity();
			var model = this.getProvider().getModel(Type.getClass(obj));
			var syntheticFields = model.getSynthenticFields();
			if(syntheticFields != null) {
				var syntheticField = syntheticFields.keys();
				while(syntheticField.hasNext()) {
					var syntheticField1 = syntheticField.next();
					if(syntheticFields.get(syntheticField1).get("fk_field") == null) {
						var field = syntheticFields.get(syntheticField1).get("field");
						var syn_obj = Reflect.field(obj,syntheticField1);
						if(syn_obj != null) {
							var program = this.getWorkspace().getProgramForObject(syn_obj.uuid);
							if(program != null) {
								Reflect.setField(obj,field,syn_obj.getValue());
							}
						}
					}
				}
			}
			this.addModelToOutline(obj,true);
		}
	}
	,__class__: saturn.client.programs.SimpleExtJSProgram
});
saturn.client.workspace.WorkspaceObject = $hxClasses["saturn.client.workspace.WorkspaceObject"] = function() { };
saturn.client.workspace.WorkspaceObject.__name__ = ["saturn","client","workspace","WorkspaceObject"];
saturn.client.workspace.WorkspaceObject.prototype = {
	getName: null
	,setName: null
	,getUUID: null
	,setUUID: null
	,getObject: null
	,setObject: null
	,toJSON: null
	,isHidden: null
	,hide: null
	,serialise: null
	,deserialise: null
	,clone: null
	,getDocId: null
	,setDocId: null
	,setDomainObj: null
	,getDomainObj: null
	,addReference: null
	,getReferences: null
	,hasReference: null
	,removeReferences: null
	,getMatchingReferences: null
	,getIconPath: null
	,setIconPath: null
	,__class__: saturn.client.workspace.WorkspaceObject
};
saturn.client.workspace.WorkspaceObjectBase = $hxClasses["saturn.client.workspace.WorkspaceObjectBase"] = function(object,name) {
	this.object = object;
	this.name = name;
	this.objectMap = new haxe.ds.StringMap();
};
saturn.client.workspace.WorkspaceObjectBase.__name__ = ["saturn","client","workspace","WorkspaceObjectBase"];
saturn.client.workspace.WorkspaceObjectBase.__interfaces__ = [saturn.client.workspace.WorkspaceObject];
saturn.client.workspace.WorkspaceObjectBase.prototype = {
	uuid: null
	,name: null
	,object: null
	,hidden: null
	,docId: null
	,iconPath: null
	,fileImportExtensions: null
	,domainObj: null
	,objectMap: null
	,getIconPath: function() {
		return this.iconPath;
	}
	,setIconPath: function(iconPath) {
		this.iconPath = iconPath;
	}
	,setDomainObj: function(obj) {
		this.domainObj = obj;
	}
	,getDomainObj: function() {
		return this.domainObj;
	}
	,clone: function() {
		var cloneData = this.serialise();
		var unserObj = haxe.Unserializer.run(cloneData);
		unserObj.setUUID(null);
		return unserObj;
	}
	,setDocId: function(docId) {
		this.docId = docId;
	}
	,getDocId: function() {
		return this.docId;
	}
	,serialise: function() {
		return haxe.Serializer.run(this);
	}
	,deserialise: function(object) {
		this.setName(object.NAME);
		this.setUUID(object.UUID);
		this.hide(object.HIDDEN);
		this.setIconPath(object.iconPath);
	}
	,setName: function(name) {
		this.name = name;
	}
	,getName: function() {
		return this.name;
	}
	,getUUID: function() {
		return this.uuid;
	}
	,setUUID: function(uuid) {
		this.uuid = uuid;
	}
	,getObject: function() {
		return this.object;
	}
	,setObject: function(object) {
		this.object = object;
	}
	,toJSON: function() {
		return "";
	}
	,isHidden: function() {
		return this.hidden;
	}
	,hide: function(hide) {
		this.hidden = hide;
	}
	,addReference: function(group,objectId) {
		if(!this.objectMap.exists(group)) {
			this.objectMap.set(group,[]);
		}
		this.objectMap.get(group).push(objectId);
	}
	,getReferences: function(group) {
		var refs = [];
		if(this.objectMap.exists(group)) {
			var _g = 0;
			var _g1 = this.objectMap.get(group);
			while(_g < _g1.length) {
				var objectId = _g1[_g];
				++_g;
				refs.push(objectId);
			}
		}
		return refs;
	}
	,hasReference: function(group,objectId) {
		var match = false;
		if(this.objectMap.exists(group)) {
			var _g = 0;
			var _g1 = this.objectMap.get(group);
			while(_g < _g1.length) {
				var id = _g1[_g];
				++_g;
				var cId = saturn.client.workspace.Workspace.convertId(id);
				if(cId == objectId) {
					match = true;
					break;
				}
			}
		}
		return match;
	}
	,removeReferences: function(referenceId) {
		var removed = [];
		var group = this.objectMap.keys();
		while(group.hasNext()) {
			var group1 = group.next();
			var _g = 0;
			var _g1 = this.objectMap.get(group1);
			while(_g < _g1.length) {
				var objectId = _g1[_g];
				++_g;
				if(referenceId == objectId || saturn.client.workspace.Workspace.convertId(objectId) == referenceId) {
					HxOverrides.remove(this.objectMap.get(group1),objectId);
					removed.push(objectId);
				}
			}
		}
		return removed;
	}
	,getMatchingReferences: function(referenceId) {
		var refs = [];
		var group = this.objectMap.keys();
		while(group.hasNext()) {
			var group1 = group.next();
			var _g = 0;
			var _g1 = this.objectMap.get(group1);
			while(_g < _g1.length) {
				var objectId = _g1[_g];
				++_g;
				if(referenceId == objectId || saturn.client.workspace.Workspace.convertId(objectId) == referenceId) {
					refs.push(objectId);
				}
			}
		}
		return refs;
	}
	,__class__: saturn.client.workspace.WorkspaceObjectBase
};
saturn.client.workspace.ABITraceWO = $hxClasses["saturn.client.workspace.ABITraceWO"] = function(object,name) {
	this.blastDBtoHitName = new haxe.ds.StringMap();
	this.blastResultMap = new haxe.ds.StringMap();
	this.previousTraces = [];
	if(object == null) {
		object = new saturn.core.domain.ABITrace();
	}
	if(name == null) {
		name = "ABI Trace";
	}
	this.iconPath = "/static/js/images/trace_16.png";
	saturn.client.workspace.WorkspaceObjectBase.call(this,object,name);
};
saturn.client.workspace.ABITraceWO.__name__ = ["saturn","client","workspace","ABITraceWO"];
saturn.client.workspace.ABITraceWO.getDefaultFolderName = function() {
	return "Traces";
};
saturn.client.workspace.ABITraceWO.getNewMenuText = function() {
	return "ABI Trace";
};
saturn.client.workspace.ABITraceWO.__super__ = saturn.client.workspace.WorkspaceObjectBase;
saturn.client.workspace.ABITraceWO.prototype = $extend(saturn.client.workspace.WorkspaceObjectBase.prototype,{
	previousTraces: null
	,blastResultMap: null
	,blastDBtoHitName: null
	,trim: function(start,stop) {
		this.previousTraces.push(this.object);
		this.object = this.object.trim(start,stop);
		return this.object;
	}
	,untrim: function() {
		if(this.previousTraces.length > 0) {
			this.object = this.previousTraces.pop();
			return this.object;
		} else {
			return null;
		}
	}
	,getLastTrace: function() {
		return this.previousTraces[this.previousTraces.length - 1];
	}
	,align: function(aln,isForwards) {
		this.previousTraces.push(this.object);
		this.object = this.object.align(aln,isForwards);
		return this.object;
	}
	,deserialise: function(object) {
		saturn.client.workspace.WorkspaceObjectBase.prototype.deserialise.call(this,object);
		this.setObject(haxe.Unserializer.run(object.DATA.TRACE_DATA));
	}
	,__class__: saturn.client.workspace.ABITraceWO
});
saturn.client.programs.ABITraceViewer = $hxClasses["saturn.client.programs.ABITraceViewer"] = function() {
	this.svgMode = false;
	this.theLastXPosition = 0;
	this.theViewPortXUnits = 0;
	this.theBlastResultLmit = 10;
	this.traceWO = null;
	this.theTrimMenuItem = null;
	this.theUndoTrimMenuItem = null;
	this.lineX2RealPosition = -1;
	this.lineX1RealPosition = -1;
	this.theDNAWOIC = null;
	this.theDNAWO = null;
	this.overlayCanvas = null;
	this.scrollCanvas = null;
	this.graphCanvas = null;
	this.up = false;
	this.theChannels = ["CH1","CH2","CH3","CH4"];
	this.theMaxIntensity = -1;
	this.lastPosition = 0;
	this.drawingWidth = -1;
	this.drawingHeight = -1;
	this.canvasElements = [];
	this.maximumCanvasWidth = 30000;
	this.defaultDrawingHeight = 300;
	this.defaultReadingSeparation = 2;
	this.pageUrl = "";
	this.internalFrameId = "INTERNAL_FRAME";
	saturn.client.programs.SimpleExtJSProgram.call(this);
};
saturn.client.programs.ABITraceViewer.__name__ = ["saturn","client","programs","ABITraceViewer"];
saturn.client.programs.ABITraceViewer.processABIFile = function(base64,load,cb,fileName) {
	saturn.client.BioinformaticsServicesClient.getClient().sendABIReportRequest(base64,function(data,error) {
		var json = JSON.parse(data.json);
		var obj = new saturn.core.domain.ABITrace();
		obj.setData(json);
		var wo = new saturn.client.workspace.ABITraceWO(obj,fileName);
		saturn.client.WorkspaceApplication.getApplication().getWorkspace()._addObject(wo,load,true);
	});
};
saturn.client.programs.ABITraceViewer.parseFile = function(file,cb,asNewOpenProgram) {
	if(asNewOpenProgram == null) {
		asNewOpenProgram = true;
	}
	var extension = saturn.client.core.CommonCore.getFileExtension(file.name);
	if(extension == "ab1") {
		saturn.client.core.CommonCore.getFileAsArrayBuffer(file,function(content) {
			var base64 = saturn.client.core.CommonCore.convertArrayBufferToBase64(content);
			saturn.client.programs.ABITraceViewer.processABIFile(base64,asNewOpenProgram,cb,file.name);
		});
	} else if(extension == "fasta") {
		saturn.client.core.CommonCore.getFileAsText(file,function(contents) {
			if(contents != null) {
				cb(contents);
			}
		});
	}
};
saturn.client.programs.ABITraceViewer.getNormalisedEvent = function(e) {
	var normalisedEvent = { offsetX : 0., offsetY : 0.};
	if(e == null) {
		e = new Event("");
	}
	var target = e.target ? e.target : e.srcElement;
	var rect = target.getBoundingClientRect();
	normalisedEvent.offsetX = e.clientX - rect.left;
	normalisedEvent.offsetY = e.clientY - rect.top;
	return normalisedEvent;
};
saturn.client.programs.ABITraceViewer.splineCurve = function(firstPoint_x,firstPoint_y,middlePoint_x,middlePoint_y,afterPoint_x,afterPoint_y,tension) {
	var d01 = Math.sqrt(Math.pow(middlePoint_x - firstPoint_x,2) + Math.pow(middlePoint_y - firstPoint_y,2));
	var d12 = Math.sqrt(Math.pow(afterPoint_x - middlePoint_x,2) + Math.pow(afterPoint_y - middlePoint_y,2));
	var fa = tension * d01 / (d01 + d12);
	var fb = tension * d12 / (d01 + d12);
	return { inner : { x : middlePoint_x - fa * (afterPoint_x - firstPoint_x), y : middlePoint_y - fa * (afterPoint_y - firstPoint_y)}, outer : { x : middlePoint_x + fb * (afterPoint_x - firstPoint_x), y : middlePoint_y + fb * (afterPoint_y - firstPoint_y)}};
};
saturn.client.programs.ABITraceViewer.getQuickLaunchItems = function() {
	return [{ iconCls : "x-btn-trace", html : "Sequencing<br/>Viewer", cls : "quickLaunchButton", handler : function() {
		saturn.client.WorkspaceApplication.getApplication().getWorkspace().addObject(new saturn.client.workspace.ABITraceWO(new saturn.core.domain.ABITrace(),"Sequencing"),true);
	}, tooltip : { dismissDelay : 10000, text : "View DNA sequencing traces"}}];
};
saturn.client.programs.ABITraceViewer.__super__ = saturn.client.programs.SimpleExtJSProgram;
saturn.client.programs.ABITraceViewer.prototype = $extend(saturn.client.programs.SimpleExtJSProgram.prototype,{
	theComponent: null
	,internalFrameId: null
	,pageUrl: null
	,defaultReadingSeparation: null
	,defaultDrawingHeight: null
	,maximumCanvasWidth: null
	,canvasElements: null
	,drawingHeight: null
	,drawingWidth: null
	,lastPosition: null
	,traceData: null
	,theMaxIntensity: null
	,theLeftMargin: null
	,theRightMargin: null
	,theTopMargin: null
	,theBottomMargin: null
	,theXUnitSize: null
	,theYUnitSize: null
	,theGraphWidth: null
	,theGraphHeight: null
	,theTotalWidth: null
	,theChannels: null
	,theYIntervalDivisions: null
	,theReadingsCount: null
	,theLastScrollBarXPos: null
	,theLastScrollBarYPos: null
	,theScrollBarBoxHeight: null
	,theScrollBarBoxWidth: null
	,theStartingXPosition: null
	,up: null
	,graphCanvas: null
	,scrollCanvas: null
	,overlayCanvas: null
	,theSequence: null
	,blastDatabases: null
	,theDNAWO: null
	,theDNAWOIC: null
	,lineX1RealPosition: null
	,lineX2RealPosition: null
	,theUndoTrimMenuItem: null
	,theTrimMenuItem: null
	,traceWO: null
	,theBlastResultLmit: null
	,theViewPortXUnits: null
	,theLastXPosition: null
	,annotationIdToPosition: null
	,svgMode: null
	,emptyInit: function() {
		var _gthis = this;
		saturn.client.programs.SimpleExtJSProgram.prototype.emptyInit.call(this);
		var self = this;
		var items_0 = { region : "center", xtype : "button", text : "Next", handler : function() {
			_gthis.render(_gthis.traceData,_gthis.lastPosition + 1);
		}, style : { display : "block"}};
		this.theComponent = Ext.create("Ext.panel.Panel",{ width : "100%", height : "300", autoScroll : false, region : "center", listeners : { "afterrender" : function() {
			self.initialiseDOMComponent();
		}, "resize" : function() {
			var a = 10;
			_gthis.redraw();
		}}, autoEl : { tag : "div", html : ""}, cls : "x-trace-background"});
	}
	,initialiseDOMComponent: function() {
		saturn.client.programs.SimpleExtJSProgram.prototype.initialiseDOMComponent.call(this);
		this.up = true;
		this.getApplication().getMiddleSouthPanel().addCls("seq-breaking");
		this.redraw();
	}
	,recreateCanvasElements: function() {
		this.removeCanvasElements();
		this.createCanvasElements();
	}
	,redraw: function() {
		this.recreateCanvasElements();
		if(this.traceData != null) {
			this.updateTrace(this.traceData);
		}
	}
	,createCanvasElements: function() {
		var element = this.getDomElement();
		this.graphCanvas = js.Browser.get_document().createElement("canvas");
		var width = element.style.width;
		this.graphCanvas.width = this.getContainerWidth();
		this.graphCanvas.height = 300;
		this.overlayCanvas = js.Browser.get_document().createElement("canvas");
		this.overlayCanvas.width = this.getContainerWidth();
		this.overlayCanvas.height = 300;
		this.overlayCanvas.style.position = "relative";
		this.overlayCanvas.style.top = "-330px";
		this.scrollCanvas = js.Browser.get_document().createElement("canvas");
		this.scrollCanvas.width = this.getContainerWidth();
		this.scrollCanvas.height = 30;
		this.scrollCanvas.style.display = "block";
		element.appendChild(this.graphCanvas);
		element.appendChild(this.scrollCanvas);
		element.appendChild(this.overlayCanvas);
	}
	,removeCanvasElements: function() {
		var element = this.getDomElement();
		if(this.getGraphCanvas() != null) {
			element.removeChild(this.getGraphCanvas());
		}
		if(this.getScrollCanvas() != null) {
			element.removeChild(this.getScrollCanvas());
		}
		if(this.getOverlayCanvas() != null) {
			element.removeChild(this.getOverlayCanvas());
		}
	}
	,getOverlayCanvas: function() {
		return this.overlayCanvas;
	}
	,getGraphCanvas: function() {
		return this.graphCanvas;
	}
	,getScrollCanvas: function() {
		return this.scrollCanvas;
	}
	,getDomElement: function() {
		return this.theComponent.getEl().down("div[id*=innerCt]").dom;
	}
	,getContainerWidth: function() {
		return this.theComponent.getEl().dom.clientWidth;
	}
	,setTitle: function(title) {
		if(this.theComponent.tab != null) {
			this.theComponent.tab.setText(title);
		}
	}
	,getComponent: function() {
		return this.theComponent;
	}
	,openFile: function(file,asNew,asNewOpenProgram) {
		if(asNewOpenProgram == null) {
			asNewOpenProgram = true;
		}
		var _gthis = this;
		saturn.client.programs.ABITraceViewer.parseFile(file,function(contents) {
			var entities = saturn.core.FastaEntity.parseFasta(contents);
			if(entities.length > 0) {
				var tmp = entities[0].getSequence();
				_gthis._alignToTrace(tmp);
			}
		});
	}
	,setActiveObject: function(objectId) {
		saturn.client.programs.SimpleExtJSProgram.prototype.setActiveObject.call(this,objectId);
		this.traceWO = js.Boot.__cast(saturn.client.programs.SimpleExtJSProgram.prototype.getActiveObject.call(this,saturn.client.workspace.ABITraceWO) , saturn.client.workspace.ABITraceWO);
		var trace = js.Boot.__cast(this.traceWO.getObject() , saturn.core.domain.ABITrace);
		this.traceData = trace;
		if(this.up && this.traceData != null) {
			this.updateTrace(this.traceData);
		}
		this.setTitle(this.traceWO.getName());
		var _g = 0;
		var _g1 = this.blastDatabases;
		while(_g < _g1.length) {
			var blastDatabase = _g1[_g];
			++_g;
			if(!this.traceWO.blastDBtoHitName.exists(blastDatabase)) {
				this.traceWO.blastDBtoHitName.set(blastDatabase,[]);
			}
		}
		var webApp = saturn.client.WorkspaceApplication.getApplication();
		var dataStore = webApp.getOutlineDataStore("DEFAULT");
		var blastDatabase1 = this.traceWO.blastDBtoHitName.keys();
		while(blastDatabase1.hasNext()) {
			var blastDatabase2 = blastDatabase1.next();
			var node = dataStore.getNodeById(blastDatabase2);
			if(node != null) {
				node.removeAll();
				var _g2 = 0;
				var _g11 = this.traceWO.blastDBtoHitName.get(blastDatabase2);
				while(_g2 < _g11.length) {
					var hit = _g11[_g2];
					++_g2;
					node.appendChild({ text : hit, leaf : true, id : hit, type : "BLAST_HIT"});
				}
			}
		}
	}
	,updateTrace: function(traceData) {
		this.traceData = traceData;
		this.preprocessTrace();
		this.calculateAnnotations();
		if(this.theMaxIntensity == -1) {
			return;
		}
		this.render(traceData);
		this.showSequence();
		this.renderScrollBar();
		this.installScrollBarListeners();
		if(this.traceWO.previousTraces.length > 0) {
			this.theUndoTrimMenuItem.setVisible(true);
		}
	}
	,showSequence: function() {
		var nucs = [];
		var labels = this.traceData.LABELS;
		var _g1 = 0;
		var _g = labels.length;
		while(_g1 < _g) {
			var i = _g1++;
			var label = labels[i];
			if(label != "") {
				nucs.push(label);
			}
		}
		this.getApplication().setInformationPanelText(this.getSequence(),false);
	}
	,onBlur: function() {
		saturn.client.programs.SimpleExtJSProgram.prototype.onBlur.call(this);
		this.getApplication().setInformationPanelText("",false);
	}
	,onFocus: function() {
		var _gthis = this;
		saturn.client.programs.SimpleExtJSProgram.prototype.onFocus.call(this);
		if(this.traceData != null) {
			this.showSequence();
		}
		var viewMenu = this.getApplication().getViewMenu();
		var blastMenu = Ext.create("Ext.menu.Menu",{ margin : "0 0 10 0", "z-index" : 1000000});
		viewMenu.add({ text : "BLAST", hidden : false, handler : function() {
			_gthis.blastAll();
		}});
		this.getApplication().getToolBar().add({ html : "BLAST", handler : function() {
			_gthis.blastAll();
		}, iconCls : "x-btn-blast", tooltip : { dismissDelay : 10000, text : "BLAST trace sequence"}});
		this.theTrimMenuItem = this.getApplication().getEditMenu().add({ text : "Trim", hidden : false, handler : function() {
			_gthis.trim();
		}});
		this.getApplication().getToolBar().add({ html : "Trim", handler : function() {
			_gthis.trim();
		}, iconCls : "x-btn-copy", tooltip : { dismissDelay : 10000, text : "Trim trace (click at start and end of region you wish to keep then click trim<br/>Clicking a trim boundary line removes it<br/>"}});
		var hideUndo = this.traceWO != null && this.traceWO.previousTraces.length > 0 ? false : true;
		this.theUndoTrimMenuItem = this.getApplication().getEditMenu().add({ text : "Undo trim / alignment", hidden : hideUndo, handler : function() {
			_gthis.detrim();
		}});
		this.getApplication().getToolBar().add({ html : "Undo trim / alignment", handler : function() {
			_gthis.detrim();
		}, iconCls : "x-btn-copy", tooltip : { dismissDelay : 10000, text : "Undo trim or alignment"}});
		this.getApplication().getEditMenu().add({ text : "Import trace sequence", hidden : false, handler : function() {
			_gthis.importTraceSequence();
		}});
		this.initialiseOutlinePanel();
		this.getApplication().getExportMenu().add({ text : "Trace to PNG", handler : function() {
			_gthis.getApplication().saveCanvasToFile(_gthis.getGraphCanvas(),_gthis.getActiveObjectName() + ".png");
		}});
		this.getApplication().getExportMenu().add({ text : "Trace to SVG", handler : function() {
			_gthis.exportToSVG();
		}});
		this.getApplication().getToolBar().add({ html : "Export PNG", handler : function() {
			_gthis.getApplication().saveCanvasToFile(_gthis.getGraphCanvas(),_gthis.getActiveObjectName() + ".png");
		}, iconCls : "x-btn-export", tooltip : { dismissDelay : 10000, text : "Export view as PNG"}});
		this.getApplication().getToolBar().add({ html : "Export SVG", handler : function() {
			_gthis.exportToSVG();
		}, iconCls : "x-btn-export", tooltip : { dismissDelay : 10000, text : "Export view as SVG (better for Illustrator or Inkscape)"}});
	}
	,exportToSVG: function() {
		var width = this.theGraphWidth + this.theLeftMargin;
		var height = this.theGraphHeight + this.theTopMargin + this.theBottomMargin;
		var svgGraphCanvas = new C2S(width,height);
		var originalCanvas = this.graphCanvas;
		this.graphCanvas = svgGraphCanvas;
		this.svgMode = true;
		this.render(this.traceData,this.lastPosition);
		this.svgMode = false;
		this.graphCanvas = originalCanvas;
		var d = svgGraphCanvas;
		saturn.client.WorkspaceApplication.getApplication().saveTextFile(d.getSerializedSvg(true),this.getActiveObjectName() + ".svg");
	}
	,getGraphContext: function() {
		if(this.svgMode) {
			return this.graphCanvas;
		} else {
			return this.graphCanvas.getContext("2d",null);
		}
	}
	,trim: function() {
		if(this.lineX1RealPosition != -1 && this.lineX2RealPosition != -1) {
			this.theUndoTrimMenuItem.setVisible(true);
			var start = Std["int"](Math.min(this.lineX1RealPosition,this.lineX2RealPosition));
			var stop = Std["int"](Math.max(this.lineX1RealPosition,this.lineX2RealPosition));
			this.traceData = this.traceWO.trim(start,stop);
			this.lastPosition = 0;
			this.lineX1RealPosition = -1;
			this.lineX2RealPosition = -1;
			this.redraw();
		}
	}
	,detrim: function() {
		if(this.traceWO.previousTraces.length > 0) {
			this.traceData = this.traceWO.untrim();
			this.lastPosition = 0;
			this.lineX1RealPosition = -1;
			this.lineX2RealPosition = -1;
			this.redraw();
			if(this.traceWO.previousTraces.length == 0) {
				this.theUndoTrimMenuItem.setVisible(false);
			}
		}
	}
	,initialiseOutlinePanel: function() {
		var _gthis = this;
		this.getApplication().installOutlineTree("DEFAULT",true,false,null);
		var webApp = saturn.client.WorkspaceApplication.getApplication();
		var dataStore = webApp.getOutlineDataStore("DEFAULT");
		var rootNode = dataStore.getRootNode();
		var annotationsNode = rootNode.appendChild({ text : "Annotations", leaf : false, expanded : false, id : "Annotations"});
		var blastResultsNode = rootNode.appendChild({ text : "BLAST Results", leaf : false, expanded : false, id : "BLAST Results"});
		if(this.blastDatabases == null) {
			this.blastDatabases = [];
			var _g = 0;
			var _g1 = Reflect.fields(saturn.client.BioinformaticsServicesClient.getClient(null).getBlastList().DNA);
			while(_g < _g1.length) {
				var blastDatabase = _g1[_g];
				++_g;
				this.blastDatabases.push(blastDatabase);
			}
		}
		var contextMenu = function(view,record,item,index,event) {
			var self = _gthis;
			var id = record.get("id");
			if(_gthis.traceWO.blastResultMap.exists(id)) {
				var contextMenu1 = Ext.create("Ext.menu.Menu",{ items : [{ text : "Run Clustal", handler : function() {
					_gthis.runClustal(id);
				}},{ text : "Align to trace", handler : function() {
					_gthis.alignToTrace(id);
				}},{ text : "Import", handler : function() {
					_gthis.importSequence(id);
				}}]});
				contextMenu1.showAt(event.getXY());
				event.stopEvent();
			}
		};
		this.getApplication().getOutlineTree("DEFAULT").on("itemclick",function(view1,rec,item1,index1,event1) {
			if(event1.ctrlKey) {
				contextMenu(view1,rec,item1,index1,event1);
			} else {
				var id1 = rec.get("id");
				if(_gthis.annotationIdToPosition.exists(id1)) {
					var position = _gthis.annotationIdToPosition.get(id1);
					position -= Std["int"](_gthis.theViewPortXUnits / 2);
					if(position < 0) {
						position = 0;
					}
					_gthis.lastPosition = position;
					_gthis.redraw();
				}
			}
		},this);
		this.getApplication().getOutlineTree("DEFAULT").on("itemcontextmenu",contextMenu,this);
		var _g2 = 0;
		var _g11 = this.blastDatabases;
		while(_g2 < _g11.length) {
			var blastDatabase1 = _g11[_g2];
			++_g2;
			var dbNode = blastResultsNode.appendChild({ text : blastDatabase1, leaf : false, expanded : false, id : blastDatabase1});
		}
		if(this.traceWO != null) {
			saturn.client.WorkspaceApplication.suspendUpdates(true);
			var _g3 = 0;
			var _g12 = this.blastDatabases;
			while(_g3 < _g12.length) {
				var blastDatabase2 = _g12[_g3];
				++_g3;
				var node = dataStore.getNodeById(blastDatabase2);
				var _g21 = 0;
				var _g31 = this.traceWO.blastDBtoHitName.get(blastDatabase2);
				while(_g21 < _g31.length) {
					var item2 = _g31[_g21];
					++_g21;
					node.appendChild({ text : item2, id : item2, leaf : true, type : "BLAST_HIT"});
				}
			}
			blastResultsNode.expand(true);
			saturn.client.WorkspaceApplication.resumeUpdates(true,true);
		} else {
			blastResultsNode.expand(true);
			var _g4 = 0;
			var _g13 = this.blastDatabases;
			while(_g4 < _g13.length) {
				var blastDatabase3 = _g13[_g4];
				++_g4;
				var node1 = dataStore.getNodeById(blastDatabase3);
				node1.expand(true);
			}
		}
		this.calculateAnnotations();
	}
	,alignToTrace: function(sequenceId) {
		var _gthis = this;
		this.getSequenceFromDatabase(sequenceId,function(sequence,id) {
			_gthis._alignToTrace(sequence);
		});
	}
	,_alignToTrace: function(sequence) {
		var _gthis = this;
		var mode = "CLUSTAL";
		if(mode == "LOCAL") {
			var faln = this.getSequence();
			var faln1 = new saturn.core.Alignment(sequence,faln);
			faln1.align();
			var raln = new saturn.core.Alignment(new saturn.core.DNA(sequence).getInverseComplement(),this.getSequence());
			raln.align();
			var isF = faln1.getSeqAId() > raln.getSeqAId();
			var newTrace = this.traceWO.align(isF ? faln1 : raln,isF);
			this.updateTrace(newTrace);
		} else {
			this.alignWithClustal(sequence,true,function(msa1) {
				var d = js.Browser.get_window();
				d.msa1 = msa1;
				_gthis.alignWithClustal(sequence,false,function(msa2) {
					d.msa2 = msa2;
					var newTrace1 = _gthis.traceWO.align(msa1.getPSI() > msa2.getPSI() ? msa1 : msa2,msa1.getPSI() > msa2.getPSI());
					_gthis.updateTrace(newTrace1);
				});
			});
		}
	}
	,alignWithClustal: function(sequence,forward,cb) {
		if(forward) {
			sequence = sequence;
		} else {
			sequence = new saturn.core.DNA(sequence).getInverseComplement();
		}
		var templateSequence = this.getSequence();
		templateSequence = StringTools.replace(templateSequence,"-","");
		var fasta = ">trace\n" + templateSequence + "\n>template\n" + sequence;
		saturn.client.BioinformaticsServicesClient.getClient().sendClustalReportRequest(fasta,function(response,error) {
			if(error == null) {
				var clustalReport = response.json.clustalReport;
				var location = js.Browser.get_window().location;
				var dstURL = location.protocol + "//" + location.hostname + ":" + location.port + "/" + clustalReport;
				saturn.client.core.CommonCore.getContent(dstURL,function(content) {
					var msa = saturn.core.ClustalOmegaParser.read(content);
					cb(msa);
				});
			}
		});
	}
	,getAlignment: function(sequence,forward) {
		var templateSequence = forward ? this.getSequence() : new saturn.core.DNA(this.getSequence()).getInverseComplement();
		templateSequence = StringTools.replace(templateSequence,"-","");
		var aln = new saturn.core.Alignment(templateSequence,sequence);
		aln.setAlignmentType(saturn.core.AlignmentType.NW);
		aln.align();
		return aln;
	}
	,runClustal: function(sequenceId) {
		var _gthis = this;
		this.getSequenceFromDatabase(sequenceId,function(sequence,id) {
			_gthis._runClustal(sequence,id);
		});
	}
	,getSequenceFromDatabase: function(sequenceId,cb) {
		this.getSequenceEntity(sequenceId,function(obj) {
			if(Std["is"](obj,saturn.core.domain.SgcConstruct)) {
				cb(obj.dnaSeq,obj.constructId);
			} else if(Std["is"](obj,saturn.core.domain.SgcEntryClone)) {
				cb(obj.dnaSeq,obj.entryCloneId);
			} else if(Std["is"](obj,saturn.core.domain.SgcTarget)) {
				cb(obj.dnaSeq,obj.dnaId);
			}
		});
	}
	,getSequenceEntity: function(sequenceId,cb) {
		var _gthis = this;
		if(sequenceId.indexOf("-c") != -1) {
			this.getProvider().getById(sequenceId,saturn.core.domain.SgcConstruct,function(construct,exception) {
				if(exception == null && construct != null) {
					cb(construct);
				} else if(exception != null) {
					_gthis.getApplication().showMessage("Lookup exception",exception.message);
				}
			});
		} else if(sequenceId.indexOf("-s") != -1) {
			this.getProvider().getById(sequenceId,saturn.core.domain.SgcEntryClone,function(entryClone,exception1) {
				if(exception1 == null && entryClone != null) {
					cb(entryClone);
				} else if(exception1 != null) {
					_gthis.getApplication().showMessage("Lookup exception",exception1.message);
				}
			});
		} else {
			this.getProvider().getById(sequenceId,saturn.core.domain.SgcTarget,function(dnaObj,exception2) {
				if(exception2 == null && dnaObj != null) {
					cb(dnaObj);
				} else if(exception2 != null) {
					_gthis.getApplication().showMessage("Lookup exception",exception2.message);
				}
			});
		}
	}
	,importSequence: function(id) {
		var _gthis = this;
		this.getSequenceFromDatabase(id,function(dnaSeq,id1) {
			_gthis.getWorkspace().addObject(new saturn.client.workspace.DNAWorkspaceObject(new saturn.core.DNA(dnaSeq),id1),true);
		});
	}
	,isSameOrientation: function(sequence) {
		var forward = this.getAlignment(sequence,true);
		var reverse = this.getAlignment(sequence,false);
		return forward.getSeqAId() > reverse.getSeqAId();
	}
	,_runClustal: function(sequence,name) {
		var icSequence = !this.isSameOrientation(sequence);
		var dnaObj = new saturn.client.workspace.DNAWorkspaceObject(new saturn.core.DNA(sequence),name + " (DNA)");
		this.getWorkspace()._addObject(dnaObj,false,false);
		var selfDNAWO = null;
		if(icSequence) {
			if(this.theDNAWOIC == null) {
				this.addDNAToWorkspace(false,icSequence);
			}
			selfDNAWO = this.theDNAWOIC;
		} else {
			if(this.theDNAWOIC == null) {
				this.addDNAToWorkspace(false,false);
			}
			selfDNAWO = this.theDNAWO;
		}
		var aln = new saturn.core.domain.Alignment();
		aln.setAlignmentObjectIds([selfDNAWO.getUUID(),dnaObj.getUUID()]);
		var abiWO = js.Boot.__cast(this.getActiveObject(saturn.client.workspace.ABITraceWO) , saturn.client.workspace.ABITraceWO);
		var wo = new saturn.client.workspace.AlignmentWorkspaceObject(aln,abiWO.getName() + " Clustal");
		wo.addReference("Sequences",selfDNAWO.getUUID());
		wo.addReference("Sequences",dnaObj.getUUID());
		this.getWorkspace()._addObject(wo,true,false);
		this.getWorkspace().reloadWorkspace();
	}
	,addDNAToWorkspace: function(autoOpen,icSequence) {
		var dnaObj = new saturn.core.DNA(this.getSequence());
		var abiWO = js.Boot.__cast(saturn.client.programs.SimpleExtJSProgram.prototype.getActiveObject.call(this,saturn.client.workspace.ABITraceWO) , saturn.client.workspace.ABITraceWO);
		if(icSequence) {
			this.theDNAWOIC = new saturn.client.workspace.DNAWorkspaceObject(new saturn.core.DNA(dnaObj.getInverseComplement()),abiWO.getName() + " (DNA IC)");
			this.getWorkspace()._addObject(this.theDNAWOIC,autoOpen,false);
		} else {
			this.theDNAWO = new saturn.client.workspace.DNAWorkspaceObject(dnaObj,abiWO.getName() + " (DNA)");
			this.getWorkspace()._addObject(this.theDNAWO,autoOpen,false);
		}
	}
	,blastAll: function() {
		var key = this.traceWO.blastResultMap.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			this.traceWO.blastResultMap.remove(key1);
		}
		var key2 = this.traceWO.blastDBtoHitName.keys();
		while(key2.hasNext()) {
			var key3 = key2.next();
			var _g = 0;
			var _g1 = this.traceWO.blastDBtoHitName.get(key3);
			while(_g < _g1.length) {
				var item = _g1[_g];
				++_g;
				HxOverrides.remove(this.traceWO.blastDBtoHitName.get(key3),item);
			}
		}
		var webApp = saturn.client.WorkspaceApplication.getApplication();
		var dataStore = webApp.getOutlineDataStore("DEFAULT");
		var _g2 = 0;
		var _g11 = this.blastDatabases;
		while(_g2 < _g11.length) {
			var databaseName = _g11[_g2];
			++_g2;
			var node = dataStore.getNodeById(databaseName);
			node.removeAll();
		}
		var seq = this.getSequence();
		if(seq == null || seq == "") {
			return;
		}
		var _g3 = 0;
		var _g12 = this.blastDatabases;
		while(_g3 < _g12.length) {
			var databaseName1 = _g12[_g3];
			++_g3;
			this.blastSequence(seq,databaseName1,databaseName1);
		}
	}
	,blastSequence: function(theSequence,database,blastName) {
		var _gthis = this;
		saturn.client.BioinformaticsServicesClient.getClient().sendBlastReportRequest(theSequence,blastName,database,function(response,error) {
			if(error == null) {
				var reportFile = response.json.reportFile;
				var location = js.Browser.get_window().location;
				var dstURL = location.protocol + "//" + location.hostname + ":" + location.port + "/" + reportFile;
				Ext.Ajax.request({ url : dstURL, success : function(response1,opts) {
					var obj = response1.responseText;
					var topHits = _gthis.extractTopHits(obj);
					_gthis.updateBlastResults(topHits,blastName);
				}, failure : function(response2,opts1) {
				}});
			} else {
				_gthis.getApplication().showMessage("BLAST Error",error);
			}
		});
	}
	,updateBlastResults: function(hits,folderName) {
		var webApp = saturn.client.WorkspaceApplication.getApplication();
		var dataStore = webApp.getOutlineDataStore("DEFAULT");
		var node = dataStore.getNodeById(folderName);
		node.removeAll();
		saturn.client.WorkspaceApplication.suspendUpdates(true);
		var i = 0;
		var _g = 0;
		while(_g < hits.length) {
			var hit = hits[_g];
			++_g;
			this.traceWO.blastResultMap.set(hit,folderName);
			this.traceWO.blastDBtoHitName.get(folderName).push(hit);
			node.appendChild({ text : hit, leaf : true, id : hit, type : "BLAST_HIT"});
			++i;
			if(i >= this.theBlastResultLmit) {
				break;
			}
		}
		saturn.client.WorkspaceApplication.resumeUpdates(true,true);
	}
	,extractTopHits: function(resultString) {
		var lines = resultString.split("\n");
		var inResultTable = false;
		var re_extractTarget = new EReg("^\\s*([^ ]+)","");
		var targets = [];
		var blankLineCount = 0;
		var re_whiteSpace = new EReg("^\\s+$","");
		var i = 0;
		while(i < lines.length) {
			var line = lines[i++];
			if(line.indexOf("Sequences producing significant alignments") != -1) {
				inResultTable = true;
				++i;
			} else if(inResultTable) {
				if(!re_whiteSpace.match(line) && re_extractTarget.match(line)) {
					var targetName = re_extractTarget.matched(1);
					if(targetName != "") {
						targets.push(targetName);
					}
				} else {
					break;
				}
			}
		}
		return targets;
	}
	,renderScrollBar: function(moveX,forwards) {
		var width = this.scrollCanvas.width;
		var height = this.scrollCanvas.height;
		var ctx = this.scrollCanvas.getContext("2d",null);
		ctx.clearRect(0,0,width,height);
		if(this.theGraphWidth >= this.theTotalWidth) {
			return;
		}
		var shownRatio = this.theGraphWidth / this.theTotalWidth;
		var padding = 5;
		var rectWidth = (this.theGraphWidth - padding * 2) * shownRatio;
		ctx.save();
		ctx.beginPath();
		ctx.strokeStyle = "black";
		ctx.rect(this.theLeftMargin,0,this.theGraphWidth,height);
		ctx.stroke();
		ctx.restore();
		this.theScrollBarBoxWidth = rectWidth;
		this.theScrollBarBoxHeight = height - padding * 2;
		var leftStop = padding + this.theLeftMargin;
		var rightStop = width - this.theRightMargin - this.theScrollBarBoxWidth - padding;
		if(moveX != null) {
			if(forwards) {
				this.theLastScrollBarXPos += moveX;
			} else {
				this.theLastScrollBarXPos -= moveX;
			}
			if(this.theLastScrollBarXPos < leftStop) {
				this.theLastScrollBarXPos = leftStop;
			} else if(this.theLastScrollBarXPos > rightStop) {
				this.theLastScrollBarXPos = rightStop;
			}
		} else if(this.lastPosition > 0) {
			var progress = this.lastPosition / this.theReadingsCount;
			this.theLastScrollBarXPos = this.theGraphWidth * progress + this.theLeftMargin;
			this.theLastScrollBarYPos = padding;
		} else {
			this.theLastScrollBarXPos = leftStop;
			this.theLastScrollBarYPos = padding;
		}
		ctx.save();
		ctx.beginPath();
		ctx.strokeStyle = "blue";
		ctx.rect(this.theLastScrollBarXPos,this.theLastScrollBarYPos,this.theScrollBarBoxWidth,this.theScrollBarBoxHeight);
		ctx.fill();
		ctx.restore();
	}
	,installScrollBarListeners: function() {
		var _gthis = this;
		var isInHitBox = function(e) {
			if(e.offsetX >= _gthis.theLastScrollBarXPos && e.offsetX <= _gthis.theLastScrollBarXPos + _gthis.theScrollBarBoxWidth && e.offsetY >= _gthis.theLastScrollBarYPos) {
				return e.offsetY <= _gthis.theLastScrollBarYPos + _gthis.theScrollBarBoxHeight;
			} else {
				return false;
			}
		};
		var lastX = this.theLeftMargin;
		var lastY = 0;
		var onMouseMove = function(e1) {
			e1 = saturn.client.programs.ABITraceViewer.getNormalisedEvent(e1);
			var forwards = true;
			var diff = _gthis.theReadingsCount - _gthis.lastPosition;
			if(e1.offsetX < lastX) {
				forwards = false;
			} else if(_gthis.theXUnitSize * diff <= _gthis.theGraphWidth) {
				return;
			}
			var xMove = Math.abs(lastX - e1.offsetX);
			_gthis.renderScrollBar(xMove,forwards);
			lastX = e1.offsetX;
			lastY = e1.offsetY;
			var xScrollUnits = (_gthis.theGraphWidth - 10) / _gthis.theReadingsCount;
			var numRequested = Std["int"](xMove / xScrollUnits);
			var oldLastPosition = _gthis.lastPosition;
			if(forwards) {
				_gthis.lastPosition += numRequested;
			} else {
				_gthis.lastPosition -= numRequested;
			}
			if(_gthis.lastPosition < 0) {
				_gthis.lastPosition = 0;
			}
			if(_gthis.lastPosition != oldLastPosition) {
				_gthis.render(_gthis.traceData);
			}
		};
		this.scrollCanvas.onmousedown = function(evt) {
			var e2 = saturn.client.programs.ABITraceViewer.getNormalisedEvent(evt);
			if(isInHitBox(e2)) {
				lastX = e2.offsetX;
				lastY = e2.offsetY;
				_gthis.scrollCanvas.onmousemove = onMouseMove;
			} else {
				onMouseMove(evt);
			}
		};
		this.scrollCanvas.onmouseup = function(e3) {
			_gthis.scrollCanvas.onmousemove = null;
		};
	}
	,preprocessTrace: function() {
		var width = this.graphCanvas.width;
		var height = this.graphCanvas.height;
		this.theMaxIntensity = -1;
		this.theReadingsCount = this.traceData.CH1.length;
		var channels = ["CH1","CH2","CH3","CH4"];
		var _g = 0;
		while(_g < channels.length) {
			var channel = channels[_g];
			++_g;
			var readings = Reflect.field(this.traceData,channel);
			var _g1 = 0;
			while(_g1 < readings.length) {
				var reading = readings[_g1];
				++_g1;
				if(reading > this.theMaxIntensity) {
					this.theMaxIntensity = reading;
				}
			}
		}
		var ctx = this.getGraphContext();
		var yTextMetrics = ctx.measureText(Std.string(this.theMaxIntensity));
		this.theTopMargin = 20;
		this.theBottomMargin = 30;
		this.theLeftMargin = 5 + yTextMetrics.width + 2;
		this.theRightMargin = 20;
		this.theGraphHeight = height - this.theTopMargin - this.theBottomMargin;
		this.theGraphWidth = width - this.theLeftMargin - this.theRightMargin;
		var exponent = Std["int"](Math.log(this.theMaxIntensity) / Math.log(10));
		var magnitude = Math.pow(10,exponent);
		var timesIn = Std["int"](this.theMaxIntensity / magnitude);
		if(this.theMaxIntensity % magnitude > 0) {
			++timesIn;
		}
		var maximumYValue = magnitude * timesIn;
		this.theYIntervalDivisions = maximumYValue / 10;
		this.theYUnitSize = this.theGraphHeight / js.Boot.__cast(maximumYValue , Float);
		this.theXUnitSize = this.defaultReadingSeparation;
		this.theTotalWidth = this.theXUnitSize * this.theReadingsCount;
		this.theSequence = "";
		var labels = this.traceData.LABELS;
		var _g11 = this.lastPosition;
		var _g2 = labels.length;
		while(_g11 < _g2) {
			var i = _g11++;
			var label = labels[i];
			if(label != "" && label != "-") {
				this.theSequence += label;
			}
		}
		this.theViewPortXUnits = Std["int"](this.theGraphWidth / this.theXUnitSize);
		this.theLastXPosition = Std["int"](this.theReadingsCount - this.theViewPortXUnits);
		if(this.theLastXPosition < 0) {
			this.theLastXPosition = 0;
		}
	}
	,calculateAnnotations: function() {
		var webApp = saturn.client.WorkspaceApplication.getApplication();
		var dataStore = webApp.getOutlineDataStore("DEFAULT");
		var node = dataStore.getNodeById("Annotations");
		if(node == null || this.traceData == null) {
			return;
		}
		this.traceData.ANNOTATIONS = [];
		this.annotationIdToPosition = new haxe.ds.StringMap();
		var k = 0;
		var _g1 = 0;
		var _g = this.traceData.ALN_LABELS.length;
		while(_g1 < _g) {
			var i = _g1++;
			var l = this.traceData.ALN_LABELS[i];
			if(l != "-" && l != "") {
				++k;
				if(l != this.traceData.LABELS[i]) {
					var id = l + (k == null ? "null" : "" + k) + this.traceData.LABELS[i];
					this.traceData.ANNOTATIONS.push(id);
					this.annotationIdToPosition.set(id,i);
				}
			}
		}
		var a = 0;
		node.removeAll();
		var _g11 = 0;
		var _g2 = this.traceData.ANNOTATIONS.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var annotation = this.traceData.ANNOTATIONS[i1];
			node.appendChild({ text : annotation, id : annotation, leaf : true, type : "ANNOTATION"});
			if(a > 20) {
				node.appendChild({ text : "Too many to show", id : "Too many to show", leaf : true, type : "ANNOTATION"});
				break;
			}
			++a;
		}
	}
	,getSequence: function() {
		return this.theSequence;
	}
	,importTraceSequence: function() {
		this.getWorkspace().addObject(new saturn.client.workspace.DNAWorkspaceObject(new saturn.core.DNA(this.getSequence()),this.traceWO.getName() + " (DNA)"),true);
	}
	,calculatePages: function() {
	}
	,render: function(traceData,i) {
		if(i == null) {
			i = 0;
		}
		var _gthis = this;
		this.theComponent.removeCls("x-trace-background");
		if(this.lastPosition > this.theLastXPosition) {
			this.lastPosition = this.theLastXPosition;
		}
		var width = this.graphCanvas.width;
		var height = this.graphCanvas.height;
		var ctx = this.getGraphContext();
		ctx.clearRect(0,0,width,height);
		var _g = new haxe.ds.StringMap();
		_g.set("CH1","RED");
		_g.set("CH2","GREEN");
		_g.set("CH3","BLUE");
		_g.set("CH4","ORANGE");
		var channelColours = _g;
		var lastIPosition = 0;
		var lineX1 = -1;
		var lineY1 = -1;
		var lineX2 = -1;
		var lineY2 = -1;
		var overlayCtx = this.overlayCanvas.getContext("2d",null);
		overlayCtx.clearRect(0,0,this.overlayCanvas.width,this.overlayCanvas.height);
		var overlayLineX1Done = false;
		var overlayLineX2Done = false;
		var _g1 = 0;
		var _g2 = this.theChannels;
		while(_g1 < _g2.length) {
			var channel = _g2[_g1];
			++_g1;
			var stroke_colour = channelColours.get(channel);
			var readings = Reflect.field(traceData,channel);
			ctx.save();
			ctx.strokeStyle = stroke_colour;
			ctx.lineWidth = 2;
			ctx.beginPath();
			var lastSplinePoints = null;
			var lastYValue = null;
			var inGapBlock = false;
			var _g4 = this.lastPosition;
			var _g3 = readings.length;
			while(_g4 < _g3) {
				var i1 = _g4++;
				var correctedI = i1 - this.lastPosition;
				var x_pixel_pos = js.Boot.__cast(this.theXUnitSize * correctedI + this.theLeftMargin , Float);
				if(x_pixel_pos > this.theGraphWidth + this.theLeftMargin) {
					break;
				}
				if(!overlayLineX1Done && i1 == this.lineX1RealPosition) {
					overlayCtx.beginPath();
					overlayCtx.moveTo(x_pixel_pos,this.theTopMargin + 3);
					overlayCtx.lineTo(x_pixel_pos,this.theGraphHeight + this.theTopMargin + 2);
					overlayCtx.stroke();
					overlayCtx.closePath();
					lineX1 = x_pixel_pos;
					overlayLineX1Done = true;
				}
				if(!overlayLineX2Done && i1 == this.lineX2RealPosition) {
					overlayCtx.beginPath();
					overlayCtx.moveTo(x_pixel_pos,this.theTopMargin + 3);
					overlayCtx.lineTo(x_pixel_pos,this.theGraphHeight + this.theTopMargin + 2);
					overlayCtx.stroke();
					overlayCtx.closePath();
					lineX2 = x_pixel_pos;
					overlayLineX2Done = true;
				}
				var y_pixel_pos = js.Boot.__cast(this.theTopMargin + this.theGraphHeight - this.theYUnitSize * readings[i1] , Float);
				if(readings[i1] == -1) {
					inGapBlock = true;
					continue;
				}
				if(correctedI > 0) {
					var currentSplinePoints = null;
					var x_pixel_pos_last = js.Boot.__cast(this.theXUnitSize * (correctedI - 1) + this.theLeftMargin , Float);
					var y_pixel_pos_last = js.Boot.__cast(this.theTopMargin + this.theGraphHeight - this.theYUnitSize * lastYValue , Float);
					var x_pixel_pos_next = js.Boot.__cast(this.theXUnitSize * (correctedI + 1) + this.theLeftMargin , Float);
					var y_pixel_pos_next = js.Boot.__cast(this.theTopMargin + this.theGraphHeight - this.theYUnitSize * readings[i1 + 1] , Float);
					if(i1 >= readings.length - 1) {
						currentSplinePoints = saturn.client.programs.ABITraceViewer.splineCurve(x_pixel_pos_last,y_pixel_pos_last,x_pixel_pos,y_pixel_pos,x_pixel_pos,y_pixel_pos,0);
					} else {
						currentSplinePoints = saturn.client.programs.ABITraceViewer.splineCurve(x_pixel_pos_last,y_pixel_pos_last,x_pixel_pos,y_pixel_pos,x_pixel_pos_next,y_pixel_pos_next,1);
					}
					if(inGapBlock) {
						ctx.moveTo(x_pixel_pos_last,y_pixel_pos_last);
						inGapBlock = false;
						lastSplinePoints = saturn.client.programs.ABITraceViewer.splineCurve(x_pixel_pos,y_pixel_pos,x_pixel_pos,y_pixel_pos,x_pixel_pos_next,y_pixel_pos_next,0);
					} else {
						ctx.bezierCurveTo(lastSplinePoints.outer.x,lastSplinePoints.outer.y,currentSplinePoints.inner.x,currentSplinePoints.inner.y,x_pixel_pos,y_pixel_pos);
					}
					lastYValue = readings[i1];
					lastSplinePoints = currentSplinePoints;
				} else {
					ctx.moveTo(x_pixel_pos,y_pixel_pos);
					var x_pixel_pos_next1 = js.Boot.__cast(this.theXUnitSize * (correctedI + 1) + this.theLeftMargin , Float);
					var y_pixel_pos_next1 = js.Boot.__cast(this.theTopMargin + this.theGraphHeight - this.theYUnitSize * readings[i1 + 1] , Float);
					lastSplinePoints = saturn.client.programs.ABITraceViewer.splineCurve(x_pixel_pos,y_pixel_pos,x_pixel_pos,y_pixel_pos,x_pixel_pos_next1,y_pixel_pos_next1,0);
					lastYValue = readings[i1];
				}
			}
			ctx.stroke();
			ctx.restore();
		}
		ctx.save();
		ctx.strokeStyle = "BLACK";
		var aMetrics = ctx.measureText("A");
		var labels = traceData.LABELS;
		var _g21 = this.lastPosition;
		var _g11 = labels.length;
		while(_g21 < _g11) {
			var i2 = _g21++;
			var label = labels[i2];
			if(label != "") {
				var correctedI1 = i2 - this.lastPosition;
				var x_pixel_pos1 = this.theXUnitSize * correctedI1;
				if(x_pixel_pos1 + this.theLeftMargin > this.theGraphWidth + this.theLeftMargin) {
					break;
				}
				var highlight = false;
				if(traceData.ALN_LABELS.length > 0) {
					if(traceData.ALN_LABELS[i2] != label) {
						highlight = true;
					}
				}
				if(label == "-") {
					highlight = true;
				}
				if(highlight) {
					ctx.beginPath();
					ctx.strokeStyle = "red";
					ctx.moveTo(this.theLeftMargin + x_pixel_pos1 + 2,this.theTopMargin + 3);
					ctx.lineTo(this.theLeftMargin + x_pixel_pos1 + 2,this.theGraphHeight + this.theTopMargin + 2);
					ctx.stroke();
					ctx.strokeStyle = "black";
					ctx.closePath();
					ctx.fillStyle = "red";
					ctx.fillText(label,this.theLeftMargin + x_pixel_pos1,this.theTopMargin + this.theGraphHeight + 10 + 2);
					ctx.fillStyle = "black";
				} else {
					ctx.fillText(label,this.theLeftMargin + x_pixel_pos1,this.theTopMargin + this.theGraphHeight + 10 + 2);
				}
			}
		}
		if(traceData.ALN_LABELS.length > 0) {
			var _g22 = this.lastPosition;
			var _g12 = labels.length;
			while(_g22 < _g12) {
				var i3 = _g22++;
				var correctedI2 = i3 - this.lastPosition;
				var x_pixel_pos2 = this.theXUnitSize * correctedI2;
				if(x_pixel_pos2 + this.theLeftMargin > this.theGraphWidth + this.theLeftMargin) {
					break;
				}
				var label1 = traceData.ALN_LABELS[i3];
				if(label1 != "") {
					ctx.fillText(label1,this.theLeftMargin + x_pixel_pos2,this.theTopMargin + this.theGraphHeight + 20 + 2);
				}
			}
		}
		var mHeight = ctx.measureText("M").width;
		var _g13 = 0;
		while(_g13 < 11) {
			var i4 = _g13++;
			var y_label = this.theYIntervalDivisions * i4;
			var y_pos = this.theYUnitSize * y_label;
			var yLabelMetrics = ctx.measureText(y_label == null ? "null" : "" + y_label);
			ctx.fillText(y_label == null ? "null" : "" + y_label,this.theLeftMargin - yLabelMetrics.width - 2 - 2,this.theGraphHeight + this.theTopMargin - y_pos + mHeight / 2 + 2);
		}
		ctx.restore();
		this.overlayCanvas.onmouseup = function(e) {
			var ne = saturn.client.programs.ABITraceViewer.getNormalisedEvent(e);
			if(ne.offsetX >= lineX1 - 2 && e.offsetX <= lineX1 + 2) {
				overlayCtx.clearRect(0,0,_gthis.overlayCanvas.width,_gthis.overlayCanvas.height);
				lineX1 = -1;
				if(_gthis.lineX2RealPosition != -1) {
					overlayCtx.beginPath();
					overlayCtx.moveTo(lineX2,_gthis.theTopMargin);
					overlayCtx.lineTo(lineX2,_gthis.theGraphHeight + _gthis.theTopMargin);
					overlayCtx.stroke();
					overlayCtx.closePath();
				}
				_gthis.lineX1RealPosition = -1;
			} else if(ne.offsetX >= lineX2 - 2 && e.offsetX <= lineX2 + 2) {
				overlayCtx.clearRect(0,0,_gthis.overlayCanvas.width,_gthis.overlayCanvas.height);
				lineX2 = -1;
				if(_gthis.lineX1RealPosition != -1) {
					overlayCtx.beginPath();
					overlayCtx.moveTo(lineX1,_gthis.theTopMargin);
					overlayCtx.lineTo(lineX1,_gthis.theGraphHeight + _gthis.theTopMargin);
					overlayCtx.stroke();
					overlayCtx.closePath();
				}
				_gthis.lineX2RealPosition = -1;
			} else {
				if(_gthis.lineX1RealPosition == -1) {
					lineX1 = ne.offsetX;
					_gthis.lineX1RealPosition = _gthis.convertXToPosition(lineX1);
				} else if(_gthis.lineX2RealPosition == -1) {
					lineX2 = ne.offsetX;
					_gthis.lineX2RealPosition = _gthis.convertXToPosition(lineX2);
				} else {
					return;
				}
				overlayCtx.beginPath();
				overlayCtx.moveTo(ne.offsetX,_gthis.theTopMargin);
				overlayCtx.lineTo(ne.offsetX,_gthis.theGraphHeight + _gthis.theTopMargin);
				overlayCtx.stroke();
				overlayCtx.closePath();
			}
		};
		ctx.save();
		ctx.beginPath();
		ctx.lineWidth = 2;
		ctx.moveTo(this.theLeftMargin - 2,this.theTopMargin + 3);
		ctx.lineTo(this.theLeftMargin - 2,this.theGraphHeight + this.theTopMargin + 3);
		ctx.stroke();
		ctx.restore();
		ctx.save();
		ctx.beginPath();
		ctx.lineWidth = 2;
		ctx.moveTo(this.theLeftMargin - 1,this.theTopMargin + this.theGraphHeight + 2);
		ctx.lineTo(this.theLeftMargin + this.theGraphWidth - 1,this.theTopMargin + this.theGraphHeight + 2);
		ctx.stroke();
		ctx.restore();
	}
	,updateSelected: function(cX1,cX2) {
		var sequence = "";
		var labels = this.traceData.LABELS;
		var _g1 = cX1;
		var _g = cX2;
		while(_g1 < _g) {
			var i = _g1++;
			if(labels[i] != "") {
				sequence += labels[i];
			}
		}
		saturn.client.WorkspaceApplication.getApplication().setCentralInfoPanelText("Selected: " + cX1 + "-" + cX2 + "  " + sequence);
	}
	,convertXToPosition: function(xPos) {
		var position = Std["int"]((xPos - this.theLeftMargin) / this.theXUnitSize);
		position += this.lastPosition;
		return position;
	}
	,saveObject: function(cb) {
		var wo = this.getWorkspaceObject();
		var tmp = wo.getObject();
		var tmp1 = wo.getName();
		tmp.setName(tmp1);
		saturn.client.programs.SimpleExtJSProgram.prototype.saveObject.call(this,cb);
	}
	,__class__: saturn.client.programs.ABITraceViewer
});
saturn.client.workspace.AlignmentWorkspaceObject = $hxClasses["saturn.client.workspace.AlignmentWorkspaceObject"] = function(object,name) {
	if(object == null) {
		object = new saturn.core.domain.Alignment();
	}
	if(name == null) {
		name = "Alignment";
	}
	this.iconPath = "/static/js/images/aln_16.png";
	saturn.client.workspace.WorkspaceObjectBase.call(this,object,name);
};
saturn.client.workspace.AlignmentWorkspaceObject.__name__ = ["saturn","client","workspace","AlignmentWorkspaceObject"];
saturn.client.workspace.AlignmentWorkspaceObject.getNewMenuText = function() {
	return "Alignment";
};
saturn.client.workspace.AlignmentWorkspaceObject.getDefaultFolderName = function() {
	return "Alignments";
};
saturn.client.workspace.AlignmentWorkspaceObject.__super__ = saturn.client.workspace.WorkspaceObjectBase;
saturn.client.workspace.AlignmentWorkspaceObject.prototype = $extend(saturn.client.workspace.WorkspaceObjectBase.prototype,{
	addSequenceNew: function(objectId) {
		this.object.addObject(objectId);
	}
	,removeSequenceNew: function(objectId) {
		this.object.removeObject(objectId);
	}
	,__class__: saturn.client.workspace.AlignmentWorkspaceObject
});
saturn.client.programs.AlignmentViewer = $hxClasses["saturn.client.programs.AlignmentViewer"] = function() {
	saturn.client.programs.SimpleExtJSProgram.call(this);
};
saturn.client.programs.AlignmentViewer.__name__ = ["saturn","client","programs","AlignmentViewer"];
saturn.client.programs.AlignmentViewer.parseFile = function(file,cb,asNewOpenProgram) {
	if(asNewOpenProgram == null) {
		asNewOpenProgram = true;
	}
	var extension = saturn.client.core.CommonCore.getFileExtension(file.name);
	if(extension == "pfam_aln") {
		saturn.client.core.CommonCore.getFileAsText(file,function(content) {
			if(content != null) {
				var obj = new saturn.core.domain.Alignment();
				obj.setAlignmentContent(content);
				var wo = new saturn.client.workspace.AlignmentWorkspaceObject(obj,"Alignment");
				saturn.client.WorkspaceApplication.getApplication().getWorkspace()._addObject(wo,true,true);
			} else {
				saturn.client.WorkspaceApplication.getApplication().showMessage("Processing error","Unable to extract alignment");
			}
		});
	} else if(extension == "aln") {
		saturn.client.core.CommonCore.getFileAsText(file,function(content1) {
			if(content1 != null) {
				var obj1 = new saturn.core.domain.Alignment();
				obj1.setAlignmentContent(content1);
				var wo1 = new saturn.client.workspace.AlignmentWorkspaceObject(obj1,"Alignment");
				saturn.client.WorkspaceApplication.getApplication().getWorkspace()._addObject(wo1,true,true);
			} else {
				saturn.client.WorkspaceApplication.getApplication().showMessage("Processing error","Unable to extract alignment");
			}
		});
	}
};
saturn.client.programs.AlignmentViewer.getQuickLaunchItems = function() {
	return [{ iconCls : "x-btn-aln", html : "Alignment<br/>Viewer", cls : "quickLaunchButton", handler : function() {
		saturn.client.WorkspaceApplication.getApplication().getWorkspace().addObject(new saturn.client.workspace.AlignmentWorkspaceObject(new saturn.core.domain.Alignment(),"MSA"),true);
	}, tooltip : { dismissDelay : 10000, text : "Alignment viewer.<br/>Run CLUSTAL against DNA or Protein sequences."}}];
};
saturn.client.programs.AlignmentViewer.__super__ = saturn.client.programs.SimpleExtJSProgram;
saturn.client.programs.AlignmentViewer.prototype = $extend(saturn.client.programs.SimpleExtJSProgram.prototype,{
	theComponent: null
	,internalFrameId: null
	,icButton: null
	,emptyInit: function() {
		saturn.client.programs.SimpleExtJSProgram.prototype.emptyInit.call(this);
		this.internalFrameId = "INTERNAL_ALN_FRAME";
		var self = this;
		this.theComponent = Ext.create("Ext.panel.Panel",{ title : "Alignment Viewer", width : "100%", height : "95%", autoScroll : true, layout : "fit", items : [{ xtype : "component", itemId : this.internalFrameId, autoEl : { tag : "pre"}}], listeners : { "render" : function() {
			self.initialiseDOMComponent();
		}}, cls : "x-aln-background"});
		this.registerDropFolder("Sequences",null,true);
	}
	,setTitle: function(title) {
		this.theComponent.setTitle(title);
	}
	,getComponent: function() {
		return this.theComponent;
	}
	,onFocus: function() {
		saturn.client.programs.SimpleExtJSProgram.prototype.onFocus.call(this);
		this.getApplication().hideMiddleSouthPanel();
		var self = this;
		this.getApplication().getViewMenu().add({ text : "Update alignment", handler : function() {
			self.updateAlignment();
		}});
		this.getApplication().getFileMenu().add({ text : "Import all Protein Sequences", handler : function() {
			self.addAllProteinSequencesFromWorkspace();
		}});
		this.getApplication().getFileMenu().add({ text : "Import all DNA Sequences", handler : function() {
			self.addAllDNASequencesFromWorkspace();
		}});
		this.getApplication().getToolBar().add({ iconCls : "x-btn-copy", text : "Update", handler : function() {
			self.updateAlignment();
		}, tooltip : { dismissDelay : 10000, text : "Update alignment with current sequences"}});
		this.getApplication().getToolBar().add({ iconCls : "x-btn-copy", text : "Import Protein", handler : function() {
			self.addAllProteinSequencesFromWorkspace();
		}, tooltip : { dismissDelay : 10000, text : "Import all protein sequences from the workspace (click update to update alignment)"}});
		this.getApplication().getToolBar().add({ iconCls : "x-btn-copy", text : "Import DNA", handler : function() {
			self.addAllDNASequencesFromWorkspace();
		}, tooltip : { dismissDelay : 10000, text : "Import all DNA sequences from the workspace (click update to update alignment)"}});
		this.getApplication().getToolBar().add({ iconCls : "x-btn-gridvar", text : "Summary", handler : function() {
			self.generateSummary();
		}, tooltip : { dismissDelay : 10000, text : "View overlap summary plot"}});
		this.icButton = this.getApplication().getToolBar().add({ iconCls : "x-btn-inverse-complement", text : "IC", handler : function() {
			self.inverseComplement();
		}, tooltip : { dismissDelay : 10000, text : "Inverse complement"}});
	}
	,inverseComplement: function() {
		var content = this.getActiveAlignmentObject().getAlignmentContent();
		if(content != null) {
			var aln = saturn.core.ClustalOmegaParser.read(content);
			aln.inverseComplement();
			this.getActiveAlignmentObject().setAlignmentContent(aln.toString());
			this.render();
		}
	}
	,generateSummary: function() {
		var aln = this.getActiveObjectObject();
		if(aln.getAlignmentContent() != null) {
			var msa = saturn.core.ClustalOmegaParser.read(aln.getAlignmentContent());
			var obj = msa.toGrid();
			var wo = new saturn.client.workspace.GridVarWO(obj,this.getActiveObjectName() + " (Summary)");
			obj.padding = false;
			obj.showXLabels = false;
			obj.fit = true;
			this.getWorkspace().addObject(wo,true);
		}
	}
	,addAllDNASequencesFromWorkspace: function() {
		this.registerAllFromWorkspace(saturn.client.workspace.DNAWorkspaceObject,"Sequences");
	}
	,addAllProteinSequencesFromWorkspace: function() {
		this.registerAllFromWorkspace(saturn.client.workspace.ProteinWorkspaceObject,"Sequences");
	}
	,getAlignmentContent: function(alignmentURL,cb) {
	}
	,setAlignmentURL: function(alignmentURL) {
		var _gthis = this;
		this.getActiveAlignmentObject().setAlignmentURL(alignmentURL);
		haxe.Timer.delay(function() {
			saturn.client.core.CommonCore.getContent(alignmentURL,function(content) {
				_gthis.getActiveAlignmentObject().setAlignmentContent(content);
				_gthis.render();
			});
		},1000);
	}
	,render: function() {
		var pre = this.theComponent.getComponent(this.internalFrameId).getEl().dom;
		var content = this.getActiveAlignmentObject().getAlignmentContent();
		if(content == null || content == "") {
			this.theComponent.addCls("x-aln-background");
		} else {
			this.theComponent.removeCls("x-aln-background");
		}
		pre.innerHTML = content;
	}
	,updateAlignment: function() {
		var _gthis = this;
		var self = this;
		var alnObj = this.getAlignmentObject();
		var objectIds = this.getState().getReferences("Sequences");
		objectIds.reverse();
		var strBuf = new StringBuf();
		var count = 0;
		var isDNA = false;
		var _g = 0;
		while(_g < objectIds.length) {
			var objectId = objectIds[_g];
			++_g;
			var w0 = this.getWorkspace().getObject(objectId);
			if(Std["is"](w0,saturn.client.workspace.DNAWorkspaceObject)) {
				var object = this.getWorkspace().getObjectSafely(objectId,saturn.client.workspace.DNAWorkspaceObject);
				if(object.getObject().getSequence() != null) {
					strBuf.add(">" + w0.getName() + "\n" + object.getObject().getSequence() + "\n");
					++count;
					isDNA = true;
				}
			} else if(Std["is"](w0,saturn.client.workspace.ProteinWorkspaceObject)) {
				var object1 = js.Boot.__cast(w0 , saturn.client.workspace.ProteinWorkspaceObject);
				if(object1.getObject().getSequence() != null) {
					strBuf.add(">" + w0.getName() + "\n" + object1.getObject().getSequence() + "\n");
					++count;
				}
			} else if(Std["is"](w0,saturn.client.workspace.ABITraceWO)) {
				var object2 = js.Boot.__cast(w0 , saturn.client.workspace.ABITraceWO);
				if(object2.getObject().getSequence() != null) {
					strBuf.add(">" + w0.getName() + "\n" + object2.getObject().getSequence() + "\n");
					++count;
				}
			} else if(Std["is"](w0,saturn.core.molecule.Molecule)) {
				var mol = js.Boot.__cast(w0 , saturn.core.molecule.Molecule);
				if(mol.getSequence() != null) {
					strBuf.add(">" + mol.getName() + "\n" + mol.getSequence() + "\n");
					++count;
				}
			} else {
				var d = w0;
				strBuf.add(">" + Std.string(d.getName()) + "\n" + Std.string(d.getSequence()) + "\n");
			}
		}
		if(count < 2) {
			this.setAlignmentURL(null);
		} else {
			saturn.client.BioinformaticsServicesClient.getClient().sendClustalReportRequest(strBuf.toString(),function(response,error) {
				if(error == null) {
					var clustalReport = response.json.clustalReport;
					var location = js.Browser.get_window().location;
					var dstURL = location.protocol + "//" + location.hostname + ":" + location.port + "/" + clustalReport;
					self.setAlignmentURL(dstURL);
				} else {
					_gthis.getApplication().showMessage("Clustal Error",error);
				}
			});
			if(isDNA) {
				this.icButton.enable();
			} else {
				this.icButton.disable();
			}
		}
	}
	,getActiveAlignmentObject: function() {
		var activeObject = saturn.client.programs.SimpleExtJSProgram.prototype.getActiveObject.call(this,saturn.client.workspace.AlignmentWorkspaceObject);
		if(activeObject != null) {
			var w0 = js.Boot.__cast(activeObject , saturn.client.workspace.AlignmentWorkspaceObject);
			return w0.getObject();
		} else {
			return null;
		}
	}
	,setActiveObject: function(objectId) {
		saturn.client.programs.SimpleExtJSProgram.prototype.setActiveObject.call(this,objectId);
		var wo = js.Boot.__cast(saturn.client.programs.SimpleExtJSProgram.prototype.getActiveObject.call(this,saturn.client.workspace.AlignmentWorkspaceObject) , saturn.client.workspace.AlignmentWorkspaceObject);
		var alnObj = wo.getObject();
		var alnUrl = alnObj.getAlignmentURL();
		var alnContent = alnObj.getAlignmentContent();
		if(alnContent != null) {
			this.render();
		} else if(alnUrl != null) {
			this.setAlignmentURL(alnUrl);
		} else if(wo.getReferences("Sequences").length > 0) {
			this.updateAlignment();
		}
		this.setTitle(wo.getName());
	}
	,getAlignmentObject: function() {
		var w0 = js.Boot.__cast(saturn.client.programs.SimpleExtJSProgram.prototype.getActiveObject.call(this,saturn.client.workspace.AlignmentWorkspaceObject) , saturn.client.workspace.AlignmentWorkspaceObject);
		return w0.getObject();
	}
	,openFile: function(file,asNew,asNewOpenProgram) {
		if(asNewOpenProgram == null) {
			asNewOpenProgram = true;
		}
	}
	,saveObject: function(cb) {
		var wo = this.getWorkspaceObject();
		var tmp = wo.getObject();
		var tmp1 = wo.getName();
		tmp.setName(tmp1);
		saturn.client.programs.SimpleExtJSProgram.prototype.saveObject.call(this,cb);
	}
	,__class__: saturn.client.programs.AlignmentViewer
});
if(!saturn.client.programs.sequenceeditor) saturn.client.programs.sequenceeditor = {};
saturn.client.programs.sequenceeditor.SequenceEditor = $hxClasses["saturn.client.programs.sequenceeditor.SequenceEditor"] = function() {
	this.findAnnotationOn = false;
	saturn.client.programs.SimpleExtJSProgram.call(this);
};
saturn.client.programs.sequenceeditor.SequenceEditor.__name__ = ["saturn","client","programs","sequenceeditor","SequenceEditor"];
saturn.client.programs.sequenceeditor.SequenceEditor.makeSelectable = function(elem,makeSelectable) {
	if(makeSelectable) {
		elem.classList.remove("molbio-unselectable");
		elem.classList.add("molbio-selectable");
		elem.removeAttribute("unselectable");
	} else {
		elem.classList.add("molbio-unselectable");
		elem.classList.remove("molbio-selectable");
		elem.setAttribute("unselectable","on");
	}
};
saturn.client.programs.sequenceeditor.SequenceEditor.__super__ = saturn.client.programs.SimpleExtJSProgram;
saturn.client.programs.sequenceeditor.SequenceEditor.prototype = $extend(saturn.client.programs.SimpleExtJSProgram.prototype,{
	theComponent: null
	,sequence: null
	,blockFields: null
	,annotationSequences: null
	,annotationFields: null
	,annotationRowCount: null
	,annotationsOn: null
	,annotationPositions: null
	,annotationRowLabels: null
	,hideAnnotationsItem: null
	,showAnnotationsItem: null
	,annotationLabels: null
	,annotationToRow: null
	,annotationToClass: null
	,defaultAnnotationBlockClass: null
	,sequenceChangeListeners: null
	,columnCount: null
	,blockSize: null
	,selectableRow: null
	,inputFocused: null
	,viewAnnotations: null
	,showAnnotationItems: null
	,hideAnnotationItems: null
	,liveUpdateOn: null
	,offSet: null
	,lastSelected: null
	,editorCharWidth: null
	,editorCharHeight: null
	,menuState: null
	,findAnnotationOn: null
	,viewFastaMenuItem: null
	,viewEditorMenuItem: null
	,fastaViewer: null
	,theTable: null
	,fastaButton: null
	,editorButton: null
	,isFindAnnotationOn: function() {
		return this.findAnnotationOn;
	}
	,liveUpdateEnabled: function() {
		return this.liveUpdateOn;
	}
	,determineEditorCharacterDimensions: function() {
		var s = js.Browser.get_document().createElement("pre");
		s.className = "molbio-sequenceeditor-block";
		s.textContent = "GGGGGGGGGGGG";
		s.setAttribute("style","border:0px;margin:0px;position: absolute; top: -100px;");
		js.Browser.get_document().body.appendChild(s);
		this.editorCharWidth = s.offsetWidth / 12;
		this.editorCharHeight = s.offsetHeight;
		var d = js.Browser.get_document();
		d.spanHelp = s;
	}
	,getDefaultCharWidth: function() {
		return this.editorCharWidth;
	}
	,emptyInit: function() {
		var _gthis = this;
		saturn.client.programs.SimpleExtJSProgram.prototype.emptyInit.call(this);
		this.determineEditorCharacterDimensions();
		if(this.defaultAnnotationBlockClass == null) {
			this.defaultAnnotationBlockClass = saturn.client.programs.sequenceeditor.AnnotationEditorBlock;
		}
		this.liveUpdateOn = true;
		this.menuState = new haxe.ds.StringMap();
		this.offSet = 0;
		this.selectableRow = -2;
		this.columnCount = 5;
		this.blockSize = 20;
		this.annotationRowCount = 0;
		this.annotationToRow = new haxe.ds.StringMap();
		this.blockFields = [];
		this.annotationFields = [];
		this.annotationsOn = [];
		this.annotationPositions = [];
		this.annotationSequences = [];
		this.annotationLabels = [];
		this.annotationRowLabels = [];
		this.annotationToClass = [];
		this.sequenceChangeListeners = [];
		this.showAnnotationItems = [];
		this.hideAnnotationItems = [];
		this.theComponent = Ext.create("Ext.Panel",{ width : "100%", height : "100%", title : "DNA Editor", layout : "vbox", region : "center"});
		if(!Ext.ClassManager.isCreated("sequence.table")) {
			Ext.define("sequence.table",{ title : "DNA Editor", extend : "Ext.Component", autoEl : { tag : "div"}, width : "100%", height : "100%", autoScroll : true, flex : 2});
		}
		if(!Ext.ClassManager.isCreated("sequence.fasta")) {
			Ext.define("sequence.fasta",{ title : "DNA Editor", extend : "Ext.Component", autoEl : { tag : "div"}, width : "100%", height : "100%", autoScroll : true, style : { margin : "2px"}, flex : 2});
		}
		this.setAnnotationCount(0);
		this.theTable = Ext.create("sequence.table",{ listeners : { "render" : Ext.bind(function() {
			_gthis.initialiseDOMComponent();
		},this)}});
		this.fastaViewer = Ext.create("sequence.fasta",{ });
		this.theTable.parentBuildingBlock = this;
		this.theTable.addCls("molbio-sequenceeditor-table");
		this.theComponent.add(this.theTable);
		this.inMouseMove = false;
		this.mouseDown = false;
		this.getApplication().getMiddleSouthPanel().addCls("seq-breaking");
	}
	,getDomElement: function() {
		return this.theTable.getEl().dom;
	}
	,setDefaultAnnotationEditorBlockClass: function(annotationEditorClass) {
		this.defaultAnnotationBlockClass = annotationEditorClass;
	}
	,getDefaultAnnotationEditorBlockClass: function() {
		return this.defaultAnnotationBlockClass;
	}
	,close: function() {
		saturn.client.programs.SimpleExtJSProgram.prototype.close.call(this);
		this.deleteBlockRows(0);
		this.theTable.parentBuildingBlock = null;
		this.theComponent.parentBuildingBlock = null;
		this.getApplication().getMiddleSouthPanel().removeCls("seq-breaking");
		js.Browser.get_window().onkeyup = null;
		js.Browser.get_window().onkeydown = null;
		this.theTable = null;
		this.theComponent = null;
	}
	,setAnnotationLabel: function(annotationNumber,annotationLabel) {
		this.annotationLabels[annotationNumber] = annotationLabel;
		this.annotationToRow.set(annotationLabel,annotationNumber);
	}
	,getAnnotationLabel: function(annotationNumber) {
		return this.annotationLabels[annotationNumber];
	}
	,getAnnotationClass: function(annotationNumber) {
		return this.annotationToClass[annotationNumber];
	}
	,setAnnotationCount: function(annotationCount) {
		if(annotationCount > this.annotationRowCount) {
			var _g1 = this.annotationRowCount;
			var _g = annotationCount;
			while(_g1 < _g) {
				var i = _g1++;
				this.annotationsOn.push(false);
				this.annotationFields.push([]);
				this.annotationSequences.push("");
				this.annotationPositions.push(saturn.client.programs.sequenceeditor.AnnotationPosition.BOTTOM);
				this.annotationLabels.push("Annotation: " + i);
				this.annotationToClass.push(this.getDefaultAnnotationEditorBlockClass());
				if(this.viewAnnotations != null) {
					this.addAnnotationMenuItem(i);
				}
				this.annotationRowLabels.push([]);
			}
		} else {
			var _g11 = annotationCount;
			var _g2 = this.annotationRowCount;
			while(_g11 < _g2) {
				var i1 = _g11++;
				this.annotationsOn.pop();
				this.annotationFields.pop();
				this.annotationSequences.pop();
				this.annotationPositions.pop();
				this.annotationLabels.pop();
				this.showAnnotationItems.pop();
				this.hideAnnotationItems.pop();
				this.annotationRowLabels.pop();
				this.annotationToClass.pop();
			}
		}
		this.annotationRowCount = annotationCount;
	}
	,addAnnotation: function(annotationName) {
		var annotationRowNo = this.getAnnotationRowCount();
		this.setAnnotationLabel(annotationRowNo,annotationName);
		this.setAnnotationCount(annotationRowNo + 1);
		return annotationRowNo;
	}
	,getAnnotationRowCount: function() {
		return this.annotationRowCount;
	}
	,addAnnotationMenuItems: function() {
		var _g1 = 0;
		var _g = this.annotationFields.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.addAnnotationMenuItem(i);
		}
	}
	,addAnnotationMenuItem: function(annotationNumber) {
		var _gthis = this;
		var self = this;
		var showLabel = "Show " + this.annotationLabels[annotationNumber];
		var hideLabel = "Hide " + this.annotationLabels[annotationNumber];
		var showItem = null;
		var hideItem = null;
		showItem = this.viewAnnotations.add({ text : showLabel, handler : function() {
			_gthis.deleteBlockRows(0);
			self.setAnnotationOn(annotationNumber,true);
			_gthis.redraw();
			hideItem.show();
			showItem.hide();
			if(_gthis.allAnnotationsVisible()) {
				self.showAnnotationsItem.hide();
				_gthis.menuState.set("showAnnotationsItem",false);
			}
			_gthis.menuState.set(hideLabel,true);
			_gthis.menuState.set(showLabel,false);
			self.hideAnnotationsItem.show();
			_gthis.menuState.set("hideAnnotationsItem",true);
		}});
		this.showAnnotationItems.push(showItem);
		if(this.menuState.exists(showLabel)) {
			if(this.menuState.get(showLabel)) {
				showItem.show();
			} else {
				showItem.hide();
			}
		}
		hideItem = this.viewAnnotations.add({ text : hideLabel, hidden : true, handler : function() {
			_gthis.deleteBlockRows(0);
			self.setAnnotationOn(annotationNumber,false);
			_gthis.redraw();
			hideItem.hide();
			showItem.show();
			if(!_gthis.hasAnnotationsVisible()) {
				self.hideAnnotationsItem.hide();
				_gthis.menuState.set("hideAnnotationsItem",false);
			}
			_gthis.menuState.set(hideLabel,false);
			_gthis.menuState.set(showLabel,true);
			self.showAnnotationsItem.show();
			_gthis.menuState.set("showAnnotationsItem",true);
		}});
		this.hideAnnotationItems.push(hideItem);
		if(this.menuState.exists(hideLabel)) {
			if(this.menuState.get(hideLabel)) {
				hideItem.show();
			} else {
				hideItem.hide();
			}
		}
	}
	,hasAnnotationsVisible: function() {
		var _g1 = 0;
		var _g = this.annotationsOn.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.annotationsOn[i] == true) {
				return true;
			}
		}
		return false;
	}
	,allAnnotationsVisible: function() {
		var _g1 = 0;
		var _g = this.annotationsOn.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.annotationsOn[i] == false) {
				return false;
			}
		}
		return true;
	}
	,setActiveObject: function(objectId) {
		saturn.client.programs.SimpleExtJSProgram.prototype.setActiveObject.call(this,objectId);
		this.setTitle(saturn.client.programs.SimpleExtJSProgram.prototype.getActiveObject.call(this,saturn.client.workspace.WorkspaceObject).getName());
	}
	,setTitle: function(title) {
		this.getApplication().setProgramTabTitle(this,title);
	}
	,initialiseDOMComponent: function() {
		saturn.client.programs.SimpleExtJSProgram.prototype.initialiseDOMComponent.call(this);
		this.addSequenceRows(1);
		this.makeAnnotationSelectable(-1);
		this.mouseDown = false;
		this.installFastaViewer();
	}
	,installFastaViewer: function() {
	}
	,installWindowListeners: function(window) {
		var _gthis = this;
		var self = this;
		window.onkeyup = function(event) {
			if(event.keyCode == 46 || event.keyCode == 8) {
				if(js.Browser.get_document().activeElement.tagName == "INPUT") {
					return;
				}
				self.onSequenceDeleteRequest(event);
			} else {
				_gthis.getApplication().onkeyup(event);
			}
		};
		window.onkeydown = function(event1) {
			if(event1.altKey) {
				var southPanel = _gthis.getApplication().getMiddleSouthPanel();
				var node = southPanel.getEl().dom.childNodes[1];
				if(node.innerText != "") {
					var d = js.Browser.get_document();
					if(d.selection) {
						var range = d.body.createTextRange();
						range.moveToElementText(node);
						range.select();
					} else if(window.getSelection) {
						var range1 = js.Browser.get_document().createRange();
						range1.selectNode(node);
						js.Browser.get_window().getSelection().removeAllRanges();
						js.Browser.get_window().getSelection().addRange(range1);
					}
				}
			} else {
				_gthis.getApplication().onkeydown(event1);
			}
		};
	}
	,onSequenceDeleteRequest: function(event) {
		var selectedCords = this.getSelectedRegion();
		if(selectedCords != null) {
			if(event.stopPropagation) {
				event.stopPropagation();
			}
			event.cancelBubble = true;
			this.blockChanged(null,null,selectedCords.getStartPosition(),selectedCords.getStopPosition(),null);
		}
	}
	,uninstallWindowListeners: function(window) {
		window.onkeyup = null;
	}
	,mousedown: function(event) {
		var targetElem = event.srcElement;
		if(targetElem == null) {
			targetElem = event.target;
		}
		var id = targetElem.id;
		if(!StringTools.startsWith(id,"menuitem")) {
			var rightClick = false;
			if(event.which && event.button == 2) {
				rightClick = true;
			} else if(event.button && event.button == 2) {
				rightClick = true;
			}
			if(rightClick == false) {
				this.mouseDown = true;
				this.clearSelection();
			}
		}
	}
	,mouseup: function(event) {
		var targetElem = event.srcElement;
		if(targetElem == null) {
			targetElem = event.target;
		}
		var id = targetElem.id;
		if(!StringTools.startsWith(id,"menuitem")) {
			var rightClick = false;
			if(event.which && event.button == 2) {
				rightClick = true;
			} else if(event.button && event.button == 2) {
				rightClick = true;
			}
			if(rightClick == false) {
				this.mouseDown = false;
				this.selectionUpdated();
				this.inMouseMove = false;
			}
		}
	}
	,addSequenceRows: function(numRows) {
		var blockNumber = this.blockFields.length;
		var toAdd = [];
		var tableElem = this.theTable.el;
		var rowSize = this.blockSize * this.columnCount;
		var startingRowCount = this.blockFields.length * this.blockSize;
		var lastRow = startingRowCount;
		var _g1 = 0;
		var _g = numRows;
		while(_g1 < _g) {
			var j = _g1++;
			var startingBlockNumber = blockNumber + 1;
			this.renderAnnotationsByPosition(saturn.client.programs.sequenceeditor.AnnotationPosition.TOP,tableElem,startingBlockNumber);
			var rowElem = js.Browser.get_document().createElement("div");
			rowElem.style.height = "2.0em";
			rowElem.className = "molbio-unselectable";
			tableElem.appendChild(rowElem);
			var _g3 = 0;
			var _g2 = this.columnCount;
			while(_g3 < _g2) {
				var i = _g3++;
				if(i == 0) {
					var currentRow = lastRow + rowSize;
					var lineNumberBlock = this.generateRowLabel(Std.string(lastRow + 1 + this.offSet) + "-" + Std.string(currentRow + this.offSet));
					lastRow = currentRow;
					rowElem.appendChild(lineNumberBlock);
				}
				var localBlockNumber = ++blockNumber;
				var block = this.getSequenceEditorBlock(localBlockNumber,this);
				var divElem = block.getElement();
				if(this.getSelectableRow() == -1) {
					saturn.client.programs.sequenceeditor.SequenceEditor.makeSelectable(divElem,true);
				} else {
					saturn.client.programs.sequenceeditor.SequenceEditor.makeSelectable(divElem,false);
				}
				this.blockFields.push(block);
				rowElem.appendChild(divElem);
			}
			this.renderAnnotationsByPosition(saturn.client.programs.sequenceeditor.AnnotationPosition.BOTTOM,tableElem,startingBlockNumber);
		}
	}
	,getSequenceEditorBlock: function(blockNumber,editor) {
		return new saturn.client.programs.sequenceeditor.SequenceEditorBlock(blockNumber,editor);
	}
	,getAnnotationSequenceEditorBlock: function(blockNumber,editor,annotationRowCount) {
		return Type.createInstance(this.annotationToClass[annotationRowCount],[blockNumber,editor,annotationRowCount]);
	}
	,setAnnotationClass: function(annotationName,annotationClass) {
		if(this.annotationToRow.exists(annotationName)) {
			this.annotationToClass[this.annotationToRow.get(annotationName)] = annotationClass;
		}
	}
	,renderAnnotationsByPosition: function(annotationPosition,tableElem,startingBlockNumber) {
		var _g1 = 0;
		var _g = this.annotationRowCount;
		while(_g1 < _g) {
			var k = _g1++;
			var blockNumber = startingBlockNumber;
			if(!this.isAnnotationOn(k)) {
				continue;
			}
			if(this.getAnnotationPosition(k) != annotationPosition) {
				continue;
			}
			var rowElem = js.Browser.get_document().createElement("div");
			rowElem.style.height = "2.0em";
			saturn.client.programs.sequenceeditor.SequenceEditor.makeSelectable(rowElem,false);
			tableElem.appendChild(rowElem);
			var _g3 = 0;
			var _g2 = this.columnCount;
			while(_g3 < _g2) {
				var i = _g3++;
				if(i == 0) {
					var rowLabel = this.generateRowLabel(this.annotationLabels[k]);
					this.annotationRowLabels[k].push(rowLabel);
					rowElem.appendChild(rowLabel);
				}
				var block = this.getAnnotationSequenceEditorBlock(blockNumber++,this,k);
				var divElem = block.getElement();
				if(this.getSelectableRow() == k) {
					block.makeSelectable(true);
				} else {
					block.makeSelectable(false);
				}
				this.annotationFields[k].push(block);
				rowElem.appendChild(divElem);
			}
		}
	}
	,setAnnotationPosition: function(annotationNumber,annotationPosition) {
		this.annotationPositions[annotationNumber] = annotationPosition;
	}
	,getAnnotationPosition: function(annotationNumber) {
		return this.annotationPositions[annotationNumber];
	}
	,isAnnotationOn: function(annotationNumber) {
		return this.annotationsOn[annotationNumber];
	}
	,setAnnotationOn: function(annotationNumber,enable) {
		this.annotationsOn[annotationNumber] = enable;
	}
	,setAnnotationsOn: function(enable) {
		var _g1 = 0;
		var _g = this.annotationsOn.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.annotationsOn[i] = enable;
		}
	}
	,hasAnnotationsOn: function() {
		var _g1 = 0;
		var _g = this.annotationsOn.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.isAnnotationOn(i)) {
				return true;
			}
		}
		return false;
	}
	,getSelectableRow: function() {
		return this.selectableRow;
	}
	,redraw: function() {
		saturn.client.WorkspaceApplication.suspendUpdates();
		var oldSeq = this.sequence;
		this.deleteBlockRows(0);
		this.addSequenceRows(1);
		var oldSelectableRow = this.selectableRow;
		this.selectableRow = -2;
		this.makeAnnotationSelectable(oldSelectableRow);
		this.blockChanged(null,null,0,null,oldSeq);
		saturn.client.WorkspaceApplication.resumeUpdates(true);
	}
	,autoSetBlockWidth: function(element) {
		if(js.Browser.get_window().navigator.appVersion.indexOf("Trident",0) > -1) {
			element.style.width = 4 + this.editorCharWidth * this.blockSize + "px";
		} else {
			element.style.width = 2 + this.editorCharWidth * this.blockSize + "px";
		}
	}
	,setCursorPosition: function(region) {
		var startPosition = region.getStartPosition();
		var endPosition = region.getStopPosition();
		startPosition += this.offSet;
		endPosition += this.offSet;
		var positionStr = "";
		if(isNaN(startPosition) || startPosition == -1) {
			positionStr = "";
		} else if(startPosition == endPosition) {
			++startPosition;
			positionStr = startPosition + "";
		} else {
			++startPosition;
			positionStr = startPosition + " - " + endPosition;
		}
		var annotationPositionStr = "";
		if(region.getAnnotationStartPosition() != null) {
			var annotationRow = region.getSelectedRow();
			annotationPositionStr = " ( " + this.getAnnotationLabel(annotationRow) + ": " + region.getAnnotationStartPosition() + " - " + region.getAnnotationStopPosition() + " ) ";
			saturn.core.Util.debug("Updating");
		}
		saturn.core.Util.debug("OffSet " + this.offSet);
		saturn.client.WorkspaceApplication.getApplication().setCentralInfoPanelText("Selected: " + positionStr + "  " + annotationPositionStr);
	}
	,onBlockBlur: function(block) {
		if(block.isInput == true) {
			var inputValue = block.previousSibling.value;
			block.textContent = inputValue;
			block.className = "molbio-sequenceeditor-block molbio-selectable";
			block.isInput = false;
			this.autoSetBlockWidth(block);
			this.inputFocused = null;
			block.parentNode.removeChild(block.previousElementSibling);
		}
	}
	,getComponent: function() {
		return this.theComponent;
	}
	,clearAnnotationRows: function() {
		var _g1 = 0;
		var _g = this.annotationRowCount;
		while(_g1 < _g) {
			var k = _g1++;
			if(!this.isAnnotationOn(k)) {
				continue;
			}
			var _g3 = 0;
			var _g2 = this.annotationFields[k].length;
			while(_g3 < _g2) {
				var blockNumber = _g3++;
				var annotationBlock = this.annotationFields[k][blockNumber];
				annotationBlock.getElement().textContent = "";
			}
		}
	}
	,getAnnotationBlocks: function(annotationName) {
		if(this.annotationToRow.exists(annotationName)) {
			return this.annotationFields[this.annotationToRow.get(annotationName)];
		} else {
			return null;
		}
	}
	,setSequence: function(sequence) {
		this.blockChanged(null,null,0,null,sequence);
	}
	,blockChanged: function(textField,blockNumber,startDelPosition,endDelPosition,newSequence) {
		saturn.client.WorkspaceApplication.suspendUpdates();
		var jConsole = console;
		var dWindow = js.Browser.get_window();
		var sequenceCursorPos = startDelPosition != null ? startDelPosition : textField.selectionEnd + (blockNumber - 1) * this.blockSize;
		if(newSequence == null) {
			var sequenceBuf = new StringBuf();
			var _g1 = 0;
			var _g = this.blockFields.length;
			while(_g1 < _g) {
				var i = _g1++;
				var block = this.blockFields[i];
				var field = block.getElement();
				if(field.isInput == true) {
					var localField = field.previousSibling;
					sequenceBuf.add(localField.value);
					localField.value = "";
				} else {
					if(field.textContent != null) {
						sequenceBuf.add(field.textContent);
					}
					field.textContent = "";
				}
			}
			this.sequence = sequenceBuf.toString();
			if(startDelPosition != null) {
				this.sequence = this.sequence.substring(0,startDelPosition) + this.sequence.substring(endDelPosition,this.sequence.length);
			}
		} else {
			var _g11 = 0;
			var _g2 = this.blockFields.length;
			while(_g11 < _g2) {
				var i1 = _g11++;
				var block1 = this.blockFields[i1];
				var field1 = block1.getElement();
				if(field1.isInput == true) {
					var localField1 = field1.previousSibling;
					localField1.value = "";
				} else {
					field1.textContent = "";
				}
			}
			this.sequence = newSequence;
		}
		this.sequence = this.normaliseSequence(this.sequence);
		var pos = 0;
		var blockNum = 0;
		var seqLen = this.sequence.length;
		var blockWithCursor = null;
		var offSetPos = null;
		var blocksToAdd = 0;
		while(seqLen > pos) {
			var numChars = pos + this.blockSize > seqLen ? seqLen - pos : this.blockSize;
			if(blockNum > this.blockFields.length - 1) {
				++blocksToAdd;
			}
			pos += numChars;
			++blockNum;
		}
		if(blocksToAdd > 0) {
			this.addSequenceRows(blocksToAdd);
		}
		this.clearAnnotationRows();
		this.fireSequenceChanged();
		pos = 0;
		blockNum = 0;
		var cursorRegion = null;
		while(seqLen > pos) {
			var numChars1 = pos + this.blockSize > seqLen ? seqLen - pos : this.blockSize;
			var blockSequence = HxOverrides.substr(this.sequence,pos,numChars1);
			if(blockNum > this.blockFields.length - 1) {
				this.addSequenceRows(1);
			}
			var _g12 = 0;
			var _g3 = this.annotationRowCount;
			while(_g12 < _g3) {
				var k = _g12++;
				if(!this.isAnnotationOn(k)) {
					continue;
				}
				var annotationBlock = this.annotationFields[k][blockNum];
				var annotationSeq = this.annotationSequences[k];
				var annotationSeqBlock;
				if(annotationSeq == null) {
					annotationSeqBlock = "";
				} else {
					var annotationSeqLen = annotationSeq.length;
					if(annotationSeqLen == 0 || annotationSeqLen < pos) {
						annotationSeqBlock = "";
					} else if(annotationSeqLen < pos + numChars1) {
						var charCount = annotationSeqLen - pos;
						annotationSeqBlock = HxOverrides.substr(annotationSeq,pos,charCount);
					} else {
						annotationSeqBlock = HxOverrides.substr(this.annotationSequences[k],pos,numChars1);
					}
				}
				annotationBlock.getElement().textContent = annotationSeqBlock;
			}
			var block2 = this.blockFields[blockNum++];
			var textFieldObj = block2.getElement();
			if(textFieldObj.isInput == true) {
				textFieldObj.previousSibling.value = blockSequence;
			} else {
				textFieldObj.textContent = blockSequence;
			}
			if(sequenceCursorPos > pos && sequenceCursorPos <= pos + numChars1) {
				offSetPos = sequenceCursorPos - (blockNum - 1) * this.blockSize;
				if(blockNum == blockNumber) {
					textFieldObj.previousSibling.setSelectionRange(offSetPos,offSetPos);
					var cursorPosition = (blockNum - 1) * this.blockSize + offSetPos;
					cursorRegion = new saturn.client.programs.sequenceeditor.SequenceRegion(cursorPosition,cursorPosition,-1);
					this.setCursorPosition(cursorRegion);
				} else {
					blockWithCursor = block2;
				}
			}
			pos += numChars1;
		}
		if(blockNum == 0) {
			blockNum = 1;
			blockWithCursor = this.blockFields[0];
			offSetPos = 1;
		}
		if(blockNum < this.blockFields.length) {
			this.deleteBlockRows(blockNum);
		}
		this.fireSequenceChanged();
		this.updateOutline();
		if(blockWithCursor != null) {
			var elem = blockWithCursor.getElement();
			elem.offSetPos = offSetPos;
			var etype = "mouseup";
			if(elem.fireEvent) {
				elem.fireEvent("on" + etype);
			} else {
				var dDocument = js.Browser.get_document();
				var evObj = dDocument.createEvent("Events");
				evObj.initEvent(etype,true,false);
				elem.dispatchEvent(evObj);
			}
		}
		this.getObject().setSequence(this.sequence);
		saturn.client.WorkspaceApplication.resumeUpdates(false);
	}
	,deleteBlockRows: function(blockNum) {
		var delFrom = Math.ceil(blockNum / this.columnCount) * this.columnCount;
		js.Browser.get_window().console.log("Deleting from  " + delFrom);
		var i = delFrom;
		while(i < this.blockFields.length) {
			var block = this.blockFields[i];
			var node = block.getElement();
			var parentNode = node.parentNode;
			if(node.isInput) {
				var _g = 0;
				var _g1 = parentNode.childNodes;
				while(_g < _g1.length) {
					var childNode = _g1[_g];
					++_g;
					if(childNode == node.inputNode) {
						parentNode.removeChild(node.inputNode);
					}
				}
			}
			parentNode.removeChild(node);
			var parentParentNode = parentNode.parentNode;
			if(parentParentNode != null) {
				parentParentNode.removeChild(parentNode);
			}
			var _g11 = 0;
			var _g2 = this.annotationRowCount;
			while(_g11 < _g2) {
				var k = _g11++;
				if(!this.isAnnotationOn(k)) {
					continue;
				}
				var annotationBlock = this.annotationFields[k][i];
				var node1 = annotationBlock.getElement();
				var parentNode1 = node1.parentNode;
				parentNode1.removeChild(node1);
				var parentParentNode1 = parentNode1.parentNode;
				if(parentParentNode1 != null) {
					parentParentNode1.removeChild(parentNode1);
				}
				annotationBlock.destroy();
			}
			++i;
			block.destroy();
		}
		var _g12 = delFrom;
		var _g3 = this.blockFields.length;
		while(_g12 < _g3) {
			var i1 = _g12++;
			this.blockFields.pop();
			var _g31 = 0;
			var _g21 = this.annotationRowCount;
			while(_g31 < _g21) {
				var k1 = _g31++;
				if(!this.isAnnotationOn(k1)) {
					continue;
				}
				this.annotationFields[k1].pop();
			}
		}
	}
	,fireSequenceChanged: function() {
		var _g = 0;
		var _g1 = this.sequenceChangeListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener.sequenceChanged(this.sequence);
		}
	}
	,addSequenceChangeListener: function(listener) {
		this.sequenceChangeListeners.push(listener);
	}
	,removeSequenceChangeListener: function(listener) {
		HxOverrides.remove(this.sequenceChangeListeners,listener);
	}
	,updateOutline: function() {
	}
	,cursorMoved: function(blockNumber,startPos,endPos) {
	}
	,selectionUpdated: function() {
		var selected = this.getSelectedRegion();
		if(this.lastSelected != null && selected != null && this.lastSelected.getStartPosition() == selected.getStartPosition() && selected.getStopPosition() == selected.getStartPosition()) {
			return;
		}
		this.lastSelected = selected;
		this.updateOutline();
		if(selected != null) {
			var sequence;
			if(selected.getSelectedRow() == -1) {
				sequence = selected.getSequence();
			} else {
				sequence = selected.getAnnotationSequence();
			}
			this.getApplication().getMiddleSouthPanel().body.update(sequence);
			this.setCursorPosition(selected);
		} else {
			this.setCursorPosition(new saturn.client.programs.sequenceeditor.SequenceRegion(-1,-1,-1));
		}
	}
	,getLastSelected: function() {
		return this.lastSelected;
	}
	,setAnnotationSequence: function(annotationRow,annotationSequence) {
		this.annotationSequences[annotationRow] = annotationSequence;
	}
	,onFocus: function() {
		var _gthis = this;
		saturn.client.programs.SimpleExtJSProgram.prototype.onFocus.call(this);
		this.getApplication().enableProgramSearchField(true);
		var obj = this.getNewMoleculeInstance();
		this.getApplication().setProgramSearchFieldEmptyText("Find in " + Type.getClassName(Type.getClass(obj)).split(".").pop());
		this.getApplication().getMiddleSouthPanel().addCls("seq-breaking");
		var viewMenu = this.getApplication().getViewMenu();
		var self = this;
		this.viewAnnotations = Ext.create("Ext.menu.Menu",{ margin : "0 0 10 0", "z-index" : 1000000});
		viewMenu.add({ text : "Annotations", iconCls : "bmenu", menu : this.viewAnnotations});
		this.hideAnnotationsItem = viewMenu.add({ text : "Hide Annotations", hidden : true, handler : function() {
			self.hideAllAnnotations();
			_gthis.menuState.set("hideAnnotationsItem",false);
			_gthis.menuState.set("showAnnotationsItem",true);
		}});
		this.showAnnotationsItem = viewMenu.add({ text : "Show Annotations", handler : function() {
			self.showAllAnnotations();
			_gthis.menuState.set("hideAnnotationsItem",true);
			_gthis.menuState.set("showAnnotationsItem",false);
		}});
		if(this.menuState.exists("showAnnotationsItem")) {
			if(this.menuState.get("showAnnotationsItem")) {
				this.showAnnotationsItem.show();
			} else {
				this.showAnnotationsItem.hide();
			}
		}
		if(this.menuState.exists("hideAnnotationsItem")) {
			if(this.menuState.get("hideAnnotationsItem")) {
				this.hideAnnotationsItem.show();
			} else {
				this.hideAnnotationsItem.hide();
			}
		}
		this.addAnnotationMenuItems();
		var enableLiveUpdateItem = null;
		var disableLiveUpdateItem = null;
		var disableLabel = "Disable Live Update";
		var enableLabel = "Enable Live Update";
		disableLiveUpdateItem = this.viewAnnotations.add({ text : disableLabel, handler : function() {
			enableLiveUpdateItem.show();
			disableLiveUpdateItem.hide();
			_gthis.menuState.set(enableLabel,true);
			_gthis.menuState.set(disableLabel,false);
			_gthis.liveUpdateOn = false;
		}});
		enableLiveUpdateItem = this.viewAnnotations.add({ text : enableLabel, handler : function() {
			enableLiveUpdateItem.hide();
			disableLiveUpdateItem.show();
			_gthis.liveUpdateOn = true;
			_gthis.menuState.set(enableLabel,false);
			_gthis.menuState.set(disableLabel,true);
			_gthis.redraw();
		}});
		if(this.menuState.exists(disableLabel)) {
			if(this.menuState.get(disableLabel)) {
				disableLiveUpdateItem.show();
			} else {
				disableLiveUpdateItem.hide();
			}
		}
		if(this.menuState.exists(enableLabel)) {
			if(this.menuState.get(enableLabel)) {
				enableLiveUpdateItem.show();
			} else {
				enableLiveUpdateItem.hide();
			}
		} else {
			enableLiveUpdateItem.hide();
		}
		this.viewFastaMenuItem = viewMenu.add({ text : "FASTA", handler : function() {
			_gthis.switchToFasta();
		}});
		this.viewEditorMenuItem = viewMenu.add({ text : "Editor", handler : function() {
			_gthis.switchToEditor();
		}, hidden : true});
		this.fastaButton = this.getApplication().getToolBar().add({ text : "FASTA", handler : function() {
			_gthis.switchToFasta();
		}, iconCls : "x-btn-fasta-dna", tooltip : { dismissDelay : 10000, text : "View formatted as FASTA"}});
		this.editorButton = this.getApplication().getToolBar().add({ text : "Editor", handler : function() {
			_gthis.switchToEditor();
		}, iconCls : "x-btn-editor-dna", tooltip : { dismissDelay : 10000, text : "Switch back to editor view"}});
		this.editorButton.hide();
		this.getApplication().getToolBar().add({ text : "SeqFig", iconCls : "x-btn-gridvar", handler : function() {
			var alnMap = new haxe.ds.StringMap();
			alnMap.set(_gthis.getObjectName(),_gthis.getSequence());
			var aln = new saturn.core.MSA(alnMap,[_gthis.getObjectName()]);
			var gridVar = new saturn.core.GridVar();
			gridVar.dataTableDefinition = saturn.client.programs.plugins.AlignmentGVPlugin.getTableDefinition(_gthis.getObjectName(),aln);
			gridVar.fit = true;
			gridVar.padding = false;
			gridVar.showXLabels = false;
			gridVar.configCollapse = false;
			var wo = new saturn.client.workspace.GridVarWO(gridVar,_gthis.getObjectName() + " (SeqFig)");
			saturn.client.WorkspaceApplication.getApplication().getWorkspace().addObject(wo,true,null);
		}});
		if(this.menuState.exists("hideFastaMenuItem")) {
			if(this.menuState.get("hideFastaMenuItem")) {
				this.viewFastaMenuItem.hide();
				this.viewEditorMenuItem.show();
				this.fastaButton.hide();
				this.editorButton.show();
				this.switchToFasta();
			}
		}
		if(this.menuState.exists("hideEditorMenuItem")) {
			if(this.menuState.get("hideEditorMenuItem")) {
				this.viewEditorMenuItem.hide();
				this.switchToEditor();
				this.fastaButton.show();
				this.editorButton.hide();
			}
		}
		var editMenu = this.getApplication().getEditMenu();
		editMenu.add({ text : "Block size", handler : function() {
			var self1 = _gthis;
			Ext.Msg.prompt("Edit block size","Enter new block size",function(btn,text) {
				if(btn == "ok") {
					self1.setBlockSize(Std.parseInt(text));
				}
			});
		}});
		editMenu.add({ text : "Blocks per line", handler : function() {
			var self2 = _gthis;
			Ext.Msg.prompt("Edit row block number","Enter new row block count",function(btn1,text1) {
				if(btn1 == "ok") {
					self2.setColumnCount(Std.parseInt(text1));
				}
			});
		}});
		editMenu.add({ text : "Offset", handler : function() {
			var self3 = _gthis;
			Ext.Msg.prompt("Edit sequence offset","Enter sequence offset",function(btn2,text2) {
				if(btn2 == "ok") {
					self3.setOffSet(Std.parseInt(text2));
				}
			});
		}});
	}
	,switchToEditor: function() {
		this.theComponent.remove(this.fastaViewer,false);
		this.theComponent.add(this.theTable);
		this.theComponent.doLayout();
		this.viewFastaMenuItem.show();
		this.viewEditorMenuItem.hide();
		this.fastaButton.show();
		this.editorButton.hide();
		this.menuState.set("hideFastaMenuItem",false);
		this.menuState.set("hideEditorMenuItem",true);
		this.redraw();
	}
	,switchToFasta: function() {
		this.theComponent.remove(this.theTable,false);
		this.theComponent.add(this.fastaViewer);
		this.viewFastaMenuItem.hide();
		this.viewEditorMenuItem.show();
		this.fastaButton.hide();
		this.editorButton.show();
		this.menuState.set("hideFastaMenuItem",true);
		this.menuState.set("hideEditorMenuItem",false);
		this.updateFastaViewer();
		this.theComponent.doLayout();
	}
	,updateFastaViewer: function() {
		var name = this.getActiveObjectName();
		name = StringTools.replace(name," (DNA)","");
		name = StringTools.replace(name," (Protein)","");
		var tmp = "<pre>" + saturn.core.FastaEntity.formatFastaFile(name,this.getSequence());
		this.fastaViewer.el.dom.innerHTML = tmp + "</pre>";
	}
	,setOffSet: function(offSet) {
		this.deleteBlockRows(0);
		this.offSet = offSet;
		this.redraw();
	}
	,setBlockSize: function(blockSize) {
		this.deleteBlockRows(0);
		this.blockSize = blockSize;
		this.redraw();
	}
	,setColumnCount: function(columnCount) {
		this.deleteBlockRows(0);
		this.columnCount = columnCount;
		this.redraw();
	}
	,hideAllAnnotations: function() {
		this.deleteBlockRows(0);
		this.setAnnotationsOn(false);
		var _g1 = 0;
		var _g = this.showAnnotationItems.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.showAnnotationItems[i].show();
			this.hideAnnotationItems[i].hide();
		}
		this.redraw();
		this.showAnnotationsItem.show();
		this.hideAnnotationsItem.hide();
	}
	,showAllAnnotations: function() {
		this.deleteBlockRows(0);
		this.setAnnotationsOn(true);
		var _g1 = 0;
		var _g = this.showAnnotationItems.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.hideAnnotationItems[i].show();
			this.showAnnotationItems[i].hide();
		}
		this.redraw();
		this.hideAnnotationsItem.show();
		this.showAnnotationsItem.hide();
	}
	,onBlur: function() {
		saturn.client.programs.SimpleExtJSProgram.prototype.onBlur.call(this);
		this.getApplication().getMiddleSouthPanel().removeCls("seq-breaking");
	}
	,getSelectedRegion: function() {
		if(this.sequence == null) {
			return null;
		}
		var focusNode = js.Browser.get_document().activeElement;
		var sequenceRegion = null;
		if(focusNode != null) {
			if(focusNode.tagName == "INPUT") {
				var startOffSet = focusNode.selectionStart;
				var stopOffSet = focusNode.selectionEnd;
				var blockNumber = focusNode.blockNumber;
				var cursorStartPosition = (blockNumber - 1) * this.blockSize + startOffSet;
				var cursorEndPosition = (blockNumber - 1) * this.blockSize + stopOffSet;
				var forwardSelection = true;
				if(cursorStartPosition > cursorEndPosition) {
					var tmp = cursorStartPosition;
					cursorStartPosition = cursorEndPosition;
					cursorEndPosition = tmp;
					forwardSelection = false;
				}
				sequenceRegion = new saturn.client.programs.sequenceeditor.SequenceRegion(cursorStartPosition,cursorEndPosition,this.getSelectableRow());
				sequenceRegion.setIsForward(forwardSelection);
			}
		}
		if(sequenceRegion == null) {
			var dWindow = js.Browser.get_window();
			var sel = dWindow.getSelection();
			var retVal = null;
			if(sel.rangeCount) {
				if(sel.anchorNode != null && sel.anchorNode.parentNode != null) {
					var anchorOffSet = sel.anchorOffset;
					var focusOffSet = sel.focusOffset;
					if(Reflect.hasField(sel.anchorNode,"blockNumber")) {
						sel.anchorNode.parentNode = sel.anchorNode;
					}
					var anchorParentNode = sel.anchorNode.parentNode;
					if(anchorParentNode.tagName == "FONT") {
						anchorParentNode = anchorParentNode.parentNode;
						anchorOffSet += Std.parseInt(sel.anchorNode.parentNode.getAttribute("seq_position_offset"));
					}
					var anchorBlockNumber = anchorParentNode.blockNumber;
					var anchorBOffSet = null;
					if(anchorBlockNumber == null) {
						anchorBlockNumber = anchorParentNode.getAttribute("blockNumber");
						anchorBOffSet = Std.parseInt(anchorParentNode.getAttribute("block_part_start"));
					}
					var focusParentNode = sel.focusNode.parentNode;
					if(focusParentNode.tagName == "FONT") {
						focusParentNode = focusParentNode.parentNode;
						focusOffSet += Std.parseInt(sel.focusNode.parentNode.getAttribute("seq_position_offset"));
					}
					var focusBlockNumber = focusParentNode.blockNumber;
					var focusBOffSet = null;
					if(focusBlockNumber == null) {
						focusBlockNumber = focusParentNode.getAttribute("blockNumber");
						focusBOffSet = Std.parseInt(focusParentNode.getAttribute("block_part_start"));
					}
					if(focusBOffSet == null) {
						focusBOffSet = 0;
					}
					if(anchorBOffSet == null) {
						anchorBOffSet = 0;
					}
					if(!(focusBlockNumber == null && anchorBlockNumber == null)) {
						var focusRealPosition = 0;
						var anchorRealPosition = 0;
						if(focusBlockNumber == null) {
							focusRealPosition = this.sequence.length;
							anchorRealPosition = anchorBOffSet + anchorOffSet + (anchorBlockNumber - 1) * this.blockSize;
						} else {
							focusRealPosition = focusBOffSet + focusOffSet + (focusBlockNumber - 1) * this.blockSize;
							if(anchorBlockNumber == null) {
								anchorRealPosition = this.sequence.length;
							} else {
								anchorRealPosition = anchorBOffSet + anchorOffSet + (anchorBlockNumber - 1) * this.blockSize;
							}
						}
						var startPosition = anchorRealPosition < focusRealPosition ? anchorRealPosition : focusRealPosition;
						var endPosition = anchorRealPosition == startPosition ? focusRealPosition : anchorRealPosition;
						sequenceRegion = new saturn.client.programs.sequenceeditor.SequenceRegion(startPosition,endPosition,this.getSelectableRow());
					}
				}
			}
		}
		if(sequenceRegion == null || this.sequence == null) {
			return null;
		} else {
			var selectedSequence = this.sequence.substring(sequenceRegion.getStartPosition(),sequenceRegion.getStopPosition());
			sequenceRegion.setSequence(selectedSequence);
			if(sequenceRegion.getSelectedRow() >= 0) {
				var annotationSequence = HxOverrides.substr(this.annotationSequences[sequenceRegion.getSelectedRow()],sequenceRegion.getStartPosition(),sequenceRegion.getStopPosition());
				sequenceRegion.setAnnotationSequence(annotationSequence);
			}
			return sequenceRegion;
		}
	}
	,getSelectedSequence: function() {
		var region = this.getSelectedRegion();
		if(region == null || this.sequence == null) {
			return null;
		} else {
			return this.getSelectedRegion().getSequence();
		}
	}
	,clearSelection: function() {
		var dWindow = js.Browser.get_window();
		var sel = dWindow.getSelection();
		if(sel.empty) {
			sel.empty();
		}
	}
	,generateRowLabel: function(rowLabel) {
		var lineNumberBlock = js.Browser.get_document().createElement("span");
		lineNumberBlock.textContent = rowLabel;
		lineNumberBlock.style.display = "inline-block";
		lineNumberBlock.style.width = "100px";
		lineNumberBlock.style.textAlign = "right";
		lineNumberBlock.className = "molbio-sequenceeditor-row-label";
		saturn.client.programs.sequenceeditor.SequenceEditor.makeSelectable(lineNumberBlock,false);
		return lineNumberBlock;
	}
	,makeAnnotationSelectable: function(annotationNumber) {
		if(annotationNumber != this.selectableRow) {
			if(this.selectableRow == -1) {
				var _g1 = 0;
				var _g = this.blockFields.length;
				while(_g1 < _g) {
					var i = _g1++;
					var blockField = this.blockFields[i];
					saturn.client.programs.sequenceeditor.SequenceEditor.makeSelectable(blockField.getElement(),false);
				}
			} else if(this.selectableRow > -2) {
				var _g11 = 0;
				var _g2 = this.annotationFields[this.selectableRow].length;
				while(_g11 < _g2) {
					var i1 = _g11++;
					var annotationField = this.annotationFields[this.selectableRow][i1];
					annotationField.makeSelectable(false);
				}
			}
			if(annotationNumber == -1) {
				var _g12 = 0;
				var _g3 = this.blockFields.length;
				while(_g12 < _g3) {
					var i2 = _g12++;
					var blockField1 = this.blockFields[i2];
					saturn.client.programs.sequenceeditor.SequenceEditor.makeSelectable(blockField1.getElement(),true);
				}
			} else {
				var _g13 = 0;
				var _g4 = this.annotationFields[annotationNumber].length;
				while(_g13 < _g4) {
					var i3 = _g13++;
					var annotationField1 = this.annotationFields[annotationNumber][i3];
					annotationField1.makeSelectable(true);
				}
			}
			this.selectableRow = annotationNumber;
		}
	}
	,serialise: function() {
		var object = saturn.client.programs.SimpleExtJSProgram.prototype.serialise.call(this);
		object.OFFSET = this.offSet;
		object.BLOCK_SIZE = this.blockSize;
		object.COLUMN_COUNT = this.columnCount;
		return object;
	}
	,deserialise: function(object) {
		saturn.client.programs.SimpleExtJSProgram.prototype.deserialise.call(this,object);
		this.offSet = object.OFFSET;
		this.blockSize = object.BLOCK_SIZE;
		this.columnCount = object.COLUMN_COUNT;
	}
	,getSequence: function() {
		return this.sequence;
	}
	,normaliseSequence: function(sequence) {
		if(sequence.indexOf(">") > -1) {
			var objs = saturn.core.FastaEntity.parseFasta(sequence);
			if(objs != null && objs.length > 0) {
				var obj = objs[0];
				this.getWorkspace().renameWorkspaceObject(this.getActiveObjectId(),obj.getName());
				sequence = obj.getSequence();
			}
		}
		sequence = saturn.client.programs.sequenceeditor.SequenceEditor.reg_newLine.replace(sequence,"");
		sequence = saturn.client.programs.sequenceeditor.SequenceEditor.reg_carReturn.replace(sequence,"");
		var entity = this.getEntity();
		if(entity == null || !Std["is"](entity,saturn.core.domain.SgcRestrictionSite)) {
			sequence = saturn.client.programs.sequenceeditor.SequenceEditor.reg_star.replace(sequence,"");
		}
		sequence = saturn.client.programs.sequenceeditor.SequenceEditor.reg_whiteSpace.replace(sequence,"");
		sequence = saturn.client.programs.sequenceeditor.SequenceEditor.reg_num.replace(sequence,"");
		sequence = sequence.toUpperCase();
		return sequence;
	}
	,redrawSequenceOnly: function() {
		this.findAnnotationOn = false;
		var blockSequence = "";
		var blockSeqLen = 0;
		var blockNumber = 0;
		var _g1 = 0;
		var _g = this.sequence.length;
		while(_g1 < _g) {
			var i = _g1++;
			blockSequence += this.sequence.charAt(i);
			++blockSeqLen;
			if(blockSeqLen == this.blockSize) {
				var block = this.blockFields[blockNumber];
				var textFieldObj = block.getElement();
				textFieldObj.innerHTML = blockSequence;
				blockSequence = "";
				++blockNumber;
				blockSeqLen = 0;
			}
		}
		if(blockSequence != "") {
			var block1 = this.blockFields[blockNumber];
			var textFieldObj1 = block1.getElement();
			textFieldObj1.innerHTML = blockSequence;
		}
	}
	,getNewMoleculeInstance: function() {
		return new saturn.core.molecule.Molecule(this.sequence);
	}
	,findSequence: function(search) {
		this.redrawSequenceOnly();
		var wsub = new EReg("\\s+","g");
		search = wsub.replace(search,"");
		var mol = this.getNewMoleculeInstance();
		var positions = mol.findMatchingLocuses(search);
		if(positions.length < 1) {
			return;
		}
		this.findAnnotationOn = true;
		var startPositions = new haxe.ds.IntMap();
		var stopPositions = new haxe.ds.IntMap();
		var missMatchPositions = new haxe.ds.IntMap();
		var _g = 0;
		while(_g < positions.length) {
			var position = positions[_g];
			++_g;
			startPositions.set(position.start,1);
			stopPositions.set(position.end,1);
			if(position.missMatchPositions != null) {
				var _g1 = 0;
				var _g2 = position.missMatchPositions;
				while(_g1 < _g2.length) {
					var position1 = _g2[_g1];
					++_g1;
					missMatchPositions.set(position1,1);
				}
			}
		}
		var blockSequence = "<font color=\"black\" seq_position_offset=\"0\">";
		var inAnnotationBlock = false;
		var blockNumber = 0;
		var blockSeqLen = 0;
		var matchColor = "#90ec8d";
		var missmatchColor = "#FF7DC8";
		var _g11 = 0;
		var _g3 = this.sequence.length;
		while(_g11 < _g3) {
			var i = _g11++;
			if(startPositions.exists(i)) {
				if(missMatchPositions.exists(i)) {
					blockSequence += "</font><font color=\"" + missmatchColor + "\" seq_position_offset=\"" + blockSeqLen + "\">" + this.sequence.charAt(i) + "</font>";
					blockSequence += "</font><font color=\"" + matchColor + "\" seq_position_offset=\"" + (blockSeqLen + 1) + "\">";
				} else {
					blockSequence += "</font><font color=\"" + matchColor + "\" seq_position_offset=\"" + blockSeqLen + "\">";
					blockSequence += this.sequence.charAt(i);
				}
				if(stopPositions.exists(i)) {
					blockSequence += "</font>";
					blockSequence += "<font color=\"black\" seq_position_offset=\"" + (blockSeqLen + 1) + "\">";
					inAnnotationBlock = false;
				} else {
					inAnnotationBlock = true;
				}
			} else if(stopPositions.exists(i)) {
				if(missMatchPositions.exists(i)) {
					blockSequence += "<font color=\"" + missmatchColor + "\" seq_position_offset=\"" + blockSeqLen + "\">" + this.sequence.charAt(i) + "</font></font>";
				} else {
					blockSequence += this.sequence.charAt(i) + "</font>";
				}
				blockSequence += "<font color=\"black\" seq_position_offset=\"" + (blockSeqLen + 1) + "\">";
				inAnnotationBlock = false;
			} else if(missMatchPositions.exists(i)) {
				if(inAnnotationBlock) {
					blockSequence += "</font>";
				}
				blockSequence += "<font color=\"" + missmatchColor + "\" seq_position_offset=\"" + blockSeqLen + "\">" + this.sequence.charAt(i) + "</font>";
				if(inAnnotationBlock) {
					blockSequence += "<font color=\"" + matchColor + "\" seq_position_offset=\"" + (blockSeqLen + 1) + "\">";
				} else {
					blockSequence += "<font color=\"black\" seq_position_offset=\"" + (blockSeqLen + 1) + "\">";
				}
			} else {
				blockSequence += this.sequence.charAt(i);
			}
			++blockSeqLen;
			if(blockSeqLen == this.blockSize) {
				var block = this.blockFields[blockNumber];
				var textFieldObj = block.getElement();
				if(inAnnotationBlock) {
					blockSequence += "</font>";
				}
				textFieldObj.innerHTML = blockSequence;
				blockSequence = "<font color=\"black\" seq_position_offset=\"0\">";
				if(inAnnotationBlock) {
					blockSequence += "<font color=\"" + matchColor + "\" seq_position_offset=\"" + blockSeqLen + "\">";
				}
				++blockNumber;
				blockSeqLen = 0;
			}
		}
		if(blockSequence != "") {
			var block1 = this.blockFields[blockNumber];
			var textFieldObj1 = block1.getElement();
			if(inAnnotationBlock) {
				blockSequence += "</font>";
			}
			textFieldObj1.innerHTML = blockSequence;
		}
	}
	,search: function(regex) {
		saturn.client.programs.SimpleExtJSProgram.prototype.search.call(this,regex);
		this.findSequence(regex);
	}
	,__class__: saturn.client.programs.sequenceeditor.SequenceEditor
});
saturn.client.programs.sequenceeditor.SequenceChangeListener = $hxClasses["saturn.client.programs.sequenceeditor.SequenceChangeListener"] = function() { };
saturn.client.programs.sequenceeditor.SequenceChangeListener.__name__ = ["saturn","client","programs","sequenceeditor","SequenceChangeListener"];
saturn.client.programs.sequenceeditor.SequenceChangeListener.prototype = {
	sequenceChanged: null
	,__class__: saturn.client.programs.sequenceeditor.SequenceChangeListener
};
saturn.client.workspace.DNAWorkspaceObject = $hxClasses["saturn.client.workspace.DNAWorkspaceObject"] = function(object,name) {
	if(object == null) {
		object = new saturn.core.DNA("");
	}
	if(name == null) {
		name = "DNA Sequence";
	}
	this.iconPath = "/static/js/images/dna_16.png";
	saturn.client.workspace.WorkspaceObjectBase.call(this,object,name);
};
saturn.client.workspace.DNAWorkspaceObject.__name__ = ["saturn","client","workspace","DNAWorkspaceObject"];
saturn.client.workspace.DNAWorkspaceObject.getNewMenuText = function() {
	return "DNA Sequence";
};
saturn.client.workspace.DNAWorkspaceObject.getDefaultFolderName = function() {
	return "DNA";
};
saturn.client.workspace.DNAWorkspaceObject.__super__ = saturn.client.workspace.WorkspaceObjectBase;
saturn.client.workspace.DNAWorkspaceObject.prototype = $extend(saturn.client.workspace.WorkspaceObjectBase.prototype,{
	clone: function() {
		if(Std["is"](this.object,saturn.core.RestrictionSite)) {
			return new saturn.client.workspace.DNAWorkspaceObject(new saturn.core.RestrictionSite(this.object.getSequence()),this.getName() + " (duplicate)");
		} else {
			return new saturn.client.workspace.DNAWorkspaceObject(new saturn.core.DNA(this.object.getSequence()),this.getName() + " (duplicate)");
		}
	}
	,getDNAObject: function() {
		return js.Boot.__cast(this.object , saturn.core.DNA);
	}
	,setDNAObject: function(dnaObject) {
		this.object = dnaObject;
	}
	,__class__: saturn.client.workspace.DNAWorkspaceObject
});
saturn.client.workspace.PrimerWorkspaceObject = $hxClasses["saturn.client.workspace.PrimerWorkspaceObject"] = function(object,name) {
	if(object == null) {
		object = new saturn.core.Primer("");
	}
	if(name == null) {
		name = "Primer Sequence";
	}
	saturn.client.workspace.DNAWorkspaceObject.call(this,object,name);
};
saturn.client.workspace.PrimerWorkspaceObject.__name__ = ["saturn","client","workspace","PrimerWorkspaceObject"];
saturn.client.workspace.PrimerWorkspaceObject.getNewMenuText = function() {
	return "Primer";
};
saturn.client.workspace.PrimerWorkspaceObject.__super__ = saturn.client.workspace.DNAWorkspaceObject;
saturn.client.workspace.PrimerWorkspaceObject.prototype = $extend(saturn.client.workspace.DNAWorkspaceObject.prototype,{
	getPrimer: function() {
		return js.Boot.__cast(this.getDNAObject() , saturn.core.Primer);
	}
	,__class__: saturn.client.workspace.PrimerWorkspaceObject
});
saturn.client.programs.DNASequenceEditor = $hxClasses["saturn.client.programs.DNASequenceEditor"] = function() {
	saturn.client.programs.sequenceeditor.SequenceEditor.call(this);
};
saturn.client.programs.DNASequenceEditor.__name__ = ["saturn","client","programs","DNASequenceEditor"];
saturn.client.programs.DNASequenceEditor.__interfaces__ = [saturn.client.programs.sequenceeditor.SequenceChangeListener];
saturn.client.programs.DNASequenceEditor.processABIFile = function(base64,load,cb) {
	saturn.client.BioinformaticsServicesClient.getClient().sendABIReportRequest(base64,function(data,error) {
		var obj = JSON.parse(data);
		js.Browser.alert("hello");
	});
};
saturn.client.programs.DNASequenceEditor.parseFile = function(file,cb,asNewOpenProgram) {
	if(asNewOpenProgram == null) {
		asNewOpenProgram = true;
	}
	var load = cb == null;
	var extension = saturn.client.core.CommonCore.getFileExtension(file.name);
	if(extension == "ab1") {
		saturn.client.core.CommonCore.getFileAsArrayBuffer(file,function(content) {
			var base64 = saturn.client.core.CommonCore.convertArrayBufferToBase64(content);
			saturn.client.programs.DNASequenceEditor.processABIFile(base64,load,cb);
		});
	} else {
		saturn.client.core.CommonCore.getFileAsText(file,function(content1) {
			var objs = null;
			if(extension == "fasta") {
				objs = saturn.client.programs.DNASequenceEditor.parseFastaString(content1,load,asNewOpenProgram);
			} else if(extension == "seq") {
				objs = saturn.client.programs.DNASequenceEditor.parseSequenceString(content1,file.name,load,asNewOpenProgram);
			}
			if(cb != null && objs != null) {
				cb(objs);
			}
		});
	}
};
saturn.client.programs.DNASequenceEditor.parseSequenceString = function(contents,name,load,asNewOpenProgram) {
	if(asNewOpenProgram == null) {
		asNewOpenProgram = true;
	}
	if(load == null) {
		load = false;
	}
	var seqObjs = [];
	seqObjs.push(new saturn.core.FastaEntity(name,contents));
	if(load) {
		saturn.client.programs.DNASequenceEditor.loadFastaEntitiesIntoWorkspace(seqObjs,asNewOpenProgram);
	}
	return seqObjs;
};
saturn.client.programs.DNASequenceEditor.parseFastaString = function(contents,load,asNewOpenProgram) {
	if(asNewOpenProgram == null) {
		asNewOpenProgram = true;
	}
	if(load == null) {
		load = false;
	}
	var headerPattern1 = new EReg("^>(.+)","");
	var seqObjs = [];
	var currentName = null;
	var currentSeqBuf = new StringBuf();
	var lines = contents.split("\n");
	if(lines.length == 1) {
		lines = contents.split(" ");
	}
	var numLines = lines.length;
	var app = saturn.client.WorkspaceApplication.getApplication();
	app.printInfo("Lines: " + numLines);
	var _g1 = 0;
	var _g = numLines;
	while(_g1 < _g) {
		var i = _g1++;
		var seqLine = true;
		var line = lines[i];
		if(headerPattern1.match(line)) {
			seqLine = false;
		}
		if(seqLine == true) {
			currentSeqBuf.add(line);
		}
		if(seqLine == false || i == numLines - 1) {
			if(currentName != null) {
				var currentSeq = currentSeqBuf.toString();
				if(currentSeq.length > 0) {
					seqObjs.push(new saturn.core.FastaEntity(currentName,currentSeq));
					currentSeqBuf = new StringBuf();
				}
			}
			if(seqLine == false) {
				currentName = headerPattern1.matched(1);
			}
		}
	}
	if(load) {
		saturn.client.programs.DNASequenceEditor.loadFastaEntitiesIntoWorkspace(seqObjs,asNewOpenProgram);
	}
	return seqObjs;
};
saturn.client.programs.DNASequenceEditor.loadFastaEntitiesIntoWorkspace = function(seqObjs,asNewOpenProgram) {
	if(asNewOpenProgram == null) {
		asNewOpenProgram = true;
	}
	var workspace = saturn.client.WorkspaceApplication.getApplication().getWorkspace();
	saturn.client.WorkspaceApplication.getApplication().getWorkspace().beginUpdate();
	var _g = 0;
	while(_g < seqObjs.length) {
		var seqObj = seqObjs[_g];
		++_g;
		var isDNA = true;
		var sequence = seqObj.getSequence();
		var dnaObj = new saturn.core.DNA(sequence);
		sequence = dnaObj.getSequence();
		var sLen = sequence.length;
		if(sLen > 20) {
			sLen = 20;
		}
		var _g2 = 0;
		var _g1 = sLen;
		while(_g2 < _g1) {
			var i = _g2++;
			var _g3 = sequence.charAt(i);
			switch(_g3) {
			case "A":case "C":case "G":case "N":case "T":case "X":
				break;
			default:
				isDNA = false;
			}
		}
		if(isDNA) {
			workspace._addObject(new saturn.client.workspace.DNAWorkspaceObject(dnaObj,seqObj.getName()),asNewOpenProgram,false);
		} else {
			workspace._addObject(new saturn.client.workspace.ProteinWorkspaceObject(new saturn.core.Protein(sequence),seqObj.getName()),asNewOpenProgram,false);
		}
		asNewOpenProgram = false;
	}
	workspace.reloadWorkspace();
};
saturn.client.programs.DNASequenceEditor.getQuickLaunchItems = function() {
	return [{ iconCls : "x-btn-dna", html : "DNA<br/>Editor", cls : "quickLaunchButton", handler : function() {
		var dna = new saturn.core.DNA("");
		dna.setMoleculeName("DNA");
		saturn.client.WorkspaceApplication.getApplication().getWorkspace().addObject(dna,true);
	}, tooltip : { dismissDelay : 10000, text : "Editor for DNA sequences.<br/>Supports annotations and submission to BLAST."}}];
};
saturn.client.programs.DNASequenceEditor.__super__ = saturn.client.programs.sequenceeditor.SequenceEditor;
saturn.client.programs.DNASequenceEditor.prototype = $extend(saturn.client.programs.sequenceeditor.SequenceEditor.prototype,{
	selectedStatsFolder: null
	,lastWasMouseMoved: null
	,frameOffSet: null
	,tmCalcEngine: null
	,proteinItemsMenu: null
	,emptyInit: function() {
		this.tmCalcEngine = new saturn.core.TmCalc();
		this.setDefaultAnnotationEditorBlockClass(saturn.client.programs.DNAAnnotationSequenceEditorBlock);
		saturn.client.programs.sequenceeditor.SequenceEditor.prototype.emptyInit.call(this);
		this.frameOffSet = 0;
		this.selectedStatsFolder = null;
		this.lastWasMouseMoved = false;
		this.setAnnotationCount(6);
		this.setAnnotationPosition(0,saturn.client.programs.sequenceeditor.AnnotationPosition.TOP);
		this.setAnnotationPosition(1,saturn.client.programs.sequenceeditor.AnnotationPosition.TOP);
		this.setAnnotationPosition(2,saturn.client.programs.sequenceeditor.AnnotationPosition.TOP);
		this.setAnnotationLabel(0,"Frame 1");
		this.setAnnotationLabel(1,"Frame 2");
		this.setAnnotationLabel(2,"Frame 3");
		this.setAnnotationLabel(3,"Reverse Frame 1");
		this.setAnnotationLabel(4,"Reverse Frame 2");
		this.setAnnotationLabel(5,"Reverse Frame 3");
		this.addSequenceChangeListener(this);
	}
	,setActiveObject: function(objectId) {
		saturn.client.programs.sequenceeditor.SequenceEditor.prototype.setActiveObject.call(this,objectId);
		var dnaObject = this.getActiveObject(saturn.client.workspace.DNAWorkspaceObject);
		var object;
		if(Std["is"](dnaObject,saturn.core.DNA)) {
			object = dnaObject;
		} else {
			object = dnaObject.getDNAObject();
		}
		var sequence = object.getSequence();
		if(Std["is"](object,saturn.core.RestrictionSite)) {
			sequence = (js.Boot.__cast(object , saturn.core.RestrictionSite)).getStarSequence();
		}
		this.blockChanged(null,null,0,null,sequence);
		this.updateProteinMenuItems();
	}
	,onFocus: function() {
		var _gthis = this;
		saturn.client.programs.sequenceeditor.SequenceEditor.prototype.onFocus.call(this);
		var self = this;
		var viewMenu = this.getApplication().getViewMenu();
		var toolsMenu = this.getApplication().getToolsMenu();
		var blastMenu = Ext.create("Ext.menu.Menu",{ margin : "0 0 10 0", "z-index" : 1000000});
		toolsMenu.add({ text : "BLAST", iconCls : "bmenu", menu : blastMenu, cls : "menu-item-FILE"});
		var blastItems = [];
		var blastDatabases = saturn.client.BioinformaticsServicesClient.getClient(null).getBlastList().DNA;
		var _g = 0;
		var _g1 = Reflect.fields(blastDatabases);
		while(_g < _g1.length) {
			var dbName = [_g1[_g]];
			++_g;
			var dbName1 = dbName[0];
			var blastItem = (function(dbName2) {
				return function() {
					var blastName = "Blastn " + _gthis.getActiveObject(saturn.client.workspace.DNAWorkspaceObject).getName() + " 1 - " + self.sequence.length;
					self.blastSequence(self.sequence,dbName2[0],blastName);
				};
			})(dbName);
			var blastItem1 = blastMenu.add({ text : dbName1, hidden : false, handler : blastItem});
			blastItems.push({ text : dbName[0], hidden : false, handler : (function(dbName3) {
				return function() {
					var blastName1 = "Blastn " + _gthis.getActiveObject(saturn.client.workspace.DNAWorkspaceObject).getName() + " 1 - " + self.sequence.length;
					self.blastSequence(self.sequence,dbName3[0],blastName1);
				};
			})(dbName)});
		}
		var blastButton = Ext.create("Ext.button.Button",{ renderTo : Ext.getBody(), text : "BLAST", handler : function() {
		}, menu : Ext.create("Ext.menu.Menu",{ items : blastItems}), iconCls : "x-btn-blast", cls : "x-btn-split-black-background", tooltip : { dismissDelay : 10000, text : "BLAST against a sequence database"}});
		this.getApplication().getToolBar().add(blastButton);
		this.getApplication().getEditMenu().add({ text : "Frame OffSet", handler : function() {
			Ext.Msg.prompt("Edit Frame OffSet","Enter new Frame OffSet",function(btn,text) {
				if(btn == "ok") {
					self.setFrameOffSet(Std.parseInt(text));
				}
			});
		}});
		this.getApplication().getEditMenu().add({ text : "Inverse complement", handler : function() {
			_gthis.inverseComplement();
		}});
		this.getApplication().getEditMenu().add({ text : "Complement", handler : function() {
			_gthis.complement();
		}});
		this.getApplication().getEditMenu().add({ text : "Inverse", handler : function() {
			_gthis.inverse();
		}});
		this.getApplication().getToolBar().add({ html : "Inverse<br/>Complement", handler : function() {
			_gthis.inverseComplement();
		}, iconCls : "x-btn-inverse-complement", tooltip : { dismissDelay : 10000, text : "Inverse complement sequence"}});
		this.getApplication().getToolBar().add({ html : "Complement", handler : function() {
			_gthis.complement();
		}, tooltip : { dismissDelay : 10000, text : "Complement sequence"}});
		this.getApplication().getToolBar().add({ html : "Inverse", handler : function() {
			_gthis.inverse();
		}, tooltip : { dismissDelay : 10000, text : "Inverse sequence"}});
		this.installOutlineTree();
		this.updateOutline();
		this.getApplication().getExportMenu().add({ text : "FASTA", handler : function() {
			var name = _gthis.getActiveObjectName();
			name = StringTools.replace(name," (DNA)","");
			var contents = saturn.core.FastaEntity.formatFastaFile(name,_gthis.getSequence());
			_gthis.getApplication().saveTextFile(contents,name + ".fasta");
		}});
		var importMenu = this.getApplication().getImportMenu();
		var frames = [saturn.core.Frame.ONE,saturn.core.Frame.TWO,saturn.core.Frame.THREE];
		var _g2 = 0;
		while(_g2 < 2) {
			var j = [_g2++];
			var _g11 = 1;
			while(_g11 < 4) {
				var i = [_g11++];
				var label = "Import Frame " + i[0];
				if(j[0] == 1) {
					label += " (reverse)";
				}
				var tmp = (function(i1,j1) {
					return function() {
						var dna = new saturn.core.DNA(_gthis.getSequence());
						if(j1[0] == 1) {
							dna = new saturn.core.DNA(dna.getInverseComplement());
						}
						var protein = new saturn.core.Protein(dna.getFrameTranslation(saturn.core.GeneticCodes.STANDARD,frames[i1[0] - 1]));
						_gthis.getWorkspace()._addObject(new saturn.client.workspace.ProteinWorkspaceObject(protein,_gthis.getActiveObjectName() + " (Frame " + i1[0] + ")"),true,true);
					};
				})(i,j);
				importMenu.add({ text : label, handler : tmp});
			}
		}
		this.proteinItemsMenu = Ext.create("Ext.menu.Menu",{ margin : "0 0 10 0", "z-index" : 1000000});
		this.getApplication().getToolBar().add({ text : "Load Protein", menu : this.proteinItemsMenu});
		this.updateProteinMenuItems();
	}
	,updateProteinMenuItems: function() {
		var _gthis = this;
		var dnaObj = this.getEntity();
		if(dnaObj != null) {
			var proteinNames = dnaObj.getProteinNames();
			var _g = 0;
			while(_g < proteinNames.length) {
				var name = [proteinNames[_g]];
				++_g;
				this.proteinItemsMenu.add({ text : name[0], hidden : false, handler : (function(name1) {
					return function() {
						var prot = dnaObj.getProtein(name1[0]);
						var tmp = dnaObj.getName() + "(";
						prot.setName(tmp + name1[0] + ")");
						_gthis.getWorkspace().addObject(prot,true);
					};
				})(name)});
			}
		}
	}
	,loadProtein: function() {
		var entity = this.getEntity();
		if(entity != null) {
			var prot = entity.getProtein();
			this.getWorkspace().addObject(prot,true);
		}
	}
	,updateModelField: function(obj,field,value) {
		var d = js.Boot.__cast(this.getObject() , saturn.core.DNA);
		if(d.isLinked()) {
			if(d.linkedOriginField == field) {
				saturn.client.programs.sequenceeditor.SequenceEditor.prototype.updateModelField.call(this,obj,field,this.getSequence());
				return;
			}
		}
		saturn.client.programs.sequenceeditor.SequenceEditor.prototype.updateModelField.call(this,obj,field,value);
	}
	,setFrameOffSet: function(offSet) {
		this.frameOffSet = offSet;
	}
	,blastSequence: function(theSequence,database,blastName) {
		var _gthis = this;
		saturn.client.BioinformaticsServicesClient.getClient().sendBlastReportRequest(theSequence,blastName,database,function(response,error) {
			if(error == null) {
				var reportFile = response.json.reportFile;
				var location = js.Browser.get_window().location;
				var dstURL = location.protocol + "//" + location.hostname + ":" + location.port + "/" + reportFile;
				var webPage = new saturn.client.workspace.WebPage();
				webPage.setURL(dstURL);
				var w0 = new saturn.client.workspace.WebPageWorkspaceObject(webPage,blastName);
				_gthis.getApplication().getWorkspace()._addObject(w0,true,true,"BLAST");
			} else {
				_gthis.getApplication().showMessage("BLAST Error",error);
			}
		});
	}
	,inverseComplement: function() {
		var dnaObj = new saturn.core.DNA(this.sequence);
		this.blockChanged(null,null,0,null,dnaObj.getInverseComplement());
	}
	,complement: function() {
		var dnaObj = new saturn.core.DNA(this.sequence);
		this.blockChanged(null,null,0,null,dnaObj.getComplement());
	}
	,inverse: function() {
		var dnaObj = new saturn.core.DNA(this.sequence);
		this.blockChanged(null,null,0,null,dnaObj.getInverse());
	}
	,getNewMoleculeInstance: function() {
		return new saturn.core.DNA(this.sequence);
	}
	,onBlur: function() {
		saturn.client.programs.sequenceeditor.SequenceEditor.prototype.onBlur.call(this);
		var webApp = saturn.client.WorkspaceApplication.getApplication();
		var dataStore = webApp.getOutlineDataStore("DEFAULT");
		var rootNode = dataStore.getRootNode();
	}
	,installOutlineTree: function() {
		this.getApplication().installOutlineTree("DEFAULT",true,false,null);
		var webApp = saturn.client.WorkspaceApplication.getApplication();
		var dataStore = webApp.getOutlineDataStore("DEFAULT");
		var rootNode = dataStore.getRootNode();
		var folderNames = ["Current","Selected"];
		Ext.suspendLayouts();
		var _g = 0;
		while(_g < folderNames.length) {
			var folderName = folderNames[_g];
			++_g;
			var gcContentStr = "0";
			var dnaNucCountStr = "0";
			var currentStats = rootNode.appendChild({ text : folderName, leaf : false, expanded : true, id : folderName});
			var gcContentItem = currentStats.appendChild({ text : "% GC : " + gcContentStr, leaf : true, id : folderName + " : GC"});
			var nucContentItem = currentStats.appendChild({ text : "Length : " + dnaNucCountStr, leaf : true, id : folderName + " : Length"});
			if(folderName == "Selected") {
				var nucContentItem1 = currentStats.appendChild({ text : "Melting Temp : ", leaf : true, id : folderName + " : Melting Temp"});
			}
		}
		Ext.resumeLayouts(true);
	}
	,blockChanged: function(textField,blockNumber,startDelPosition,endDelPosition,newSequence) {
		saturn.client.programs.sequenceeditor.SequenceEditor.prototype.blockChanged.call(this,textField,blockNumber,startDelPosition,endDelPosition,newSequence);
	}
	,selectionUpdated: function() {
		saturn.client.programs.sequenceeditor.SequenceEditor.prototype.selectionUpdated.call(this);
	}
	,getSequenceEditorBlock: function(blockNumber,editor) {
		return new saturn.client.programs.DNASequenceEditorBlock(blockNumber,editor);
	}
	,updateStatsPanel: function(folderName,dnaObj) {
		var webApp = saturn.client.WorkspaceApplication.getApplication();
		var dataStore = webApp.getOutlineDataStore("DEFAULT");
		var gcContentStr = "0";
		var dnaNucCountStr = "0";
		var meltingTempStr = "0";
		if(dnaObj != null) {
			var gcContent = dnaObj.getGCFraction();
			gcContentStr = Std.string(saturn.util.MathUtils.sigFigs(gcContent * 100,2));
			if(gcContentStr == "NaN") {
				gcContentStr = "0";
			}
			dnaNucCountStr = "" + dnaObj.getLength();
			if(folderName == "Selected") {
				meltingTempStr = "" + saturn.util.MathUtils.sigFigs(this.tmCalcEngine.tmCalculation(dnaObj,50,300),2);
			}
		}
		var node = dataStore.getNodeById(folderName + " : Length");
		if(node != null) {
			node.set("text","Length : " + dnaNucCountStr);
			node.commit();
			node = dataStore.getNodeById(folderName + " : GC");
			node.set("text","% GC : " + gcContentStr);
			node.commit();
			if(folderName == "Selected") {
				var node1 = dataStore.getNodeById(folderName + " : Melting Temp");
				node1.set("text","Melting Temp : " + meltingTempStr);
				node1.commit();
			}
		}
	}
	,updateOutline: function() {
		saturn.client.programs.sequenceeditor.SequenceEditor.prototype.updateOutline.call(this);
		var webApp = saturn.client.WorkspaceApplication.getApplication();
		var dataStore = webApp.getOutlineDataStore("DEFAULT");
		var rootNode = dataStore.getRootNode();
		var dnaObj = null;
		if(this.sequence != null && this.sequence != "") {
			var wO = this.getActiveObject(saturn.client.workspace.DNAWorkspaceObject);
			if(wO == null) {
				dnaObj = new saturn.core.DNA("");
			} else if(Std["is"](wO,saturn.core.DNA)) {
				dnaObj = wO;
			} else {
				dnaObj = wO.getDNAObject();
			}
		}
		this.updateStatsPanel("Current",dnaObj);
		if(this.inMouseMove || this.lastWasMouseMoved) {
			var subSeq;
			if(this.getSelectableRow() != -1) {
				subSeq = "";
			} else {
				subSeq = this.getSelectedSequence();
			}
			if(subSeq != null) {
				if(this.inMouseMove == false) {
					subSeq = "";
				}
			} else {
				subSeq = "";
			}
			dnaObj = new saturn.core.DNA(subSeq);
			this.updateStatsPanel("Selected",dnaObj);
			if(this.inMouseMove) {
				this.lastWasMouseMoved = true;
			} else {
				this.lastWasMouseMoved = false;
			}
		}
	}
	,openFile: function(file,asNew,asNewOpenProgram) {
		if(asNewOpenProgram == null) {
			asNewOpenProgram = true;
		}
		var _gthis = this;
		var extension = saturn.client.core.CommonCore.getFileExtension(file.name);
		if(extension != "ab1") {
			if(asNew) {
				saturn.client.programs.DNASequenceEditor.parseFile(file,null,asNewOpenProgram);
			} else {
				saturn.client.programs.DNASequenceEditor.parseFile(file,function(objs) {
					if(objs.length > 0) {
						var tmp = objs[0].getSequence();
						_gthis.blockChanged(null,null,0,null,tmp);
						_gthis.getWorkspace().renameWorkspaceObject(_gthis.getActiveObjectId(),objs[0].getName());
					}
				});
			}
		}
	}
	,sequenceChanged: function(sequence) {
		if(!this.hasAnnotationsOn()) {
			return;
		}
		var dnaObj = new saturn.core.DNA(sequence);
		if(sequence.length > 2) {
			var dnaObjs = [dnaObj,new saturn.core.DNA(dnaObj.getInverseComplement())];
			var annotationPos = 0;
			var _g1 = 0;
			var _g = dnaObjs.length;
			while(_g1 < _g) {
				var j = _g1++;
				dnaObj = dnaObjs[j];
				var _g2 = 0;
				while(_g2 < 3) {
					var i = _g2++;
					var seqLen = dnaObj.getLength() - i;
					var translation = dnaObj.getTranslation(saturn.core.GeneticCodes.STANDARD,i,false);
					var transSpacer = new StringBuf();
					if(j == 0) {
						transSpacer.add(saturn.util.StringUtils.getRepeat(" ",i + 1) + translation.charAt(0));
					} else {
						translation = saturn.util.StringUtils.reverse(translation);
						transSpacer.add(saturn.util.StringUtils.getRepeat(" ",seqLen % 3 + 1) + translation.charAt(0));
					}
					var defaultSpace = saturn.util.StringUtils.getRepeat(" ",2);
					var _g4 = 1;
					var _g3 = translation.length;
					while(_g4 < _g3) {
						var i1 = _g4++;
						transSpacer.add(defaultSpace + translation.charAt(i1));
					}
					this.setAnnotationSequence(annotationPos,transSpacer.toString());
					++annotationPos;
				}
			}
		} else {
			this.setAnnotationSequence(0,"");
			this.setAnnotationSequence(1,"");
			this.setAnnotationSequence(2,"");
		}
	}
	,getSelectedRegion: function() {
		var region = saturn.client.programs.sequenceeditor.SequenceEditor.prototype.getSelectedRegion.call(this);
		if(region == null) {
			return region;
		}
		var dnaFrame = region.getSelectedRow();
		if(dnaFrame > -1) {
			var dnaPStart = region.getStartPosition();
			var dnaPStop = region.getStopPosition();
			var annotationSequence = this.annotationSequences[dnaFrame];
			var annotationSelectedSequence = annotationSequence.substring(dnaPStart,dnaPStop);
			annotationSelectedSequence = StringTools.replace(annotationSelectedSequence," ","");
			if(annotationSelectedSequence.length > 0) {
				var annotationBeforeSelectedSequence;
				if(dnaFrame < 3) {
					annotationBeforeSelectedSequence = annotationSequence.substring(0,dnaPStart);
				} else {
					annotationBeforeSelectedSequence = annotationSequence.substring(dnaPStop + 1,annotationSequence.length);
				}
				annotationBeforeSelectedSequence = StringTools.replace(annotationBeforeSelectedSequence," ","");
				var beforeLength = annotationBeforeSelectedSequence.length;
				var startPosition = beforeLength + 1;
				var endPosition = beforeLength + annotationSelectedSequence.length;
				region.setAnnotationStartPosition(startPosition + this.frameOffSet);
				region.setAnnotationStopPosition(endPosition + this.frameOffSet);
				region.setAnnotationSequence(annotationSelectedSequence);
			}
			if(dnaFrame > 2) {
				var seqLen = this.sequence.length;
				var startPos = seqLen - region.getStopPosition();
				var stopPos = seqLen - region.getStartPosition();
				region.setStartPosition(startPos + this.offSet);
				region.setStopPosition(stopPos + this.offSet);
				region.setIsForward(false);
			} else {
				region.setIsForward(true);
			}
		} else {
			region.setIsForward(true);
		}
		return region;
	}
	,serialise: function() {
		var object = saturn.client.programs.sequenceeditor.SequenceEditor.prototype.serialise.call(this);
		object.FRAME_OFFSET = this.frameOffSet;
		return object;
	}
	,deserialise: function(object) {
		saturn.client.programs.sequenceeditor.SequenceEditor.prototype.deserialise.call(this,object);
		this.frameOffSet = object.FRAME_OFFSET;
	}
	,normaliseSequence: function(sequence) {
		return saturn.client.programs.sequenceeditor.SequenceEditor.prototype.normaliseSequence.call(this,sequence);
	}
	,getWorkspaceContextMenuItems: function() {
		var items = [];
		var obj = this.getEntity();
		if(Std["is"](obj,saturn.core.DNA)) {
			var d = js.Boot.__cast(obj , saturn.core.DNA);
			if(!d.isLinked()) {
				var proteinItems = this.getWorkspace().getObjectsByClass(saturn.core.Protein);
				var attachItems = Ext.create("Ext.menu.Menu",{ margin : "0 0 10 0"});
				var _g = 0;
				while(_g < proteinItems.length) {
					var protObj = proteinItems[_g];
					++_g;
					if(!protObj.isLinked()) {
						var tmp = protObj.getName();
						attachItems.add({ text : tmp, handler : function() {
						}});
					}
				}
				items.push({ text : "Attach Protein", menu : attachItems});
			} else {
				items.push({ text : "Deattach Protein", handler : function() {
					obj.setProtein(null);
				}});
			}
		}
		return items;
	}
	,changeObjectType: function(model) {
		var newObj = saturn.client.programs.sequenceeditor.SequenceEditor.prototype.changeObjectType.call(this,model);
		var object = this.getObject();
		if(this.getObject().isLinked()) {
			var tmp = object.getProtein();
			newObj.setProtein(tmp);
		}
		var tmp1 = this.getSequence();
		newObj.setSequence(tmp1);
		return newObj;
	}
	,__class__: saturn.client.programs.DNASequenceEditor
});
saturn.client.workspace.PCRProductWO = $hxClasses["saturn.client.workspace.PCRProductWO"] = function(object,name) {
	if(object == null) {
		object = new saturn.core.PCRProduct(null,null,null);
	}
	if(name == null) {
		name = "PCR Product";
	}
	saturn.client.workspace.DNAWorkspaceObject.call(this,object,name);
};
saturn.client.workspace.PCRProductWO.__name__ = ["saturn","client","workspace","PCRProductWO"];
saturn.client.workspace.PCRProductWO.getNewMenuText = function() {
	return "PCR Product";
};
saturn.client.workspace.PCRProductWO.__super__ = saturn.client.workspace.DNAWorkspaceObject;
saturn.client.workspace.PCRProductWO.prototype = $extend(saturn.client.workspace.DNAWorkspaceObject.prototype,{
	forwardPrimerObjId: null
	,reversePrimerObjId: null
	,templateObjId: null
	,updateProduct: function() {
		if(this.forwardPrimerObjId == null || this.reversePrimerObjId == null || this.templateObjId == null) {
			return;
		}
		var workspace = saturn.client.WorkspaceApplication.getApplication().getWorkspace();
		var fDNA = workspace.getObjectSafely(this.forwardPrimerObjId,saturn.client.workspace.DNAWorkspaceObject).getObject();
		var fPrimer;
		if(Std["is"](fDNA,saturn.core.Primer)) {
			fPrimer = js.Boot.__cast(fDNA , saturn.core.Primer);
		} else {
			fPrimer = new saturn.core.Primer(fDNA.getSequence());
		}
		this.object.setForwardPrimer(fPrimer);
		var rDNA = workspace.getObjectSafely(this.reversePrimerObjId,saturn.client.workspace.DNAWorkspaceObject).getObject();
		var rPrimer;
		if(Std["is"](rDNA,saturn.core.Primer)) {
			rPrimer = js.Boot.__cast(rDNA , saturn.core.Primer);
		} else {
			rPrimer = new saturn.core.Primer(rDNA.getSequence());
		}
		this.object.setReversePrimer(rPrimer);
		this.object.setTemplate(workspace.getObjectSafely(this.templateObjId,saturn.client.workspace.DNAWorkspaceObject).getObject());
		this.object.calculateProduct();
	}
	,setForwardPrimer: function(obj) {
		if(obj == null) {
			this.forwardPrimerObjId = null;
		} else {
			this.forwardPrimerObjId = obj.getUUID();
		}
	}
	,getForwardPrimerId: function() {
		return this.forwardPrimerObjId;
	}
	,setReversePrimer: function(obj) {
		if(obj == null) {
			this.reversePrimerObjId = null;
		} else {
			this.reversePrimerObjId = obj.getUUID();
		}
	}
	,getReversePrimerId: function() {
		return this.reversePrimerObjId;
	}
	,getTemplateId: function() {
		return this.templateObjId;
	}
	,setTemplate: function(obj) {
		if(obj == null) {
			this.templateObjId = null;
		} else {
			this.templateObjId = obj.getUUID();
		}
	}
	,__class__: saturn.client.workspace.PCRProductWO
});
saturn.client.programs.PCRProductViewer = $hxClasses["saturn.client.programs.PCRProductViewer"] = function() {
	saturn.client.programs.DNASequenceEditor.call(this);
};
saturn.client.programs.PCRProductViewer.__name__ = ["saturn","client","programs","PCRProductViewer"];
saturn.client.programs.PCRProductViewer.__interfaces__ = [saturn.client.workspace.WorkspaceListener];
saturn.client.programs.PCRProductViewer.__super__ = saturn.client.programs.DNASequenceEditor;
saturn.client.programs.PCRProductViewer.prototype = $extend(saturn.client.programs.DNASequenceEditor.prototype,{
	emptyInit: function() {
		saturn.client.programs.DNASequenceEditor.prototype.emptyInit.call(this);
		this.getWorkspace().addListener(this);
	}
	,setActiveObject: function(objectId) {
		saturn.client.programs.DNASequenceEditor.prototype.setActiveObject.call(this,objectId);
	}
	,onFocus: function() {
		saturn.client.programs.DNASequenceEditor.prototype.onFocus.call(this);
		this.updatePCRProduct();
	}
	,serialise: function() {
		var object = saturn.client.programs.DNASequenceEditor.prototype.serialise.call(this);
		return object;
	}
	,deserialise: function(object) {
		saturn.client.programs.DNASequenceEditor.prototype.deserialise.call(this,object);
	}
	,onOutlineDrop: function(node,data,overModel,dropPosition,dropHandlers,eOpts) {
		var objectId = data.records[0].get("objectId");
		var wO = this.getWorkspace().getObject(objectId);
		if(Std["is"](wO,saturn.client.workspace.DNAWorkspaceObject)) {
			var dnaWO = this.getWorkspace().getObjectSafely(objectId,saturn.client.workspace.DNAWorkspaceObject);
			var update = false;
			var activeObject = this.getActiveObject(saturn.client.workspace.PCRProductWO);
			if(overModel.data.id == "Forward Primer") {
				activeObject.setForwardPrimer(dnaWO);
				update = true;
			} else if(overModel.data.id == "Reverse Primer") {
				activeObject.setReversePrimer(dnaWO);
				update = true;
			} else if(overModel.data.id == "Template") {
				activeObject.setTemplate(dnaWO);
				update = true;
			}
			if(update) {
				this.updatePCRProduct();
				return true;
			}
		}
		dropHandlers.cancelDrop();
		return false;
	}
	,updatePCRProduct: function() {
		if(this.getActiveObject(saturn.client.workspace.PCRProductWO) != null) {
			var activeObject = this.getActiveObject(saturn.client.workspace.PCRProductWO);
			try {
				activeObject.updateProduct();
				var sequence = activeObject.getObject().getSequence();
				if(sequence != null && sequence.length != 0) {
					this.blockChanged(null,null,0,null,sequence);
				}
			} catch( ex ) {
				if (ex instanceof js._Boot.HaxeError) ex = ex.val;
				if( js.Boot.__instanceof(ex,saturn.util.HaxeException) ) {
					js.Browser.alert(ex.getMessage());
				} else throw(ex);
			}
		}
	}
	,installOutlineTree: function() {
		var _gthis = this;
		saturn.client.programs.DNASequenceEditor.prototype.installOutlineTree.call(this);
		var webApp = saturn.client.WorkspaceApplication.getApplication();
		var dataStore = webApp.getOutlineDataStore("DEFAULT");
		var rootNode = dataStore.getRootNode();
		var fPrimerFolder = rootNode.appendChild({ text : "Forward Primer", leaf : false, expanded : true, id : "Forward Primer"});
		if(this.getActiveObject(saturn.client.workspace.PCRProductWO) != null) {
			var activeObject = this.getActiveObject(saturn.client.workspace.PCRProductWO);
			var fPrimerId = activeObject.getForwardPrimerId();
			if(fPrimerId != null) {
				var wO = this.getWorkspace().getObjectSafely(fPrimerId,saturn.client.workspace.DNAWorkspaceObject);
				var childNode = fPrimerFolder.appendChild(Ext.create("WorkspaceObject",{ text : wO.getName(), leaf : true, objectId : fPrimerId, id : fPrimerId}));
			}
		}
		var rPrimerFolder = rootNode.appendChild({ text : "Reverse Primer", leaf : false, expanded : true, id : "Reverse Primer"});
		if(this.getActiveObject(saturn.client.workspace.PCRProductWO) != null) {
			var activeObject1 = this.getActiveObject(saturn.client.workspace.PCRProductWO);
			var rPrimerId = activeObject1.getReversePrimerId();
			if(rPrimerId != null) {
				var wO1 = this.getWorkspace().getObjectSafely(rPrimerId,saturn.client.workspace.DNAWorkspaceObject);
				var childNode1 = rPrimerFolder.appendChild(Ext.create("WorkspaceObject",{ text : wO1.getName(), leaf : true, objectId : rPrimerId, id : rPrimerId}));
			}
		}
		var templateFolder = rootNode.appendChild({ text : "Template", leaf : false, expanded : true, id : "Template"});
		if(this.getActiveObject(saturn.client.workspace.PCRProductWO) != null) {
			var activeObject2 = this.getActiveObject(saturn.client.workspace.PCRProductWO);
			var templateId = activeObject2.getTemplateId();
			if(templateId != null) {
				var wO2 = this.getWorkspace().getObjectSafely(templateId,saturn.client.workspace.DNAWorkspaceObject);
				var childNode2 = templateFolder.appendChild(Ext.create("WorkspaceObject",{ text : wO2.getName(), leaf : true, objectId : templateId, id : templateId}));
			}
		}
		var contextMenu = function(view,record,item,index,event) {
			var self = _gthis;
			var objectId = record.get("objectId");
			if(objectId != "") {
				var contextMenu1 = Ext.create("Ext.menu.Menu",{ items : [{ text : "Remove ", handler : function() {
					var contextMenu2 = self.getWorkspace().getObject(objectId);
					self.objectRemoved(contextMenu2);
				}}]});
				contextMenu1.showAt(event.getXY());
				event.stopEvent();
			}
		};
		this.getApplication().getOutlineTree("DEFAULT").on("itemcontextmenu",contextMenu,this);
		this.getApplication().getOutlineTree("DEFAULT").on("itemclick",function(view1,rec,item1,index1,event1) {
			if(event1.ctrlKey) {
				contextMenu(view1,rec,item1,index1,event1);
			}
		},this);
	}
	,objectRenamed: function(object) {
		var objectId = object.getUUID();
		var wO = this.getActiveObject(saturn.client.workspace.PCRProductWO);
		var isOurs = false;
		if(objectId == wO.getForwardPrimerId()) {
			isOurs = true;
		} else if(objectId == wO.getReversePrimerId()) {
			isOurs = true;
		} else if(objectId == wO.getTemplateId()) {
			isOurs = true;
		}
		if(isOurs) {
			var node = this.getApplication().getOutlineDataStore("DEFAULT").getRootNode().findChild("objectId",objectId,true);
			var tmp = object.getName();
			node.set("text",tmp);
			node.commit();
		}
	}
	,objectAdded: function(object) {
	}
	,objectRemoved: function(object) {
		var objectId = object.getUUID();
		var isOurs = false;
		var wO = this.getActiveObject(saturn.client.workspace.PCRProductWO);
		if(wO == null) {
			return;
		}
		if(objectId == wO.getForwardPrimerId()) {
			isOurs = true;
			wO.setForwardPrimer(null);
		} else if(objectId == wO.getReversePrimerId()) {
			isOurs = true;
			wO.setReversePrimer(null);
		} else if(objectId == wO.getTemplateId()) {
			isOurs = true;
			wO.setTemplate(null);
		}
		if(isOurs) {
			var node = this.getApplication().getOutlineDataStore("DEFAULT").getRootNode().findChild("objectId",objectId,true);
			if(node != null) {
				node.parentNode.removeChild(node);
			}
		}
	}
	,__class__: saturn.client.programs.PCRProductViewer
});
saturn.client.workspace.AlleleWO = $hxClasses["saturn.client.workspace.AlleleWO"] = function(object,name) {
	if(object == null) {
		object = new saturn.core.Allele(null,null,null);
	}
	if(name == null) {
		name = "Allele";
	}
	saturn.client.workspace.PCRProductWO.call(this,object,name);
};
saturn.client.workspace.AlleleWO.__name__ = ["saturn","client","workspace","AlleleWO"];
saturn.client.workspace.AlleleWO.getNewMenuText = function() {
	return "Allele";
};
saturn.client.workspace.AlleleWO.__super__ = saturn.client.workspace.PCRProductWO;
saturn.client.workspace.AlleleWO.prototype = $extend(saturn.client.workspace.PCRProductWO.prototype,{
	serialise: function() {
		var serialisedObject = saturn.client.workspace.PCRProductWO.prototype.serialise.call(this);
		return serialisedObject;
	}
	,deserialise: function(object) {
		saturn.client.workspace.PCRProductWO.prototype.deserialise.call(this,object);
	}
	,__class__: saturn.client.workspace.AlleleWO
});
saturn.client.programs.AlleleViewer = $hxClasses["saturn.client.programs.AlleleViewer"] = function() {
	saturn.client.programs.PCRProductViewer.call(this);
};
saturn.client.programs.AlleleViewer.__name__ = ["saturn","client","programs","AlleleViewer"];
saturn.client.programs.AlleleViewer.__super__ = saturn.client.programs.PCRProductViewer;
saturn.client.programs.AlleleViewer.prototype = $extend(saturn.client.programs.PCRProductViewer.prototype,{
	plateWindowActive: null
	,wellWindowActive: null
	,elnWindowActive: null
	,statusWindowActive: null
	,emptyInit: function() {
		this.plateWindowActive = false;
		this.wellWindowActive = false;
		this.elnWindowActive = false;
		this.statusWindowActive = false;
		saturn.client.programs.PCRProductViewer.prototype.emptyInit.call(this);
		this.getWorkspace().addListener(this);
	}
	,onFocus: function() {
		var _gthis = this;
		saturn.client.programs.PCRProductViewer.prototype.onFocus.call(this);
		var app = saturn.client.WorkspaceApplication.getApplication();
		app.getFileMenu().add({ text : "Save Allele", handler : function() {
			var wO = _gthis.getActiveObject(saturn.client.workspace.PCRProductWO);
			var seq = _gthis.getSequence();
			var dnaObj = new saturn.core.DNA(seq);
			var startPosition = dnaObj.getFirstStartCodonPositionByFrame(saturn.core.GeneticCodes.STANDARD,saturn.core.Frame.ONE);
			var stopPositions = dnaObj.getStopCodonPositions(saturn.core.GeneticCodes.STANDARD,saturn.core.Frame.ONE,false);
			var stopPosition = null;
			var stopPos = stopPositions.iterator();
			while(stopPos.hasNext()) {
				var stopPos1 = stopPos.next();
				if(stopPos1 > startPosition) {
					stopPosition = stopPos1;
				}
			}
			if(stopPosition == null) {
				stopPosition = seq.length;
			}
			dnaObj = new saturn.core.DNA(seq.substring(startPosition,stopPosition));
			var proteinSeq = dnaObj.getTranslation(saturn.core.GeneticCodes.STANDARD,0,true);
			var workspace = app.getWorkspace();
			var fPrimerWO = workspace.getObjectSafely(wO.getForwardPrimerId(),saturn.client.workspace.PrimerWorkspaceObject);
			var fSequence = fPrimerWO.getPrimer().getSequence();
			var fName = fPrimerWO.getName();
			var rPrimerWO = workspace.getObjectSafely(wO.getReversePrimerId(),saturn.client.workspace.PrimerWorkspaceObject);
			var rSequence = rPrimerWO.getPrimer().getSequence();
			var rName = rPrimerWO.getName();
			var dataStore = app.getOutlineDataStore("DEFAULT");
			var rootNode = dataStore.getRootNode();
			var elnId = dataStore.getNodeById("ELN_ID").get("ELN_ID");
			var plate = dataStore.getNodeById("ALLELE_PLATE").get("PLATE");
			var well = dataStore.getNodeById("WELL_LOCATION").get("WELL");
			var status = dataStore.getNodeById("STATUS").get("STATUS");
			var entryCloneWO = workspace.getObjectSafely(wO.getTemplateId(),saturn.client.workspace.DNAWorkspaceObject);
			var json = { ALLELE_ID : wO.getName(), SEQ : seq, FSEQ : fSequence, FNAME : fName, RSEQ : rSequence, RNAME : rName, ELN : elnId, PLATE : plate, WELL : well, STATUS : status, PROTSEQ : proteinSeq, ENTRY_CLONE : entryCloneWO.getName()};
			var client = saturn.client.ICMClient.getClient();
			client.runCommand("JSON_STR='" + JSON.stringify(json) + "'\n" + "delete JSON_OBJ\n" + "read json input=JSON_STR name=\"JSON_OBJ\"\n" + "sgc.Allele.mInsertAllele(JSON_OBJ)\n",function(data) {
			});
		}});
	}
	,serialise: function() {
		var object = saturn.client.programs.PCRProductViewer.prototype.serialise.call(this);
		return object;
	}
	,deserialise: function(object) {
		saturn.client.programs.PCRProductViewer.prototype.deserialise.call(this,object);
	}
	,installOutlineTree: function() {
		saturn.client.programs.PCRProductViewer.prototype.installOutlineTree.call(this);
		var webApp = saturn.client.WorkspaceApplication.getApplication();
		var dataStore = webApp.getOutlineDataStore("DEFAULT");
		var rootNode = dataStore.getRootNode();
		rootNode.appendChild({ text : "Plate: ", leaf : true, expanded : true, id : "ALLELE_PLATE"});
		rootNode.appendChild({ text : "Well: ", leaf : true, expanded : true, id : "WELL_LOCATION"});
		rootNode.appendChild({ text : "ELN: ", leaf : true, expanded : true, id : "ELN_ID"});
		rootNode.appendChild({ text : "STATUS: ", leaf : true, expanded : true, id : "STATUS"});
	}
	,onClick: function(view,rec,item,index) {
		var _gthis = this;
		if(rec.data.id == "ALLELE_PLATE") {
			if(this.plateWindowActive == false) {
				this.plateWindowActive = true;
				try {
					var client = saturn.client.ICMClient.getClient();
					client.runCommand("params = Collection();\n" + "params['IDS']=sgc.AllelePlate.mGetPlateIds();\n",function(data) {
						_gthis.showPlateSelectionDialog(data.IDS);
					});
				} catch( ex ) {
					if (ex instanceof js._Boot.HaxeError) ex = ex.val;
					this.plateWindowActive = false;
					throw js._Boot.HaxeError.wrap(ex);
				}
			}
		} else if(rec.data.id == "WELL_LOCATION") {
			if(this.wellWindowActive == false) {
				this.wellWindowActive = true;
				try {
					this.showWellLocationDialog();
				} catch( ex1 ) {
					if (ex1 instanceof js._Boot.HaxeError) ex1 = ex1.val;
					this.wellWindowActive = false;
					throw js._Boot.HaxeError.wrap(ex1);
				}
			}
		} else if(rec.data.id == "ELN_ID") {
			if(this.elnWindowActive == false) {
				this.elnWindowActive = true;
				try {
					this.showElnDialog();
				} catch( ex2 ) {
					if (ex2 instanceof js._Boot.HaxeError) ex2 = ex2.val;
					this.elnWindowActive = false;
					throw js._Boot.HaxeError.wrap(ex2);
				}
			}
		} else if(rec.data.id == "STATUS") {
			if(this.statusWindowActive == false) {
				this.statusWindowActive = true;
				try {
					this.showStatusDialog();
				} catch( ex3 ) {
					if (ex3 instanceof js._Boot.HaxeError) ex3 = ex3.val;
					this.statusWindowActive = false;
					throw js._Boot.HaxeError.wrap(ex3);
				}
			}
		}
	}
	,showElnDialog: function() {
		var _gthis = this;
		var windowId = Ext.id(null,"UNIQUE_");
		var tId = Ext.id(null,"UNIQUE_");
		var vBoxLayout = [];
		vBoxLayout.push({ xtype : "textfield", id : tId});
		var buttonLayoutItems = [];
		buttonLayoutItems.push({ xtype : "button", text : "Save", handler : function() {
			var comp = Ext.getCmp(tId);
			var text = comp.getValue();
			var webApp = saturn.client.WorkspaceApplication.getApplication();
			var dataStore = webApp.getOutlineDataStore("DEFAULT");
			var rootNode = dataStore.getRootNode();
			var node = dataStore.getNodeById("ELN_ID");
			node.set("text","ELN: " + text);
			node.set("ELN_ID",text);
			node.commit();
			Ext.getCmp(windowId).close();
		}});
		buttonLayoutItems.push({ xtype : "button", text : "Cancel", handler : function() {
			Ext.getCmp(windowId).close();
		}});
		vBoxLayout.push({ xtype : "panel", layout : { type : "hbox", pack : "center", padding : "2px", defaultMargins : "2px"}, items : buttonLayoutItems});
		Ext.create("Ext.window.Window",{ title : "Set ELN Title", modal : true, id : windowId, layout : { type : "vbox", align : "stretch", padding : "2px"}, items : vBoxLayout, listeners : { close : function() {
			_gthis.elnWindowActive = false;
		}}}).show();
	}
	,showWellLocationDialog: function() {
		var _gthis = this;
		var windowId = Ext.id(null,"UNIQUE_");
		var cId = Ext.id(null,"UNIQUE_");
		var data = [{ NAME : "A01"},{ NAME : "A02"},{ NAME : "A03"},{ NAME : "A04"},{ NAME : "A05"},{ NAME : "A06"},{ NAME : "A07"},{ NAME : "A08"},{ NAME : "A09"},{ NAME : "A10"},{ NAME : "B01"},{ NAME : "B02"},{ NAME : "B03"},{ NAME : "B04"},{ NAME : "B05"},{ NAME : "B06"},{ NAME : "B07"},{ NAME : "B08"},{ NAME : "B09"},{ NAME : "B10"},{ NAME : "C01"},{ NAME : "C02"},{ NAME : "C03"},{ NAME : "C04"},{ NAME : "C05"},{ NAME : "C06"},{ NAME : "C07"},{ NAME : "C08"},{ NAME : "C09"},{ NAME : "C10"},{ NAME : "D01"},{ NAME : "D02"},{ NAME : "D03"},{ NAME : "D04"},{ NAME : "D05"},{ NAME : "D06"},{ NAME : "D07"},{ NAME : "D08"},{ NAME : "D09"},{ NAME : "D10"},{ NAME : "E01"},{ NAME : "E02"},{ NAME : "E03"},{ NAME : "E04"},{ NAME : "E05"},{ NAME : "E06"},{ NAME : "E07"},{ NAME : "E08"},{ NAME : "E09"},{ NAME : "E10"},{ NAME : "F01"},{ NAME : "F02"},{ NAME : "F03"},{ NAME : "F04"},{ NAME : "F05"},{ NAME : "F06"},{ NAME : "F07"},{ NAME : "F08"},{ NAME : "F09"},{ NAME : "F10"},{ NAME : "G01"},{ NAME : "G02"},{ NAME : "G03"},{ NAME : "G04"},{ NAME : "G05"},{ NAME : "G06"},{ NAME : "G07"},{ NAME : "G08"},{ NAME : "G09"},{ NAME : "G10"},{ NAME : "H01"},{ NAME : "H02"},{ NAME : "H03"},{ NAME : "H04"},{ NAME : "H05"},{ NAME : "H06"},{ NAME : "H07"},{ NAME : "H08"},{ NAME : "H09"},{ NAME : "H10"}];
		var store = Ext.create("Ext.data.Store",{ fields : ["NAME"], data : data});
		var vBoxLayout = [];
		vBoxLayout.push({ xtype : "combobox", fieldLabel : "Select well", store : store, queryMode : "local", displayField : "NAME", valueField : "NAME", id : cId, forceSelection : true});
		var buttonLayoutItems = [];
		buttonLayoutItems.push({ xtype : "button", text : "Save", handler : function() {
			var comp = Ext.getCmp(cId);
			var wellLocation = comp.getValue();
			var webApp = saturn.client.WorkspaceApplication.getApplication();
			var dataStore = webApp.getOutlineDataStore("DEFAULT");
			var rootNode = dataStore.getRootNode();
			var node = dataStore.getNodeById("WELL_LOCATION");
			node.set("text","Well: " + wellLocation);
			node.set("WELL",wellLocation);
			node.commit();
			Ext.getCmp(windowId).close();
		}});
		buttonLayoutItems.push({ xtype : "button", text : "Cancel", handler : function() {
			Ext.getCmp(windowId).close();
		}});
		vBoxLayout.push({ xtype : "panel", layout : { type : "hbox", pack : "center", padding : "2px", defaultMargins : "2px"}, items : buttonLayoutItems});
		Ext.create("Ext.window.Window",{ title : "Set well location", modal : true, id : windowId, layout : { type : "vbox", align : "stretch", padding : "2px"}, items : vBoxLayout, listeners : { close : function() {
			_gthis.wellWindowActive = false;
		}}}).show();
	}
	,showStatusDialog: function() {
		var _gthis = this;
		var windowId = Ext.id(null,"UNIQUE_");
		var cId = Ext.id(null,"UNIQUE_");
		var data = [{ NAME : "In Progress"},{ NAME : "Construct Complete"},{ NAME : "In Process"},{ NAME : "On hold"},{ NAME : "Pending"},{ NAME : "Abandoned"},{ NAME : "n/a"}];
		var store = Ext.create("Ext.data.Store",{ fields : ["NAME"], data : data});
		var vBoxLayout = [];
		vBoxLayout.push({ xtype : "combobox", fieldLabel : "Select status", store : store, queryMode : "local", displayField : "NAME", valueField : "NAME", id : cId, forceSelection : true});
		var buttonLayoutItems = [];
		buttonLayoutItems.push({ xtype : "button", text : "Save", handler : function() {
			var comp = Ext.getCmp(cId);
			var wellLocation = comp.getValue();
			var webApp = saturn.client.WorkspaceApplication.getApplication();
			var dataStore = webApp.getOutlineDataStore("DEFAULT");
			var rootNode = dataStore.getRootNode();
			var node = dataStore.getNodeById("STATUS");
			node.set("text","STATUS: " + wellLocation);
			node.set("STATUS",wellLocation);
			node.commit();
			Ext.getCmp(windowId).close();
		}});
		buttonLayoutItems.push({ xtype : "button", text : "Cancel", handler : function() {
			Ext.getCmp(windowId).close();
		}});
		vBoxLayout.push({ xtype : "panel", layout : { type : "hbox", pack : "center", padding : "2px", defaultMargins : "2px"}, items : buttonLayoutItems});
		Ext.create("Ext.window.Window",{ title : "Set well location", modal : true, id : windowId, layout : { type : "vbox", align : "stretch", padding : "2px"}, items : vBoxLayout, listeners : { close : function() {
			_gthis.statusWindowActive = false;
		}}}).show();
	}
	,showPlateSelectionDialog: function(plateNames) {
		var _gthis = this;
		var windowId = Ext.id(null,"UNIQUE_");
		var cId = Ext.id(null,"UNIQUE_");
		var plateObjs = [];
		var _g = 0;
		while(_g < plateNames.length) {
			var plateName = plateNames[_g];
			++_g;
			plateObjs.push({ NAME : plateName});
		}
		var store = Ext.create("Ext.data.Store",{ fields : ["NAME"], data : plateObjs});
		var vBoxLayout = [];
		vBoxLayout.push({ xtype : "combobox", fieldLabel : "Select plate", store : store, queryMode : "local", displayField : "NAME", valueField : "NAME", id : cId, forceSelection : true});
		var buttonLayoutItems = [];
		buttonLayoutItems.push({ xtype : "button", text : "Save", handler : function() {
			var comp = Ext.getCmp(cId);
			var plateName1 = comp.getValue();
			var webApp = saturn.client.WorkspaceApplication.getApplication();
			var dataStore = webApp.getOutlineDataStore("DEFAULT");
			var rootNode = dataStore.getRootNode();
			var node = dataStore.getNodeById("ALLELE_PLATE");
			node.set("text","Plate: " + plateName1);
			node.set("PLATE",plateName1);
			node.commit();
			Ext.getCmp(windowId).close();
		}});
		buttonLayoutItems.push({ xtype : "button", text : "Cancel", handler : function() {
			Ext.getCmp(windowId).close();
		}});
		vBoxLayout.push({ xtype : "panel", layout : { type : "hbox", pack : "center", padding : "2px", defaultMargins : "2px"}, items : buttonLayoutItems});
		Ext.create("Ext.window.Window",{ title : "Set plate name", modal : true, id : windowId, layout : { type : "vbox", align : "stretch", padding : "2px"}, items : vBoxLayout, listeners : { close : function() {
			_gthis.plateWindowActive = false;
		}}}).show();
	}
	,__class__: saturn.client.programs.AlleleViewer
});
saturn.client.programs.BasicTableViewer = $hxClasses["saturn.client.programs.BasicTableViewer"] = function() {
	this.hideTitle = false;
	this.firstBuild = true;
	saturn.client.programs.SimpleExtJSProgram.call(this);
};
saturn.client.programs.BasicTableViewer.__name__ = ["saturn","client","programs","BasicTableViewer"];
saturn.client.programs.BasicTableViewer.__super__ = saturn.client.programs.SimpleExtJSProgram;
saturn.client.programs.BasicTableViewer.prototype = $extend(saturn.client.programs.SimpleExtJSProgram.prototype,{
	theComponent: null
	,table: null
	,firstBuild: null
	,hideTitle: null
	,emptyInit: function() {
		var _gthis = this;
		saturn.client.programs.SimpleExtJSProgram.prototype.emptyInit.call(this);
		this.theComponent = Ext.create("Ext.panel.Panel",{ width : "100%", flex : 2, layout : "fit", listeners : { "render" : function() {
			_gthis.initialiseDOMComponent();
		}}});
	}
	,initialiseDOMComponent: function() {
		saturn.client.programs.SimpleExtJSProgram.prototype.initialiseDOMComponent.call(this);
		var colDefs = [{ text : "Residue", dataIndex : "residue", editor : "textfield"},{ text : "Construct", dataIndex : "construct", editor : "textfield"},{ text : "PDB", dataIndex : "pdb", editor : "textfield"}];
		var data = [{ "residue" : "A", "construct" : "1", "pdb" : "1"},{ "residue" : "T", "construct" : "1", "pdb" : "1"},{ "residue" : "G", "construct" : "0", "pdb" : "1"}];
		this.table = new saturn.client.programs.blocks.BaseTable(colDefs,data,"Data",null,this.hideTitle);
		this.table.setEditListener(function() {
		});
	}
	,getUpdatedTable: function() {
		var data = this.getTable().getData();
		var table = this.getObject();
		table.updateData(data);
		return table;
	}
	,onFocus: function() {
		var _gthis = this;
		saturn.client.programs.SimpleExtJSProgram.prototype.onFocus.call(this);
		this.getApplication().getToolBar().add({ iconCls : "x-btn-export", text : "Export", handler : function() {
			_gthis.table.exportToFile(_gthis.getObject().getName());
		}});
		this.getApplication().getEditMenu().add({ text : "Click me", handler : function() {
			_gthis.getApplication().showMessage("Menu","You clicked me!");
		}});
		this.getApplication().hideMiddleSouthPanel();
		if(this.table != null && this.table.getComponent() != null) {
			this.updateTable(this.getUpdatedTable());
		}
	}
	,onBlur: function() {
		saturn.client.programs.SimpleExtJSProgram.prototype.onBlur.call(this);
		this.getUpdatedTable();
	}
	,setActiveObject: function(objectId) {
		saturn.client.programs.SimpleExtJSProgram.prototype.setActiveObject.call(this,objectId);
		var obj = saturn.client.programs.SimpleExtJSProgram.prototype.getActiveObject.call(this,null);
		this.updateTable(obj);
	}
	,updateTable: function(obj) {
		this.setTitle(obj.getName());
		this.table.setErrorColumns(obj.getErrorColumns());
		this.table.reconfigure(obj.tableDefinition);
		this.table.setFixedRowHeight(obj.getFixedRowHeight());
		if(this.firstBuild) {
			this.firstBuild = false;
			this.getComponent().add(this.table.getComponent());
		}
	}
	,setTitle: function(title) {
		this.theComponent.setTitle(title);
	}
	,getComponent: function() {
		return this.theComponent;
	}
	,getTable: function() {
		return this.table;
	}
	,saveWait: function(cb) {
		this.getUpdatedTable();
		cb();
	}
	,__class__: saturn.client.programs.BasicTableViewer
});
saturn.client.programs.ComplexHelper = $hxClasses["saturn.client.programs.ComplexHelper"] = function() {
	saturn.client.programs.BasicTableViewer.call(this);
};
saturn.client.programs.ComplexHelper.__name__ = ["saturn","client","programs","ComplexHelper"];
saturn.client.programs.ComplexHelper.getQuickLaunchItems = function() {
	return [{ iconCls : "x-btn-protein", html : "Complex<br/>Helper", cls : "quickLaunchButton", handler : function() {
		saturn.client.WorkspaceApplication.getApplication().getWorkspace().addObject(new saturn.core.ComplexPlan(true),true);
	}, tooltip : { dismissDelay : 10000, text : "Design Complexes"}}];
};
saturn.client.programs.ComplexHelper.__super__ = saturn.client.programs.BasicTableViewer;
saturn.client.programs.ComplexHelper.prototype = $extend(saturn.client.programs.BasicTableViewer.prototype,{
	onFocus: function() {
		var _gthis = this;
		saturn.client.programs.BasicTableViewer.prototype.onFocus.call(this);
		this.getApplication().getToolBar().add({ iconCls : "x-btn-calculate", text : "Generate IDs", handler : function() {
			var table = _gthis.getComplexTable();
			table.generateIds(function(error) {
				if(error != null) {
					saturn.client.WorkspaceApplication.getApplication().showMessage("Upload Error",error);
				} else {
					_gthis.updateTable(table);
				}
			});
		}});
		this.getApplication().getToolBar().add({ iconCls : "x-btn-calculate", text : "Save", handler : function() {
			var table1 = _gthis.getComplexTable();
			table1.save(function(error1) {
				if(error1 != null) {
					saturn.client.WorkspaceApplication.getApplication().showMessage("Upload Error",error1);
				} else {
					_gthis.updateTable(table1);
					saturn.client.WorkspaceApplication.getApplication().showMessage("Complex Targets Generated","Complex Targets Generated");
				}
			});
		}});
	}
	,getComplexTable: function() {
		return js.Boot.__cast(this.getUpdatedTable() , saturn.core.ComplexPlan);
	}
	,__class__: saturn.client.programs.ComplexHelper
});
saturn.client.workspace.CompoundWO = $hxClasses["saturn.client.workspace.CompoundWO"] = function(object,name) {
	if(object == null) {
		object = new saturn.core.domain.Compound();
	}
	if(name == null) {
		name = "Compound";
	}
	this.iconPath = "/static/js/images/compound_16.png";
	saturn.client.workspace.WorkspaceObjectBase.call(this,object,name);
};
saturn.client.workspace.CompoundWO.__name__ = ["saturn","client","workspace","CompoundWO"];
saturn.client.workspace.CompoundWO.getNewMenuText = function() {
	return "Compound";
};
saturn.client.workspace.CompoundWO.getDefaultFolderName = function() {
	return "Compound";
};
saturn.client.workspace.CompoundWO.__super__ = saturn.client.workspace.WorkspaceObjectBase;
saturn.client.workspace.CompoundWO.prototype = $extend(saturn.client.workspace.WorkspaceObjectBase.prototype,{
	__class__: saturn.client.workspace.CompoundWO
});
saturn.client.programs.CompoundViewer = $hxClasses["saturn.client.programs.CompoundViewer"] = function(editor) {
	this.lastSmilesImport = null;
	this.up = false;
	this.loaded = false;
	if(editor == null) {
		this.editor = saturn.client.programs.CompoundEditor.Ketcher;
	} else {
		this.editor = editor;
	}
	saturn.client.programs.SimpleExtJSProgram.call(this);
};
saturn.client.programs.CompoundViewer.__name__ = ["saturn","client","programs","CompoundViewer"];
saturn.client.programs.CompoundViewer.getQuickLaunchItems = function() {
	return [{ iconCls : "x-btn-compound", text : "CompoundViewer", cls : "quickLaunchButton", handler : function() {
		saturn.client.WorkspaceApplication.getApplication().getWorkspace().addObject(new saturn.client.workspace.CompoundWO(null,null),true);
	}}];
};
saturn.client.programs.CompoundViewer.parseFile = function(file,cb,asNewOpenProgram) {
	if(asNewOpenProgram == null) {
		asNewOpenProgram = true;
	}
	var extension = saturn.client.core.CommonCore.getFileExtension(file.name);
	if(extension == "sdf") {
		saturn.client.core.CommonCore.getFileAsText(file,function(contents) {
			if(contents != null) {
				var molBlock = "";
				var rdkit = RDKit;
				var lines = contents.split("\n");
				var endOfMol = "$" + "$" + "$" + "$";
				var auto_open = true;
				var _g = 0;
				while(_g < lines.length) {
					var line = lines[_g];
					++_g;
					molBlock += line + "\n";
					if(line.indexOf(endOfMol) >= 0) {
						var compound = new saturn.core.domain.Compound();
						compound.sdf = molBlock;
						var name = "Unknown";
						var mol = rdkit.Molecule.MolBlockToMol(compound.sdf);
						var molLines = compound.sdf.split("\n");
						var property_reg = new EReg(">\\s+<(.+)>","");
						var property = null;
						var _g1 = 0;
						while(_g1 < molLines.length) {
							var molLine = molLines[_g1];
							++_g1;
							if(property != null) {
								mol.setProp(property,molLine);
								if(property == "CompoundID" || property == "ID" || property == "SupplierID") {
									name = molLine;
								}
								property = null;
							} else if(property_reg.match(molLine)) {
								property = property_reg.matched(1);
							}
						}
						compound.smiles = mol.toSmiles();
						saturn.client.WorkspaceApplication.getApplication().getWorkspace().addObject(new saturn.client.workspace.CompoundWO(compound,name),auto_open);
						auto_open = false;
						molBlock = "";
					}
				}
			}
		});
	}
};
saturn.client.programs.CompoundViewer.__super__ = saturn.client.programs.SimpleExtJSProgram;
saturn.client.programs.CompoundViewer.prototype = $extend(saturn.client.programs.SimpleExtJSProgram.prototype,{
	theComponent: null
	,molEditor: null
	,editor: null
	,loaded: null
	,up: null
	,lastSmilesImport: null
	,emptyInit: function() {
		var _gthis = this;
		saturn.client.programs.SimpleExtJSProgram.prototype.emptyInit.call(this);
		var tagType = null;
		if(saturn.client.programs.CompoundEditor.Molsoft == this.editor) {
			tagType = "div";
		} else if(saturn.client.programs.CompoundEditor.Ketcher == this.editor) {
			tagType = "iframe";
		}
		this.theComponent = Ext.create("Ext.panel.Panel",{ width : "100%", height : "95%", autoScroll : true, region : "center", items : [{ xtype : "component", region : "north", autoEl : { tag : tagType}, listeners : { "afterrender" : function() {
			_gthis.installEditor();
		}}, flex : 1}], listeners : { "render" : function() {
			_gthis.initialiseDOMComponent();
		}}});
	}
	,initialiseDOMComponent: function() {
		saturn.client.programs.SimpleExtJSProgram.prototype.initialiseDOMComponent.call(this);
	}
	,installEditor: function() {
		var _gthis = this;
		var dom = this.getComponent().down("component").getEl().dom;
		var id = dom.id;
		if(this.editor == saturn.client.programs.CompoundEditor.Molsoft) {
			this.molEditor = new MolEdit.ChemicalView("",id, 600, 400 );
			var applyStyle = null;
			applyStyle = function() {
				var tableElems = dom.getElementsByTagName("table");
				if(tableElems != null && tableElems.length > 0) {
					tableElems[0].style.margin = "0 auto";
				} else {
					haxe.Timer.delay(applyStyle,1000);
				}
			};
			applyStyle();
			this.up = true;
			if(this.getObject() != null) {
				this.render();
			}
		} else if(this.editor == saturn.client.programs.CompoundEditor.Ketcher) {
			var iframe = dom;
			iframe.setAttribute("src","js/ketcher/ketcher.html");
			iframe.setAttribute("width","100%");
			iframe.setAttribute("height","100%");
			iframe.style.width = "100%";
			iframe.style.height = "100%";
			iframe.style.position = "absolute";
			iframe.style.border = "none";
			var waitForLoad = null;
			waitForLoad = function() {
				var ui = null;
				if('contentDocument' in iframe) {
					_gthis.molEditor = iframe.contentWindow.ketcher;
					ui = iframe.contentWindow.ui;
				} else {
					var d_document = js.Browser.get_document();
					_gthis.molEditor = iframe.window.ketcher;
					ui = iframe.window.ui;
				}
				if(ui != null && ui.initialized == true) {
					_gthis.up = true;
					if(_gthis.getObject() != null) {
						haxe.Timer.delay($bind(_gthis,_gthis.render),100);
					}
				} else {
					haxe.Timer.delay(waitForLoad,100);
				}
			};
			waitForLoad();
		}
	}
	,onFocus: function() {
		saturn.client.programs.SimpleExtJSProgram.prototype.onFocus.call(this);
		this.getApplication().enableProgramSearchField(true);
		this.getApplication().hideMiddleSouthPanel();
		this.getApplication().installOutlineTree("MODELS",true,false,"WorkspaceObject","GRID");
		if(this.getActiveObjectId() != null) {
			var compound = this.getActiveObjectObject();
			this.addModelToOutline(compound,true);
			if(!this.loaded) {
				this.render();
				this.loaded = true;
			}
		}
	}
	,setActiveObject: function(objectId) {
		saturn.client.programs.SimpleExtJSProgram.prototype.setActiveObject.call(this,objectId);
		var w0 = js.Boot.__cast(saturn.client.programs.SimpleExtJSProgram.prototype.getActiveObject.call(this,saturn.client.workspace.CompoundWO) , saturn.client.workspace.CompoundWO);
		var obj = js.Boot.__cast(w0.getObject() , saturn.core.domain.Compound);
		this.setTitle(w0.getName());
		if(this.getActiveObjectObject() != null && this.up) {
			this.render();
		}
	}
	,render: function() {
		this.loaded = true;
		var compound = this.getActiveObjectObject();
		if(compound.sdf != null) {
			this.setCompoundInEditor(compound.sdf);
		}
		this.addModelToOutline(compound,true);
	}
	,setCompoundInEditor: function(molBlock) {
		if(this.editor == saturn.client.programs.CompoundEditor.Molsoft) {
			this.molEditor.importFromString(molBlock);
		} else if(this.editor == saturn.client.programs.CompoundEditor.Ketcher) {
			this.molEditor.setMolecule(molBlock);
		}
	}
	,setTitle: function(title) {
		this.theComponent.setTitle(title);
	}
	,getComponent: function() {
		return this.theComponent;
	}
	,saveWait: function(cb) {
		var obj = this.getActiveObjectObject();
		obj.sdf = this.getMolBlockFromEditor();
		cb();
	}
	,getMolBlockFromEditor: function() {
		if(this.editor == saturn.client.programs.CompoundEditor.Molsoft) {
			return this.molEditor.getMolfile();
		} else if(this.editor == saturn.client.programs.CompoundEditor.Ketcher) {
			return this.molEditor.getMolfile();
		} else {
			return null;
		}
	}
	,openFile: function(file,asNew,asNewOpenProgram) {
		if(asNewOpenProgram == null) {
			asNewOpenProgram = true;
		}
		saturn.client.programs.CompoundViewer.parseFile(file,function(contents) {
		},asNewOpenProgram);
	}
	,search: function(str) {
		saturn.client.programs.SimpleExtJSProgram.prototype.search.call(this,str);
		if(str != null && str != "" && this.lastSmilesImport != str) {
			this.lastSmilesImport = str;
			var rdkit = RDKit;
			var mol = rdkit.Molecule.fromSmiles(str);
			if(mol != null) {
				mol.compute2DCoords();
				var molBlock = mol.toMolfile();
				this.getObject().sdf = molBlock;
				this.setCompoundInEditor(molBlock);
			}
		}
	}
	,saveObject: function(cb) {
		var molBlock = this.getMolBlockFromEditor();
		var compound = this.getObject();
		compound.sdf = molBlock;
		var rdkit = RDKit;
		var mol = rdkit.Molecule.MolBlockToMol(compound.sdf);
		compound.smiles = mol.toSmiles();
		saturn.client.programs.SimpleExtJSProgram.prototype.saveObject.call(this,cb);
	}
	,__class__: saturn.client.programs.CompoundViewer
});
saturn.client.programs.CompoundEditor = $hxClasses["saturn.client.programs.CompoundEditor"] = { __ename__ : ["saturn","client","programs","CompoundEditor"], __constructs__ : ["Molsoft","Ketcher"] };
saturn.client.programs.CompoundEditor.Molsoft = ["Molsoft",0];
saturn.client.programs.CompoundEditor.Molsoft.toString = $estr;
saturn.client.programs.CompoundEditor.Molsoft.__enum__ = saturn.client.programs.CompoundEditor;
saturn.client.programs.CompoundEditor.Ketcher = ["Ketcher",1];
saturn.client.programs.CompoundEditor.Ketcher.toString = $estr;
saturn.client.programs.CompoundEditor.Ketcher.__enum__ = saturn.client.programs.CompoundEditor;
saturn.client.workspace.ConsoleWO = $hxClasses["saturn.client.workspace.ConsoleWO"] = function(object,name) {
	if(object == null) {
		object = { };
	}
	if(name == null) {
		name = "Console";
	}
	saturn.client.workspace.WorkspaceObjectBase.call(this,object,name);
};
saturn.client.workspace.ConsoleWO.__name__ = ["saturn","client","workspace","ConsoleWO"];
saturn.client.workspace.ConsoleWO.getNewMenuText = function() {
	return "Console";
};
saturn.client.workspace.ConsoleWO.__super__ = saturn.client.workspace.WorkspaceObjectBase;
saturn.client.workspace.ConsoleWO.prototype = $extend(saturn.client.workspace.WorkspaceObjectBase.prototype,{
	__class__: saturn.client.workspace.ConsoleWO
});
saturn.client.programs.ConsoleViewer = $hxClasses["saturn.client.programs.ConsoleViewer"] = function() {
	saturn.client.programs.SimpleExtJSProgram.call(this);
};
saturn.client.programs.ConsoleViewer.__name__ = ["saturn","client","programs","ConsoleViewer"];
saturn.client.programs.ConsoleViewer.__super__ = saturn.client.programs.SimpleExtJSProgram;
saturn.client.programs.ConsoleViewer.prototype = $extend(saturn.client.programs.SimpleExtJSProgram.prototype,{
	theComponent: null
	,listener: null
	,emptyInit: function() {
		var _gthis = this;
		saturn.client.programs.SimpleExtJSProgram.prototype.emptyInit.call(this);
		this.theComponent = Ext.create("Ext.Container",{ width : "100%", height : "300", autoScroll : false, autoEl : { tag : "div", html : ""}});
		this.getWorkspace().addListener(this);
		this.listener = function(data) {
			var tmp = _gthis.getDomElement().innerHTML + "<br/>" + Std.string(data.event) + "\t";
			var tmp1 = Std.string(data.trigger);
			_gthis.getDomElement().innerHTML = tmp + tmp1;
		};
		saturn.client.core.ClientCore.getClientCore().registerListener("global.event",this.listener);
	}
	,getDomElement: function() {
		return this.theComponent.getEl().down("div[id*=innerCt]").dom;
	}
	,close: function() {
		saturn.client.core.ClientCore.getClientCore().removeListener("global.event",this.listener);
	}
	,setTitle: function(title) {
		if(this.theComponent.tab != null) {
			this.theComponent.tab.setText(title);
		}
	}
	,getComponent: function() {
		return this.theComponent;
	}
	,setActiveObject: function(objectId) {
		saturn.client.programs.SimpleExtJSProgram.prototype.setActiveObject.call(this,objectId);
		this.setTitle(this.getActiveObjectName());
	}
	,__class__: saturn.client.programs.ConsoleViewer
});
saturn.client.programs.ConstructDesigner = $hxClasses["saturn.client.programs.ConstructDesigner"] = function() {
	saturn.client.programs.BasicTableViewer.call(this);
};
saturn.client.programs.ConstructDesigner.__name__ = ["saturn","client","programs","ConstructDesigner"];
saturn.client.programs.ConstructDesigner.getQuickLaunchItems = function() {
	var tmp = Ext.create("Ext.menu.Menu",{ items : { text : "BRD1A Example", handler : function() {
		var table = new saturn.core.ConstructDesignTable(true);
		saturn.client.WorkspaceApplication.getApplication().getWorkspace().addObject(table,true);
	}}});
	return [{ iconCls : "x-btn-conical-dna", html : "Construct<br/>Designer", tooltip : { dismissDelay : 10000, text : "Manually specify start and end construct boundaries to design constructs"}, cls : "quickLaunchButton", menu : tmp, handler : function() {
		var table1 = new saturn.core.ConstructDesignTable(false);
		saturn.client.WorkspaceApplication.getApplication().getWorkspace().addObject(table1,true);
	}, listeners : { mouseover : function() {
		if(!this.hasVisibleMenu()) {
			this.showMenu();
		}
	}}}];
};
saturn.client.programs.ConstructDesigner.__super__ = saturn.client.programs.BasicTableViewer;
saturn.client.programs.ConstructDesigner.prototype = $extend(saturn.client.programs.BasicTableViewer.prototype,{
	initialiseDOMComponent: function() {
		var _gthis = this;
		saturn.client.programs.BasicTableViewer.prototype.initialiseDOMComponent.call(this);
		this.table.addCustomContextItem({ text : "Show construct alignment", handler : function(rowIndex) {
			var model = _gthis.table.store.getAt(rowIndex);
			var val = model.get("Entry Clone");
			if(val == null) {
				_gthis.getApplication().showMessage("Missing entry clone ID","Please enter the entry clone ID first");
				return;
			}
			var target = val.split("-")[0];
			_gthis.showAlignment(target);
		}});
	}
	,showAlignment: function(target) {
		var objectId = this.getActiveObjectId();
		var parentFolder = this.getWorkspace().getParentFolder(objectId);
		var folder = parentFolder.findChild("text",target);
		if(folder != null) {
			this.getWorkspace().removeItem(folder.getId());
		}
		folder = this.getWorkspace()._addFolder(target,parentFolder);
		var constructs = [];
		var n = Std["int"](this.table.store.data.length - 1);
		var _g1 = 0;
		var _g = n;
		while(_g1 < _g) {
			var i = _g1++;
			var model = this.table.store.getAt(i);
			var constructId = model.get("Construct ID");
			if(constructId == null) {
				if(model.get("Start") == null || model.get("Stop") == null || model.get("Entry Clone") == null) {
					continue;
				}
				constructId = Std.string(model.get("Entry Clone")) + "_" + Std.string(model.get("Start")) + "-" + Std.string(model.get("Stop"));
			}
			if(constructId.split("-")[0] == target) {
				var seq = model.get("Construct Protein (no tag)");
				if(seq == null) {
					continue;
				}
				var protObj = new saturn.core.Protein(seq);
				protObj.setMoleculeName(constructId);
				var construct = new saturn.core.domain.SgcConstruct();
				construct.constructId = constructId;
				construct.proteinSeqNoTag = seq;
				construct.status = "No progress";
				constructs.push(construct);
				this.getWorkspace().addObject(protObj,false,folder);
			}
		}
		var sum = new saturn.client.programs.blocks.TargetSummary(target);
		sum.setSequences(constructs);
		sum.setParentFolder(folder);
		sum.getTargetSequence();
	}
	,onFocus: function() {
		var _gthis = this;
		this.getApplication().getToolBar().add({ iconCls : "x-btn-calculate", text : "Prepare", handler : function() {
			_gthis.prepare();
		}});
		this.getApplication().getToolBar().add({ iconCls : "x-btn-save", text : "Save", handler : function() {
			_gthis.saveNew();
		}});
		this.getApplication().getToolsMenu().add({ iconCls : "x-btn-calculate", text : "Calculate", handler : function() {
			_gthis.calculate();
		}});
		this.getApplication().getToolsMenu().add({ iconCls : "x-btn-calculate", text : "Generate IDs", handler : function() {
			_gthis.generateids();
		}});
		this.getApplication().getToolsMenu().add({ iconCls : "x-btn-calculate", text : "Assign Wells", handler : function() {
			_gthis.assignWells();
		}});
		this.getApplication().getToolBar().add({ iconCls : "x-btn-copy", text : "Duplicate & Change Vector", handler : function() {
			_gthis.duplicateAndChangeVector();
		}});
		saturn.client.programs.BasicTableViewer.prototype.onFocus.call(this);
	}
	,calculate: function() {
		var _gthis = this;
		var table = js.Boot.__cast(this.getUpdatedTable() , saturn.core.ConstructDesignTable);
		table.calculate(function() {
			_gthis.updateTable(table);
		});
	}
	,duplicateAndChangeVector: function() {
		var _gthis = this;
		var table = js.Boot.__cast(this.getUpdatedTable() , saturn.core.ConstructDesignTable);
		this.getApplication().userValuePrompt("New Vector Name","Enter name of new vector",function(vectorName) {
			table.duplicateAndChangeVector(vectorName,function() {
				_gthis.updateTable(table);
			});
		},function() {
		});
	}
	,saveNew: function() {
		var _gthis = this;
		var table = js.Boot.__cast(this.getUpdatedTable() , saturn.core.ConstructDesignTable);
		table.saveNew(function(err) {
			if(err != null) {
				_gthis.getApplication().showMessage("Save failure","Save failure " + err);
			} else {
				_gthis.getApplication().showMessage("Saved","All records saved");
			}
		});
	}
	,fetchAll: function() {
		var _gthis = this;
		var table = js.Boot.__cast(this.getUpdatedTable() , saturn.core.ConstructDesignTable);
		table.fetchall(function() {
			_gthis.updateTable(table);
		});
	}
	,generateids: function() {
		var _gthis = this;
		var table = js.Boot.__cast(this.getUpdatedTable() , saturn.core.ConstructDesignTable);
		table.generateids(function(err) {
			if(err != null) {
				_gthis.getApplication().showMessage("ID generation failure",err);
			} else {
				_gthis.updateTable(table);
			}
		});
	}
	,assignWells: function() {
		var _gthis = this;
		var table = js.Boot.__cast(this.getUpdatedTable() , saturn.core.ConstructDesignTable);
		table.assignWells(function(err) {
			if(err != null) {
				_gthis.getApplication().showMessage("ID generation failure",err);
			} else {
				_gthis.updateTable(table);
			}
		});
	}
	,prepare: function() {
		var _gthis = this;
		var table = js.Boot.__cast(this.getUpdatedTable() , saturn.core.ConstructDesignTable);
		table.prepare(function(err) {
			if(err != null) {
				_gthis.getApplication().showMessage("Error preparing",err);
			} else {
				_gthis.updateTable(table);
			}
		});
	}
	,__class__: saturn.client.programs.ConstructDesigner
});
saturn.client.workspace.CrystalHelperDataWO = $hxClasses["saturn.client.workspace.CrystalHelperDataWO"] = function(object,name) {
	if(object == null) {
		object = new saturn.core.CrystalHelperData();
	}
	if(name == null) {
		name = "Crystal Helper";
	}
	saturn.client.workspace.WorkspaceObjectBase.call(this,object,name);
};
saturn.client.workspace.CrystalHelperDataWO.__name__ = ["saturn","client","workspace","CrystalHelperDataWO"];
saturn.client.workspace.CrystalHelperDataWO.getNewMenuText = function() {
	return "Crystal Helper";
};
saturn.client.workspace.CrystalHelperDataWO.__super__ = saturn.client.workspace.WorkspaceObjectBase;
saturn.client.workspace.CrystalHelperDataWO.prototype = $extend(saturn.client.workspace.WorkspaceObjectBase.prototype,{
	serialise: function() {
		var serialisedObject = saturn.client.workspace.WorkspaceObjectBase.prototype.serialise.call(this);
		serialisedObject.DATA = { "DATA" : this.object.getData()};
		return serialisedObject;
	}
	,deserialise: function(object) {
		saturn.client.workspace.WorkspaceObjectBase.prototype.deserialise.call(this,object);
		var obj = new saturn.core.CrystalHelperData();
		obj.setData(object.DATA.DATA);
		this.setObject(obj);
	}
	,__class__: saturn.client.workspace.CrystalHelperDataWO
});
saturn.client.programs.CrystalHelper = $hxClasses["saturn.client.programs.CrystalHelper"] = function() {
	this.pageUrl = "";
	this.internalFrameId = "INTERNAL_FRAME";
	saturn.client.programs.SimpleExtJSProgram.call(this);
	this.emptyInit();
};
saturn.client.programs.CrystalHelper.__name__ = ["saturn","client","programs","CrystalHelper"];
saturn.client.programs.CrystalHelper.__super__ = saturn.client.programs.SimpleExtJSProgram;
saturn.client.programs.CrystalHelper.prototype = $extend(saturn.client.programs.SimpleExtJSProgram.prototype,{
	theComponent: null
	,theTable: null
	,internalFrameId: null
	,pageUrl: null
	,emptyInit: function() {
		saturn.client.programs.SimpleExtJSProgram.prototype.emptyInit.call(this);
		var self = this;
		Ext.create("Ext.data.Store",{ storeId : "crystalStore", fields : ["ROWNUMBER","XTAL_MOUNT_ID","SCREENNUMBER","TRASH","QUALITY","POSITION","NAME","PINID"]});
		this.theComponent = Ext.create("Ext.panel.Panel",{ title : "Crystal Helper", width : "100%", height : "95%", autoScroll : true, layout : { type : "vbox", align : "stretch", pack : "start"}, items : [{ region : "center", xtype : "button", text : "Save", handler : function() {
			self.update();
		}},{ region : "center", xtype : "button", text : "Refresh", handler : function() {
			self.refresh(true);
		}}], listeners : { "render" : function(obj) {
			self.theComponent = obj;
			self.initialiseDOMComponent();
		}}});
	}
	,initialiseDOMComponent: function() {
		saturn.client.programs.SimpleExtJSProgram.prototype.initialiseDOMComponent.call(this);
		var me = this;
		haxe.Timer.delay(function() {
			me.completeSetup();
		},2000);
	}
	,completeSetup: function() {
		var _gthis = this;
		var icmClient = saturn.client.ICMClient.getClient();
		var self = this;
		var data = function(data1) {
			var puckList = data1.jsonTable;
			Ext.create("Ext.data.Store",{ storeId : "puckStore", fields : ["Puck_Name"], data : puckList, pageSize : 1000});
			var puckComboDef = { xtype : "combo", store : Ext.data.StoreManager.lookup("puckStore"), displayField : "Puck_Name", valueField : "Puck_Name", queryMode : "local", editable : false};
			Ext.create("Ext.data.Store",{ storeId : "positionStore", fields : ["position"], data : [{ "position" : "1"},{ "position" : "2"},{ "position" : "3"},{ "position" : "4"},{ "position" : "5"},{ "position" : "6"},{ "position" : "7"},{ "position" : "8"},{ "position" : "9"},{ "position" : "10"},{ "position" : "11"},{ "position" : "12"},{ "position" : "13"},{ "position" : "14"},{ "position" : "15"},{ "position" : "16"},{ "position" : ""}]});
			var positionComboDef = { xtype : "combo", store : Ext.data.StoreManager.lookup("positionStore"), displayField : "position", valueField : "position", queryMode : "local", editable : false};
			var tableColumns = [{ header : "Crystal ID", dataIndex : "XTAL_MOUNT_ID", flex : 1},{ header : "Screen Number", dataIndex : "SCREENNUMBER", flex : 1},{ header : "Trash", dataIndex : "TRASH", flex : 1},{ header : "Quality", dataIndex : "QUALITY", flex : 1},{ header : "Pin ID", dataIndex : "PINID", flex : 1},{ header : "Position", dataIndex : "POSITION", editor : positionComboDef, flex : 1},{ header : "Name", dataIndex : "NAME", editor : puckComboDef, flex : 1}];
			var data2 = [Ext.create("Ext.grid.plugin.CellEditing",{ clicksToEdit : 1})];
			var data3 = Ext.data.StoreManager.lookup("crystalStore");
			self.theTable = Ext.create("Ext.grid.Panel",{ selType : "cellmodel", plugins : data2, width : "100%", height : "95%", flex : 1, autoScroll : true, layout : "fit", region : "south", store : data3, columns : tableColumns, listeners : { "render" : function() {
				_gthis.refresh(false);
			}}});
			self.theComponent.add(self.theTable);
		};
		icmClient.runCommand("sgc.CrystalHelper.showQueries()\n" + "jsonTable = sgc.CrystalHelper.getPuckTable();\n" + "params['jsonTable']=jsonTable;\n",data);
	}
	,refresh: function(isRefresh) {
		var _gthis = this;
		saturn.client.ICMClient.getClient().runCommand("jsonTable = sgc.CrystalHelper.getHelperTable();\n" + "params = Collection('jsonTable',jsonTable);\n",function(data,err) {
			if(err == null) {
				var jsonTable = data.jsonTable;
				Ext.data.StoreManager.lookup("crystalStore").loadData(jsonTable,false);
				if(isRefresh) {
					_gthis.getApplication().showMessage("Crystal Helper","Refreshed view");
				}
			} else {
				_gthis.getApplication().showMessage("Crystal Helper","An error has occurred refreshing the view");
			}
		});
	}
	,onFocus: function() {
		saturn.client.programs.SimpleExtJSProgram.prototype.onFocus.call(this);
		if(this.isNaked()) {
			return;
		}
		var me = this;
		this.getApplication().getFileMenu().add({ text : "Update", handler : function() {
			me.update();
		}});
	}
	,update: function() {
		var _gthis = this;
		var crystalStore = Ext.data.StoreManager.lookup("crystalStore");
		var objList = [];
		var records = [];
		var _g1 = 0;
		var _g = crystalStore.getCount();
		while(_g1 < _g) {
			var i = _g1++;
			var record = crystalStore.getAt(i);
			var obj = { "PINID" : record.get("PINID"), "NAME" : record.get("NAME"), "POSITION" : record.get("POSITION")};
			if(record.dirty) {
				objList.push(obj);
				records.push(record);
			}
		}
		var pinCount = objList.length;
		if(pinCount == 0) {
			this.getApplication().showMessage("Crystal Helper","No pins to update!");
			return;
		}
		var jsonStr = JSON.stringify(objList);
		var icmClient = saturn.client.ICMClient.getClient();
		var icmSetCommand = icmClient.generateSetStringCommand("JSON_STR",jsonStr);
		icmClient.runCommand(icmSetCommand + "delete JSON_OBJ\n" + "read json input=JSON_STR name=\"JSON_OBJ\"\n" + "sgc.CrystalHelper.updatePinInfo(JSON_OBJ)\n",function(data,ex) {
			if(ex != null) {
				_gthis.getApplication().showMessage("Crystal Helper Exception","An error has occurred during save, please contact your Scarab administrator<br/>" + ex.message);
			} else {
				var plural = "";
				if(pinCount > 1) {
					plural = "s";
				}
				_gthis.getApplication().showMessage("Crystal Helper","Successfully updated " + pinCount + " pin location" + plural);
				var _g2 = 0;
				while(_g2 < records.length) {
					var record1 = records[_g2];
					++_g2;
					record1.commit();
				}
			}
		});
	}
	,setActiveObject: function(objectId) {
	}
	,setTitle: function(title) {
		this.theComponent.setTitle(title);
	}
	,getComponent: function() {
		return this.theComponent;
	}
	,__class__: saturn.client.programs.CrystalHelper
});
saturn.client.programs.sequenceeditor.AnnotationEditorBlock = $hxClasses["saturn.client.programs.sequenceeditor.AnnotationEditorBlock"] = function(blockNumber,sequenceEditor,annotationNumber) {
	this.sequenceEditor = sequenceEditor;
	this.annotationNumber = annotationNumber;
	this.initialise(blockNumber);
};
saturn.client.programs.sequenceeditor.AnnotationEditorBlock.__name__ = ["saturn","client","programs","sequenceeditor","AnnotationEditorBlock"];
saturn.client.programs.sequenceeditor.AnnotationEditorBlock.prototype = {
	elem: null
	,sequenceEditor: null
	,annotationNumber: null
	,bNum: null
	,getElement: function() {
		return this.elem;
	}
	,getSequenceEditor: function() {
		return this.sequenceEditor;
	}
	,createElement: function() {
		this.elem = js.Browser.get_document().createElement("pre");
	}
	,installListeners: function() {
		var _gthis = this;
		var me = this;
		this.elem.onblur = function() {
			me.getSequenceEditor().onBlockBlur(_gthis.elem);
		};
		this.elem.onmousedown = function(event) {
			if(event.button > 1) {
				return;
			}
			me.getSequenceEditor().makeAnnotationSelectable(me.annotationNumber);
		};
		this.elem.onmouseup = function() {
		};
		this.elem.onmousemove = function() {
		};
	}
	,destroy: function() {
		this.sequenceEditor = null;
		this.elem.onblur = null;
		this.elem.onmousedown = null;
		this.elem.onmouseup = null;
		this.elem.onmousemove = null;
	}
	,initialise: function(blockNumber) {
		this.createElement();
		this.installListeners();
		this.elem.blockNumber = blockNumber;
		this.bNum = blockNumber;
		this.elem.classList.add("molbio-sequenceeditor-block");
		this.elem.style.dysplay = "inline-block";
		this.getSequenceEditor().autoSetBlockWidth(this.elem);
		this.makeSelectable(false);
	}
	,makeSelectable: function(makeSelectable) {
		saturn.client.programs.sequenceeditor.SequenceEditor.makeSelectable(this.getElement(),makeSelectable);
	}
	,setString: function(str) {
		this.elem.innerText = str;
	}
	,getBlockNumber: function() {
		return this.bNum;
	}
	,__class__: saturn.client.programs.sequenceeditor.AnnotationEditorBlock
};
saturn.client.programs.DNAAnnotationSequenceEditorBlock = $hxClasses["saturn.client.programs.DNAAnnotationSequenceEditorBlock"] = function(blockNumber,sequenceEditor,annotationNumber) {
	saturn.client.programs.sequenceeditor.AnnotationEditorBlock.call(this,blockNumber,sequenceEditor,annotationNumber);
};
saturn.client.programs.DNAAnnotationSequenceEditorBlock.__name__ = ["saturn","client","programs","DNAAnnotationSequenceEditorBlock"];
saturn.client.programs.DNAAnnotationSequenceEditorBlock.__super__ = saturn.client.programs.sequenceeditor.AnnotationEditorBlock;
saturn.client.programs.DNAAnnotationSequenceEditorBlock.prototype = $extend(saturn.client.programs.sequenceeditor.AnnotationEditorBlock.prototype,{
	initialise: function(blockNumber) {
		var _gthis = this;
		saturn.client.programs.sequenceeditor.AnnotationEditorBlock.prototype.initialise.call(this,blockNumber);
		var contextMenu = function(event) {
			var sequenceRegion = _gthis.sequenceEditor.getSelectedRegion();
			if(sequenceRegion != null) {
				var contextMenu1 = Ext.create("Ext.menu.Menu",{ focusOnToFront : false, items : [{ text : "Blast Selected", handler : function() {
					var sequence = sequenceRegion.getAnnotationSequence();
					var blastName = "Blastp " + _gthis.sequenceEditor.getActiveObject(saturn.client.workspace.WorkspaceObject).getName() + " " + sequenceRegion.getAnnotationStartPosition() + " - " + sequenceRegion.getAnnotationStopPosition();
					sequence = StringTools.replace(sequence," ","");
					(js.Boot.__cast(_gthis.sequenceEditor , saturn.client.programs.DNASequenceEditor)).blastSequence(sequence,"Constructs (Protein)",blastName);
				}},{ text : "New Protein From Selected", handler : function() {
					var sequence1 = sequenceRegion.getAnnotationSequence();
					var proteinName = "Protein " + _gthis.sequenceEditor.getActiveObject(saturn.client.workspace.WorkspaceObject).getName() + " " + sequenceRegion.getAnnotationStartPosition() + " - " + sequenceRegion.getAnnotationStopPosition();
					sequence1 = StringTools.replace(sequence1," ","");
					var wO = new saturn.client.workspace.ProteinWorkspaceObject(new saturn.core.Protein(sequence1),proteinName);
					saturn.client.WorkspaceApplication.getApplication().getWorkspace().addObject(wO,true);
				}}]});
				contextMenu1.showAt(event.clientX,event.clientY);
				event.preventDefault();
			}
			return true;
		};
		var previousOnMouseUp = this.elem.onmouseup;
		this.elem.onmouseup = function(event1) {
			if(event1.ctrlKey) {
				contextMenu(event1);
			}
		};
		this.elem.oncontextmenu = contextMenu;
	}
	,__class__: saturn.client.programs.DNAAnnotationSequenceEditorBlock
});
saturn.client.programs.sequenceeditor.SequenceEditorBlock = $hxClasses["saturn.client.programs.sequenceeditor.SequenceEditorBlock"] = function(blockNumber,sequenceEditor) {
	this.sequenceEditor = sequenceEditor;
	this.blockNumber = blockNumber;
	this.initialise(blockNumber);
};
saturn.client.programs.sequenceeditor.SequenceEditorBlock.__name__ = ["saturn","client","programs","sequenceeditor","SequenceEditorBlock"];
saturn.client.programs.sequenceeditor.SequenceEditorBlock.prototype = {
	divElem: null
	,sequenceEditor: null
	,blockNumber: null
	,getElement: function() {
		return this.divElem;
	}
	,getSequenceEditor: function() {
		return this.sequenceEditor;
	}
	,destroy: function() {
		this.divElem.onmouseup = null;
		this.divElem.oncontextmenu = null;
		this.sequenceEditor = null;
	}
	,initialise: function(blockNumber) {
		var _gthis = this;
		var self = this;
		this.divElem = js.Browser.get_document().createElement("pre");
		this.divElem.onblur = function() {
			self.getSequenceEditor().onBlockBlur(_gthis.divElem);
		};
		this.divElem.onmousedown = function(event) {
			if(event.button > 1) {
				return;
			}
			self.getSequenceEditor().makeAnnotationSelectable(-1);
			self.getSequenceEditor().mouseDown = true;
			self.getSequenceEditor().selectionUpdated();
		};
		this.divElem.onmouseup = function(event1) {
			self.getSequenceEditor().mouseDown = false;
			var dWindow = js.Browser.get_window();
			var selectedRegion = _gthis.getSequenceEditor().getSelectedRegion();
			var isClick = selectedRegion == null || selectedRegion.getSequence() == null || selectedRegion.getStartPosition() == selectedRegion.getStopPosition();
			if(isClick == true) {
				_gthis.onBlockClick();
			}
		};
		this.divElem.onmousemove = function() {
			var seqEditor = self.getSequenceEditor();
			var app = saturn.client.WorkspaceApplication.getApplication();
			if(seqEditor.mouseDown == true) {
				if(seqEditor.inputFocused != null) {
					var sequenceRegion = seqEditor.getSelectedRegion();
					var displayBlock = seqEditor.inputFocused.nextSibling;
					var inputBlockNumber = displayBlock.blockNumber;
					var offSet = (inputBlockNumber - 1) * seqEditor.blockSize;
					var startPos = sequenceRegion.getStartPosition() - offSet;
					var stopPos = sequenceRegion.getStopPosition() - offSet;
					seqEditor.onBlockBlur(displayBlock);
					var sel = js.Browser.get_window().getSelection();
					sel.removeAllRanges();
					var range = js.Browser.get_document().createRange();
					var sel1 = js.Browser.get_window().getSelection();
					if(blockNumber > inputBlockNumber) {
						range.setStart(displayBlock.firstChild,startPos);
						range.setEnd(displayBlock.firstChild,stopPos);
						sel1.addRange(range);
					} else {
						range.setStart(displayBlock.firstChild,stopPos);
						sel1.addRange(range);
						sel1.extend(displayBlock.firstChild,startPos + 1);
					}
				}
				seqEditor.inMouseMove = true;
				seqEditor.selectionUpdated();
			}
		};
		this.divElem.className = Std.string(this.divElem.className) + " molbio-sequenceeditor-block";
		this.divElem.blockNumber = blockNumber;
		this.divElem.style.dysplay = "inline-block";
		this.getSequenceEditor().autoSetBlockWidth(this.divElem);
	}
	,onBlockClick: function() {
		var _gthis = this;
		if(this.divElem.isInput != true) {
			if(this.divElem.tagName != "INPUT") {
				if(this.sequenceEditor.isFindAnnotationOn()) {
					this.sequenceEditor.redrawSequenceOnly();
				}
				var spanTextNode = this.divElem.lastChild;
				var offSetPos = this.divElem.offSetPos;
				if(offSetPos == null) {
					var sel = js.Browser.get_window().getSelection();
					var selPos = 1;
					if(sel.focusNode == spanTextNode) {
						selPos = sel.focusOffset;
					}
					offSetPos = selPos;
				} else {
					this.divElem.offSetPos = null;
				}
				var inputElem = js.Browser.get_document().createElement("input");
				inputElem.className = "molbio-sequenceeditor-block-input molbio-selectable";
				inputElem.value = this.divElem.textContent;
				this.sequenceEditor.autoSetBlockWidth(inputElem);
				this.divElem.isInput = true;
				this.divElem.innerText = "";
				this.divElem.innerHTML = "";
				this.divElem.style.width = "0em";
				if(this.divElem.parentNode.insertBefore) {
					this.divElem.parentNode.insertBefore(inputElem,this.divElem);
				} else {
					this.divElem.insertAdjacentElement("beforeBegin",inputElem);
				}
				this.divElem.className = "molbio-sequenceeditor-block-hidden";
				inputElem.focus();
				inputElem.setSelectionRange(offSetPos,offSetPos);
				var inputElemD = inputElem;
				inputElemD.blockNumber = this.blockNumber;
				var cursorPosition = (this.blockNumber - 1) * this.sequenceEditor.blockSize + offSetPos;
				this.getSequenceEditor().setCursorPosition(new saturn.client.programs.sequenceeditor.SequenceRegion(cursorPosition,cursorPosition,-1));
				var self = this;
				inputElem.addEventListener("blur",function(e) {
					self.sequenceEditor.onBlockBlur(inputElem.nextSibling);
				});
				inputElem.addEventListener("input",function(event) {
					event.cancelBubble = true;
					event.stopPropagation();
					self.sequenceEditor.blockChanged(inputElem,self.blockNumber,null,null,null);
				});
				inputElem.addEventListener("mousedown",function(e1) {
					self.sequenceEditor.makeAnnotationSelectable(-1);
					self.sequenceEditor.mouseDown = true;
				});
				inputElem.addEventListener("mouseup",function(e2) {
					self.onBlockClick();
					self.sequenceEditor.mouseDown = false;
				});
				inputElem.onkeyup = function(event1) {
					if(!(event1.keyCode == 46 || event1.keyCode == 8)) {
						event1.cancelBubble = true;
						if(event1.stopPropagation) {
							event1.stopPropagation();
						}
						var blockNumber = inputElemD.blockNumber;
						self.sequenceEditor.blockChanged(inputElem,self.blockNumber,null,null,null);
						self.sequenceEditor.mouseDown = false;
						_gthis.getSequenceEditor().getApplication().onkeyup(event1);
					}
				};
				inputElem.onkeydown = function(event2) {
					_gthis.getSequenceEditor().getApplication().onkeydown(event2);
				};
				this.sequenceEditor.inputFocused = inputElem;
			}
		}
	}
	,__class__: saturn.client.programs.sequenceeditor.SequenceEditorBlock
};
saturn.client.programs.DNASequenceEditorBlock = $hxClasses["saturn.client.programs.DNASequenceEditorBlock"] = function(blockNumber,sequenceEditor) {
	saturn.client.programs.sequenceeditor.SequenceEditorBlock.call(this,blockNumber,sequenceEditor);
};
saturn.client.programs.DNASequenceEditorBlock.__name__ = ["saturn","client","programs","DNASequenceEditorBlock"];
saturn.client.programs.DNASequenceEditorBlock.__super__ = saturn.client.programs.sequenceeditor.SequenceEditorBlock;
saturn.client.programs.DNASequenceEditorBlock.prototype = $extend(saturn.client.programs.sequenceeditor.SequenceEditorBlock.prototype,{
	initialise: function(blockNumber) {
		var _gthis = this;
		saturn.client.programs.sequenceeditor.SequenceEditorBlock.prototype.initialise.call(this,blockNumber);
		var contextMenu = function(event) {
			var sequenceRegion = _gthis.sequenceEditor.getSelectedRegion();
			if(sequenceRegion != null) {
				var baseName = _gthis.sequenceEditor.getActiveObject(saturn.client.workspace.WorkspaceObject).getName() + " " + (sequenceRegion.getStartPosition() + 1) + "-" + sequenceRegion.getStopPosition();
				var blastName = "Blastn " + baseName;
				var contextMenu1 = Ext.create("Ext.menu.Menu",{ focusOnToFront : false, items : [{ text : "Blast Selected", handler : function() {
					(js.Boot.__cast(_gthis.sequenceEditor , saturn.client.programs.DNASequenceEditor)).blastSequence(sequenceRegion.getSequence(),"Constructs (DNA)",blastName);
				}},{ text : "New From Selected", handler : function() {
					var w0 = new saturn.client.workspace.DNAWorkspaceObject(new saturn.core.DNA(sequenceRegion.getSequence()),baseName);
					_gthis.sequenceEditor.getWorkspace().addObject(w0,true);
				}},{ text : "Generate Forward Primer", handler : function() {
					var w01 = new saturn.client.workspace.PrimerWorkspaceObject(new saturn.core.Primer(sequenceRegion.getSequence()),"Primer " + baseName);
					_gthis.sequenceEditor.getWorkspace().addObject(w01,true);
				}},{ text : "Generate Reverse Primer", handler : function() {
					var w02 = new saturn.client.workspace.PrimerWorkspaceObject(new saturn.core.Primer(new saturn.core.DNA(sequenceRegion.getSequence()).getInverseComplement()),"Primer " + baseName);
					_gthis.sequenceEditor.getWorkspace().addObject(w02,true);
				}},{ text : "Generate Primers", handler : function() {
				}}]});
				contextMenu1.showAt(event.clientX,event.clientY);
				event.preventDefault();
			}
			return true;
		};
		var previousOnMouseUp = this.divElem.onmouseup;
		this.divElem.onmouseup = function(event1) {
			if(event1.ctrlKey) {
				contextMenu(event1);
			} else {
				previousOnMouseUp(event1);
			}
		};
		this.divElem.oncontextmenu = contextMenu;
	}
	,destroy: function() {
		this.divElem.onmouseup = null;
		this.divElem.oncontextmenu = null;
		this.sequenceEditor = null;
	}
	,__class__: saturn.client.programs.DNASequenceEditorBlock
});
saturn.client.workspace.DigestWO = $hxClasses["saturn.client.workspace.DigestWO"] = function(object,name) {
	this.theActiveDNA = new saturn.core.DNA("");
	if(object == null) {
		object = new saturn.core.DoubleDigest(null,null,null);
	}
	if(name == null) {
		name = "Double Digest";
	}
	saturn.client.workspace.DNAWorkspaceObject.call(this,object,name);
};
saturn.client.workspace.DigestWO.__name__ = ["saturn","client","workspace","DigestWO"];
saturn.client.workspace.DigestWO.getNewMenuText = function() {
	return "Double Digest";
};
saturn.client.workspace.DigestWO.__super__ = saturn.client.workspace.DNAWorkspaceObject;
saturn.client.workspace.DigestWO.prototype = $extend(saturn.client.workspace.DNAWorkspaceObject.prototype,{
	templateObjId: null
	,res1ObjId: null
	,res2ObjId: null
	,theActiveDNA: null
	,getDNAObject: function() {
		return this.theActiveDNA;
	}
	,digest: function() {
		if(this.templateObjId == null || this.res1ObjId == null || this.res2ObjId == null) {
			return;
		}
		var workspace = saturn.client.WorkspaceApplication.getApplication().getWorkspace();
		var template = workspace.getObjectSafely(this.templateObjId,saturn.client.workspace.DNAWorkspaceObject).getObject();
		var res1 = js.Boot.__cast(workspace.getObjectSafely(this.res1ObjId,saturn.client.workspace.DNAWorkspaceObject).getObject() , saturn.core.RestrictionSite);
		var res2 = js.Boot.__cast(workspace.getObjectSafely(this.res2ObjId,saturn.client.workspace.DNAWorkspaceObject).getObject() , saturn.core.RestrictionSite);
		this.object.setTemplate(template);
		this.object.setRestrictionSite1(res1);
		this.object.setRestrictionSite2(res2);
		this.object.digest();
		this.theActiveDNA = this.object.getCenterProduct();
	}
	,getDigest: function() {
		return js.Boot.__cast(this.object , saturn.core.DoubleDigest);
	}
	,setTemplate: function(template) {
		if(template == null) {
			this.templateObjId = null;
		} else {
			this.templateObjId = template.getUUID();
		}
	}
	,setRestrictionSite1: function(res1) {
		if(res1 == null) {
			this.res1ObjId = null;
		} else {
			this.res1ObjId = res1.getUUID();
		}
	}
	,setRestrictionSite2: function(res2) {
		if(res2 == null) {
			this.res2ObjId = null;
		} else {
			this.res2ObjId = res2.getUUID();
		}
	}
	,getTemplateId: function() {
		return this.templateObjId;
	}
	,getRes1Id: function() {
		return this.res1ObjId;
	}
	,getRes2Id: function() {
		return this.res2ObjId;
	}
	,setDNAObject: function(dnaObject) {
		this.theActiveDNA = dnaObject;
	}
	,setLeftActive: function() {
		this.setDNAObject(this.object.getLeftProduct());
	}
	,setRightActive: function() {
		this.setDNAObject(this.object.getRightProduct());
	}
	,setMiddleActive: function() {
		this.setDNAObject(this.object.getCenterProduct());
	}
	,__class__: saturn.client.workspace.DigestWO
});
saturn.client.programs.DigestViewer = $hxClasses["saturn.client.programs.DigestViewer"] = function() {
	saturn.client.programs.DNASequenceEditor.call(this);
};
saturn.client.programs.DigestViewer.__name__ = ["saturn","client","programs","DigestViewer"];
saturn.client.programs.DigestViewer.__interfaces__ = [saturn.client.workspace.WorkspaceListener];
saturn.client.programs.DigestViewer.__super__ = saturn.client.programs.DNASequenceEditor;
saturn.client.programs.DigestViewer.prototype = $extend(saturn.client.programs.DNASequenceEditor.prototype,{
	emptyInit: function() {
		saturn.client.programs.DNASequenceEditor.prototype.emptyInit.call(this);
		this.getWorkspace().addListener(this);
	}
	,setActiveObject: function(objectId) {
		saturn.client.programs.DNASequenceEditor.prototype.setActiveObject.call(this,objectId);
	}
	,postRestore: function() {
		saturn.client.programs.DNASequenceEditor.prototype.postRestore.call(this);
		this.updateDigest();
	}
	,onFocus: function() {
		saturn.client.programs.DNASequenceEditor.prototype.onFocus.call(this);
		var me = this;
		this.getApplication().getViewMenu().add({ text : "Update digest", handler : function() {
			me.updateDigest();
		}});
		this.showActiveSequence();
	}
	,close: function() {
		saturn.client.programs.DNASequenceEditor.prototype.close.call(this);
		this.getApplication().getWorkspace().removeListener(this);
	}
	,serialise: function() {
		var object = saturn.client.programs.DNASequenceEditor.prototype.serialise.call(this);
		return object;
	}
	,deserialise: function(object) {
		saturn.client.programs.DNASequenceEditor.prototype.deserialise.call(this,object);
	}
	,onOutlineDrop: function(node,data,overModel,dropPosition,dropHandlers,eOpts) {
		var objectId = data.records[0].get("objectId");
		var dnaWO = this.getWorkspace().getObjectSafely(objectId,saturn.client.workspace.DNAWorkspaceObject);
		if(dnaWO != null) {
			var update = false;
			var activeObject = this.getActiveObject(saturn.client.workspace.DigestWO);
			if(overModel.data.id == "Template") {
				activeObject.setTemplate(dnaWO);
				update = true;
			} else if(overModel.data.id == "Restriction 1") {
				if(Std["is"](dnaWO.getDNAObject(),saturn.core.RestrictionSite)) {
					activeObject.setRestrictionSite1(dnaWO);
					data.records[0].raw.objectId += "_1";
					data.records[0].data.objectId += "_1";
					update = true;
				}
			} else if(overModel.data.id == "Restriction 2") {
				if(Std["is"](dnaWO.getDNAObject(),saturn.core.RestrictionSite)) {
					activeObject.setRestrictionSite2(dnaWO);
					data.records[0].raw.objectId += "_1";
					data.records[0].data.objectId += "_1";
					update = true;
				}
			}
			if(update) {
				this.updateDigest();
				return true;
			}
		}
		dropHandlers.cancelDrop();
		return false;
	}
	,updateDigest: function() {
		if(this.getActiveObject(saturn.client.workspace.DigestWO) != null) {
			var activeObject = this.getActiveObject(saturn.client.workspace.DigestWO);
			if(activeObject.getTemplateId() == null || activeObject.getRes1Id() == null || activeObject.getRes2Id() == null) {
				return;
			}
			try {
				activeObject.digest();
				this.setMiddleActive();
			} catch( ex ) {
				if (ex instanceof js._Boot.HaxeError) ex = ex.val;
				if( js.Boot.__instanceof(ex,saturn.util.HaxeException) ) {
					js.Browser.alert(ex.getMessage());
					return;
				} else throw(ex);
			}
		}
	}
	,setLeftActive: function() {
		this.getActiveObject(saturn.client.workspace.DigestWO).setLeftActive();
		this.showActiveSequence();
	}
	,setRightActive: function() {
		this.getActiveObject(saturn.client.workspace.DigestWO).setRightActive();
		this.showActiveSequence();
	}
	,setMiddleActive: function() {
		this.getActiveObject(saturn.client.workspace.DigestWO).setMiddleActive();
		this.showActiveSequence();
	}
	,showActiveSequence: function() {
		var me = this;
		if(saturn.client.WorkspaceApplication.getApplication().getActiveProgram() == me) {
			var activeObject = this.getActiveObject(saturn.client.workspace.DigestWO);
			if(activeObject != null) {
				var sequence = activeObject.getDNAObject().getSequence();
				if(sequence != null && sequence.length != 0) {
					this.blockChanged(null,null,0,null,sequence);
				}
			}
		}
	}
	,installOutlineTree: function() {
		var _gthis = this;
		saturn.client.programs.DNASequenceEditor.prototype.installOutlineTree.call(this);
		var webApp = saturn.client.WorkspaceApplication.getApplication();
		var dataStore = webApp.getOutlineDataStore("DEFAULT");
		var rootNode = dataStore.getRootNode();
		var templateFolder = rootNode.appendChild({ text : "Template", leaf : false, expanded : true, id : "Template"});
		var activeObject = this.getActiveObject(saturn.client.workspace.DigestWO);
		if(activeObject != null) {
			var templateId = activeObject.getTemplateId();
			if(templateId != null) {
				var wO = this.getWorkspace().getObjectSafely(templateId,saturn.client.workspace.DNAWorkspaceObject);
				var childNode = templateFolder.appendChild(Ext.create("WorkspaceObject",{ text : wO.getName(), leaf : true, objectId : templateId, id : templateId}));
			}
		}
		var res1Folder = rootNode.appendChild({ text : "Restriction 1", leaf : false, expanded : true, id : "Restriction 1"});
		var activeObject1 = this.getActiveObject(saturn.client.workspace.DigestWO);
		if(activeObject1 != null) {
			var res1Id = activeObject1.getRes1Id();
			if(res1Id != null) {
				var wO1 = this.getWorkspace().getObjectSafely(res1Id,saturn.client.workspace.DNAWorkspaceObject);
				var childNode1 = res1Folder.appendChild(Ext.create("WorkspaceObject",{ text : wO1.getName(), leaf : true, objectId : res1Id + "_1", id : res1Id + "_1"}));
			}
		}
		var res2Folder = rootNode.appendChild({ text : "Restriction 2", leaf : false, expanded : true, id : "Restriction 2"});
		var activeObject2 = this.getActiveObject(saturn.client.workspace.DigestWO);
		if(activeObject2 != null) {
			var res2Id = activeObject2.getRes2Id();
			if(res2Id != null) {
				var wO2 = this.getWorkspace().getObjectSafely(res2Id,saturn.client.workspace.DNAWorkspaceObject);
				var childNode2 = res2Folder.appendChild(Ext.create("WorkspaceObject",{ text : wO2.getName(), leaf : true, objectId : res2Id + "_2", id : res2Id + "_2"}));
			}
		}
		var fragmentsFolder = rootNode.appendChild({ text : "Fragments", leaf : false, expanded : true, id : "Fragments"});
		fragmentsFolder.appendChild(Ext.create("WorkspaceObject",{ text : "Left of cuts", leaf : true, id : "Left of cuts", objectId : null}));
		fragmentsFolder.appendChild(Ext.create("WorkspaceObject",{ text : "Between cuts", leaf : true, id : "Between cuts", objectId : null}));
		fragmentsFolder.appendChild(Ext.create("WorkspaceObject",{ text : "Right of cuts", leaf : true, id : "Right of cuts", objectId : null}));
		var contextMenu = function(view,record,item,index,event) {
			var self = _gthis;
			var objectId = record.get("objectId");
			if(objectId != "") {
				var contextMenu1 = Ext.create("Ext.menu.Menu",{ items : [{ text : "Remove ", handler : function() {
					var contextMenu2 = self.getWorkspace().getObject(objectId);
					self.objectRemoved(contextMenu2);
				}}]});
				contextMenu1.showAt(event.getXY());
				event.stopEvent();
			}
		};
		this.getApplication().getOutlineTree("DEFAULT").on("itemcontextmenu",contextMenu,this);
		var me = this;
		this.getApplication().getOutlineTree("DEFAULT").on("itemclick",function(view1,rec,item1,index1,event1) {
			if(event1.ctrlKey) {
				contextMenu(view1,rec,item1,index1,event1);
			} else {
				var id = rec.get("id");
				if("Left of cuts" == id) {
					me.setLeftActive();
				} else if("Right of cuts" == id) {
					me.setRightActive();
				} else if("Between cuts" == id) {
					me.setMiddleActive();
				}
			}
		},this);
	}
	,convertDragToWorkspaceObject: function(data) {
		var wO = this.getActiveObject(saturn.client.workspace.DigestWO);
		var digest = wO.getObject();
		if(data.id == "Left of cuts") {
			return new saturn.client.workspace.DNAWorkspaceObject(new saturn.core.DNA(digest.getLeftProduct().getSequence()),"Left");
		} else if(data.id == "Right of cuts") {
			return new saturn.client.workspace.DNAWorkspaceObject(new saturn.core.DNA(digest.getRightProduct().getSequence()),"Right");
		} else if(data.id == "Between cuts") {
			return new saturn.client.workspace.DNAWorkspaceObject(new saturn.core.DNA(digest.getCenterProduct().getSequence()),"Center");
		} else {
			return null;
		}
	}
	,objectRenamed: function(object) {
		var objectId = object.getUUID();
		var wO = this.getActiveObject(saturn.client.workspace.DigestWO);
		var isOurs = false;
		if(objectId == wO.getTemplateId()) {
			isOurs = true;
		} else if(objectId == wO.getRes1Id()) {
			isOurs = true;
		} else if(objectId == wO.getRes2Id()) {
			isOurs = true;
		}
		if(isOurs) {
			var node = this.getApplication().getOutlineDataStore("DEFAULT").getRootNode().findChild("objectId",objectId,true);
			if(node != null) {
				var tmp = object.getName();
				node.set("text",tmp);
				node.commit();
			}
		}
	}
	,objectAdded: function(object) {
	}
	,objectRemoved: function(object) {
		var objectId = object.getUUID();
		var isOurs = false;
		var wO = this.getActiveObject(saturn.client.workspace.DigestWO);
		if(wO == null) {
			return;
		}
		if(objectId == wO.getTemplateId()) {
			isOurs = true;
			wO.setTemplate(null);
		} else if(objectId == wO.getRes1Id()) {
			isOurs = true;
			wO.setRestrictionSite1(null);
			objectId += "_1";
		} else if(objectId == wO.getRes2Id()) {
			isOurs = true;
			wO.setRestrictionSite2(null);
			objectId += "_2";
		}
		if(isOurs) {
			var node = this.getApplication().getOutlineDataStore("DEFAULT").getRootNode().findChild("objectId",objectId,true);
			if(node != null) {
				node.parentNode.removeChild(node);
			}
		}
	}
	,__class__: saturn.client.programs.DigestViewer
});
saturn.client.programs.EmptyViewer = $hxClasses["saturn.client.programs.EmptyViewer"] = function() {
	saturn.client.programs.SimpleExtJSProgram.call(this);
};
saturn.client.programs.EmptyViewer.__name__ = ["saturn","client","programs","EmptyViewer"];
saturn.client.programs.EmptyViewer.__super__ = saturn.client.programs.SimpleExtJSProgram;
saturn.client.programs.EmptyViewer.prototype = $extend(saturn.client.programs.SimpleExtJSProgram.prototype,{
	theComponent: null
	,emptyInit: function() {
		saturn.client.programs.SimpleExtJSProgram.prototype.emptyInit.call(this);
		var self = this;
		this.theComponent = Ext.create("Ext.panel.Panel",{ width : "100%", height : "95%", autoScroll : true, layout : "fit", listeners : { "render" : function() {
			self.initialiseDOMComponent();
		}}});
	}
	,setActiveObject: function(objectId) {
		saturn.client.programs.SimpleExtJSProgram.prototype.setActiveObject.call(this,objectId);
		this.setTitle(this.getObject().getName());
	}
	,initialiseDOMComponent: function() {
		saturn.client.programs.SimpleExtJSProgram.prototype.initialiseDOMComponent.call(this);
	}
	,setTitle: function(title) {
		this.theComponent.setTitle(title);
	}
	,getComponent: function() {
		return this.theComponent;
	}
	,__class__: saturn.client.programs.EmptyViewer
});
saturn.client.workspace.GlycanWO = $hxClasses["saturn.client.workspace.GlycanWO"] = function(object,name) {
	if(object == null) {
		object = new saturn.core.domain.Glycan();
	}
	if(name == null) {
		name = "Glycan";
	}
	saturn.client.workspace.WorkspaceObjectBase.call(this,object,name);
};
saturn.client.workspace.GlycanWO.__name__ = ["saturn","client","workspace","GlycanWO"];
saturn.client.workspace.GlycanWO.getNewMenuText = function() {
	return "Glycan";
};
saturn.client.workspace.GlycanWO.getDefaultFolderName = function() {
	return "Glycan";
};
saturn.client.workspace.GlycanWO.__super__ = saturn.client.workspace.WorkspaceObjectBase;
saturn.client.workspace.GlycanWO.prototype = $extend(saturn.client.workspace.WorkspaceObjectBase.prototype,{
	__class__: saturn.client.workspace.GlycanWO
});
saturn.client.programs.GlycanBuilder = $hxClasses["saturn.client.programs.GlycanBuilder"] = function() {
	this.storedCommands = [];
	saturn.client.programs.SimpleExtJSProgram.call(this);
};
saturn.client.programs.GlycanBuilder.__name__ = ["saturn","client","programs","GlycanBuilder"];
saturn.client.programs.GlycanBuilder.getQuickLaunchItems = function() {
	return [{ iconCls : "x-btn-glycanbuilder", text : "GlycanBuilder", cls : "quickLaunchButton", handler : function() {
		saturn.client.WorkspaceApplication.getApplication().getWorkspace().addObject(new saturn.client.workspace.GlycanWO(null,null),true);
	}}];
};
saturn.client.programs.GlycanBuilder.parseFile = function(file,cb,asNewOpenProgram) {
	if(asNewOpenProgram == null) {
		asNewOpenProgram = true;
	}
	var extension = saturn.client.core.CommonCore.getFileExtension(file.name);
	if(extension == "glycoct_condensed") {
		saturn.client.core.CommonCore.getFileAsText(file,function(contents) {
			if(contents != null) {
				var name = "Glycan";
				var glycan = new saturn.core.domain.Glycan();
				glycan.content = contents;
				glycan.contentType = "glycoct_condensed";
				saturn.client.WorkspaceApplication.getApplication().getWorkspace().addObject(new saturn.client.workspace.GlycanWO(glycan,name),true);
			}
		});
	}
};
saturn.client.programs.GlycanBuilder.__super__ = saturn.client.programs.SimpleExtJSProgram;
saturn.client.programs.GlycanBuilder.prototype = $extend(saturn.client.programs.SimpleExtJSProgram.prototype,{
	storedCommands: null
	,theComponent: null
	,emptyInit: function() {
		var _gthis = this;
		saturn.client.programs.SimpleExtJSProgram.prototype.emptyInit.call(this);
		var url = js.Browser.get_window().location.protocol + "//" + js.Browser.get_window().location.hostname + ":" + js.Browser.get_window().location.port + "/GlycanBuilder/GlycanBuilder.html";
		this.theComponent = Ext.create("Ext.panel.Panel",{ width : "100%", height : "95%", autoScroll : true, layout : "border", items : [{ xtype : "component", region : "north", autoEl : { tag : "iframe", src : url, width : "100%", style : { height : "100%"}}}], listeners : { "render" : function() {
			_gthis.initialiseDOMComponent();
		}}});
	}
	,initialiseDOMComponent: function() {
		var _gthis = this;
		saturn.client.programs.SimpleExtJSProgram.prototype.initialiseDOMComponent.call(this);
		this.pokeCanvas(function(error) {
			if(error != null) {
				_gthis.getApplication().showMessage("Error",error);
			} else if(_gthis.storedCommands.length > 0) {
				while(_gthis.storedCommands.length > 0) {
					var unit = _gthis.storedCommands.pop();
					_gthis.runCanvasCommand(unit[0],unit[1]);
				}
			}
		});
	}
	,pokeCanvas: function(cb) {
		var giframe = this.getComponent().getEl().down("iframe").dom;
		var clicked = false;
		var checkCanvas = null;
		checkCanvas = function() {
			if(giframe != null) {
				var giDocument = giframe.contentDocument;
				var matchingItems = giDocument.querySelectorAll("[src='/GlycanBuilder/VAADIN/themes/ucdb_2011theme/icons/selectall.png']");
				if(matchingItems.length > 0) {
					var imgElement = matchingItems[0];
					var selectAllButton = imgElement.parentElement;
					if(!clicked) {
						selectAllButton.click();
						clicked = true;
					}
					if(giframe.contentWindow.glycanCanvas != null) {
						cb(null);
						return;
					}
				}
			}
			haxe.Timer.delay(checkCanvas,100);
		};
		checkCanvas();
	}
	,onFocus: function() {
		saturn.client.programs.SimpleExtJSProgram.prototype.onFocus.call(this);
		this.getApplication().installOutlineTree("MODELS",true,false,"WorkspaceObject","GRID");
		if(this.getActiveObjectId() != null) {
			var glycan = this.getActiveObjectObject();
			this.addModelToOutline(glycan,true);
		}
		this.getApplication().getMiddleSouthPanel().body.update("<b>Please follow these instructions if GlycanBuilder isn't working - <a target=\"_blank\" href=\"/static/manual/index.html#GlycanBuilder%20Installation\">Guide</a></b>");
	}
	,getCanvasContents: function(cb) {
		this.runCanvasCommand("export~glycoct_condensed",cb);
	}
	,runCanvasCommand: function(command,cb) {
		var hook = this.getCanvasHook();
		if(hook == null) {
			this.storedCommands.push([command,cb]);
			return;
		}
		var gcb = [];
		gcb.run = function(res) {
			cb(res);
		};
		hook.runCommand(command,gcb);
	}
	,canvasLoaded: function() {
		if(this.getCanvasHook() == null) {
			return false;
		} else {
			return true;
		}
	}
	,getCanvasHook: function() {
		var giframe = this.getComponent().getEl().down("iframe").dom;
		return giframe.contentWindow.glycanCanvas;
	}
	,setActiveObject: function(objectId) {
		saturn.client.programs.SimpleExtJSProgram.prototype.setActiveObject.call(this,objectId);
		var w0 = js.Boot.__cast(saturn.client.programs.SimpleExtJSProgram.prototype.getActiveObject.call(this,saturn.client.workspace.GlycanWO) , saturn.client.workspace.GlycanWO);
		var obj = js.Boot.__cast(w0.getObject() , saturn.core.domain.Glycan);
		this.setTitle(w0.getName());
		if(obj.content != null) {
			this.loadContent(obj.contentType,obj.content);
		}
	}
	,loadContent: function(contentType,content) {
		this.runCanvasCommand("import~" + contentType + "~" + content,function(res) {
		});
	}
	,setTitle: function(title) {
		this.theComponent.setTitle(title);
	}
	,getComponent: function() {
		return this.theComponent;
	}
	,saveWait: function(cb) {
		var _gthis = this;
		var obj = this.getActiveObjectObject();
		this.getCanvasContents(function(res) {
			var obj1 = _gthis.getActiveObjectObject();
			obj1.content = res;
			obj1.contentType = "glycoct_condensed";
			cb();
		});
	}
	,saveAsync: function(cb) {
		var glycan = this.getObject();
		this.getCanvasContents(function(res) {
			glycan.content = res;
			glycan.contentType = "glycoct_condensed";
			cb(null);
		});
	}
	,openFile: function(file,asNew,asNewOpenProgram) {
		if(asNewOpenProgram == null) {
			asNewOpenProgram = true;
		}
		saturn.client.programs.GlycanBuilder.parseFile(file,function(contents) {
		},asNewOpenProgram);
	}
	,__class__: saturn.client.programs.GlycanBuilder
});
saturn.client.workspace.GridVarWO = $hxClasses["saturn.client.workspace.GridVarWO"] = function(object,name) {
	if(object == null) {
		object = new saturn.core.GridVar();
	}
	if(name == null) {
		name = "SeqFig";
	}
	this.iconPath = "/static/js/images/gridvar_16.png";
	saturn.client.workspace.WorkspaceObjectBase.call(this,object,name);
};
saturn.client.workspace.GridVarWO.__name__ = ["saturn","client","workspace","GridVarWO"];
saturn.client.workspace.GridVarWO.getNewMenuText = function() {
	return "Figure";
};
saturn.client.workspace.GridVarWO.getDefaultFolderName = function() {
	return "Summaries";
};
saturn.client.workspace.GridVarWO.__super__ = saturn.client.workspace.WorkspaceObjectBase;
saturn.client.workspace.GridVarWO.prototype = $extend(saturn.client.workspace.WorkspaceObjectBase.prototype,{
	__class__: saturn.client.workspace.GridVarWO
});
saturn.client.programs.GridVarViewer = $hxClasses["saturn.client.programs.GridVarViewer"] = function() {
	this.type_to_styles = { };
	this.canvasData = [];
	this.rowOrder = [];
	this.columnOrder = [];
	this.columnToLabel = { };
	this.data = [];
	this.dirty = false;
	this.rendered = false;
	this.canvasRender = true;
	saturn.client.programs.SimpleExtJSProgram.call(this);
};
saturn.client.programs.GridVarViewer.__name__ = ["saturn","client","programs","GridVarViewer"];
saturn.client.programs.GridVarViewer.getQuickLaunchItems = function() {
	return [{ iconCls : "x-btn-gridvar", text : "SeqFig<br/>Tool", cls : "quickLaunchButton", handler : function() {
		saturn.client.WorkspaceApplication.getApplication().getWorkspace().addObject(new saturn.client.workspace.GridVarWO(null,null),true);
	}, tooltip : { dismissDelay : 10000, text : "Summarise multi-dimensional data"}}];
};
saturn.client.programs.GridVarViewer.parseFile = function(file) {
	var ext = saturn.client.core.CommonCore.getFileExtension(file.name);
	if(ext == "csv") {
		saturn.client.core.CommonCore.getFileAsText(file,function(content) {
			if(content != null) {
				var obj = new saturn.core.GridVar();
				obj.fileContent = content;
				var wo = new saturn.client.workspace.GridVarWO(obj,file.name);
				saturn.client.WorkspaceApplication.getApplication().getWorkspace().addObject(wo,true);
			}
		});
	}
};
saturn.client.programs.GridVarViewer.__super__ = saturn.client.programs.SimpleExtJSProgram;
saturn.client.programs.GridVarViewer.prototype = $extend(saturn.client.programs.SimpleExtJSProgram.prototype,{
	theComponent: null
	,rowField: null
	,gridVarDom: null
	,dataTable: null
	,styleTable: null
	,annotationTable: null
	,tabPanel: null
	,gridVarElem: null
	,cellSlider: null
	,xLabelsCheckBox: null
	,gridVarObj: null
	,canvasRender: null
	,rendered: null
	,dirty: null
	,data: null
	,columnToLabel: null
	,columnOrder: null
	,rowOrder: null
	,canvasData: null
	,type_to_styles: null
	,paddingCheckbox: null
	,fitToAreaCheckBox: null
	,canvasGridVar: null
	,valueToSyles: null
	,emptyInit: function() {
		var _gthis = this;
		saturn.client.programs.SimpleExtJSProgram.prototype.emptyInit.call(this);
		this.theComponent = Ext.create("Ext.panel.Panel",{ layout : { type : "accordion", multi : true, enableSplitters : true}, listeners : { "afterrender" : function() {
			_gthis.initialiseDOMComponent();
		}}});
		var topPanel = Ext.create("Ext.panel.Panel",{ title : "Graph", multiSelect : true, items : [{ xtype : "component", autoEl : { tag : "div"}, style : { "background-color" : "white", height : "100%"}, width : "100%", itemId : "gridvar_container"}], style : { "background-color" : "white"}, listeners : { "resize" : function() {
			if(_gthis.rendered) {
				_gthis.redrawGridVar();
			}
		}, "afterrender" : function() {
			_gthis.rendered = true;
			_gthis.redrawGridVar();
		}}, flex : 1, layout : { type : "fit"}});
		this.theComponent.add(topPanel);
		this.tabPanel = Ext.create("Ext.tab.Panel",{ title : "Configuration", width : "100%", multiSelect : true, style : { "background-color" : "white"}, flex : 2, collapsed : false, listeners : { expand : function() {
			if(_gthis.gridVarObj != null) {
				_gthis.gridVarObj.configCollapse = false;
			}
		}, collapse : function() {
			if(_gthis.gridVarObj != null) {
				_gthis.gridVarObj.configCollapse = true;
			}
		}}});
		this.theComponent.add(this.tabPanel);
		this.rowField = "residue";
		this.addAnnotationTable();
		this.addStyleGridPanel();
		this.addDataGridPanel();
		this.tabPanel.setActiveTab(0);
		this.registerDropFolder("Objects",null,true);
	}
	,initialiseDOMComponent: function() {
		saturn.client.programs.SimpleExtJSProgram.prototype.initialiseDOMComponent.call(this);
	}
	,addStyleGridPanel: function() {
		var _gthis = this;
		var colDefs = [{ text : "Annotation Group", dataIndex : "data_type", editor : "textfield"},{ text : "Mapping Value", dataIndex : "mapping", editor : "textfield"},{ text : "Color", dataIndex : "color", editor : "textfield"},{ text : "Annotation Label", dataIndex : "label", editor : "textfield"},{ text : "Apply to rows", dataIndex : "columns", editor : "textfield"},{ text : "Style", dataIndex : "style", editor : "textfield"}];
		var data = [{ "data_type" : "covered", "mapping" : "1", style : "rec", "color" : "purple", "label" : "Covered", "columns" : "*"},{ "data_type" : "covered", "mapping" : "0", style : "rec", "color" : "#f1f1f1", "label" : "Not Covered", "columns" : "*"}];
		this.styleTable = new saturn.client.programs.blocks.BaseTable(colDefs,data,"Styles");
		this.styleTable.build();
		this.styleTable.setEditListener(function() {
			_gthis.setDirty(true);
			_gthis.redrawGridVar();
		});
		this.tabPanel.add(this.styleTable.getComponent());
	}
	,addDataGridPanel: function() {
		var _gthis = this;
		var colDefs = [{ text : "Residue", dataIndex : "residue", editor : "textfield"},{ text : "Construct", dataIndex : "construct", editor : "textfield"},{ text : "PDB", dataIndex : "pdb", editor : "textfield"}];
		var data = [{ "residue" : "A", "construct" : "1", "pdb" : "1"},{ "residue" : "T", "construct" : "1", "pdb" : "1"},{ "residue" : "G", "construct" : "0", "pdb" : "1"}];
		this.dataTable = new saturn.client.programs.blocks.BaseTable(colDefs,data,"Raw Data");
		this.dataTable.build();
		this.dataTable.setEditListener(function() {
			_gthis.setDirty(true);
			_gthis.redrawGridVar();
		});
		this.tabPanel.add(this.dataTable.getComponent());
	}
	,addAnnotationTable: function() {
		var _gthis = this;
		var colDefs = [{ text : "Start", dataIndex : "start", editor : "textfield"},{ text : "Stop", dataIndex : "stop", editor : "textfield"},{ text : "Value", dataIndex : "value", editor : "textfield"},{ text : "Row", dataIndex : "column", editor : "textfield"}];
		var data = [{ "start" : "1", "stop" : "3", "value" : "1"}];
		this.annotationTable = new saturn.client.programs.blocks.BaseTable(colDefs,data,"Annotations");
		this.annotationTable.build();
		this.annotationTable.setEditListener(function() {
			_gthis.updateAnnotations();
			_gthis.setDirty(true);
			_gthis.redrawGridVar();
		});
		this.tabPanel.add(this.annotationTable.getComponent());
	}
	,updateAnnotations: function() {
		var _gthis = this;
		this.annotationTable.getStore().each(function(record) {
			if(_gthis.annotationTable.isRecordEmpty(record)) {
				return true;
			}
			var model = record.getData();
			var start = model.start - 1;
			var stop = model.stop;
			var value = model.value;
			var column = model.column;
			if(column == null || column == "") {
				return true;
			}
			var columnIndex = null;
			var _g = 0;
			var _g1 = _gthis.dataTable.getColumns();
			while(_g < _g1.length) {
				var columnDef = _g1[_g];
				++_g;
				if(columnDef.text == column) {
					columnIndex = columnDef.dataIndex;
				}
			}
			if(columnIndex == null) {
				_gthis.getApplication().showMessage("Invalid column name","Please enter a valid column name for " + column);
				return false;
			}
			var dataStore = _gthis.dataTable.getStore();
			var recordCount = dataStore.count();
			var _g11 = start;
			var _g2 = stop;
			while(_g11 < _g2) {
				var i = _g11++;
				if(i > recordCount) {
					_gthis.dataTable.addNewRow();
					++recordCount;
				}
				var model1 = dataStore.getAt(i);
				model1.set(columnIndex,value);
				model1.commit();
			}
			return true;
		});
	}
	,onFocus: function() {
		var _gthis = this;
		saturn.client.programs.SimpleExtJSProgram.prototype.onFocus.call(this);
		this.getApplication().hideMiddleSouthPanel();
		this.getApplication().getToolBar().add({ iconCls : "x-btn-export", text : "Export", handler : function() {
			_gthis.exportSVGForCanvas();
		}, tooltip : { dismissDelay : 10000, text : "Export to SVG (open in Illustrator or Inkscape)"}});
		var tmp = this.gridVarObj != null && this.gridVarObj.showXLabels;
		this.xLabelsCheckBox = this.getApplication().getToolBar().add({ xtype : "checkbox", boxLabel : "x-labels", inputValue : "1", checked : tmp, handler : function() {
			var This = this;
			_gthis.gridVarObj.showXLabels = This.getValue();
			_gthis.redrawGridVar();
		}, listeners : { "afterrender" : function(c) {
			Ext.QuickTips.register({ dismissDelay : 10000, target : c.getEl(), text : "Show x-axis labels (for DNA/Protein this is the sequence)"});
		}}});
		var tmp1 = this.gridVarObj != null && this.gridVarObj.padding;
		this.paddingCheckbox = this.getApplication().getToolBar().add({ xtype : "checkbox", boxLabel : "Squares", inputValue : "1", checked : tmp1, handler : function() {
			var This1 = this;
			_gthis.gridVarObj.padding = This1.getValue();
			_gthis.redrawGridVar();
		}, listeners : { "afterrender" : function(c1) {
			Ext.QuickTips.register({ dismissDelay : 10000, target : c1.getEl(), text : "Draw individual squares"});
		}}});
		var tmp2 = this.gridVarObj != null && this.gridVarObj.fit;
		this.fitToAreaCheckBox = this.getApplication().getToolBar().add({ xtype : "checkbox", boxLabel : "Fit", inputValue : "1", checked : tmp2, handler : function() {
			var This2 = this;
			_gthis.gridVarObj.fit = This2.getValue();
			_gthis.updateActions();
			_gthis.redrawGridVar();
		}, listeners : { "afterrender" : function(c2) {
			Ext.QuickTips.register({ dismissDelay : 10000, target : c2.getEl(), text : "Fit figure to smallest amount of space<br/>(more space may be consumed if x-labels are being shown)"});
		}}});
		var tmp3 = this.gridVarObj != null && this.gridVarObj.fit;
		this.cellSlider = this.getApplication().getToolBar().add({ xtype : "slider", width : 200, value : 9, increment : 0.2, minValue : 0.2, maxValue : 20, listeners : { change : function() {
			var This3 = this;
			_gthis.gridVarObj.xCellSize = This3.getValue();
			_gthis.redrawGridVar();
		}, "afterrender" : function(c3) {
			Ext.QuickTips.register({ dismissDelay : 10000, target : c3.getEl(), text : "Control the amount of space used to display the figure"});
		}}, disabled : tmp3});
		this.getApplication().getToolBar().add({ iconCls : "x-btn-copy", text : "Add Row", handler : function() {
			_gthis.dataTable.promptAddGridColumn(function() {
				_gthis.updateRowOrder();
				_gthis.redrawGridVar();
			});
		}, tooltip : { dismissDelay : 10000, text : "Add Row (rows are drawn along the y-axis)"}});
		this.getApplication().getViewMenu().add({ text : "Update GridVar", handler : function() {
			_gthis.redrawGridVar();
		}});
	}
	,isDirty: function() {
		return this.dirty;
	}
	,setDirty: function(dirty) {
		this.dirty = dirty;
	}
	,redrawGridVar: function() {
		if(this.getActiveObjectId() == null || this.gridVarObj == null) {
			return;
		}
		var gridVar = this.getActiveObjectObject();
		gridVar.xCellSize = this.cellSlider.getValue();
		if(this.isDirty()) {
			this.setDirty(false);
			this.regenerate();
		}
		gridVar.dataTableDefinition = this.dataTable.getTableDefinition();
		gridVar.styleTableDefinition = this.styleTable.getTableDefinition();
		gridVar.annotationTableDefinition = this.annotationTable.getTableDefinition();
		this.rowField = gridVar.dataTableDefinition.columnDefs[0].dataIndex;
		var domElem = this.theComponent.down("panel").down("component[itemId=gridvar_container]").getEl().dom;
		if(this.gridVarDom != null) {
			domElem.removeChild(this.gridVarDom);
		}
		this.gridVarDom = js.Browser.get_document().createElement("div");
		this.gridVarDom.style.height = "100%";
		domElem.appendChild(this.gridVarDom);
		var lines = null;
		if(this.canvasGridVar != null) {
			lines = this.canvasGridVar.lines;
		} else if(this.gridVarObj.lines != null) {
			lines = this.gridVarObj.lines;
			this.gridVarObj.lines = null;
		}
		this.canvasGridVar = new saturn.client.programs.blocks.GridVarCanvasRenderer(this.gridVarDom);
		if(lines != null) {
			this.canvasGridVar.lines = lines;
		}
		js.Browser.get_window().console.log("width: " + this.gridVarObj.xCellSize);
		this.canvasGridVar.setCellHeight(Math.max(this.gridVarObj.xCellSize,9));
		this.canvasGridVar.setCellWidth(this.gridVarObj.xCellSize);
		this.canvasGridVar.setColumnOrder(this.columnOrder);
		this.canvasGridVar.setData(this.canvasData);
		this.canvasGridVar.setColumnKeyToLabels(this.columnToLabel);
		this.canvasGridVar.setRowOrder(this.rowOrder);
		this.canvasGridVar.setStyles(this.valueToSyles);
		this.canvasGridVar.setRenderXLabels(this.gridVarObj.showXLabels);
		this.canvasGridVar.setPadding(this.gridVarObj.padding);
		this.canvasGridVar.setFitToArea(this.gridVarObj.fit);
		this.canvasGridVar.configure();
		js.Browser.get_window().console.log("width: " + this.canvasGridVar.getXUnitSize());
		this.canvasGridVar.render();
	}
	,exportSVGForCanvas: function() {
		this.canvasGridVar.exportSVG();
	}
	,updateStyles: function() {
		var _gthis = this;
		this.valueToSyles = new haxe.ds.StringMap();
		this.styleTable.getStore().each(function(record) {
			if(_gthis.styleTable.isRecordEmpty(record)) {
				return true;
			}
			var model = record.getData();
			var dataType = Reflect.field(model,"data_type");
			var style = Reflect.field(model,"style");
			var value = Reflect.field(model,"mapping");
			var colour = Reflect.field(model,"color");
			var label = Reflect.field(model,"label");
			var columns = Reflect.field(model,"columns");
			if(dataType == null || dataType == "" || value == null || value == "" || colour == null || colour == "" || label == null || label == "" || style == null || style == "") {
				return true;
			}
			var style1 = { type : style, colour : colour, name : label, columns : columns.split(","), value : value, group : dataType};
			if(!_gthis.valueToSyles.exists(value)) {
				_gthis.valueToSyles.set(value,[]);
			}
			_gthis.valueToSyles.get(value).push(style1);
			return true;
		});
	}
	,updateData: function() {
		var _gthis = this;
		this.canvasData = [];
		this.columnOrder = [];
		this.columnToLabel = { };
		var i = 0;
		this.dataTable.getStore().each(function(record) {
			if(_gthis.dataTable.isRecordEmpty(record)) {
				return true;
			}
			var model = record.getData();
			_gthis.columnOrder.push(i == null ? "null" : "" + i);
			_gthis.canvasData[i] = [];
			var j = 0;
			var _g = 0;
			var _g1 = _gthis.rowOrder;
			while(_g < _g1.length) {
				var field = _g1[_g];
				++_g;
				_gthis.canvasData[i][j] = Reflect.field(model,field);
				++j;
			}
			var rowValue = Reflect.field(model,_gthis.rowField);
			Reflect.setField(_gthis.columnToLabel,i == null ? "null" : "" + i,rowValue);
			i += 1;
			return true;
		});
	}
	,updateRowOrder: function() {
		this.rowOrder = [];
		var _g = 0;
		var _g1 = this.dataTable.getModelFields();
		while(_g < _g1.length) {
			var field = _g1[_g];
			++_g;
			if(field != this.rowField) {
				this.rowOrder.push(field);
			}
		}
	}
	,regenerate: function() {
		this.updateStyles();
		this.updateRowOrder();
		this.updateData();
	}
	,setActiveObject: function(objectId) {
		saturn.client.programs.SimpleExtJSProgram.prototype.setActiveObject.call(this,objectId);
		this.update();
	}
	,update: function() {
		Ext.suspendLayouts();
		var w0 = js.Boot.__cast(saturn.client.programs.SimpleExtJSProgram.prototype.getActiveObject.call(this,saturn.client.workspace.GridVarWO) , saturn.client.workspace.GridVarWO);
		var obj = js.Boot.__cast(w0.getObject() , saturn.core.GridVar);
		this.setTitle(w0.getName());
		this.setDirty(true);
		this.rowField = obj.dataTableDefinition.columnDefs[0].dataIndex;
		if(obj.fileContent != null) {
			this.loadFromString(obj.fileContent);
			obj.fileContent = null;
		}
		this.dataTable.reconfigure(obj.dataTableDefinition);
		this.styleTable.reconfigure(obj.styleTableDefinition);
		this.annotationTable.reconfigure(obj.annotationTableDefinition);
		this.gridVarObj = obj;
		this.redrawGridVar();
		this.updateActions();
		if(this.gridVarObj != null) {
			if(this.gridVarObj.configCollapse) {
				this.tabPanel.collapse();
			} else {
				this.tabPanel.expand();
			}
		}
		Ext.resumeLayouts(true);
	}
	,updateActions: function() {
		saturn.client.programs.SimpleExtJSProgram.prototype.updateActions.call(this);
		if(this.gridVarObj != null) {
			if(this.gridVarObj.fit) {
				this.fitToAreaCheckBox.setValue(true);
				this.cellSlider.disable();
			} else {
				this.fitToAreaCheckBox.setValue(false);
				this.cellSlider.enable();
			}
			if(this.gridVarObj.padding) {
				this.paddingCheckbox.setValue(true);
			} else {
				this.paddingCheckbox.setValue(false);
			}
			if(this.gridVarObj.showXLabels) {
				this.xLabelsCheckBox.setValue(true);
			} else {
				this.xLabelsCheckBox.setValue(false);
			}
			this.cellSlider.setValue(this.gridVarObj.xCellSize);
		}
	}
	,reconfigure: function(dataTableDefinition,styleTableDefinition) {
		var w0 = js.Boot.__cast(saturn.client.programs.SimpleExtJSProgram.prototype.getActiveObject.call(this,saturn.client.workspace.GridVarWO) , saturn.client.workspace.GridVarWO);
		var obj = js.Boot.__cast(w0.getObject() , saturn.core.GridVar);
		obj.dataTableDefinition = dataTableDefinition;
		obj.styleTableDefinition = styleTableDefinition;
		this.dataTable.reconfigure(obj.dataTableDefinition);
		this.styleTable.reconfigure(obj.styleTableDefinition);
	}
	,setTitle: function(title) {
		this.theComponent.setTitle(title);
	}
	,getComponent: function() {
		return this.theComponent;
	}
	,getDataTable: function() {
		return this.dataTable;
	}
	,openFile: function(file,asNew,asNewOpenProgram) {
		if(asNewOpenProgram == null) {
			asNewOpenProgram = true;
		}
		var _gthis = this;
		var pluginPos = 0;
		var next = null;
		next = function() {
			if(pluginPos < _gthis.plugins.length) {
				pluginPos += 1;
				_gthis.plugins[pluginPos - 1].openFile(file,next);
			}
		};
		next();
	}
	,loadFromString: function(content) {
		var lines = content.split("\n");
		var header = lines[0];
		var columns = header.split(",");
		var colDefs = [];
		var _g = 0;
		while(_g < columns.length) {
			var column = columns[_g];
			++_g;
			colDefs.push({ text : column, dataIndex : column, editor : "textfield"});
		}
		this.rowField = colDefs[0].dataIndex;
		var data = [];
		var _g1 = 1;
		var _g2 = lines.length;
		while(_g1 < _g2) {
			var i = _g1++;
			var line = lines[i];
			var cols = line.split(",");
			var row = { };
			var _g3 = 0;
			var _g21 = colDefs.length;
			while(_g3 < _g21) {
				var j = _g3++;
				Reflect.setField(row,colDefs[j].dataIndex,cols[j]);
			}
			data.push(row);
		}
		var dataTableDefinition = { columnDefs : colDefs, title : "Raw Data", data : data, raw : null};
		var styleTableDefinition_title = "Styles";
		var styleTableDefinition_columnDefs = null;
		var styleTableDefinition_data = null;
		this.reconfigure(dataTableDefinition,this.styleTable.getTableDefinition());
	}
	,objectAddedToOutline: function(dropFolder,objectId) {
		saturn.client.programs.SimpleExtJSProgram.prototype.objectAddedToOutline.call(this,dropFolder,objectId);
		this.setDirty(true);
		var _g = 0;
		var _g1 = this.getPlugins();
		while(_g < _g1.length) {
			var plugin = _g1[_g];
			++_g;
			if(Std["is"](plugin,saturn.client.programs.plugins.GridVarPlugin)) {
				var gvPlugin = plugin;
				gvPlugin.outlineAdd(objectId);
			}
		}
	}
	,saveWait: function(cb) {
		this.gridVarObj.lines = this.canvasGridVar.lines;
		cb();
	}
	,__class__: saturn.client.programs.GridVarViewer
});
saturn.client.workspace.HomeWO = $hxClasses["saturn.client.workspace.HomeWO"] = function(object,name) {
	if(object == null) {
		object = new saturn.core.Home();
	}
	if(name == null) {
		name = "Home";
	}
	this.iconPath = "/static/js/images/playground_16.png";
	saturn.client.workspace.WorkspaceObjectBase.call(this,object,name);
};
saturn.client.workspace.HomeWO.__name__ = ["saturn","client","workspace","HomeWO"];
saturn.client.workspace.HomeWO.getNewMenuText = function() {
	return "Home";
};
saturn.client.workspace.HomeWO.getDefaultFolderName = function() {
	return "Other";
};
saturn.client.workspace.HomeWO.__super__ = saturn.client.workspace.WorkspaceObjectBase;
saturn.client.workspace.HomeWO.prototype = $extend(saturn.client.workspace.WorkspaceObjectBase.prototype,{
	__class__: saturn.client.workspace.HomeWO
});
saturn.client.programs.HomePage = $hxClasses["saturn.client.programs.HomePage"] = function() {
	saturn.client.programs.SimpleExtJSProgram.call(this);
};
saturn.client.programs.HomePage.__name__ = ["saturn","client","programs","HomePage"];
saturn.client.programs.HomePage.getQuickLaunchItems = function() {
	return [{ iconCls : "x-btn-playground", text : "Examples", cls : "quickLaunchButton", handler : function() {
		saturn.client.WorkspaceApplication.getApplication().getWorkspace().addObject(new saturn.client.workspace.HomeWO(null,null),true);
	}, tooltip : { dismissDelay : 10000, text : "Play around with pre-saved sessions with example data"}}];
};
saturn.client.programs.HomePage.__super__ = saturn.client.programs.SimpleExtJSProgram;
saturn.client.programs.HomePage.prototype = $extend(saturn.client.programs.SimpleExtJSProgram.prototype,{
	theComponent: null
	,theToolBar: null
	,demoNameToUrl: null
	,demos: null
	,emptyInit: function() {
		var _gthis = this;
		saturn.client.programs.SimpleExtJSProgram.prototype.emptyInit.call(this);
		this.demoNameToUrl = new haxe.ds.StringMap();
		this.demoNameToUrl.set("ABIExample1","/static/demo/ABIExample.sat");
		this.demos = new haxe.ds.StringMap();
		this.addDemo({ name : "Sequencing runs", url : "/static/demo/RandomTraces.sat", icon : "x-btn-trace"});
		this.addDemo({ name : "THB progress (construct/target summary)", url : "/static/demo/THB-Summary.sat", icon : "x-btn-gridvar"});
		this.addDemo({ name : "THB construct alignment (example loads 53 sequences)", url : "/static/demo/THB_Alignment.sat", icon : "x-btn-aln"});
		this.addDemo({ name : "Glycosyltransferase tree (examples loads 200 sequences)", url : "/static/demo/GTTree.sat", icon : "x-btn-tree"});
		this.addDemo({ name : "THB constructs (loads DNA and Protein sequences)", url : "/static/demo/THB-sequences.sat", icon : "x-btn-structure"});
		this.addDemo({ name : "THB construct plate", url : "/static/demo/THB-cp.sat", icon : "x-btn-conical-dna"});
		this.addDemo({ name : "Coding examples", url : "/static/demo/coding.sat", icon : "x-btn-conical-dna"});
		this.theToolBar = Ext.create("Ext.toolbar.Toolbar",{ style : { "background-color" : "white"}, layout : { type : "vbox"}, height : "100%"});
		this.theComponent = Ext.create("Ext.panel.Panel",{ height : "100%", width : "100%", listeners : { "render" : function() {
			_gthis.initialiseDOMComponent();
		}}});
		this.theComponent.add(this.theToolBar);
	}
	,addDemo: function(demo) {
		this.demos.set(demo.name,demo);
	}
	,loadDemo: function(name) {
		var _gthis = this;
		js.Browser.get_window().console.log("Loading: " + name);
		if(this.demos.exists(name)) {
			var demo = this.demos.get(name);
			var url = demo.url;
			saturn.client.core.CommonCore.getContent(url,function(content) {
				_gthis.getWorkspace()._openWorkspace(haxe.Unserializer.run(content));
			});
		}
	}
	,initialiseDOMComponent: function() {
		saturn.client.programs.SimpleExtJSProgram.prototype.initialiseDOMComponent.call(this);
		this.buildDemoButtons();
	}
	,buildDemoButtons: function() {
		var _gthis = this;
		var name = this.demos.keys();
		while(name.hasNext()) {
			var name1 = name.next();
			var name2 = [name1];
			var demo = this.demos.get(name2[0]);
			js.Browser.get_window().console.log("Adding" + Std.string(demo));
			this.theToolBar.add({ iconCls : demo.icon, text : name2[0], cls : "quickLaunchButton", handler : (function(name3) {
				return function() {
					_gthis.loadDemo(name3[0]);
				};
			})(name2), style : { "margin-left" : "auto", "margin-right" : 0}, width : "100%"});
		}
	}
	,onFocus: function() {
		saturn.client.programs.SimpleExtJSProgram.prototype.onFocus.call(this);
		this.getApplication().hideMiddleSouthPanel();
	}
	,setActiveObject: function(objectId) {
		saturn.client.programs.SimpleExtJSProgram.prototype.setActiveObject.call(this,objectId);
		var w0 = js.Boot.__cast(saturn.client.programs.SimpleExtJSProgram.prototype.getActiveObject.call(this,saturn.client.workspace.HomeWO) , saturn.client.workspace.HomeWO);
		var obj = js.Boot.__cast(w0.getObject() , saturn.core.Home);
		this.setTitle(w0.getName());
	}
	,setTitle: function(title) {
		this.theComponent.setTitle(title);
	}
	,getComponent: function() {
		return this.theComponent;
	}
	,__class__: saturn.client.programs.HomePage
});
saturn.client.workspace.LigationWO = $hxClasses["saturn.client.workspace.LigationWO"] = function(object,name) {
	if(object == null) {
		object = new saturn.core.Ligation(null,null);
	}
	if(name == null) {
		name = "Ligation";
	}
	saturn.client.workspace.DNAWorkspaceObject.call(this,object,name);
};
saturn.client.workspace.LigationWO.__name__ = ["saturn","client","workspace","LigationWO"];
saturn.client.workspace.LigationWO.getNewMenuText = function() {
	return "Ligation";
};
saturn.client.workspace.LigationWO.__super__ = saturn.client.workspace.DNAWorkspaceObject;
saturn.client.workspace.LigationWO.prototype = $extend(saturn.client.workspace.DNAWorkspaceObject.prototype,{
	acceptorId: null
	,donorId: null
	,hasAcceptor: function() {
		return this.acceptorId != null;
	}
	,hasDonor: function() {
		return this.donorId != null;
	}
	,setAcceptor: function(digest) {
		this.acceptorId = digest.getUUID();
	}
	,setDonor: function(digest) {
		this.donorId = digest.getUUID();
	}
	,getAcceptor: function() {
		return saturn.client.WorkspaceApplication.getApplication().getWorkspace().getObjectSafely(this.acceptorId,saturn.client.workspace.DigestWO);
	}
	,getDonor: function() {
		return saturn.client.WorkspaceApplication.getApplication().getWorkspace().getObjectSafely(this.donorId,saturn.client.workspace.DigestWO);
	}
	,updateLigation: function() {
		if(this.hasAcceptor() && this.hasDonor()) {
			var acceptor = this.getAcceptor();
			var donor = this.getDonor();
			if(acceptor != null && donor != null) {
				var ligation = this.getObject();
				ligation.setAcceptor(acceptor.getDigest());
				ligation.setDonor(donor.getDigest());
				ligation.calculateProduct();
			}
		}
	}
	,getLigation: function() {
		return js.Boot.__cast(this.getDNAObject() , saturn.core.Ligation);
	}
	,__class__: saturn.client.workspace.LigationWO
});
saturn.client.programs.LigationViewer = $hxClasses["saturn.client.programs.LigationViewer"] = function() {
	saturn.client.programs.DNASequenceEditor.call(this);
};
saturn.client.programs.LigationViewer.__name__ = ["saturn","client","programs","LigationViewer"];
saturn.client.programs.LigationViewer.__super__ = saturn.client.programs.DNASequenceEditor;
saturn.client.programs.LigationViewer.prototype = $extend(saturn.client.programs.DNASequenceEditor.prototype,{
	emptyInit: function() {
		saturn.client.programs.DNASequenceEditor.prototype.emptyInit.call(this);
		this.getWorkspace().addListener(this);
	}
	,onFocus: function() {
		saturn.client.programs.DNASequenceEditor.prototype.onFocus.call(this);
	}
	,workspaceObjectUpdated: function() {
		try {
			var wo = this.getActiveObject(saturn.client.workspace.LigationWO);
			wo.updateLigation();
			var sequence = wo.getLigation().getSequence();
			if(sequence != null && sequence.length != 0) {
				this.blockChanged(null,null,0,null,sequence);
			}
		} catch( ex ) {
			if (ex instanceof js._Boot.HaxeError) ex = ex.val;
			if( js.Boot.__instanceof(ex,saturn.util.HaxeException) ) {
				js.Browser.alert(ex.getMessage());
			} else throw(ex);
		}
	}
	,serialise: function() {
		var object = saturn.client.programs.DNASequenceEditor.prototype.serialise.call(this);
		return object;
	}
	,deserialise: function(object) {
		saturn.client.programs.DNASequenceEditor.prototype.deserialise.call(this,object);
	}
	,installOutlineTree: function() {
		saturn.client.programs.DNASequenceEditor.prototype.installOutlineTree.call(this);
		var wo = this.getActiveObject(saturn.client.workspace.LigationWO);
		var acceptor = null;
		var donor = null;
		if(wo != null) {
			if(wo.hasAcceptor()) {
				acceptor = wo.getAcceptor();
			}
			if(wo.hasDonor()) {
				donor = wo.getDonor();
			}
		}
		this.addWorkspaceDropFolder("Donor",donor,saturn.client.workspace.DigestWO,false);
		this.addWorkspaceDropFolder("Acceptor",acceptor,saturn.client.workspace.DigestWO,false);
	}
	,__class__: saturn.client.programs.LigationViewer
});
saturn.client.workspace.TableHelperWO = $hxClasses["saturn.client.workspace.TableHelperWO"] = function(object,name) {
	if(object == null) {
		object = new saturn.client.workspace.TableHelperWO(null,name);
	}
	if(name == null) {
		name = "Table Helper";
	}
	saturn.client.workspace.WorkspaceObjectBase.call(this,object,name);
};
saturn.client.workspace.TableHelperWO.__name__ = ["saturn","client","workspace","TableHelperWO"];
saturn.client.workspace.TableHelperWO.getNewMenuText = function() {
	return "Table Helper";
};
saturn.client.workspace.TableHelperWO.__super__ = saturn.client.workspace.WorkspaceObjectBase;
saturn.client.workspace.TableHelperWO.prototype = $extend(saturn.client.workspace.WorkspaceObjectBase.prototype,{
	serialise: function() {
		var serialisedObject = saturn.client.workspace.WorkspaceObjectBase.prototype.serialise.call(this);
		serialisedObject.DATA = { "DATA" : this.object.getData()};
		return serialisedObject;
	}
	,deserialise: function(object) {
		saturn.client.workspace.WorkspaceObjectBase.prototype.deserialise.call(this,object);
		var obj = new saturn.core.TableHelperData();
		obj.setData(object.DATA.DATA);
		this.setObject(obj);
	}
	,clone: function() {
		var app = saturn.client.WorkspaceApplication.getApplication();
		var prog = js.Boot.__cast(app.getWorkspace().getOpenProgram(this.getUUID()) , saturn.client.programs.TableHelper);
		var models = prog.getModels();
		var data = new saturn.core.TableHelperData();
		data.setModelsToCopy(models);
		var newwo = new saturn.client.workspace.TableHelperWO(data,this.getName());
		return newwo;
	}
	,__class__: saturn.client.workspace.TableHelperWO
});
saturn.client.programs.TableHelper = $hxClasses["saturn.client.programs.TableHelper"] = function(modelClass) {
	this.loadedExisting = false;
	this.resetOnActions = true;
	this.loadRequired = false;
	this.viewReady = false;
	this.theModelClass = modelClass;
	saturn.client.programs.SimpleExtJSProgram.call(this);
};
saturn.client.programs.TableHelper.__name__ = ["saturn","client","programs","TableHelper"];
saturn.client.programs.TableHelper.openViewer = function(name,objs,clazz) {
	var data = new saturn.core.TableHelperData(objs);
	var program = new saturn.client.programs.TableHelper(clazz);
	program.setTitle(name);
	var wo = new saturn.client.workspace.TableHelperWO(data,name);
	var wk = saturn.client.WorkspaceApplication.getApplication().getWorkspace();
	wk.registerObjectWith(wo,program);
};
saturn.client.programs.TableHelper.__super__ = saturn.client.programs.SimpleExtJSProgram;
saturn.client.programs.TableHelper.prototype = $extend(saturn.client.programs.SimpleExtJSProgram.prototype,{
	theComponent: null
	,theTable: null
	,cellClicked: null
	,theModel: null
	,theModelClass: null
	,theTitle: null
	,storeId: null
	,viewReady: null
	,loadRequired: null
	,invalidRows: null
	,internalIdField: null
	,hideHiddenColumns: null
	,showInternalRowId: null
	,rowValidField: null
	,resetOnActions: null
	,loadedExisting: null
	,tableColumns: null
	,emptyInit: function() {
		var _gthis = this;
		saturn.client.programs.SimpleExtJSProgram.prototype.emptyInit.call(this);
		this.hideHiddenColumns = true;
		this.internalIdField = "__HIDDEN_ROW_ID";
		this.rowValidField = "__HIDDEN_ROW_VALID";
		this.showInternalRowId = false;
		this.invalidRows = [];
		this.theModel = this.getApplication().getProvider().getModel(this.theModelClass);
		if(this.theModel == null) {
			this.getApplication().showMessage("Data mapping error","Unable to find model " + Std.string(this.theModelClass));
			return;
		}
		var fields = this.theModel.getFieldDefs();
		fields.unshift("ROWNUM");
		fields.unshift(this.internalIdField);
		fields.unshift(this.rowValidField);
		if(!Ext.ClassManager.isCreated(this.theModel.getExtModelName())) {
			var dWin = js.Browser.get_window();
			dWin.fields = fields;
			dWin.internalId = this.internalIdField;
			dWin.name = this.theModel.getExtModelName();
			Ext.define(this.theModel.getExtModelName(),{ extend : "Ext.data.Model", fields : fields, idProperty : this.internalIdField, identifier : { type : "sequential"}});
		}
		this.storeId = saturn.client.programs.TableHelper.next_store_id + ":" + this.theModel.getExtStoreName();
		saturn.client.programs.TableHelper.next_store_id++;
		Ext.create("Ext.data.Store",{ storeId : this.storeId, model : this.theModel.getExtModelName(), data : [{ ROWNUMBER : "1"}], proxy : { type : "memory"}});
		this.theComponent = Ext.create("Ext.panel.Panel",{ title : this.theTitle, width : "100%", height : "95%", region : "middle", autoScroll : true, layout : { type : "vbox", align : "stretch", pack : "start"}, multiSelect : true, listeners : { "render" : function(obj) {
			_gthis.theComponent = obj;
			_gthis.initialiseDOMComponent();
		}}});
	}
	,getButtonPanelConfiguration: function() {
		var _gthis = this;
		return [{ region : "center", xtype : "button", text : "Save", handler : function() {
			_gthis.upsert();
		}},{ region : "center", xtype : "button", text : "Fetch all", handler : function() {
			_gthis.fetchAll(function() {
				_gthis.getApplication().showMessage("Fetch successful","Fetch complete");
			});
		}}];
	}
	,getContextMenuItems: function(modelColumn,rowIndex) {
		var _gthis = this;
		var items = [];
		var c = this.getStore().count();
		if(rowIndex != c - 1) {
			var model = this.getStore().getAt(rowIndex).getData();
			var priKey = this.theModel.getPrimaryKey();
			var val = Reflect.field(model,priKey);
			if(val != null && val != "") {
				items.push({ text : "Delete from database", handler : function() {
					var onCancel = function() {
					};
					var firstKey = _gthis.theModel.getFirstKey();
					var firstVal = Reflect.field(model,firstKey);
					_gthis.getApplication().userPrompt("Delete confirmation","Are you sure you want to delete " + firstVal,function() {
						var models = [model];
						_gthis.getProvider().modelToReal(_gthis.theModel,models,function(err,realModels) {
							if(err == null) {
								var realModel = realModels[0];
								_gthis.insertOrDeletePerformed();
								_gthis.getProvider()["delete"](realModel,function(err1) {
									if(err1 == null) {
										_gthis.getApplication().showMessage("Success","Delete successful");
										_gthis.getStore().removeAt(rowIndex);
										_gthis.autoAddNewRow();
									} else {
										var d = js.Browser.get_window();
										d.err = err1;
										_gthis.getApplication().showMessage("Delete failure",err1);
									}
								});
							} else {
								_gthis.getApplication().showMessage("Delete failure",err);
							}
						});
						_gthis.autoAddNewRow();
					},onCancel,onCancel);
				}});
			} else {
				items.push({ text : "Delete Row", handler : function() {
					_gthis.getStore().removeAt(rowIndex);
					_gthis.autoAddNewRow();
				}});
			}
			items.push({ text : "Fill down", handler : function() {
				var model1 = _gthis.getStore().getAt(rowIndex);
				var val1 = model1.get(modelColumn);
				var c1 = _gthis.getStore().count();
				var _g1 = rowIndex;
				var _g = c1 - 1;
				while(_g1 < _g) {
					var i = _g1++;
					var row = _gthis.getStore().getAt(i);
					row.set(modelColumn,val1);
				}
			}});
			items.push({ text : "Copy", handler : function() {
				var model2 = _gthis.getStore().getAt(rowIndex);
				var fields = _gthis.theModel.getFields();
				var priField = _gthis.theModel.getPrimaryKey();
				var cb = _gthis.getApplication().getClipBoard();
				var cbContents = new saturn.client.programs.ClipBoardRow();
				var _g2 = 0;
				while(_g2 < fields.length) {
					var field = fields[_g2];
					++_g2;
					if(field != priField) {
						cbContents.set(field,model2.get(field));
					}
				}
				cb.setContents(cbContents);
			}});
		}
		var cb1 = this.getApplication().getClipBoard();
		var contents = cb1.getContents();
		if(Std["is"](contents,saturn.client.programs.ClipBoardRow)) {
			if(rowIndex != c - 1) {
				items.push({ text : "Paste After", handler : function() {
					_gthis.pasteRow(rowIndex + 1);
				}});
			}
			items.push({ text : "Paste Before", handler : function() {
				_gthis.pasteRow(rowIndex);
			}});
		}
		return items;
	}
	,pasteRow: function(atPosition) {
		var cb = this.getApplication().getClipBoard();
		var contents = cb.getContents();
		if(Std["is"](contents,saturn.client.programs.ClipBoardRow)) {
			saturn.client.WorkspaceApplication.suspendUpdates();
			var tableRowCopy = contents;
			var attributes = tableRowCopy.getContents();
			var entityStore = this.getStore();
			var fields = this.theModel.getFields();
			var priField = this.theModel.getPrimaryKey();
			var model = Ext.create(this.theModel.getExtModelName(),{ });
			var model1 = entityStore.insert(atPosition,model)[0];
			var _g = 0;
			while(_g < fields.length) {
				var field = fields[_g];
				++_g;
				if(field != priField) {
					var tmp = attributes.get(field);
					model1.set(field,tmp);
				}
			}
			saturn.client.WorkspaceApplication.resumeUpdates(false);
		}
	}
	,initialiseDOMComponent: function() {
		saturn.client.programs.SimpleExtJSProgram.prototype.initialiseDOMComponent.call(this);
		var me = this;
		this.completeSetup();
	}
	,completeSetup: function() {
		var _gthis = this;
		this.tableColumns = this.theModel.getExtTableDefinition();
		if(this.hideHiddenColumns) {
			var _g = 0;
			var _g1 = this.tableColumns;
			while(_g < _g1.length) {
				var tableColumn = _g1[_g];
				++_g;
				if(StringTools.startsWith(tableColumn.dataIndex,"__HIDDEN")) {
					HxOverrides.remove(this.tableColumns,tableColumn);
				}
			}
		} else {
			this.tableColumns.push({ header : "Row Valid", dataIndex : this.rowValidField});
		}
		if(this.showInternalRowId) {
			this.tableColumns.push({ header : "Internal Field ID", dataIndex : this.internalIdField});
		}
		this.theTable = Ext.create("Ext.grid.Panel",{ selType : "cellmodel", flex : 1, region : "south", store : this.getStore(), columns : this.tableColumns, plugins : [Ext.create("Ext.grid.plugin.CellEditing",{ })], listeners : { edit : function(editor,e) {
			_gthis.autoAddNewRow();
		}, cellclick : function(grid,td,cellIndex,record,tr,rowIndex,e1,eOpts) {
			_gthis.cellClicked = [cellIndex,rowIndex];
		}, "cellcontextmenu" : function(view,cell,cellIndex1,record1,row,rowIndex1,event) {
			var column = view.getHeaderByCell(cell);
			var position = view.getPositionByEvent(event);
			var columnIndex = position.column;
			var dataIndex = column.dataIndex;
			var contextMenuItems = _gthis.getContextMenuItems(column.dataIndex,rowIndex1);
			if(contextMenuItems.length > 0) {
				var contextMenu = Ext.create("Ext.menu.Menu",{ items : contextMenuItems});
				var tmp = event.getXY();
				contextMenu.showAt(tmp);
				event.stopEvent();
			}
		}, "beforecellmouseup" : function(view1,cell1,cellIndex2,record2,tr1,rowIndex2,event1,eOpts1) {
			if(event1.ctrlKey) {
				var column1 = view1.getHeaderByCell(cell1);
				var position1 = view1.getPositionByEvent(event1);
				var columnIndex1 = position1.column;
				var dataIndex1 = column1.dataIndex;
				var contextMenuItems1 = _gthis.getContextMenuItems(column1.dataIndex,rowIndex2);
				if(contextMenuItems1.length > 0) {
					var contextMenu1 = Ext.create("Ext.menu.Menu",{ items : contextMenuItems1});
					var tmp1 = event1.getXY();
					contextMenu1.showAt(tmp1);
					event1.stopEvent();
				}
			}
		}}, viewConfig : { enableTextSelection : true, stripeRows : false, listeners : { viewready : function(view2) {
			if(_gthis.loadRequired) {
				_gthis.loadExistingModels();
				if(!_gthis.loadedExisting) {
					_gthis.queryLoad();
				}
			}
			_gthis.viewReady = true;
			var tmp2 = view2.getEl();
			view2.keyMap = new Ext.KeyMap(tmp2,[{ key : "v", ctrl : true, fn : function(keyCode,e2) {
				var pasteZone = js.Browser.get_document().createElement("textarea");
				pasteZone.style.position = "absolute";
				pasteZone.style.top = "-1000px";
				pasteZone.style.left = "-1000px";
				js.Browser.get_document().body.appendChild(pasteZone);
				js.Browser.get_window().setTimeout(function() {
					_gthis.performPaste(pasteZone.value,view2);
					js.Browser.get_document().body.removeChild(pasteZone);
				},100);
				pasteZone.focus();
				pasteZone.select();
			}}]);
			var key = _gthis.theModel.getFirstKey();
			var validField = _gthis.rowValidField;
			var view3 = view2.el;
			var view4 = view2.itemSelector;
			var tmp3 = Ext.getBody();
			var updateTipBody = function(tip) {
				var msg = view2.getRecord(tip.triggerElement).get(validField);
				if(msg != null && msg != "") {
					tip.update(msg);
				} else {
					var updateTipBody1 = view2.getRecord(tip.triggerElement).get(key);
					tip.update(updateTipBody1);
				}
			};
			view2.tooltip = Ext.create("Ext.tip.ToolTip",{ target : view3, delegate : view4, trackMouse : true, renderTo : tmp3, listeners : { beforeshow : updateTipBody}});
		}}, getRowClass : function(record3) {
			return _gthis.getRecordCSS(record3);
		}}});
		this.theComponent.add(this.theTable);
	}
	,getRecordCSS: function(record) {
		var valid = record.get(this.rowValidField);
		if(valid != null && valid != "") {
			return "gridrow-invalid";
		} else {
			return "x-grid-cell";
		}
	}
	,setRecordValid: function(record,msg) {
		record.set(this.rowValidField,msg);
	}
	,performPaste: function(content,grid) {
		saturn.client.WorkspaceApplication.suspendUpdates();
		var columns = this.theTable.columns;
		var colCount = columns.length;
		var rowSep = "\n";
		if(content.indexOf("\r\n") > -1) {
			rowSep = "\r\n";
		}
		var rows = content.split(rowSep);
		var colClicked = this.cellClicked[0];
		var rowClicked = this.cellClicked[1];
		var currentCol = colClicked;
		var currentRow = rowClicked;
		var store = this.getStore();
		var storeCount = store.count();
		var _g = 0;
		while(_g < rows.length) {
			var row = rows[_g];
			++_g;
			if(row == "") {
				break;
			}
			var cols = row.split("\t");
			var pasteColIndex = 0;
			var model;
			if(currentRow > store.count() - 1) {
				model = Ext.create(this.theModel.getExtModelName(),{ });
				store.insert(currentRow,model);
			} else {
				model = store.getAt(currentRow);
			}
			++currentRow;
			var _g2 = currentCol;
			var _g1 = colCount;
			while(_g2 < _g1) {
				var col = _g2++;
				var field = columns[col].dataIndex;
				if(field != this.rowValidField && field != this.internalIdField) {
					model.set(columns[col].dataIndex,cols[pasteColIndex++]);
				} else {
					++pasteColIndex;
				}
				if(pasteColIndex > cols.length - 1) {
					break;
				}
			}
			currentCol = colClicked;
		}
		this.autoAddNewRow();
		saturn.client.WorkspaceApplication.resumeUpdates(false);
	}
	,queryLoad: function() {
	}
	,onFocus: function() {
		var _gthis = this;
		saturn.client.programs.SimpleExtJSProgram.prototype.onFocus.call(this);
		this.getApplication().hideMiddleSouthPanel();
		if(this.isNaked()) {
			return;
		}
		var fileMenu = this.getApplication().getFileMenu();
		var exportMenu = this.getApplication().getExportMenu();
		exportMenu.add({ text : "Tab separated file", hidden : false, handler : function() {
			var entityStore = _gthis.getStore();
			var entityCount = entityStore.count() - 1;
			var strBuf = new StringBuf();
			var fields = _gthis.theModel.getFields();
			var priField = _gthis.theModel.getPrimaryKey();
			var _g = 0;
			while(_g < fields.length) {
				var field = fields[_g];
				++_g;
				strBuf.add(field + "\t");
			}
			strBuf.add("\n");
			var _g1 = 0;
			var _g2 = entityCount;
			while(_g1 < _g2) {
				var i = _g1++;
				var entityModel = entityStore.getAt(i);
				var _g21 = 0;
				while(_g21 < fields.length) {
					var field1 = fields[_g21];
					++_g21;
					if(field1 != priField) {
						var value = entityModel.get(field1);
						if(value == null) {
							value = "";
						}
						strBuf.add(value + "\t");
					}
				}
				strBuf.add("\n");
			}
			var wo = _gthis.getActiveObject(saturn.client.workspace.WorkspaceObject);
			_gthis.getApplication().saveTextFile(strBuf.toString(),wo.getName() + ".tsv");
		}});
		this.getApplication().getToolBar().add({ iconCls : "x-btn-save", text : "Save", handler : function() {
			_gthis.upsert();
		}, tooltip : { dismissDelay : 10000, text : "Save changes to the database"}});
		this.getApplication().getToolBar().add({ iconCls : "x-btn-copy", text : "Fetch All", handler : function() {
			_gthis.fetchAll(function() {
				_gthis.getApplication().showMessage("Fetch successful","Fetch complete");
			});
		}, tooltip : { dismissDelay : 10000, text : "Retrieve information from database (enter IDs into first column)"}});
	}
	,upsert: function() {
		var _gthis = this;
		this.getApplication().showMessage("Please wait","Please wait.....");
		var store = this.getStore();
		var priKey = this.theModel.getPrimaryKey();
		var fields = this.theModel.getFields();
		var clazz = this.theModel.getClass();
		var models = [];
		store.each(function(record) {
			if(!_gthis.isRecordEmpty(record) && record.dirty) {
				var model = record.getData();
				models.push(model);
			}
			return true;
		});
		this.getProvider().modelToReal(this.theModel,models,function(exception,models1) {
			if(exception != null) {
				_gthis.getApplication().showMessage("Unexpected exception",exception);
				return;
			}
			var priField = _gthis.theModel.getPrimaryKey();
			var insertList = [];
			var updateList = [];
			var _g = 0;
			while(_g < models1.length) {
				var model1 = models1[_g];
				++_g;
				var val = Reflect.field(model1,priField);
				if(val == null || val == "") {
					insertList.push(model1);
				} else {
					updateList.push(model1);
				}
			}
			var evHandler = function(err) {
				if(err != null) {
					if(Reflect.hasField(err,"source")) {
						var buzValue = err.source;
						var buzField = _gthis.theModel.getFirstKey();
						var store1 = _gthis.getStore();
						var c = store1.count();
						var _g1 = 0;
						var _g2 = c;
						while(_g1 < _g2) {
							var i = _g1++;
							var model2 = store1.getAt(i);
							var modelBuzValue = model2.get(buzField);
							if(buzValue == modelBuzValue) {
								_gthis.setRecordValid(model2,err.message);
								break;
							}
						}
						_gthis.getApplication().showMessage("Database error",err.message);
						_gthis.theTable.getView().refresh();
					} else {
						_gthis.getApplication().showMessage("Data update exception",err);
					}
				} else {
					_gthis.getApplication().showMessage("Save successful","All records saved succesfully");
					var c1 = store.count();
					var _g11 = 0;
					var _g3 = c1;
					while(_g11 < _g3) {
						var i1 = _g11++;
						var model3 = store.getAt(i1);
						_gthis.setRecordValid(model3,null);
					}
					_gthis.fetchAll(function() {
						_gthis.getApplication().showMessage("Save successful","All records saved succesfully");
					});
				}
			};
			if(insertList.length > 0) {
				_gthis.getProvider().insertObjects(insertList,function(err1) {
					if(err1 == null && updateList.length > 0) {
						_gthis.getProvider().updateObjects(updateList,evHandler);
					} else {
						evHandler(err1);
					}
					_gthis.insertOrDeletePerformed();
				});
			} else if(updateList.length > 0) {
				_gthis.getProvider().updateObjects(updateList,evHandler);
			} else {
				_gthis.getApplication().showMessage("","No changes to save");
			}
		});
	}
	,insertOrDeletePerformed: function() {
	}
	,setTitle: function(title) {
		this.theComponent.setTitle(title);
	}
	,getComponent: function() {
		return this.theComponent;
	}
	,autoAddNewRow: function() {
		var store = this.getStore();
		var storeLen = store.count();
		var addNewRow = true;
		if(storeLen > 0) {
			var record = store.getAt(storeLen - 1);
			addNewRow = !this.isRecordEmpty(record);
		}
		if(addNewRow) {
			var tmp = Ext.create(this.theModel.getExtModelName(),{ });
			store.insert(storeLen,tmp);
		}
	}
	,isRecordEmpty: function(record) {
		var _gthis = this;
		var rowOccupied = false;
		record.fields.forEach(function(field) {
			if(field.name != null && field.name != "" && field.name != _gthis.internalIdField) {
				var value = record.get(field.name);
				if(value != null && value != "") {
					var fieldDefault = _gthis.theModel.getFieldDefault(field.name);
					if(fieldDefault == null || fieldDefault != value) {
						rowOccupied = true;
						return false;
					}
				}
			}
			return true;
		});
		return !rowOccupied;
	}
	,fetchAll: function(cb) {
		var _gthis = this;
		this.getApplication().showMessage("Please wait","Please wait.....");
		var entityStore = this.getStore();
		var entityCount = entityStore.count() - 1;
		var entityMap = new haxe.ds.StringMap();
		var _g1 = 0;
		var _g = entityCount;
		while(_g1 < _g) {
			var i = _g1++;
			var entityModel = entityStore.getAt(i);
			if(this.isRecordEmpty(entityModel)) {
				continue;
			}
			var keyVal = this.theModel.getFirstKey();
			if(keyVal == null || keyVal == "") {
				continue;
			}
			var entityId = entityModel.get(keyVal);
			entityMap.set(entityId,"");
		}
		var entityList = [];
		var entityId1 = entityMap.keys();
		while(entityId1.hasNext()) {
			var entityId2 = entityId1.next();
			entityList.push(entityId2);
		}
		var batchFetch = new saturn.db.BatchFetch(function(obj,err) {
			_gthis.getApplication().showMessage("Batch fetch failure",err);
		});
		var tmp = this.theModel.getClass();
		batchFetch.getByIds(entityList,tmp,"MODELS",function(obj1,err1) {
			if(err1 == null) {
				var objs = batchFetch.getObject("MODELS");
				_gthis.getApplication().getProvider().activate(objs,2,function(err2) {
					if(err2 != null) {
						_gthis.getApplication().showMessage("Batch fetch failure",err2);
						return;
					}
					saturn.client.WorkspaceApplication.suspendUpdates();
					var _g11 = 0;
					var _g2 = entityCount;
					while(_g11 < _g2) {
						var i1 = _g11++;
						var entityModel1 = entityStore.getAt(i1);
						var entityId3 = entityModel1.get(_gthis.theModel.getFirstKey());
						var cacheObject = _gthis.getApplication().getProvider().getObjectFromCache(_gthis.theModel.getClass(),_gthis.theModel.getFirstKey(),entityId3);
						if(cacheObject != null) {
							var _g21 = 0;
							var _g3 = _gthis.theModel.getFields();
							while(_g21 < _g3.length) {
								var field = _g3[_g21];
								++_g21;
								if(field.indexOf(".") > -1) {
									var parts = field.split(".");
									var valObj = cacheObject;
									var _g4 = 0;
									while(_g4 < parts.length) {
										var part = parts[_g4];
										++_g4;
										var val = Reflect.field(valObj,part);
										if(val == null) {
											valObj = null;
											break;
										} else {
											valObj = val;
										}
									}
									entityModel1.set(field,valObj);
								} else {
									var val1 = Reflect.field(cacheObject,field);
									entityModel1.set(field,val1);
								}
							}
							_gthis.setRecordValid(entityModel1,null);
						} else {
							_gthis.setRecordValid(entityModel1,entityId3 + " not found in database");
						}
					}
					entityStore.commitChanges();
					saturn.client.WorkspaceApplication.resumeUpdates(true);
					_gthis.theTable.getView().refresh();
					cb();
				});
			} else {
				_gthis.getApplication().showMessage("",err1);
			}
		});
		batchFetch.execute();
	}
	,isNullOrEmpty: function(value) {
		if(value == null) {
			return true;
		} else if(StringTools.replace(value == null ? "null" : "" + value," ","") == "") {
			return true;
		} else {
			return false;
		}
	}
	,loadObjects: function(objs) {
		var _gthis = this;
		this.getApplication().getProvider().activate(objs,2,function(err) {
			if(err != null) {
				_gthis.getApplication().showMessage("Batch fetch failure",err);
				return;
			}
			var entityStore = _gthis.getStore();
			entityStore.suspendEvents();
			var firstKey = _gthis.theModel.getFirstKey();
			var c = entityStore.count();
			var tmp;
			if(c > 0) {
				var tmp1 = entityStore.getAt(c - 1);
				tmp = _gthis.isRecordEmpty(tmp1);
			} else {
				tmp = false;
			}
			if(tmp) {
				--c;
			}
			var _g = 0;
			while(_g < objs.length) {
				var obj = objs[_g];
				++_g;
				var val = Reflect.field(obj,firstKey);
				var model = Ext.create(_gthis.theModel.getExtModelName(),{ });
				var model1 = entityStore.insert(c++,model)[0];
				model1.set(firstKey,val);
			}
			c = entityStore.count();
			var _g1 = 0;
			var _g2 = c;
			while(_g1 < _g2) {
				var i = _g1++;
				var entityModel = entityStore.getAt(i);
				var entityId = entityModel.get(_gthis.theModel.getFirstKey());
				var cacheObject = _gthis.getApplication().getProvider().getObjectFromCache(_gthis.theModel.getClass(),_gthis.theModel.getFirstKey(),entityId);
				if(cacheObject != null) {
					var _g21 = 0;
					var _g3 = _gthis.theModel.getFields();
					while(_g21 < _g3.length) {
						var field = _g3[_g21];
						++_g21;
						if(field.indexOf(".") > -1) {
							var parts = field.split(".");
							var valObj = cacheObject;
							var _g4 = 0;
							while(_g4 < parts.length) {
								var part = parts[_g4];
								++_g4;
								var val1 = Reflect.field(valObj,part);
								if(val1 == null) {
									valObj = null;
									break;
								} else {
									valObj = val1;
								}
							}
							entityModel.set(field,valObj);
						} else {
							var val2 = Reflect.field(cacheObject,field);
							entityModel.set(field,val2);
						}
					}
				}
				entityModel.commit();
			}
			_gthis.autoAddNewRow();
			entityStore.resumeEvents();
			_gthis.theTable.getView().refresh();
		});
	}
	,loadModels: function(models) {
		saturn.client.WorkspaceApplication.suspendUpdates();
		var entityStore = this.getStore();
		var priKey = this.theModel.getPrimaryKey();
		var fields = this.theModel.getFields();
		var i = 0;
		var _g = 0;
		while(_g < models.length) {
			var model = models[_g];
			++_g;
			var newModel = Ext.create(this.theModel.getExtModelName(),{ });
			var newModel1 = entityStore.insert(i++,newModel)[0];
			var _g1 = 0;
			while(_g1 < fields.length) {
				var field = fields[_g1];
				++_g1;
				if(field != priKey) {
					var tmp = model.get(field);
					newModel1.set(field,tmp);
				}
			}
		}
		this.autoAddNewRow();
		saturn.client.WorkspaceApplication.resumeUpdates(false);
	}
	,getModels: function() {
		var store = this.getStore();
		var models = [];
		var c = store.count();
		var _g1 = 0;
		var _g = c;
		while(_g1 < _g) {
			var i = _g1++;
			var model = store.getAt(i);
			models.push(model);
		}
		return models;
	}
	,getStore: function() {
		var store = Ext.data.StoreManager.lookup(this.storeId);
		return store;
	}
	,setActiveObject: function(objectId) {
		saturn.client.programs.SimpleExtJSProgram.prototype.setActiveObject.call(this,objectId);
		this.loadedExisting = false;
		if(this.viewReady) {
			this.loadExistingModels();
		} else {
			this.loadRequired = true;
		}
	}
	,loadExistingModels: function() {
		var wo = this.getWorkspace().getObjectSafely(this.getActiveObjectId(),saturn.client.workspace.WorkspaceObject);
		if(wo != null) {
			var data = wo.getObject();
			if(Std["is"](data,saturn.client.programs.TableHelperModelData)) {
				var modelData = js.Boot.__cast(data , saturn.client.programs.TableHelperModelData);
				var modelsToCopy = modelData.getModelsToCopy();
				var models = modelData.getModels();
				var rawModels = modelData.getRawModels();
				if(modelsToCopy != null) {
					this.loadModels(modelsToCopy);
					modelData.setModelsToCopy(null);
					this.loadedExisting = true;
				} else if(models != null) {
					this.getStore().loadRecords(models);
					this.loadedExisting = true;
				} else if(rawModels != null) {
					this.getStore().loadData(rawModels);
					modelData.setRawModels(null);
					this.loadedExisting = true;
				} else if(modelData.getObjects() != null) {
					this.loadObjects(modelData.getObjects());
					this.loadedExisting = true;
				}
			}
		}
		this.loadRequired = false;
	}
	,closeWorkspaceObject: function(objectId) {
		var wo = this.getActiveObject(saturn.client.workspace.WorkspaceObject);
		if(wo != null) {
			var data = wo.getObject();
			if(Std["is"](data,saturn.client.programs.TableHelperModelData)) {
				var modelData = js.Boot.__cast(data , saturn.client.programs.TableHelperModelData);
				var models = this.getModels();
				modelData.setModels(models);
			}
		}
		saturn.client.programs.SimpleExtJSProgram.prototype.closeWorkspaceObject.call(this,objectId);
	}
	,close: function() {
		if(this.theTable != null) {
			this.theTable.view.tooltip.config.listeners.beforeshow = null;
			this.theTable.view.tooltip.events.beforeshow.listeners[0].fireFn = null;
			this.theTable.view.tooltip.events.beforeshow.listeners[0].fn = null;
			this.theTable.view.keyMap.fn = null;
			var _g1 = 0;
			var _g = this.theTable.view.keyMap.bindings.length;
			while(_g1 < _g) {
				var i = _g1++;
				this.theTable.view.keyMap.bindings[i].fn = null;
			}
			this.theTable.config.listeners.beforecellmouseup = null;
			this.theTable.config.viewConfig.getRowClass = null;
			this.theTable.viewConfig.getRowClass = null;
			this.theTable.config.listeners.cellcontextmenu = null;
			this.theTable.config.listeners.cellclick = null;
			this.theTable.config.listeners.edit = null;
			this.theTable.view.config.getRowClass = null;
			this.theTable.view.config.listeners.beforeshow = null;
			this.theTable.view.config.listeners.viewready = null;
			this.theTable.view.getRowClass = null;
			this.theTable.view.initialConfig.getRowClass = null;
			this.theTable.view.initialConfig.listeners.beforeshow = null;
			this.theTable.view.initialConfig.listeners.viewready = null;
		}
		this.theComponent.config.listeners.render = null;
		if(this.theComponent.config.items != null) {
			var _g11 = 0;
			var _g2 = this.theComponent.config.items.length;
			while(_g11 < _g2) {
				var i1 = _g11++;
				this.theComponent.config.items[i1].handler = null;
			}
		}
		if(this.theTable != null) {
			this.theTable.viewConfig.getRowClass = null;
			this.theTable.clearListeners();
			this.theTable.getView().clearListeners();
			this.theTable.viewConfig.listeners = null;
		}
		saturn.client.programs.SimpleExtJSProgram.prototype.close.call(this);
	}
	,__class__: saturn.client.programs.TableHelper
});
saturn.client.workspace.MultiAlleleHelperWO = $hxClasses["saturn.client.workspace.MultiAlleleHelperWO"] = function(object,name) {
	if(object == null) {
		object = new saturn.core.MultiAlleleHelperData();
	} else if(Std["is"](object,saturn.core.domain.SgcAllelePlate)) {
		var allelePlate = object;
		object = new saturn.core.MultiAlleleHelperData();
		object.setPlateName(allelePlate.plateName);
	}
	if(name == null) {
		name = "Allele Helper";
	}
	this.iconPath = "/static/js/images/dna_conical_16.png";
	saturn.client.workspace.WorkspaceObjectBase.call(this,object,name);
};
saturn.client.workspace.MultiAlleleHelperWO.__name__ = ["saturn","client","workspace","MultiAlleleHelperWO"];
saturn.client.workspace.MultiAlleleHelperWO.getNewMenuText = function() {
	return "Allele Helper";
};
saturn.client.workspace.MultiAlleleHelperWO.getDefaultFolderName = function() {
	return "Allele Plates";
};
saturn.client.workspace.MultiAlleleHelperWO.__super__ = saturn.client.workspace.WorkspaceObjectBase;
saturn.client.workspace.MultiAlleleHelperWO.prototype = $extend(saturn.client.workspace.WorkspaceObjectBase.prototype,{
	serialise: function() {
		var app = saturn.client.WorkspaceApplication.getApplication();
		var prog = js.Boot.__cast(app.getWorkspace().getOpenProgram(this.getUUID()) , saturn.client.programs.TableHelper);
		var models = prog.getModels();
		var dataModels = [];
		var _g = 0;
		while(_g < models.length) {
			var model = models[_g];
			++_g;
			dataModels.push(model.data);
		}
		this.object.setRawModels(dataModels);
		return saturn.client.workspace.WorkspaceObjectBase.prototype.serialise.call(this);
	}
	,clone: function() {
		var app = saturn.client.WorkspaceApplication.getApplication();
		var prog = js.Boot.__cast(app.getWorkspace().getOpenProgram(this.getUUID()) , saturn.client.programs.TableHelper);
		var models = prog.getModels();
		var data = new saturn.core.MultiAlleleHelperData();
		data.setModelsToCopy(models);
		var newwo = new saturn.client.workspace.MultiAlleleHelperWO(data,this.getName());
		return newwo;
	}
	,__class__: saturn.client.workspace.MultiAlleleHelperWO
});
saturn.client.programs.MultiAlleleHelper = $hxClasses["saturn.client.programs.MultiAlleleHelper"] = function() {
	this.theTitle = "Allele Helper";
	saturn.client.programs.TableHelper.call(this,saturn.core.domain.SgcAllele);
};
saturn.client.programs.MultiAlleleHelper.__name__ = ["saturn","client","programs","MultiAlleleHelper"];
saturn.client.programs.MultiAlleleHelper.getQuickLaunchItems = function() {
	return [{ iconCls : "x-btn-conical-dna", html : "PCR<br/>Plate", cls : "quickLaunchButton", handler : function() {
		saturn.client.WorkspaceApplication.getApplication().getWorkspace().addObject(new saturn.client.workspace.MultiAlleleHelperWO(null,"Alleles"),true);
	}, tooltip : { dismissDelay : 10000, text : "Edit existing PCR products or enter new ones."}}];
};
saturn.client.programs.MultiAlleleHelper.__super__ = saturn.client.programs.TableHelper;
saturn.client.programs.MultiAlleleHelper.prototype = $extend(saturn.client.programs.TableHelper.prototype,{
	getButtonPanelConfiguration: function() {
		var me = this;
		var baseButtons = saturn.client.programs.TableHelper.prototype.getButtonPanelConfiguration.call(this);
		baseButtons.push({ region : "center", xtype : "button", text : "Calculate", handler : function() {
			me.calculate();
		}, iconCls : "x-btn-calculate"});
		return baseButtons;
	}
	,getContextMenuItems: function(modelColumn,rowIndex) {
		var _gthis = this;
		var me = this;
		var items = saturn.client.programs.TableHelper.prototype.getContextMenuItems.call(this,modelColumn,rowIndex);
		if(modelColumn == "dnaSeq") {
			items.push({ text : "Import DNA", handler : function() {
				var model = _gthis.getStore().getAt(rowIndex);
				var dnaObj = new saturn.core.DNA(model.get(modelColumn));
				var dnawo = new saturn.client.workspace.DNAWorkspaceObject(dnaObj,model.get("alleleId") + " (DNA) ");
				me.getApplication().getWorkspace().addObject(dnawo,true);
			}});
		} else if(modelColumn == "proteinSeq") {
			items.push({ text : "Import Protein", handler : function() {
				var model1 = _gthis.getStore().getAt(rowIndex);
				var label = model1.get("alleleId");
				var proteinObj = new saturn.core.Protein(model1.get(modelColumn));
				var proteinwo = new saturn.client.workspace.ProteinWorkspaceObject(proteinObj,label);
				me.getApplication().getWorkspace().addObject(proteinwo,true);
			}});
		} else if(modelColumn == "forwardPrimer.primerId") {
			items.push({ text : "Import Primer", handler : function() {
				var model2 = _gthis.getStore().getAt(rowIndex);
				var primerId = model2.get("forwardPrimer.primerId");
				_gthis.getProvider().getById(primerId,saturn.core.domain.SgcForwardPrimer,function(primer,exception) {
					if(exception != null) {
						_gthis.getApplication().showMessage("Fetch error",exception);
					} else {
						var dna = new saturn.core.DNA(primer.dnaSequence);
						var wo = new saturn.client.workspace.DNAWorkspaceObject(dna,primerId);
						me.getApplication().getWorkspace().addObject(wo,true);
					}
				});
			}});
		} else if(modelColumn == "reversePrimer.primerId") {
			items.push({ text : "Import Primer", handler : function() {
				var model3 = _gthis.getStore().getAt(rowIndex);
				var primerId1 = model3.get("reversePrimer.primerId");
				_gthis.getProvider().getById(primerId1,saturn.core.domain.SgcReversePrimer,function(primer1,exception1) {
					if(exception1 != null) {
						_gthis.getApplication().showMessage("Fetch error",exception1);
					} else {
						var dna1 = new saturn.core.DNA(primer1.dnaSequence);
						var wo1 = new saturn.client.workspace.DNAWorkspaceObject(dna1,primerId1);
						me.getApplication().getWorkspace().addObject(wo1,true);
					}
				});
			}});
		} else if(modelColumn == "entryClone.entryCloneId") {
			items.push({ text : "Import Entry Clone", handler : function() {
				var model4 = _gthis.getStore().getAt(rowIndex);
				var entryCloneId = model4.get("entryClone.entryCloneId");
				_gthis.getProvider().getById(entryCloneId,saturn.core.domain.SgcEntryClone,function(entryClone,exception2) {
					if(exception2 != null) {
						_gthis.getApplication().showMessage("Fetch error",exception2);
					} else {
						var dna2 = new saturn.core.DNA(entryClone.dnaSeq);
						var wo2 = new saturn.client.workspace.DNAWorkspaceObject(dna2,entryCloneId);
						me.getApplication().getWorkspace().addObject(wo2,true);
					}
				});
			}});
		} else if(modelColumn == "alleleId") {
			items.push({ text : "Show allele alignment", handler : function() {
				var model5 = _gthis.getStore().getAt(rowIndex);
				var alleleId = model5.get("alleleId");
				var target = alleleId.split("-")[0];
				_gthis.showAlleleAlignment(target);
			}});
		}
		return items;
	}
	,showAlleleAlignment: function(target) {
		var objectId = this.getActiveObjectId();
		var parentFolder = this.getWorkspace().getParentFolder(objectId);
		var folder = parentFolder.findChild("text",target);
		if(folder != null) {
			this.getWorkspace().removeItem(folder.getId());
		}
		folder = this.getWorkspace()._addFolder(target,parentFolder);
		var constructs = [];
		var n = Std["int"](this.getStore().data.length - 1);
		var _g1 = 0;
		var _g = n;
		while(_g1 < _g) {
			var i = _g1++;
			var model = this.getStore().getAt(i);
			var alleleId = model.get("alleleId");
			if(alleleId.split("-")[0] == target) {
				var seq = model.get("proteinSeq");
				var protObj = new saturn.core.Protein(seq);
				protObj.setMoleculeName(alleleId);
				var construct = new saturn.core.domain.SgcConstruct();
				construct.constructId = alleleId;
				construct.proteinSeqNoTag = seq;
				construct.status = "No progress";
				constructs.push(construct);
				this.getWorkspace().addObject(protObj,false,folder);
			}
		}
		var sum = new saturn.client.programs.blocks.TargetSummary(target);
		sum.setSequences(constructs);
		sum.setParentFolder(folder);
		sum.getTargetSequence();
	}
	,calculate: function() {
		var _gthis = this;
		this.getApplication().showMessage("Please wait","Please wait.....");
		var alleleStore = this.getStore();
		var alleleCount = alleleStore.count() - 1;
		var entryCloneMap = new haxe.ds.StringMap();
		var fPrimerMap = new haxe.ds.StringMap();
		var rPrimerMap = new haxe.ds.StringMap();
		var _g1 = 0;
		var _g = alleleCount;
		while(_g1 < _g) {
			var i = _g1++;
			var alleleModel = alleleStore.getAt(i);
			var fPrimerId = alleleModel.get("forwardPrimer.primerId");
			var rPrimerId = alleleModel.get("reversePrimer.primerId");
			var entryCloneId = alleleModel.get("entryClone.entryCloneId");
			if(this.isNullOrEmpty(fPrimerId)) {
				this.setRecordValid(alleleModel,"Missing forward primer");
				continue;
			}
			if(this.isNullOrEmpty(rPrimerId)) {
				this.setRecordValid(alleleModel,"Missing reverse primer");
				continue;
			}
			if(this.isNullOrEmpty(entryCloneId)) {
				this.setRecordValid(alleleModel,"Missing entry clone");
				continue;
			}
			entryCloneMap.set(entryCloneId,"");
			fPrimerMap.set(fPrimerId,"");
			rPrimerMap.set(rPrimerId,"");
		}
		var fPrimers = [];
		var rPrimers = [];
		var entryClones = [];
		var fPrimerId1 = fPrimerMap.keys();
		while(fPrimerId1.hasNext()) {
			var fPrimerId2 = fPrimerId1.next();
			fPrimers.push(fPrimerId2);
		}
		var rPrimerId1 = rPrimerMap.keys();
		while(rPrimerId1.hasNext()) {
			var rPrimerId2 = rPrimerId1.next();
			rPrimers.push(rPrimerId2);
		}
		var entryCloneId1 = entryCloneMap.keys();
		while(entryCloneId1.hasNext()) {
			var entryCloneId2 = entryCloneId1.next();
			entryClones.push(entryCloneId2);
		}
		var bFetch = new saturn.db.BatchFetch(function(obj,err) {
			_gthis.getApplication().showMessage("Batch fetch failure",err);
		});
		bFetch.getByIds(fPrimers,saturn.core.domain.SgcForwardPrimer,"__IGNORE_ME__",null);
		bFetch.getByIds(rPrimers,saturn.core.domain.SgcReversePrimer,"__IGNORE_ME__",null);
		bFetch.getByIds(entryClones,saturn.core.domain.SgcEntryClone,"__IGNORE_ME__",null);
		bFetch.onComplete = function() {
			saturn.client.WorkspaceApplication.suspendUpdates();
			var primerReg = saturn.core.PrimerRegistry.getDefaultInstance();
			var _g11 = 0;
			var _g2 = alleleCount;
			while(_g11 < _g2) {
				var i1 = _g11++;
				var alleleModel1 = alleleStore.getAt(i1);
				var alleleId = alleleModel1.get("alleleId");
				var fPrimerId3 = alleleModel1.get("forwardPrimer.primerId");
				var rPrimerId3 = alleleModel1.get("reversePrimer.primerId");
				var entryCloneId3 = alleleModel1.get("entryClone.entryCloneId");
				if(fPrimerId3 != null && fPrimerId3 != "" && rPrimerId3 != null && rPrimerId3 != "" && entryCloneId3 != null && entryCloneId3 != "") {
					var entryClone = _gthis.getProvider().getObjectFromCache(saturn.core.domain.SgcEntryClone,"entryCloneId",entryCloneId3);
					var fPrimer = _gthis.getProvider().getObjectFromCache(saturn.core.domain.SgcForwardPrimer,"primerId",fPrimerId3);
					var rPrimer = _gthis.getProvider().getObjectFromCache(saturn.core.domain.SgcReversePrimer,"primerId",rPrimerId3);
					if(entryClone == null) {
						_gthis.setRecordValid(alleleModel1,"Entry clone " + entryCloneId3 + " is missing for " + alleleId);
						continue;
					}
					if(fPrimer == null) {
						_gthis.setRecordValid(alleleModel1,"Forward primer " + fPrimerId3 + " is missing for " + alleleId);
						continue;
					}
					if(rPrimer == null) {
						_gthis.setRecordValid(alleleModel1,"Reverse primer " + rPrimerId3 + " is missing for " + alleleId);
						continue;
					}
					var ecDNA = new saturn.core.DNA(entryClone.dnaSeq);
					var fPrimerDNA = new saturn.core.Primer(fPrimer.dnaSequence);
					var rPrimerDNA = new saturn.core.Primer(rPrimer.dnaSequence);
					primerReg.autoConfigurePrimer(fPrimerDNA);
					primerReg.autoConfigurePrimer(rPrimerDNA);
					if(fPrimerDNA.get5PrimeExtensionLength() == -1) {
						fPrimerDNA.set5PrimeExtensionLength(fPrimerDNA.getLength() - 14);
					}
					if(rPrimerDNA.get5PrimeExtensionLength() == -1) {
						rPrimerDNA.set5PrimeExtensionLength(rPrimerDNA.getLength() - 14);
					}
					try {
						var pcrProduct = new saturn.core.PCRProduct(ecDNA,fPrimerDNA,rPrimerDNA);
						pcrProduct.calculateProduct();
						var pos = pcrProduct.getFirstStartCodonPosition(saturn.core.GeneticCodes.STANDARD);
						alleleModel1.set("dnaSeq",pcrProduct.getSequence());
						alleleModel1.set("dnaSeqLen",pcrProduct.getLength());
						if(pos > -1) {
							var translation = pcrProduct.getTranslation(saturn.core.GeneticCodes.STANDARD,pos,true);
							alleleModel1.set("proteinSeq",translation);
							_gthis.setRecordValid(alleleModel1,"");
						} else {
							_gthis.setRecordValid(alleleModel1,"Unable to find start codon");
						}
					} catch( $e0 ) {
						if ($e0 instanceof js._Boot.HaxeError) $e0 = $e0.val;
						if( js.Boot.__instanceof($e0,saturn.util.HaxeException) ) {
							var e = $e0;
							var tmp = e.getMessage();
							_gthis.setRecordValid(alleleModel1,tmp);
						} else {
						var e1 = $e0;
						_gthis.setRecordValid(alleleModel1,"Unknown exception");
						}
					}
				}
			}
			_gthis.calculateAlleleIds(false,function(err1) {
				if(err1 == null) {
					_gthis.getApplication().showMessage("Finished","Calculation finished");
				}
				_gthis.theTable.getView().refresh();
				saturn.client.WorkspaceApplication.resumeUpdates(false);
			});
		};
		bFetch.execute();
	}
	,calculateAlleleIds: function(overwriteIds,cb) {
		var targetSet = new haxe.ds.StringMap();
		var alleleStore = this.getStore();
		var alleleCount = alleleStore.count() - 1;
		var _g1 = 0;
		var _g = alleleCount;
		while(_g1 < _g) {
			var i = _g1++;
			var alleleModel = alleleStore.getAt(i);
			var alleleId = alleleModel.get("entryClone.entryCloneId");
			if(alleleId != null && alleleId.indexOf("-") > -1) {
				var targetId = alleleId.split("-")[0];
				targetSet.set(targetId,1);
			}
		}
		var targets = [];
		var target = targetSet.keys();
		while(target.hasNext()) {
			var target1 = target.next();
			targets.push(target1);
		}
		saturn.core.domain.SgcUtil.generateNextID(this.getProvider(),targets,saturn.core.domain.SgcAllele,function(alleles,err) {
			if(err != null) {
				cb(err);
			} else {
				var _g11 = 0;
				var _g2 = alleleCount;
				while(_g11 < _g2) {
					var i1 = _g11++;
					var alleleModel1 = alleleStore.getAt(i1);
					var entryCloneId = alleleModel1.get("entryClone.entryCloneId");
					if(entryCloneId != null && entryCloneId.indexOf("-") > -1) {
						var targetId1 = entryCloneId.split("-")[0];
						var alleleId1 = alleleModel1.get("alleleId");
						if(alleleId1 == null || alleleId1 == "" || overwriteIds) {
							alleleModel1.set("alleleId",targetId1 + "-a" + StringTools.lpad(Std.string(alleles.get(targetId1)),"0",3));
							alleles.set(targetId1,alleles.get(targetId1) + 1);
						}
					}
				}
				cb(null);
			}
		});
	}
	,insertOrDeletePerformed: function() {
		var wo = this.getWorkspace().getObjectSafely(this.getActiveObjectId(),saturn.client.workspace.MultiAlleleHelperWO);
		if(wo != null) {
			var plateName = wo.getObject().getPlateName();
			if(plateName != null) {
				this.getProvider().evictNamedQuery("FETCH_ALLELE_PLATE",[plateName]);
			}
		}
	}
	,setActiveObject: function(objectId) {
		saturn.client.programs.TableHelper.prototype.setActiveObject.call(this,objectId);
		var wo = this.getWorkspace().getObjectSafely(objectId,saturn.client.workspace.MultiAlleleHelperWO);
		if(wo != null) {
			this.setTitle(wo.getName());
			if(!this.loadedExisting) {
				var plateName = wo.getObject().getPlateName();
				if(plateName != null) {
					if(this.viewReady) {
						this.queryLoad();
					} else {
						this.loadRequired = true;
					}
				}
			}
		}
	}
	,queryLoad: function() {
		var _gthis = this;
		var wo = this.getWorkspace().getObjectSafely(this.getActiveObjectId(),saturn.client.workspace.MultiAlleleHelperWO);
		if(wo != null) {
			var plateName = wo.getObject().getPlateName();
			if(plateName != null) {
				this.getProvider().getByNamedQuery("FETCH_ALLELE_PLATE",[plateName],saturn.core.domain.SgcAllele,true,function(objs,exception) {
					if(exception == null && objs != null) {
						_gthis.loadObjects(objs);
					} else {
						_gthis.getApplication().showMessage("Allele plate fetch failure","Unable to fetch alleles for " + plateName);
					}
				});
			}
		}
	}
	,setTitle: function(title) {
		this.getApplication().setProgramTabTitle(this,title);
	}
	,onFocus: function() {
		var _gthis = this;
		saturn.client.programs.TableHelper.prototype.onFocus.call(this);
		var exportMenu = this.getApplication().getExportMenu();
		exportMenu.add({ text : "Allele (DNA) to FASTA", hidden : false, handler : function() {
			var entityStore = _gthis.getStore();
			var entityCount = entityStore.count();
			var strBuf = new StringBuf();
			var fields = _gthis.theModel.getFields();
			var priField = _gthis.theModel.getPrimaryKey();
			var _g1 = 0;
			var _g = entityCount;
			while(_g1 < _g) {
				var i = _g1++;
				var entityModel = entityStore.getAt(i);
				var protStr = entityModel.get("dnaSeq");
				if(protStr != null && protStr != "") {
					strBuf.add(saturn.core.FastaEntity.formatFastaFile(entityModel.get("alleleId"),protStr));
				}
			}
			var wo = _gthis.getActiveObject(saturn.client.workspace.WorkspaceObject);
			_gthis.getApplication().saveTextFile(strBuf.toString(),wo.getName() + "-alleles-dna.fasta");
		}});
		this.getApplication().getImportMenu().add({ text : "Import all alleles (DNA)", handler : function() {
			_gthis.loadAllAllelesDNA();
		}});
		this.getApplication().getImportMenu().add({ text : "Import all alleles (Protein)", handler : function() {
			_gthis.loadAllAllelesProtein();
		}});
		this.getApplication().getImportMenu().add({ text : "Import all entry clones (DNA)", handler : function() {
			_gthis.loadAllEntryClonesDNA();
		}});
		this.getApplication().getImportMenu().add({ text : "Import all primers", handler : function() {
			_gthis.loadAllPrimers();
		}});
		this.getApplication().getToolBar().add({ iconCls : "x-btn-calculate", text : "Calculate", handler : function() {
			_gthis.calculate();
		}, tooltip : { dismissDelay : 10000, text : "Calculate DNA/Protein sequences and MW"}});
		this.getApplication().getToolBar().add({ iconCls : "x-btn-calculate", text : "Update IDs", handler : function() {
			_gthis.calculateAlleleIds(true,function(err) {
				if(err != null) {
					_gthis.getApplication().showMessage("Error updating IDs",err);
				}
			});
		}, tooltip : { dismissDelay : 10000, text : "Calculate start/end positions of construct on target"}});
		this.getApplication().getToolBar().add({ iconCls : "x-btn-import", text : "Alleles (DNA)", handler : function() {
			_gthis.loadAllAllelesDNA();
		}, tooltip : { dismissDelay : 10000, text : "Import all allele DNA sequence from table into Workspace"}});
		this.getApplication().getToolBar().add({ iconCls : "x-btn-import", text : "Alleles (Protein)", handler : function() {
			_gthis.loadAllAllelesProtein();
		}, tooltip : { dismissDelay : 10000, text : "Import all allele protein sequence from table into Workspace"}});
		this.getApplication().getToolBar().add({ iconCls : "x-btn-import", text : "Entry Clones", handler : function() {
			_gthis.loadAllEntryClonesDNA();
		}, tooltip : { dismissDelay : 10000, text : "Import all entry clone DNA sequence from table into Workspace"}});
		this.getApplication().getToolBar().add({ iconCls : "x-btn-import", text : "Primers", handler : function() {
			_gthis.loadAllPrimers();
		}, tooltip : { dismissDelay : 10000, text : "Import all primers from table into Workspace"}});
	}
	,loadAllPrimers: function() {
		var _gthis = this;
		var bFetch = new saturn.db.BatchFetch(function(obj,err) {
			_gthis.getApplication().showMessage("Batch fetch failure",err);
		});
		var alleleStore = this.getStore();
		var alleleCount = alleleStore.count();
		var fIdset = new haxe.ds.StringMap();
		var rIdset = new haxe.ds.StringMap();
		var _g1 = 0;
		var _g = alleleCount;
		while(_g1 < _g) {
			var i = _g1++;
			var alleleModel = alleleStore.getAt(i);
			var fId = alleleModel.get("forwardPrimer.primerId");
			var rId = alleleModel.get("reversePrimer.primerId");
			if(fId != null && fId != "") {
				fIdset.set(fId,"");
			}
			if(rId != null && rId != "") {
				rIdset.set(rId,"");
			}
		}
		var fIds = [];
		var fId1 = fIdset.keys();
		while(fId1.hasNext()) {
			var fId2 = fId1.next();
			fIds.push(fId2);
		}
		var rIds = [];
		var rId1 = rIdset.keys();
		while(rId1.hasNext()) {
			var rId2 = rId1.next();
			rIds.push(rId2);
		}
		bFetch.getByIds(fIds,saturn.core.domain.SgcForwardPrimer,"__IGNORE_ME__",null);
		bFetch.getByIds(rIds,saturn.core.domain.SgcReversePrimer,"__IGNORE_ME__",null);
		bFetch.onComplete = function() {
			var _g2 = 0;
			while(_g2 < fIds.length) {
				var fId3 = fIds[_g2];
				++_g2;
				var obj1 = _gthis.getProvider().getObjectFromCache(saturn.core.domain.SgcForwardPrimer,"primerId",fId3);
				if(obj1 != null) {
					var dna = new saturn.core.DNA(obj1.dnaSequence);
					var wo = new saturn.client.workspace.DNAWorkspaceObject(dna,fId3);
					_gthis.getWorkspace()._addObject(wo,false,false);
				}
			}
			var _g3 = 0;
			while(_g3 < rIds.length) {
				var rId3 = rIds[_g3];
				++_g3;
				var obj2 = _gthis.getProvider().getObjectFromCache(saturn.core.domain.SgcReversePrimer,"primerId",rId3);
				if(obj2 != null) {
					var dna1 = new saturn.core.DNA(obj2.dnaSequence);
					var wo1 = new saturn.client.workspace.DNAWorkspaceObject(dna1,rId3);
					_gthis.getWorkspace()._addObject(wo1,false,false);
				}
			}
			_gthis.getWorkspace().reloadWorkspace();
		};
		bFetch.execute();
	}
	,loadAllAllelesDNA: function() {
		var alleleStore = this.getStore();
		var alleleCount = alleleStore.count();
		var folderName = this.getActiveObjectName() + " (Allele DNA)";
		var folder = this.getWorkspace()._addFolder(folderName,null);
		Ext.suspendLayouts();
		this.getWorkspace().getTreeStore().suspendEvents();
		var _g1 = 0;
		var _g = alleleCount;
		while(_g1 < _g) {
			var i = _g1++;
			var alleleModel = alleleStore.getAt(i);
			var alleleId = alleleModel.get("alleleId");
			if(alleleId != null && alleleId != "") {
				var dna = new saturn.core.DNA(alleleModel.get("dnaSeq"));
				var wo = new saturn.client.workspace.DNAWorkspaceObject(dna,alleleId);
				this.getWorkspace()._addObject(wo,false,false,folder);
			}
		}
		this.getWorkspace().reloadWorkspace();
	}
	,loadAllAllelesProtein: function() {
		var alleleStore = this.getStore();
		var alleleCount = alleleStore.count();
		var _g1 = 0;
		var _g = alleleCount;
		while(_g1 < _g) {
			var i = _g1++;
			var alleleModel = alleleStore.getAt(i);
			var alleleId = alleleModel.get("alleleId");
			if(alleleId != null && alleleId != "") {
				var dna = new saturn.core.DNA(alleleModel.get("proteinSeq"));
				var wo = new saturn.client.workspace.DNAWorkspaceObject(dna,alleleId);
				this.getWorkspace()._addObject(wo,false,false);
			}
		}
		this.getWorkspace().reloadWorkspace();
	}
	,loadAllEntryClonesDNA: function() {
		var _gthis = this;
		var bFetch = new saturn.db.BatchFetch(function(obj,err) {
			_gthis.getApplication().showMessage("Batch fetch failure",err);
		});
		var alleleStore = this.getStore();
		var alleleCount = alleleStore.count();
		var entryCloneSet = new haxe.ds.StringMap();
		var _g1 = 0;
		var _g = alleleCount;
		while(_g1 < _g) {
			var i = _g1++;
			var alleleModel = alleleStore.getAt(i);
			var entryCloneId = alleleModel.get("entryClone.entryCloneId");
			if(entryCloneId != null && entryCloneId != "") {
				entryCloneSet.set(entryCloneId,"");
			}
		}
		var entryCloneIds = [];
		var entryCloneId1 = entryCloneSet.keys();
		while(entryCloneId1.hasNext()) {
			var entryCloneId2 = entryCloneId1.next();
			entryCloneIds.push(entryCloneId2);
		}
		bFetch.getByIds(entryCloneIds,saturn.core.domain.SgcEntryClone,"__IGNORE_ME__",null);
		bFetch.onComplete = function() {
			var _g2 = 0;
			while(_g2 < entryCloneIds.length) {
				var entryCloneId3 = entryCloneIds[_g2];
				++_g2;
				var obj1 = _gthis.getProvider().getObjectFromCache(saturn.core.domain.SgcEntryClone,"entryCloneId",entryCloneId3);
				if(obj1 != null) {
					var dna = new saturn.core.DNA(obj1.dnaSeq);
					var wo = new saturn.client.workspace.DNAWorkspaceObject(dna,entryCloneId3);
					_gthis.getWorkspace()._addObject(wo,false,false);
				}
			}
			_gthis.getWorkspace().reloadWorkspace();
		};
		bFetch.execute();
	}
	,__class__: saturn.client.programs.MultiAlleleHelper
});
saturn.client.workspace.MultiConstructHelperWO = $hxClasses["saturn.client.workspace.MultiConstructHelperWO"] = function(object,name) {
	if(object == null) {
		object = new saturn.core.MultiConstructHelperData();
	} else if(Std["is"](object,saturn.core.domain.SgcConstructPlate)) {
		var constructPlate = object;
		object = new saturn.core.MultiConstructHelperData();
		object.setPlateName(constructPlate.plateName);
	}
	if(name == null) {
		name = "Construct Helper";
	}
	this.iconPath = "/static/js/images/dna_conical_16.png";
	saturn.client.workspace.WorkspaceObjectBase.call(this,object,name);
};
saturn.client.workspace.MultiConstructHelperWO.__name__ = ["saturn","client","workspace","MultiConstructHelperWO"];
saturn.client.workspace.MultiConstructHelperWO.getNewMenuText = function() {
	return "Construct Helper";
};
saturn.client.workspace.MultiConstructHelperWO.getDefaultFolderName = function() {
	return "Construct Plates";
};
saturn.client.workspace.MultiConstructHelperWO.__super__ = saturn.client.workspace.WorkspaceObjectBase;
saturn.client.workspace.MultiConstructHelperWO.prototype = $extend(saturn.client.workspace.WorkspaceObjectBase.prototype,{
	serialise: function() {
		var app = saturn.client.WorkspaceApplication.getApplication();
		var prog = js.Boot.__cast(app.getWorkspace().getOpenProgram(this.getUUID()) , saturn.client.programs.TableHelper);
		var models = prog.getModels();
		var dataModels = [];
		var _g = 0;
		while(_g < models.length) {
			var model = models[_g];
			++_g;
			dataModels.push(model.data);
		}
		this.object.setRawModels(dataModels);
		return saturn.client.workspace.WorkspaceObjectBase.prototype.serialise.call(this);
	}
	,clone: function() {
		var app = saturn.client.WorkspaceApplication.getApplication();
		var prog = js.Boot.__cast(app.getWorkspace().getOpenProgram(this.getUUID()) , saturn.client.programs.TableHelper);
		var models = prog.getModels();
		var data = new saturn.core.MultiConstructHelperData();
		data.setModelsToCopy(models);
		var newwo = new saturn.client.workspace.MultiConstructHelperWO(data,this.getName());
		return newwo;
	}
	,__class__: saturn.client.workspace.MultiConstructHelperWO
});
saturn.client.programs.MultiConstructHelper = $hxClasses["saturn.client.programs.MultiConstructHelper"] = function() {
	this.theTitle = "Construct Helper";
	saturn.client.programs.TableHelper.call(this,saturn.core.domain.SgcConstruct);
};
saturn.client.programs.MultiConstructHelper.__name__ = ["saturn","client","programs","MultiConstructHelper"];
saturn.client.programs.MultiConstructHelper.getQuickLaunchItems = function() {
	return [{ iconCls : "x-btn-conical-dna", html : "Construct<br/>Plate", cls : "quickLaunchButton", handler : function() {
		saturn.client.WorkspaceApplication.getApplication().getWorkspace().addObject(new saturn.client.workspace.MultiConstructHelperWO(null,"Constructs"),true);
	}, tooltip : { dismissDelay : 10000, text : "Edit existing constructs or enter new ones."}}];
};
saturn.client.programs.MultiConstructHelper.__super__ = saturn.client.programs.TableHelper;
saturn.client.programs.MultiConstructHelper.prototype = $extend(saturn.client.programs.TableHelper.prototype,{
	getButtonPanelConfiguration: function() {
		var _gthis = this;
		var baseButtons = saturn.client.programs.TableHelper.prototype.getButtonPanelConfiguration.call(this);
		baseButtons.push({ region : "center", xtype : "button", text : "Calculate", handler : function() {
			_gthis.calculate();
		}});
		return baseButtons;
	}
	,getContextMenuItems: function(modelColumn,rowIndex) {
		var _gthis = this;
		var items = saturn.client.programs.TableHelper.prototype.getContextMenuItems.call(this,modelColumn,rowIndex);
		if(modelColumn == "dnaSeq") {
			items.push({ text : "Import DNA", handler : function() {
				var model = _gthis.getStore().getAt(rowIndex);
				var dnaObj = new saturn.core.DNA(model.get(modelColumn));
				var dnawo = new saturn.client.workspace.DNAWorkspaceObject(dnaObj,model.get("constructId") + " (DNA) ");
				_gthis.getApplication().getWorkspace().addObject(dnawo,true);
			}});
		} else if(modelColumn == "proteinSeq" || modelColumn == "proteinSeqNoTag") {
			items.push({ text : "Import Protein", handler : function() {
				var model1 = _gthis.getStore().getAt(rowIndex);
				var label = model1.get("constructId");
				if(modelColumn == "proteinSeqNoTag") {
					label += " (Cleaved) ";
				} else {
					label += " (Tagged) ";
				}
				var proteinObj = new saturn.core.Protein(model1.get(modelColumn));
				var proteinwo = new saturn.client.workspace.ProteinWorkspaceObject(proteinObj,label);
				_gthis.getApplication().getWorkspace().addObject(proteinwo,true);
			}});
		} else if(modelColumn == "allele.alleleId") {
			items.push({ text : "Import Allele", handler : function() {
				var model2 = _gthis.getStore().getAt(rowIndex);
				var alleleId = model2.get("allele.alleleId");
				_gthis.getProvider().getById(alleleId,saturn.core.domain.SgcAllele,function(allele,exception) {
					if(exception != null) {
						_gthis.getApplication().showMessage("Fetch error",exception);
					} else {
						var dna = new saturn.core.DNA(allele.dnaSeq);
						var wo = new saturn.client.workspace.DNAWorkspaceObject(dna,alleleId);
						_gthis.getApplication().getWorkspace().addObject(wo,true);
					}
				});
			}});
		} else if(modelColumn == "vector.vectorId") {
			items.push({ text : "Import Vector", handler : function() {
				var model3 = _gthis.getStore().getAt(rowIndex);
				var vectorId = model3.get("vector.vectorId");
				_gthis.getProvider().getById(vectorId,saturn.core.domain.SgcVector,function(vector,exception1) {
					if(exception1 != null) {
						_gthis.getApplication().showMessage("Fetch error",exception1);
					} else {
						var dna1 = new saturn.core.DNA(vector.getSequence());
						var wo1 = new saturn.client.workspace.DNAWorkspaceObject(dna1,vectorId);
						_gthis.getApplication().getWorkspace().addObject(wo1,true);
					}
				});
			}});
		} else if(modelColumn == "constructId") {
			items.push({ text : "Show construct alignment", handler : function() {
				var model4 = _gthis.getStore().getAt(rowIndex);
				var constructId = model4.get("constructId");
				var target = constructId.split("-")[0];
				_gthis.showConstructAlignment(target);
			}});
		}
		return items;
	}
	,doAlignments: function() {
		var _gthis = this;
		var constructStore = this.getStore();
		var constructCount = constructStore.count() - 1;
		var _g1 = 0;
		var _g = constructCount;
		while(_g1 < _g) {
			var i = _g1++;
			var targetProteinSeq = [""];
			var vectorRExtensionRC = [""];
			var vectorFExtension = [""];
			var alleleDnaSequence = [""];
			var f_fail = [0];
			var r_fail = [0];
			var alleleDnaSequenceAllExtRemoved = "";
			var alleleDnaSequenceFExtRemoved = "";
			var startPos = [0];
			var stopPos = [0];
			var adjustedStopPos = [0];
			var startStopPos = [[]];
			var firstClustalGaps = [0];
			var secondClustalGaps = [0];
			var constructModel = [constructStore.getAt(i)];
			var consreuctIdLength = [constructModel[0].get("constructId").length];
			var constructSequence = constructModel[0].get("proteinSeqNoTag");
			var targetId = constructModel[0].get("constructId").split("-")[0];
			var alleleId = constructModel[0].get("allele.alleleId");
			var vectorId = constructModel[0].get("vector.vectorId");
			this.getProvider().getById(alleleId,saturn.core.domain.SgcAllele,(function(alleleDnaSequence1) {
				return function(allele,databaseError) {
					if(databaseError != null) {
						_gthis.getApplication().showMessage("Database Fetch Error",databaseError);
					} else {
						alleleDnaSequence1[0] = allele.dnaSeq;
					}
				};
			})(alleleDnaSequence));
			this.getProvider().getById(vectorId,saturn.core.domain.SgcVector,(function(vectorFExtension1,vectorRExtensionRC1) {
				return function(vector,databaseError1) {
					if(databaseError1 != null) {
						_gthis.getApplication().showMessage("Database Fetch Error",databaseError1);
					} else {
						vectorFExtension1[0] = vector.requiredForwardExtension;
						var vectorRExtension = new saturn.core.DNA(vector.requiredReverseExtension);
						var tmp = vectorRExtension.getInverseComplement();
						vectorRExtensionRC1[0] = tmp;
					}
				};
			})(vectorFExtension,vectorRExtensionRC));
			this.getProvider().getById(targetId,saturn.core.domain.SgcTarget,(function(targetProteinSeq1) {
				return function(target,databaseError2) {
					if(databaseError2 != null) {
						_gthis.getApplication().showMessage("Database Fetch Error",databaseError2);
					} else {
						targetProteinSeq1[0] = target.proteinSeq;
					}
				};
			})(targetProteinSeq));
			if(StringTools.startsWith(alleleDnaSequence[0],vectorFExtension[0]) == false) {
				f_fail[0] = 1;
			}
			alleleDnaSequenceFExtRemoved = alleleDnaSequence[0].split(vectorFExtension[0])[1];
			if(StringTools.endsWith(alleleDnaSequence[0],vectorRExtensionRC[0]) == false) {
				r_fail[0] = 1;
			}
			alleleDnaSequenceAllExtRemoved = alleleDnaSequenceFExtRemoved.split(vectorRExtensionRC[0])[0];
			var runs = [[]];
			var fastas = [[]];
			if(f_fail[0] == 0 || r_fail[0] == 0) {
				var alleleDnaSequenceAllExtRemovedTranslated = new saturn.core.DNA(alleleDnaSequenceAllExtRemoved).getTranslation(saturn.core.GeneticCodes.STANDARD,0,false);
				var fasta = ">" + Std.string(constructModel[0].get("constructId")) + "\n" + alleleDnaSequenceAllExtRemovedTranslated + "\n" + ">" + targetId + "\n" + targetProteinSeq[0] + "\n";
				fastas[0].push(fasta);
				var tmp1 = (function(firstClustalGaps1,startStopPos1,stopPos1,startPos1,r_fail1,f_fail1) {
					return function() {
						if(f_fail1[0] == 0) {
							startPos1[0] = startStopPos1[0][0] + 1;
						}
						if(r_fail1[0] == 0) {
							stopPos1[0] = startStopPos1[0][1] + 1;
						}
						firstClustalGaps1[0] = startStopPos1[0][2];
					};
				})(firstClustalGaps,startStopPos,stopPos,startPos,r_fail,f_fail);
				runs[0].push(tmp1);
			}
			if(f_fail[0] == 1 || r_fail[0] == 1) {
				var fasta1 = ">" + Std.string(constructModel[0].get("constructId")) + "\n" + constructSequence + "\n" + ">" + targetId + "\n" + targetProteinSeq[0] + "\n";
				fastas[0].push(fasta1);
				var tmp2 = (function(secondClustalGaps1,startStopPos2,stopPos2,startPos2,r_fail2,f_fail2) {
					return function() {
						if(f_fail2[0] == 1) {
							startPos2[0] = startStopPos2[0][0] + 1;
						}
						if(r_fail2[0] == 1) {
							stopPos2[0] = startStopPos2[0][1] + 1;
						}
						secondClustalGaps1[0] = startStopPos2[0][2];
					};
				})(secondClustalGaps,startStopPos,stopPos,startPos,r_fail,f_fail);
				runs[0].push(tmp2);
			}
			if(runs[0].length > 0) {
				var next = [null];
				var tmp3 = (function(next1,fastas1,runs1,consreuctIdLength1,constructModel1,secondClustalGaps2,firstClustalGaps2,startStopPos3,adjustedStopPos1,stopPos3,startPos3,vectorFExtension2,targetProteinSeq2) {
					return function() {
						if(runs1[0].length == 0) {
							var gapsOffset = Math.round(Math.abs(firstClustalGaps2[0] - secondClustalGaps2[0]));
							adjustedStopPos1[0] = stopPos3[0] - gapsOffset;
							if(startPos3[0] == 2 && (HxOverrides.substr(vectorFExtension2[0],vectorFExtension2[0].length - 3,3) == "ATG" && targetProteinSeq2[0].charAt(0) == "M")) {
								startPos3[0] = 1;
							}
							constructModel1[0].set("constructStart",targetProteinSeq2[0].charAt(startPos3[0] - 1) + startPos3[0]);
							constructModel1[0].set("constructStop",targetProteinSeq2[0].charAt(adjustedStopPos1[0] - 1) + adjustedStopPos1[0]);
							return;
						}
						var run = runs1[0].pop();
						var fasta2 = fastas1[0].pop();
						saturn.client.BioinformaticsServicesClient.getClient().sendClustalReportRequest(fasta2,(function(next2,consreuctIdLength2,startStopPos4) {
							return function(response,clustalError) {
								if(clustalError == null) {
									var clustalReport = response.json.clustalReport;
									var location = js.Browser.get_window().location;
									var URL = location.protocol + "//" + location.hostname + ":" + location.port + "/" + clustalReport;
									var tmp4 = (function(next3,consreuctIdLength3,startStopPos5) {
										return function(content) {
											var aln = new saturn.core.domain.Alignment();
											aln.setAlignmentContent(content);
											aln.setAlignmentURL(URL);
											var tmp5 = saturn.core.ClustalOmegaParser.readStartStop(content,consreuctIdLength3[0]);
											startStopPos5[0] = tmp5;
											run();
											next3[0]();
										};
									})(next2,consreuctIdLength2,startStopPos4);
									saturn.client.core.CommonCore.getContent(URL,tmp4);
								}
							};
						})(next1,consreuctIdLength1,startStopPos3));
					};
				})(next,fastas,runs,consreuctIdLength,constructModel,secondClustalGaps,firstClustalGaps,startStopPos,adjustedStopPos,stopPos,startPos,vectorFExtension,targetProteinSeq);
				next[0] = tmp3;
				next[0]();
			}
		}
	}
	,showConstructAlignment: function(target) {
		var objectId = this.getActiveObjectId();
		var parentFolder = this.getWorkspace().getParentFolder(objectId);
		var folder = parentFolder.findChild("text",target);
		if(folder != null) {
			this.getWorkspace().removeItem(folder.getId());
		}
		folder = this.getWorkspace()._addFolder(target,parentFolder);
		var constructs = [];
		var n = Std["int"](this.getStore().data.length - 1);
		var _g1 = 0;
		var _g = n;
		while(_g1 < _g) {
			var i = _g1++;
			var model = this.getStore().getAt(i);
			var constructId = model.get("constructId");
			if(constructId.split("-")[0] == target) {
				var seq = model.get("proteinSeqNoTag");
				var protObj = new saturn.core.Protein(seq);
				protObj.setMoleculeName(constructId);
				var construct = new saturn.core.domain.SgcConstruct();
				construct.constructId = constructId;
				construct.proteinSeqNoTag = seq;
				construct.status = model.get("status");
				constructs.push(construct);
				this.getWorkspace().addObject(protObj,false,folder);
			}
		}
		var sum = new saturn.client.programs.blocks.TargetSummary(target);
		sum.setSequences(constructs);
		sum.setParentFolder(folder);
		sum.getTargetSequence();
	}
	,calculate: function() {
		var _gthis = this;
		this.getApplication().showMessage("Please wait","Please wait.....");
		var constructStore = this.getStore();
		var constructCount = constructStore.count() - 1;
		var allelesMap = new haxe.ds.StringMap();
		var vectorMap = new haxe.ds.StringMap();
		var resMap = new haxe.ds.StringMap();
		var _g1 = 0;
		var _g = constructCount;
		while(_g1 < _g) {
			var i = _g1++;
			var constructModel = constructStore.getAt(i);
			var alleleId = constructModel.get("allele.alleleId");
			var vectorId = constructModel.get("vector.vectorId");
			if(this.isNullOrEmpty(alleleId)) {
				this.setRecordValid(constructModel,"Allele is missing");
				continue;
			}
			if(this.isNullOrEmpty(vectorId)) {
				this.setRecordValid(constructModel,"Vector is missing");
				continue;
			}
			allelesMap.set(alleleId,"");
			vectorMap.set(vectorId,"");
			var resId1 = constructModel.get("res1.enzymeName");
			var resId2 = constructModel.get("res2.enzymeName");
			if(resId1 != null && resId1 != "") {
				resMap.set(resId1,"");
			}
			if(resId2 != null && resId2 != "") {
				resMap.set(resId2,"");
			}
		}
		var alleles = [];
		var allele = allelesMap.keys();
		while(allele.hasNext()) {
			var allele1 = allele.next();
			alleles.push(allele1);
		}
		var vectors = [];
		var vector = vectorMap.keys();
		while(vector.hasNext()) {
			var vector1 = vector.next();
			vectors.push(vector1);
		}
		var resSites = [];
		var res = resMap.keys();
		while(res.hasNext()) {
			var res1 = res.next();
			resSites.push(res1);
		}
		var batchFetch = new saturn.db.BatchFetch(function(obj,err) {
			_gthis.getApplication().showMessage("Batch fetch failure",err);
		});
		batchFetch.getByIds(alleles,saturn.core.domain.SgcAllele,"ALLELES",null);
		batchFetch.getByIds(vectors,saturn.core.domain.SgcVector,"VECTORS",null);
		if(resSites.length > 0) {
			batchFetch.getByIds(resSites,saturn.core.domain.SgcRestrictionSite,"RESS",null);
		}
		batchFetch.onComplete = function() {
			var vectorResSites = new haxe.ds.StringMap();
			var alleles1 = batchFetch.getObject("ALLELES");
			var vectors1 = batchFetch.getObject("VECTORS");
			var ress = batchFetch.getObject("RESS");
			var _g2 = 0;
			while(_g2 < vectors1.length) {
				var vector2 = vectors1[_g2];
				++_g2;
				vectorResSites.set(vector2.res1Id == null ? "null" : "" + vector2.res1Id,"");
				vectorResSites.set(vector2.res2Id == null ? "null" : "" + vector2.res2Id,"");
			}
			batchFetch.onComplete = function() {
				var alleleToObj = new haxe.ds.StringMap();
				var vectorToObj = new haxe.ds.StringMap();
				var resToObj = new haxe.ds.StringMap();
				var _g3 = 0;
				while(_g3 < alleles1.length) {
					var allele2 = alleles1[_g3];
					++_g3;
					alleleToObj.set(allele2.alleleId,allele2);
				}
				var _g4 = 0;
				while(_g4 < vectors1.length) {
					var vector3 = vectors1[_g4];
					++_g4;
					vectorToObj.set(vector3.vectorId,vector3);
				}
				if(ress != null) {
					var _g5 = 0;
					while(_g5 < ress.length) {
						var res2 = ress[_g5];
						++_g5;
						resToObj.set(res2.enzymeName,res2);
					}
				}
				saturn.client.WorkspaceApplication.suspendUpdates();
				var _g11 = 0;
				var _g6 = constructCount;
				while(_g11 < _g6) {
					var i1 = _g11++;
					var constructModel1 = constructStore.getAt(i1);
					var alleleId1 = constructModel1.get("allele.alleleId");
					var vectorId1 = constructModel1.get("vector.vectorId");
					var resId11 = constructModel1.get("res1.enzymeName");
					var resId21 = constructModel1.get("res2.enzymeName");
					var skip = false;
					var values = [alleleId1,vectorId1];
					var _g21 = 0;
					while(_g21 < values.length) {
						var value = values[_g21];
						++_g21;
						if(value == null || value == "") {
							skip = true;
						}
					}
					if(skip) {
						continue;
					}
					var allele3 = alleleToObj.get(alleleId1);
					if(allele3 == null) {
						_gthis.setRecordValid(constructModel1,"Allele " + alleleId1 + " is missing");
						continue;
					}
					var vector4 = vectorToObj.get(vectorId1);
					if(vector4 == null) {
						_gthis.setRecordValid(constructModel1,"Vector " + vectorId1 + " is missing");
						continue;
					}
					var vRes1 = vector4.res1;
					if(vRes1 == null) {
						_gthis.setRecordValid(constructModel1,"Restriction Site: " + Std.string(vRes1) + " not found");
						continue;
					}
					var vRes2 = vector4.res2;
					if(vRes2 == null) {
						_gthis.setRecordValid(constructModel1,"Restriction Site: " + Std.string(vRes2) + " not found");
						continue;
					}
					var res11;
					var res21;
					if(resId11 != null && resId11 != "") {
						res11 = resToObj.get(resId11);
						if(res11 == null) {
							_gthis.setRecordValid(constructModel1,"Restriction Site: " + resId11 + " not found");
							continue;
						}
					} else {
						res11 = vRes1;
						constructModel1.set("res1.enzymeName",vRes1.enzymeName);
					}
					if(resId21 != null && resId21 != "") {
						res21 = resToObj.get(resId21);
						if(res21 == null) {
							_gthis.setRecordValid(constructModel1,"Restriction Site: " + resId21 + " not found");
							continue;
						}
					} else {
						res21 = vRes2;
						constructModel1.set("res2.enzymeName",vRes2.enzymeName);
					}
					try {
						var alleleSequence = new saturn.core.DNA(allele3.dnaSeq);
						var res1Seq = new saturn.core.RestrictionSite(res11.cutSequence);
						var res2Seq = new saturn.core.RestrictionSite(res21.cutSequence);
						var v_res1Seq = new saturn.core.RestrictionSite(vRes1.cutSequence);
						var v_res2Seq = new saturn.core.RestrictionSite(vRes2.cutSequence);
						var vectorSequence = new saturn.core.DNA(vector4.getSequence());
						var proteaseCutSeq = new saturn.core.CleavageSite(vector4.proteaseCutSequence);
						var proteaseProduct = vector4.proteaseProduct;
						var direction;
						if(proteaseProduct == "UPSTREAM") {
							direction = saturn.core.CutProductDirection.UPSTREAM;
						} else if(proteaseProduct == "DOWNSTREAM") {
							direction = saturn.core.CutProductDirection.DOWNSTREAM;
						} else if(proteaseProduct == "UPDOWN") {
							direction = saturn.core.CutProductDirection.UPDOWN;
						} else {
							_gthis.setRecordValid(constructModel1,"Invalid value for Vector field protease product direction should be either UPSTREAM or DOWNSTREAM");
							continue;
						}
						var alleleDigest = new saturn.core.DoubleDigest(alleleSequence,res1Seq,res2Seq);
						var vectorDigest = new saturn.core.DoubleDigest(vectorSequence,v_res1Seq,v_res2Seq);
						var ligation = new saturn.core.Ligation(vectorDigest,alleleDigest);
						ligation.calculateProduct();
						var startCodonPosition = ligation.getFirstStartCodonPosition(saturn.core.GeneticCodes.STANDARD);
						if(startCodonPosition == -1) {
							_gthis.setRecordValid(constructModel1,"Ligation product is missing a start codon");
							continue;
						}
						var uncutSequence = new saturn.core.Protein(ligation.getTranslation(saturn.core.GeneticCodes.STANDARD,startCodonPosition,true));
						var cutSequence = proteaseCutSeq.getCutProduct(uncutSequence,direction);
						constructModel1.set("expectedMass",saturn.util.MathUtils.sigFigs(uncutSequence.getMW(),4));
						constructModel1.set("expectedMassNoTag",saturn.util.MathUtils.sigFigs(new saturn.core.Protein(cutSequence).getMW(),4));
						constructModel1.set("dnaSeq",ligation.getSequence());
						constructModel1.set("proteinSeq",uncutSequence.getSequence());
						constructModel1.set("proteinSeqNoTag",cutSequence);
					} catch( $e0 ) {
						if ($e0 instanceof js._Boot.HaxeError) $e0 = $e0.val;
						if( js.Boot.__instanceof($e0,saturn.util.HaxeException) ) {
							var ex = $e0;
							var tmp = ex.getMessage();
							_gthis.setRecordValid(constructModel1,tmp);
						} else {
						var e = $e0;
						_gthis.setRecordValid(constructModel1,"Unknown exception");
						}
					}
				}
				_gthis.calculateConstructIds(false,function(err1) {
					if(err1 == null) {
						_gthis.getApplication().showMessage("Finished","Calculation finished");
					}
					_gthis.theTable.getView().refresh();
					saturn.client.WorkspaceApplication.resumeUpdates(false);
				});
			};
			batchFetch.execute();
		};
		batchFetch.execute();
	}
	,calculateConstructIds: function(overwriteIds,cb) {
		var targetSet = new haxe.ds.StringMap();
		var constructStore = this.getStore();
		var constructCount = constructStore.count() - 1;
		var _g1 = 0;
		var _g = constructCount;
		while(_g1 < _g) {
			var i = _g1++;
			var constructModel = constructStore.getAt(i);
			var alleleId = constructModel.get("allele.alleleId");
			if(alleleId != null && alleleId.indexOf("-") > -1) {
				var targetId = alleleId.split("-")[0];
				targetSet.set(targetId,1);
			}
		}
		var targets = [];
		var target = targetSet.keys();
		while(target.hasNext()) {
			var target1 = target.next();
			targets.push(target1);
		}
		saturn.core.domain.SgcUtil.generateNextID(this.getProvider(),targets,saturn.core.domain.SgcConstruct,function(constructs,err) {
			if(err != null) {
				cb(err);
			} else {
				var _g11 = 0;
				var _g2 = constructCount;
				while(_g11 < _g2) {
					var i1 = _g11++;
					var constructModel1 = constructStore.getAt(i1);
					var alleleId1 = constructModel1.get("allele.alleleId");
					if(alleleId1 != null && alleleId1.indexOf("-") > -1) {
						var targetId1 = alleleId1.split("-")[0];
						var constructId = constructModel1.get("constructId");
						if(constructId == null || constructId == "" || overwriteIds) {
							constructModel1.set("constructId",targetId1 + "-c" + StringTools.lpad(Std.string(constructs.get(targetId1)),"0",3));
							constructs.set(targetId1,constructs.get(targetId1) + 1);
						}
					}
				}
				cb(null);
			}
		});
	}
	,insertOrDeletePerformed: function() {
		var wo = this.getWorkspace().getObjectSafely(this.getActiveObjectId(),saturn.client.workspace.MultiConstructHelperWO);
		if(wo != null) {
			var plateName = wo.getObject().getPlateName();
			if(plateName != null) {
				this.getProvider().evictNamedQuery("FETCH_CONSTRUCT_PLATE",[plateName]);
			}
		}
	}
	,setActiveObject: function(objectId) {
		saturn.client.programs.TableHelper.prototype.setActiveObject.call(this,objectId);
		var wo = this.getWorkspace().getObjectSafely(objectId,saturn.client.workspace.MultiConstructHelperWO);
		if(wo != null) {
			this.setTitle(wo.getName());
			if(!this.loadedExisting) {
				var plateName = wo.getObject().getPlateName();
				if(plateName != null) {
					if(this.viewReady) {
						this.queryLoad();
					} else {
						this.loadRequired = true;
					}
				}
			}
		}
	}
	,queryLoad: function() {
		var _gthis = this;
		var wo = this.getWorkspace().getObjectSafely(this.getActiveObjectId(),saturn.client.workspace.MultiConstructHelperWO);
		if(wo != null) {
			var plateName = wo.getObject().getPlateName();
			if(plateName != null) {
				this.getProvider().getByNamedQuery("FETCH_CONSTRUCT_PLATE",[plateName],saturn.core.domain.SgcConstruct,true,function(objs,exception) {
					if(exception == null && objs != null) {
						_gthis.loadObjects(objs);
					} else {
						_gthis.getApplication().showMessage("Construct plate fetch failure","Unable to fetch constructs for " + plateName);
					}
				});
			}
		}
	}
	,setTitle: function(title) {
		this.getApplication().setProgramTabTitle(this,title);
	}
	,onFocus: function() {
		var _gthis = this;
		saturn.client.programs.TableHelper.prototype.onFocus.call(this);
		var exportMenu = this.getApplication().getExportMenu();
		exportMenu.add({ text : "Construct (DNA) to FASTA", hidden : false, handler : function() {
			var entityStore = _gthis.getStore();
			var entityCount = entityStore.count();
			var strBuf = new StringBuf();
			var fields = _gthis.theModel.getFields();
			var priField = _gthis.theModel.getPrimaryKey();
			var _g1 = 0;
			var _g = entityCount;
			while(_g1 < _g) {
				var i = _g1++;
				var entityModel = entityStore.getAt(i);
				var dnaStr = entityModel.get("dnaSeq");
				if(dnaStr != null && dnaStr != "") {
					strBuf.add(saturn.core.FastaEntity.formatFastaFile(entityModel.get("constructId"),dnaStr));
				}
			}
			var wo = _gthis.getActiveObject(saturn.client.workspace.WorkspaceObject);
			_gthis.getApplication().saveTextFile(strBuf.toString(),wo.getName() + "-constructs-dna.fasta");
		}});
		exportMenu.add({ text : "Construct (Protein) to FASTA", hidden : false, handler : function() {
			var entityStore1 = _gthis.getStore();
			var entityCount1 = entityStore1.count();
			var strBuf1 = new StringBuf();
			var fields1 = _gthis.theModel.getFields();
			var priField1 = _gthis.theModel.getPrimaryKey();
			var _g11 = 0;
			var _g2 = entityCount1;
			while(_g11 < _g2) {
				var i1 = _g11++;
				var entityModel1 = entityStore1.getAt(i1);
				var protStr = entityModel1.get("proteinSeq");
				if(protStr != null && protStr != "") {
					strBuf1.add(saturn.core.FastaEntity.formatFastaFile(entityModel1.get("constructId"),protStr));
				}
			}
			var wo1 = _gthis.getActiveObject(saturn.client.workspace.WorkspaceObject);
			_gthis.getApplication().saveTextFile(strBuf1.toString(),wo1.getName() + "-constructs-protein.fasta");
		}});
		exportMenu.add({ text : "Construct (Protein No Tag) to FASTA", hidden : false, handler : function() {
			var entityStore2 = _gthis.getStore();
			var entityCount2 = entityStore2.count();
			var strBuf2 = new StringBuf();
			var fields2 = _gthis.theModel.getFields();
			var priField2 = _gthis.theModel.getPrimaryKey();
			var _g12 = 0;
			var _g3 = entityCount2;
			while(_g12 < _g3) {
				var i2 = _g12++;
				var entityModel2 = entityStore2.getAt(i2);
				var protStr1 = entityModel2.get("proteinSeqNoTag");
				if(protStr1 != null && protStr1 != "") {
					strBuf2.add(saturn.core.FastaEntity.formatFastaFile(entityModel2.get("constructId"),protStr1));
				}
			}
			var wo2 = _gthis.getActiveObject(saturn.client.workspace.WorkspaceObject);
			_gthis.getApplication().saveTextFile(strBuf2.toString(),wo2.getName() + "-constructs-protein-no-tag.fasta");
		}});
		this.getApplication().getImportMenu().add({ text : "Import all Constructs (DNA)", handler : function() {
			_gthis.loadAllConstructDNA();
		}});
		this.getApplication().getImportMenu().add({ text : "Import all Constructs (Protein)", handler : function() {
			_gthis.loadAllConstructProtein();
		}});
		this.getApplication().getImportMenu().add({ text : "Import all Constructs (Protein No Tag)", handler : function() {
			_gthis.loadAllConstructProteinNoTag();
		}});
		this.getApplication().getImportMenu().add({ text : "Import all alleles (DNA)", handler : function() {
			_gthis.loadAllAllelesDNA();
		}});
		this.getApplication().getImportMenu().add({ text : "Import all alleles (Protein)", handler : function() {
			_gthis.loadAllAllelesDNA();
		}});
		this.getApplication().getToolBar().add({ iconCls : "x-btn-calculate", text : "Calculate", handler : function() {
			_gthis.calculate();
		}, tooltip : { dismissDelay : 10000, text : "Calculate DNA/Protein sequences and MW"}});
		this.getApplication().getToolBar().add({ iconCls : "x-btn-calculate", text : "Calculate Positions", handler : function() {
			_gthis.doAlignments();
		}, tooltip : { dismissDelay : 10000, text : "Calculate start/end positions of construct on target"}});
		this.getApplication().getToolBar().add({ iconCls : "x-btn-calculate", text : "Update IDs", handler : function() {
			_gthis.calculateConstructIds(true,function(err) {
				if(err != null) {
					_gthis.getApplication().showMessage("Error updating IDs",err);
				}
			});
		}, tooltip : { dismissDelay : 10000, text : "Calculate start/end positions of construct on target"}});
		this.getApplication().getToolBar().add({ text : "Save<br/>Primer Report", iconCls : "x-btn-copy", handler : function() {
			_gthis.savePrimerReport();
		}, tooltip : { dismissDelay : 10000, text : "Saves unique list of primers in a format that can be sent to MWG"}});
		this.getApplication().getToolBar().add({ text : "Email<br/>Primer Order", iconCls : "x-btn-copy", handler : function() {
			_gthis.promptSendPrimerReport();
		}, tooltip : { dismissDelay : 10000, text : "Email BioTech and yourself with a unique list of primers to order from MWG<br/>(CSV format can be uploaded straight to the MWG web-site)"}});
	}
	,loadAllAllelesDNA: function() {
		var _gthis = this;
		var bFetch = new saturn.db.BatchFetch(function(obj,err) {
			_gthis.getApplication().showMessage("Batch fetch failure",err);
		});
		var alleleStore = this.getStore();
		var alleleCount = alleleStore.count();
		var alleleSet = new haxe.ds.StringMap();
		var rIdset = new haxe.ds.StringMap();
		var _g1 = 0;
		var _g = alleleCount;
		while(_g1 < _g) {
			var i = _g1++;
			var alleleModel = alleleStore.getAt(i);
			var alleleId = alleleModel.get("allele.alleleId");
			if(alleleId != null && alleleId != "") {
				alleleSet.set(alleleId,"");
			}
		}
		var alleleIds = [];
		var alleleId1 = alleleSet.keys();
		while(alleleId1.hasNext()) {
			var alleleId2 = alleleId1.next();
			alleleIds.push(alleleId2);
		}
		bFetch.getByIds(alleleIds,saturn.core.domain.SgcAllele,"__IGNORE_ME__",null);
		bFetch.onComplete = function() {
			var _g2 = 0;
			while(_g2 < alleleIds.length) {
				var alleleId3 = alleleIds[_g2];
				++_g2;
				var obj1 = _gthis.getProvider().getObjectFromCache(saturn.core.domain.SgcAllele,"alleleId",alleleId3);
				if(obj1 != null) {
					var dna = new saturn.core.DNA(obj1.dnaSeq);
					var wo = new saturn.client.workspace.DNAWorkspaceObject(dna,alleleId3);
					_gthis.getWorkspace()._addObject(wo,false,false);
				}
			}
			_gthis.getWorkspace().reloadWorkspace();
		};
		bFetch.execute();
	}
	,loadAllAllelesProtein: function() {
		var _gthis = this;
		var bFetch = new saturn.db.BatchFetch(function(obj,err) {
			_gthis.getApplication().showMessage("Batch fetch failure",err);
		});
		var alleleStore = this.getStore();
		var alleleCount = alleleStore.count();
		var alleleSet = new haxe.ds.StringMap();
		var rIdset = new haxe.ds.StringMap();
		var _g1 = 0;
		var _g = alleleCount;
		while(_g1 < _g) {
			var i = _g1++;
			var alleleModel = alleleStore.getAt(i);
			var alleleId = alleleModel.get("allele.alleleId");
			if(alleleId != null && alleleId != "") {
				alleleSet.set(alleleId,"");
			}
		}
		var alleleIds = [];
		var alleleId1 = alleleSet.keys();
		while(alleleId1.hasNext()) {
			var alleleId2 = alleleId1.next();
			alleleIds.push(alleleId2);
		}
		bFetch.getByIds(alleleIds,saturn.core.domain.SgcAllele,"__IGNORE_ME__",null);
		bFetch.onComplete = function() {
			var _g2 = 0;
			while(_g2 < alleleIds.length) {
				var alleleId3 = alleleIds[_g2];
				++_g2;
				var obj1 = _gthis.getProvider().getObjectFromCache(saturn.core.domain.SgcAllele,"alleleId",alleleId3);
				if(obj1 != null) {
					var protein = new saturn.core.Protein(obj1.proteinSeq);
					var wo = new saturn.client.workspace.ProteinWorkspaceObject(protein,alleleId3);
					_gthis.getWorkspace()._addObject(wo,false,false);
				}
			}
			_gthis.getWorkspace().reloadWorkspace();
		};
		bFetch.execute();
	}
	,loadAllConstructDNA: function() {
		var alleleStore = this.getStore();
		var alleleCount = alleleStore.count();
		var _g1 = 0;
		var _g = alleleCount;
		while(_g1 < _g) {
			var i = _g1++;
			var alleleModel = alleleStore.getAt(i);
			var constructId = alleleModel.get("constructId");
			if(constructId != null && constructId != "") {
				var dna = new saturn.core.DNA(alleleModel.get("dnaSeq"));
				var wo = new saturn.client.workspace.DNAWorkspaceObject(dna,constructId);
				this.getWorkspace()._addObject(wo,false,false);
			}
		}
		this.getWorkspace().reloadWorkspace();
	}
	,loadAllConstructProtein: function() {
		var alleleStore = this.getStore();
		var alleleCount = alleleStore.count();
		var _g1 = 0;
		var _g = alleleCount;
		while(_g1 < _g) {
			var i = _g1++;
			var alleleModel = alleleStore.getAt(i);
			var constructId = alleleModel.get("constructId");
			if(constructId != null && constructId != "") {
				var dna = new saturn.core.DNA(alleleModel.get("proteinSeq"));
				var wo = new saturn.client.workspace.DNAWorkspaceObject(dna,constructId);
				this.getWorkspace()._addObject(wo,false,false);
			}
		}
		this.getWorkspace().reloadWorkspace();
	}
	,loadAllConstructProteinNoTag: function() {
		var alleleStore = this.getStore();
		var alleleCount = alleleStore.count();
		var _g1 = 0;
		var _g = alleleCount;
		while(_g1 < _g) {
			var i = _g1++;
			var alleleModel = alleleStore.getAt(i);
			var constructId = alleleModel.get("constructId");
			if(constructId != null && constructId != "") {
				var dna = new saturn.core.DNA(alleleModel.get("proteinSeqNoTag"));
				var wo = new saturn.client.workspace.DNAWorkspaceObject(dna,constructId);
				this.getWorkspace()._addObject(wo,false,false);
			}
		}
		this.getWorkspace().reloadWorkspace();
	}
	,getConstructList: function() {
		var constructStore = this.getStore();
		var constructCount = constructStore.count();
		var constructIds = [];
		var _g1 = 0;
		var _g = constructCount;
		while(_g1 < _g) {
			var i = _g1++;
			var constructModel = constructStore.getAt(i);
			var constructId = constructModel.get("constructId");
			if(constructId != null && constructId != "") {
				constructIds.push(constructId);
			}
		}
		return constructIds;
	}
	,generatePrimerReport: function(cb) {
	}
	,savePrimerReport: function() {
		var _gthis = this;
		this.generatePrimerReport(function(content) {
			_gthis.getApplication().saveTextFile(content,_gthis.getActiveObjectName() + ".csv");
		});
	}
	,promptSendPrimerReport: function() {
		var _gthis = this;
		this.getApplication().userPrompt("Send report?","Are you sure you wish to email the primer report?",function() {
			_gthis.sendPrimerReport();
		});
	}
	,sendPrimerReport: function() {
		var _gthis = this;
		this.generatePrimerReport(function(content) {
			saturn.client.core.ClientCore.getClientCore().sendRequest("_email_.sgc_primer_email",{ fileName : _gthis.getActiveObjectName() + ".csv", content : content, description : _gthis.getActiveObjectName()},function(data,err) {
				if(err != null) {
					_gthis.getApplication().showMessage("Error",err);
				} else {
					_gthis.getApplication().showMessage("Success","Report sent - check your inbox");
				}
			});
		});
	}
	,__class__: saturn.client.programs.MultiConstructHelper
});
saturn.client.workspace.StructureModelWO = $hxClasses["saturn.client.workspace.StructureModelWO"] = function(object,name) {
	if(object == null) {
		object = new saturn.core.domain.StructureModel();
	}
	if(name == null) {
		name = "PDB";
	}
	this.iconPath = "/static/js/images/structure_16.png";
	saturn.client.workspace.WorkspaceObjectBase.call(this,object,name);
};
saturn.client.workspace.StructureModelWO.__name__ = ["saturn","client","workspace","StructureModelWO"];
saturn.client.workspace.StructureModelWO.getNewMenuText = function() {
	return "PDB";
};
saturn.client.workspace.StructureModelWO.getDefaultFolderName = function() {
	return "PDB";
};
saturn.client.workspace.StructureModelWO.__super__ = saturn.client.workspace.WorkspaceObjectBase;
saturn.client.workspace.StructureModelWO.prototype = $extend(saturn.client.workspace.WorkspaceObjectBase.prototype,{
	__class__: saturn.client.workspace.StructureModelWO
});
saturn.client.programs.PDBViewer = $hxClasses["saturn.client.programs.PDBViewer"] = function() {
	saturn.client.programs.SimpleExtJSProgram.call(this);
};
saturn.client.programs.PDBViewer.__name__ = ["saturn","client","programs","PDBViewer"];
saturn.client.programs.PDBViewer.getQuickLaunchItems = function() {
	return [{ iconCls : "x-btn-structure", html : "PDB<br/>Viewer", cls : "quickLaunchButton", handler : function() {
		saturn.client.WorkspaceApplication.getApplication().getWorkspace().addObject(new saturn.client.workspace.StructureModelWO(null,null),true);
	}, tooltip : { dismissDelay : 10000, text : "View PDB structures"}}];
};
saturn.client.programs.PDBViewer.parseFile = function(file,cb,asNewOpenProgram) {
	if(asNewOpenProgram == null) {
		asNewOpenProgram = true;
	}
	saturn.client.core.CommonCore.getFileAsText(file,function(contents) {
		var fileName = file.name;
		var extension = saturn.client.core.CommonCore.getFileExtension(file.name);
		if(extension == "pdb") {
			var pdbCode = saturn.core.PDBParser.extractPDBID(fileName);
			var obj = new saturn.core.domain.StructureModel();
			obj.modelId = pdbCode;
			obj.contents = contents;
			var wo = new saturn.client.workspace.StructureModelWO(obj,pdbCode);
			saturn.client.WorkspaceApplication.getApplication().getWorkspace()._addObject(wo,true,true);
		} else if(extension == "icb") {
			saturn.client.core.CommonCore.getFileAsArrayBuffer(file,function(content) {
				var base64 = saturn.client.core.CommonCore.convertArrayBufferToBase64(content);
				saturn.client.BioinformaticsServicesClient.getClient().upload(base64,"icb",function(data,error) {
					if(error != null) {
						saturn.client.WorkspaceApplication.getApplication().showMessage("Unable to show ICB",error);
					} else {
						var obj1 = new saturn.core.domain.StructureModel();
						obj1.icbURL = saturn.client.core.CommonCore.makeFullyQualified(data.json.url);
						var wo1 = new saturn.client.workspace.StructureModelWO(obj1,fileName);
						saturn.client.WorkspaceApplication.getApplication().getWorkspace()._addObject(wo1,true,true);
					}
				});
			});
		} else {
			Ext.Msg.alert("","Unknown file format");
			return;
		}
	});
};
saturn.client.programs.PDBViewer.__super__ = saturn.client.programs.SimpleExtJSProgram;
saturn.client.programs.PDBViewer.prototype = $extend(saturn.client.programs.SimpleExtJSProgram.prototype,{
	theComponent: null
	,renderer: null
	,delayedLoad: null
	,ready: null
	,emptyInit: function() {
		var _gthis = this;
		saturn.client.programs.SimpleExtJSProgram.prototype.emptyInit.call(this);
		this.delayedLoad = false;
		this.ready = false;
		this.theComponent = Ext.create("Ext.Panel",{ width : "100%", height : "100%", layout : { type : "fit"}, items : [{ xtype : "component", region : "north", autoEl : { tag : "div", height : "100%", width : "100%"}, "flex" : 1, listeners : { "render" : function() {
		}}, style : { "background-color" : "white"}}], listeners : { "render" : function() {
			_gthis.initialiseDOMComponent();
		}, "resize" : function() {
			_gthis.resize();
		}}, bodyCls : "glmol-container", flex : 1});
	}
	,setPluginsInstalled: function() {
	}
	,initialiseRenderer: function() {
	}
	,initialiseDOMComponent: function() {
		saturn.client.programs.SimpleExtJSProgram.prototype.initialiseDOMComponent.call(this);
	}
	,onFocus: function() {
		var _gthis = this;
		saturn.client.programs.SimpleExtJSProgram.prototype.onFocus.call(this);
		this.getApplication().getEditMenu().add({ text : "Click me", handler : function() {
			_gthis.getApplication().showMessage("Menu","You clicked me!");
		}});
		this.getApplication().getToolBar().add({ iconCls : "x-btn-import", text : "Import sequences", handler : function() {
			var object = _gthis.getActiveObjectObject();
			var seqObjs = saturn.core.PDBParser.getSequences(object.contents,object.modelId,null);
			var open = true;
			var _g = 0;
			while(_g < seqObjs.length) {
				var seqObj = seqObjs[_g];
				++_g;
				var name = seqObj.getName();
				name = HxOverrides.substr(name,1,name.length - 1);
				_gthis.getWorkspace()._addObject(new saturn.client.workspace.ProteinWorkspaceObject(new saturn.core.Protein(seqObj.getSequence()),name),open,false);
				open = false;
			}
		}});
		this.getApplication().getToolBar().add({ iconCls : "x-btn-copy", text : "Ribbon", handler : function() {
			_gthis.toggleRibbon();
		}});
		this.getApplication().getToolBar().add({ iconCls : "x-btn-copy", text : "Wire", handler : function() {
			_gthis.toggleWire();
		}});
		this.getApplication().getToolBar().add({ iconCls : "x-btn-copy", text : "Surface", handler : function() {
			_gthis.toggleSurface();
		}});
		this.getApplication().getToolBar().add({ iconCls : "x-btn-copy", text : "Labels", handler : function() {
			_gthis.toggleLabels();
		}});
		this.getWorkspace().reloadWorkspace();
		this.getApplication().enableProgramSearchField(true);
		this.getApplication().setProgramSearchFieldEmptyText("Enter PDB ID ");
		this.getApplication().hideMiddleSouthPanel();
		this.getApplication().installOutlineTree("DEFAULT",true,false,"WorkspaceObject","GRID");
		var options = [];
		var pluginToName = new haxe.ds.StringMap();
		var _g1 = 0;
		var _g11 = this.plugins;
		while(_g1 < _g11.length) {
			var plugin = _g11[_g1];
			++_g1;
			if(Std["is"](plugin,saturn.client.programs.plugins.AbstractPDBRendererPlugin)) {
				var renderer = plugin;
				var name1 = renderer.getName();
				options.unshift({ name : name1});
				pluginToName.set(name1,renderer);
			}
		}
		var myStore = Ext.create("Ext.data.Store",{ fields : ["name"], data : options});
		this.getApplication().getToolBar().add({ xtype : "combo", store : myStore, displayField : "name", valueField : "name", listeners : { change : function(This,value) {
			_gthis.switchRenderer(pluginToName.get(value));
		}}, value : options[0].name});
	}
	,switchRenderer: function(newRenderer) {
		var tmp = Type.getClass(newRenderer);
		this.getActiveObjectObject().renderer = Type.getClassName(tmp);
		if(this.renderer != null) {
			this.renderer.destroy();
		}
		newRenderer.initialise();
		this.renderer = newRenderer;
		this.reload();
	}
	,toggleRibbon: function() {
		if(this.getActiveObjectObject().ribbonOn) {
			this.getActiveObjectObject().ribbonOn = false;
			this.ribbonOff();
		} else {
			this.getActiveObjectObject().ribbonOn = true;
			this.ribbonOn();
		}
	}
	,ribbonOn: function() {
		this.renderer.ribbonOn();
	}
	,ribbonOff: function() {
		this.renderer.ribbonOff();
	}
	,toggleLabels: function() {
		if(this.getActiveObjectObject().labelsOn) {
			this.getActiveObjectObject().labelsOn = false;
			this.labelsOff();
		} else {
			this.getActiveObjectObject().labelsOn = true;
			this.labelsOn();
		}
	}
	,labelsOn: function() {
		this.renderer.labelsOn();
	}
	,labelsOff: function() {
		this.renderer.labelsOff();
	}
	,toggleSurface: function() {
		if(this.getActiveObjectObject().surfaceOn) {
			this.getActiveObjectObject().surfaceOn = false;
			this.surfaceOff();
		} else {
			this.getActiveObjectObject().surfaceOn = true;
			this.surfaceOn();
		}
	}
	,surfaceOn: function() {
		this.renderer.surfaceOn();
	}
	,surfaceOff: function() {
		this.renderer.surfaceOff();
	}
	,toggleWire: function() {
		if(this.getActiveObjectObject().wireOn) {
			this.getActiveObjectObject().wireOn = false;
			this.wireOff();
		} else {
			this.getActiveObjectObject().wireOn = true;
			this.wireOn();
		}
	}
	,wireOn: function() {
		this.renderer.wireOn();
	}
	,wireOff: function() {
		this.renderer.wireOff();
	}
	,search: function(text) {
		if(text.length >= 4) {
			if(this.getActiveObjectObject().modelId != text) {
				this.loadPdbFromId(text);
				this.getWorkspace().renameWorkspaceObject(this.getActiveObjectId(),text);
			}
		}
	}
	,loadPdbFromId: function(modelId) {
		var _gthis = this;
		this.getActiveObjectObject().modelId = modelId;
		if(this.getProvider().getModel(saturn.core.domain.StructureModel).isValidId(modelId)) {
			this.getProvider().getById(modelId,saturn.core.domain.StructureModel,function(obj,err) {
				if(err != null) {
					_gthis.getApplication().showMessage("","Unable to retrieve model");
				} else {
					_gthis.getProvider().activate([obj],2,function(err1) {
						if(err1 != null) {
							_gthis.getApplication().showMessage("","Unable to retrieve model");
						} else {
							var content = obj.getContent();
							_gthis.setPdbString(content);
							_gthis.reload();
						}
					});
				}
			});
		} else {
			saturn.client.BioinformaticsServicesClient.getClient().sendPDBRequest(modelId,function(response,error) {
				if(error == null) {
					_gthis.setPdbString(response.json.pdb);
					_gthis.reload();
				} else {
					_gthis.getApplication().showMessage("Retrieval failure","Unable to retrieve PDB for " + modelId);
				}
			});
		}
	}
	,setPdbString: function(contents) {
		this.getActiveObjectObject().contents = contents;
	}
	,loadPdb: function() {
		this.renderer.loadPDB();
	}
	,loadICB: function() {
		this.renderer.loadICB();
	}
	,setActiveObject: function(objectId) {
		saturn.client.programs.SimpleExtJSProgram.prototype.setActiveObject.call(this,objectId);
		this.setTitle(this.getActiveObjectName());
		if(this.getActiveObjectObject().renderer == null) {
			var _g = 0;
			var _g1 = this.plugins;
			while(_g < _g1.length) {
				var plugin = _g1[_g];
				++_g;
				if(Std["is"](plugin,saturn.client.programs.plugins.AbstractPDBRendererPlugin)) {
					var tmp = Type.getClass(plugin);
					this.getActiveObjectObject().renderer = Type.getClassName(tmp);
				}
			}
		}
		if(this.getActiveObjectObject().modelId != null || this.getActiveObjectObject().contents != null || this.getActiveObjectObject().icbURL != null) {
			this.reload();
		}
	}
	,configureRenderer: function() {
		var rendererClazz = this.getActiveObjectObject().renderer;
		var load = false;
		if(this.renderer == null) {
			load = true;
		} else {
			var currentRendererClazz = Type.getClassName(Type.getClass(this.renderer));
			if(rendererClazz != currentRendererClazz) {
				load = true;
			}
		}
		if(load) {
			var _g = 0;
			var _g1 = this.plugins;
			while(_g < _g1.length) {
				var plugin = _g1[_g];
				++_g;
				if(Std["is"](plugin,Type.resolveClass(rendererClazz))) {
					if(this.renderer != null) {
						this.renderer.destroy();
					}
					var newRenderer = plugin;
					newRenderer.initialise();
					this.theComponent.updateLayout();
					this.renderer = newRenderer;
					break;
				}
			}
		}
	}
	,resize: function() {
		if(this.renderer != null) {
			this.renderer.resize();
		}
	}
	,getWidth: function() {
		return this.getComponent().getEl().dom.offsetWidth;
	}
	,getHeight: function() {
		return this.getComponent().getEl().dom.offsetHeight;
	}
	,reload: function() {
		if(this.getActiveObjectId() != null) {
			this.configureRenderer();
			var w0 = js.Boot.__cast(saturn.client.programs.SimpleExtJSProgram.prototype.getActiveObject.call(this,saturn.client.workspace.StructureModelWO) , saturn.client.workspace.StructureModelWO);
			var obj = js.Boot.__cast(w0.getObject() , saturn.core.domain.StructureModel);
			this.addModelToOutline(obj,true);
			if(obj.contents != null) {
				this.loadPdb();
			} else if(obj.modelId != null) {
				this.loadPdbFromId(obj.modelId);
			} else if(obj.icbURL != null) {
				this.loadICB();
			}
		}
	}
	,setTitle: function(title) {
		this.theComponent.setTitle(title);
	}
	,getComponent: function() {
		return this.theComponent;
	}
	,__class__: saturn.client.programs.PDBViewer
});
saturn.client.workspace.Phylo5WorkspaceObject = $hxClasses["saturn.client.workspace.Phylo5WorkspaceObject"] = function(object,name) {
	this.newickStr = null;
	if(object == null) {
		object = new saturn.core.domain.Alignment();
	}
	if(name == null) {
		name = "Phylogenetic tree";
	}
	this.iconPath = "/static/js/images/tree_16.png";
	saturn.client.workspace.WorkspaceObjectBase.call(this,object,name);
};
saturn.client.workspace.Phylo5WorkspaceObject.__name__ = ["saturn","client","workspace","Phylo5WorkspaceObject"];
saturn.client.workspace.Phylo5WorkspaceObject.getNewMenuText = function() {
	return "Phylogenetic tree";
};
saturn.client.workspace.Phylo5WorkspaceObject.getDefaultFolderName = function() {
	return "Trees";
};
saturn.client.workspace.Phylo5WorkspaceObject.__super__ = saturn.client.workspace.WorkspaceObjectBase;
saturn.client.workspace.Phylo5WorkspaceObject.prototype = $extend(saturn.client.workspace.WorkspaceObjectBase.prototype,{
	newickStr: null
	,__class__: saturn.client.workspace.Phylo5WorkspaceObject
});
saturn.client.programs.Phylo5Viewer = $hxClasses["saturn.client.programs.Phylo5Viewer"] = function() {
	this.newickStr = "";
	saturn.client.programs.SimpleExtJSProgram.call(this);
};
saturn.client.programs.Phylo5Viewer.__name__ = ["saturn","client","programs","Phylo5Viewer"];
saturn.client.programs.Phylo5Viewer.getQuickLaunchItems = function() {
	return [{ iconCls : "x-btn-tree", html : "Phylogenetic<br/>Viewer", cls : "quickLaunchButton", handler : function() {
		saturn.client.WorkspaceApplication.getApplication().getWorkspace().addObject(new saturn.client.workspace.Phylo5WorkspaceObject(new saturn.core.domain.Alignment(),"Tree"),true);
	}, tooltip : { dismissDelay : 10000, text : "Generate a phylogenetic tree from DNA or Protein sequences"}}];
};
saturn.client.programs.Phylo5Viewer.__super__ = saturn.client.programs.SimpleExtJSProgram;
saturn.client.programs.Phylo5Viewer.prototype = $extend(saturn.client.programs.SimpleExtJSProgram.prototype,{
	theComponent: null
	,internalFrameId: null
	,canvas: null
	,newickStr: null
	,emptyInit: function() {
		saturn.client.programs.SimpleExtJSProgram.prototype.emptyInit.call(this);
		this.internalFrameId = "INTERNAL_ALN_FRAME";
		var self = this;
		this.getApplication().hideMiddleSouthPanel();
		this.theComponent = Ext.create("Ext.panel.Panel",{ title : "Phylo5 Viewer", width : "100%", height : "95%", autoScroll : true, layout : "fit", listeners : { "render" : function() {
			self.initialiseDOMComponent();
		}}, cls : "x-tree-background"});
		this.registerDropFolder("Sequences",null,true);
	}
	,initialiseDOMComponent: function() {
		saturn.client.programs.SimpleExtJSProgram.prototype.initialiseDOMComponent.call(this);
		var parent = this.getComponent().getEl().dom.firstChild;
		this.newickStr = "((UFSP1:0.00,UFSP2:0.00):0.77,((((SENP1:0.00,SENP2:0.00):0.70,(SENP3:0.00,SENP5:0.00):0.73):0.82,SENP8:0.00):0.99,(SENP6:0.00,SENP7:0.00):0.77):1.00,((((((((((FAM105B:0.00,(OTUD6A:0.00,OTUD6B:0.00):0.46):0.92,(OTUB1:0.00,OTUB2:0.00):0.55):0.99,OTUD1:0.00):0.99,YOD1:0.00):0.99,(OTUD3:0.00,OTUD5:0.00):0.86):0.99,OTUD4:0.00):0.99,ZRANB1:0.00):0.99,TNFAIP3:0.00):0.99,(OTUD7A:0.00,OTUD7B:0.00):0.48):0.99,VCPIP1:0.00):1.00,(((KHNYN:0.00,NYNRIN:0.00):0.65,N4BP1:0.00):0.86,((ZC3H12A:0.00,(ZC3H12B:0.00,ZC3H12C:0.00):0.53):0.64,ZC3H12D:0.00):0.65):0.94,(BAP1:0.00,((UCHL1:0.00,UCHL3:0.00):0.46,UCHL5:0.00):0.82):0.99,(DESI1:0.00,DESI2:0.00):0.82,(((((((BRCC3:0.00,(COPS5:0.00,PSMD14:0.00):0.74):0.93,(COPS6:0.00,(EIF3F:0.00,PSMD7:0.00):0.79):0.81):0.95,EIF3H:0.00):0.99,MPND:0.00):0.99,(STAMBP:0.00,STAMBPL1:0.00):0.43):0.99,MYSM1:0.00):0.99,PRPF8:0.00):0.99,((ATXN3:0.00,ATXN3L:0.00):0.30,(JOSD1:0.00,JOSD2:0.00):0.51):0.99,((ATG4A:0.00,ATG4B:0.00):0.53,(ATG4C:0.00,ATG4D:0.00):0.63):0.80);";
		var parser = new phylo.PhyloNewickParser();
		var rootNode = parser.parse(this.newickStr);
		rootNode.calculateScale();
		rootNode.postOrderTraversal();
		rootNode.preOrderTraversal(1);
		var parentWidth = this.getComponent().getEl().getWidth();
		var parentHeight = this.getComponent().getEl().getHeight();
		var config = new phylo.PhyloCanvasConfiguration();
		config.enableTools = true;
		config.enableToolbar = true;
		config.enableZoom = true;
		this.canvas = new phylo.PhyloCanvasRenderer(parentWidth,parentHeight,parent,rootNode,config,null);
	}
	,setTree: function(tree) {
		this.newickStr = tree;
		var w0 = js.Boot.__cast(saturn.client.programs.SimpleExtJSProgram.prototype.getActiveObject.call(this,saturn.client.workspace.Phylo5WorkspaceObject) , saturn.client.workspace.Phylo5WorkspaceObject);
		w0.newickStr = tree;
		if(this.newickStr == null || this.newickStr == "") {
			this.theComponent.addCls("x-tree-background");
			return;
		} else {
			this.theComponent.removeCls("x-tree-background");
		}
		this.canvas.setNewickString(this.newickStr);
	}
	,zoomIn: function() {
		this.canvas.zoomIn();
	}
	,zoomOut: function() {
		this.canvas.zoomOut();
	}
	,setTitle: function(title) {
		this.theComponent.setTitle(title);
	}
	,getComponent: function() {
		return this.theComponent;
	}
	,onFocus: function() {
		saturn.client.programs.SimpleExtJSProgram.prototype.onFocus.call(this);
		this.getApplication().hideMiddleSouthPanel();
		var self = this;
		this.getApplication().getViewMenu().add({ text : "Update tree", handler : function() {
			self.updateAlignment();
		}});
		this.getApplication().getFileMenu().add({ text : "Import all Protein Sequences", handler : function() {
			self.addAllProteinSequencesFromWorkspace();
		}});
		this.getApplication().getFileMenu().add({ text : "Import all DNA Sequences", handler : function() {
			self.addAllDNASequencesFromWorkspace();
		}});
		this.getApplication().getToolBar().add({ iconCls : "x-btn-copy", text : "Update", handler : function() {
			self.updateAlignment();
		}, tooltip : { dismissDelay : 10000, text : "Update tree with current sequences"}});
		this.getApplication().getToolBar().add({ iconCls : "x-btn-copy", text : "Import Protein", handler : function() {
			self.addAllProteinSequencesFromWorkspace();
		}, tooltip : { dismissDelay : 10000, text : "Import all protein sequences from the workspace (click update to update tree)"}});
		this.getApplication().getToolBar().add({ iconCls : "x-btn-copy", text : "Import DNA", handler : function() {
			self.addAllDNASequencesFromWorkspace();
		}, tooltip : { dismissDelay : 10000, text : "Import all DNA sequences from the workspace (click update to update tree)"}});
	}
	,setAlignmentURL: function(alignmentURL) {
		var frame = this.theComponent.getComponent(this.internalFrameId).getEl().dom;
		frame.src = alignmentURL;
		this.getActiveAlignmentObject().setAlignmentURL(alignmentURL);
	}
	,updateAlignment: function() {
		var _gthis = this;
		var self = this;
		var objectIds = this.getState().getReferences("Sequences");
		var strBuf = new StringBuf();
		var _g = 0;
		while(_g < objectIds.length) {
			var objectId = objectIds[_g];
			++_g;
			var w0 = this.getWorkspace().getObject(objectId);
			if(Std["is"](w0,saturn.client.workspace.DNAWorkspaceObject)) {
				var object = this.getWorkspace().getObjectSafely(objectId,saturn.client.workspace.DNAWorkspaceObject);
				strBuf.add(">" + w0.getName() + "\n" + object.getObject().getSequence() + "\n");
			} else if(Std["is"](w0,saturn.client.workspace.ProteinWorkspaceObject)) {
				var object1 = js.Boot.__cast(w0 , saturn.client.workspace.ProteinWorkspaceObject);
				strBuf.add(">" + w0.getName() + "\n" + object1.getObject().getSequence() + "\n");
			} else {
				var d = w0;
				strBuf.add(">" + Std.string(d.getName()) + "\n" + Std.string(d.getSequence()) + "\n");
			}
		}
		saturn.client.BioinformaticsServicesClient.getClient().sendPhyloReportRequest(strBuf.toString(),function(response,error) {
			if(error == null) {
				var phyloReport = response.json.phyloReport;
				var location = js.Browser.get_window().location;
				var dstURL = location.protocol + "//" + location.hostname + ":" + location.port + "/" + phyloReport;
				Ext.Ajax.request({ url : dstURL, success : function(response1,opts) {
					var obj = response1.responseText;
					self.setTree(obj);
				}, failure : function(response2,opts1) {
				}});
			} else {
				_gthis.getApplication().showMessage("Tree generation error",error);
			}
		});
	}
	,addAllDNASequencesFromWorkspace: function() {
		this.registerAllFromWorkspace(saturn.client.workspace.DNAWorkspaceObject,"Sequences");
	}
	,addAllProteinSequencesFromWorkspace: function() {
		this.registerAllFromWorkspace(saturn.client.workspace.ProteinWorkspaceObject,"Sequences");
	}
	,getActiveAlignmentObject: function() {
		var activeObject = saturn.client.programs.SimpleExtJSProgram.prototype.getActiveObject.call(this,saturn.client.workspace.Phylo5WorkspaceObject);
		if(activeObject != null) {
			var w0 = js.Boot.__cast(activeObject , saturn.client.workspace.Phylo5WorkspaceObject);
			return w0.getObject();
		} else {
			return null;
		}
	}
	,setActiveObject: function(objectId) {
		saturn.client.programs.SimpleExtJSProgram.prototype.setActiveObject.call(this,objectId);
		var w0 = js.Boot.__cast(saturn.client.programs.SimpleExtJSProgram.prototype.getActiveObject.call(this,saturn.client.workspace.Phylo5WorkspaceObject) , saturn.client.workspace.Phylo5WorkspaceObject);
		var alnObj = w0.getObject();
		var alnUrl = alnObj.getAlignmentURL();
		if(alnUrl != null) {
			this.setAlignmentURL(alnUrl);
		}
		this.setTitle(w0.getName());
		if(w0.newickStr != null) {
			this.setTree(w0.newickStr);
		}
	}
	,getAlignmentObject: function() {
		var w0 = js.Boot.__cast(saturn.client.programs.SimpleExtJSProgram.prototype.getActiveObject.call(this,saturn.client.workspace.Phylo5WorkspaceObject) , saturn.client.workspace.Phylo5WorkspaceObject);
		return w0.getObject();
	}
	,'export': function() {
		var domElem = this.theComponent.down("component").getEl().dom;
		this.getApplication().saveTextFile(domElem.innerHTML,this.getActiveObjectName() + ".svg");
	}
	,__class__: saturn.client.programs.Phylo5Viewer
});
saturn.client.workspace.ProteinWorkspaceObject = $hxClasses["saturn.client.workspace.ProteinWorkspaceObject"] = function(object,name) {
	if(object == null) {
		object = new saturn.core.Protein("");
	}
	if(name == null) {
		name = "Protein Sequence";
	}
	this.iconPath = "/static/js/images/structure_16.png";
	saturn.client.workspace.WorkspaceObjectBase.call(this,object,name);
};
saturn.client.workspace.ProteinWorkspaceObject.__name__ = ["saturn","client","workspace","ProteinWorkspaceObject"];
saturn.client.workspace.ProteinWorkspaceObject.getNewMenuText = function() {
	return "Protein Sequence";
};
saturn.client.workspace.ProteinWorkspaceObject.getDefaultFolderName = function() {
	return "Protein";
};
saturn.client.workspace.ProteinWorkspaceObject.__super__ = saturn.client.workspace.WorkspaceObjectBase;
saturn.client.workspace.ProteinWorkspaceObject.prototype = $extend(saturn.client.workspace.WorkspaceObjectBase.prototype,{
	setName: function(name) {
		saturn.client.workspace.WorkspaceObjectBase.prototype.setName.call(this,name);
		if(this.object != null) {
			this.object.setMoleculeName(name);
		}
	}
	,setObject: function(obj) {
		saturn.client.workspace.WorkspaceObjectBase.prototype.setObject.call(this,obj);
		obj.setMoleculeName(this.name);
	}
	,__class__: saturn.client.workspace.ProteinWorkspaceObject
});
saturn.client.programs.ProteinSequenceEditor = $hxClasses["saturn.client.programs.ProteinSequenceEditor"] = function(delayLoad) {
	saturn.client.programs.sequenceeditor.SequenceEditor.call(this);
};
saturn.client.programs.ProteinSequenceEditor.__name__ = ["saturn","client","programs","ProteinSequenceEditor"];
saturn.client.programs.ProteinSequenceEditor.__interfaces__ = [saturn.client.programs.sequenceeditor.SequenceChangeListener];
saturn.client.programs.ProteinSequenceEditor.readFastaFile = function(file,onLoad) {
	var fileReader = new FileReader();
	fileReader.onload = function(e) {
		var contents = e.target.result;
		var fileName = file.name;
		var seqObjs = null;
		if(StringTools.endsWith(fileName,".fasta")) {
			seqObjs = saturn.core.FastaEntity.parseFasta(contents);
		} else if(StringTools.endsWith(fileName,".pdb")) {
			var pdbCode = saturn.core.PDBParser.extractPDBID(fileName);
			seqObjs = saturn.core.PDBParser.getSequences(contents,pdbCode,null);
		} else {
			Ext.Msg.alert("","Unknown file format");
			return;
		}
		if(seqObjs == null || seqObjs.length == 0) {
			Ext.Msg.alert("","No sequences found in FASTA file");
		}
		onLoad(seqObjs);
	};
	fileReader.readAsText(file);
};
saturn.client.programs.ProteinSequenceEditor.getQuickLaunchItems = function() {
	return [{ iconCls : "x-btn-structure", html : "Protein<br/>Editor", cls : "quickLaunchButton", handler : function() {
		var prot = new saturn.core.Protein("");
		prot.setMoleculeName("Protein");
		saturn.client.WorkspaceApplication.getApplication().getWorkspace().addObject(prot,true);
	}, tooltip : { dismissDelay : 10000, text : "Editor for protein sequences.<br/>Supports annotations and submission to BLAST."}}];
};
saturn.client.programs.ProteinSequenceEditor.__super__ = saturn.client.programs.sequenceeditor.SequenceEditor;
saturn.client.programs.ProteinSequenceEditor.prototype = $extend(saturn.client.programs.sequenceeditor.SequenceEditor.prototype,{
	selectedStatsFolder: null
	,lastWasMouseMoved: null
	,frameOffSet: null
	,emptyInit: function() {
		saturn.client.programs.sequenceeditor.SequenceEditor.prototype.emptyInit.call(this);
		this.frameOffSet = 0;
		this.selectedStatsFolder = null;
		this.lastWasMouseMoved = false;
		this.setAnnotationCount(0);
		this.addSequenceChangeListener(this);
	}
	,setActiveObject: function(objectId) {
		saturn.client.programs.sequenceeditor.SequenceEditor.prototype.setActiveObject.call(this,objectId);
		var proteinObject = this.getActiveObject(saturn.client.workspace.ProteinWorkspaceObject);
		var object;
		if(Std["is"](proteinObject,saturn.core.Protein)) {
			object = proteinObject;
		} else {
			object = proteinObject.object;
		}
		var sequence = object.getSequence();
		this.blockChanged(null,null,0,null,sequence);
	}
	,onFocus: function() {
		var _gthis = this;
		saturn.client.programs.sequenceeditor.SequenceEditor.prototype.onFocus.call(this);
		var self = this;
		var viewMenu = this.getApplication().getViewMenu();
		var toolsMenu = this.getApplication().getToolsMenu();
		var blastMenu = Ext.create("Ext.menu.Menu",{ margin : "0 0 10 0", "z-index" : 1000000});
		toolsMenu.add({ text : "BLAST", iconCls : "bmenu", menu : blastMenu, cls : "menu-item-FILE"});
		var blastItems = [];
		var blastDatabases = saturn.client.BioinformaticsServicesClient.getClient(null).getBlastList().PROT;
		var _g = 0;
		var _g1 = Reflect.fields(blastDatabases);
		while(_g < _g1.length) {
			var dbName = [_g1[_g]];
			++_g;
			var dbName1 = dbName[0];
			var blastItem = (function(dbName2) {
				return function() {
					var blastName = "Blastp " + _gthis.getActiveObject(saturn.client.workspace.ProteinWorkspaceObject).getName() + " 1 - " + self.sequence.length;
					self.blastSequence(self.sequence,dbName2[0],blastName);
				};
			})(dbName);
			var blastItem1 = blastMenu.add({ text : dbName1, hidden : false, handler : blastItem});
			blastItems.push({ text : dbName[0], hidden : false, handler : (function(dbName3) {
				return function() {
					var blastName1 = "Blastp " + _gthis.getActiveObject(saturn.client.workspace.ProteinWorkspaceObject).getName() + " 1 - " + self.sequence.length;
					self.blastSequence(self.sequence,dbName3[0],blastName1);
				};
			})(dbName)});
		}
		var blastButton = Ext.create("Ext.button.Button",{ renderTo : Ext.getBody(), text : "BLAST", handler : function() {
		}, menu : Ext.create("Ext.menu.Menu",{ items : blastItems}), iconCls : "x-btn-blast", cls : "x-btn-split-black-background", tooltip : { dismissDelay : 10000, text : "BLAST against a sequence database"}});
		this.getApplication().getToolBar().add(blastButton);
		viewMenu.add({ text : "SS report", handler : function() {
			var name = "PSIPred " + _gthis.getActiveObject(saturn.client.workspace.ProteinWorkspaceObject).getName() + " 1 - " + self.sequence.length;
			_gthis.psiPredSequence(_gthis.sequence,name);
		}});
		viewMenu.add({ text : "Transmembrane Report", handler : function() {
			var name1 = "TMHMM " + _gthis.getActiveObject(saturn.client.workspace.ProteinWorkspaceObject).getName() + " 1 - " + self.sequence.length;
			_gthis.tmhmmSequence(_gthis.sequence,name1);
		}});
		this.installOutlineTree();
		this.updateOutline();
		this.getApplication().getExportMenu().add({ text : "FASTA", handler : function() {
			var name2 = _gthis.getActiveObjectName();
			name2 = StringTools.replace(name2," (Protein)","");
			var contents = saturn.core.FastaEntity.formatFastaFile(name2,_gthis.getSequence());
			_gthis.getApplication().saveTextFile(contents,name2 + ".fasta");
		}});
		var fetchItems = [];
		fetchItems.push({ text : "NCBI Gene", hidden : false, handler : function() {
			var idStr = _gthis.getLastSearch();
			var ids = null;
			if(idStr.indexOf(",") > -1) {
				ids = idStr.split(",");
			} else {
				ids = [idStr];
			}
			saturn.app.SaturnClient.addProteinsFromNCBIGene(ids,_gthis);
		}});
		fetchItems.push({ text : "UniProtKB", hidden : false, handler : function() {
			var idStr1 = _gthis.getLastSearch();
			var ids1 = null;
			if(idStr1.indexOf(",") > -1) {
				ids1 = idStr1.split(",");
			} else {
				ids1 = [idStr1];
			}
			saturn.app.SaturnClient.addProteinsFromUniProtKB(ids1,_gthis);
		}});
		var fetchButton = Ext.create("Ext.button.Button",{ renderTo : Ext.getBody(), text : "Fetch", handler : function() {
		}, menu : Ext.create("Ext.menu.Menu",{ items : fetchItems}), iconCls : "x-btn-fetch", cls : "x-btn-split-black-background", tooltip : { dismissDelay : 10000, text : "Fetch from remote database"}});
		this.getApplication().getToolBar().add(fetchButton);
		this.getApplication().getToolBar().add({ text : "Load DNA", handler : function() {
			_gthis.loadDNA();
		}});
	}
	,loadDNA: function() {
		var object = this.getObject();
		if(object != null) {
			var dna = this.getObject().getDNA();
			this.getWorkspace().addObject(dna,true);
		}
	}
	,getAddToPlateContextMenu: function(name,start,stop) {
		var _gthis = this;
		var addPlateMenu = Ext.create("Ext.menu.Menu",{ margin : "0 0 10 0"});
		if(name == null) {
			var obj = this.getWorkspaceObject();
			if(obj.getDNA() != null) {
				obj = obj.getDNA();
			}
			name = obj.getName();
		}
		var objs = this.getWorkspace().getAllObjects(saturn.core.ConstructDesignTable);
		var _g = 0;
		while(_g < objs.length) {
			var obj1 = [objs[_g]];
			++_g;
			var tmp = obj1[0].getName();
			var tmp1 = (function(obj2) {
				return function() {
					var objectId = obj2[0].getUUID();
					var prog = _gthis.getWorkspace().getProgramForObject(objectId);
					if(prog != null) {
						var constructDesigner = js.Boot.__cast(prog , saturn.client.programs.ConstructDesigner);
						constructDesigner.getTable().addRow({ "Entry Clone" : name, "Start position" : start, "Stop position" : stop});
						_gthis.getWorkspace().setActiveObject(objectId);
					}
				};
			})(obj1);
			addPlateMenu.add({ text : tmp, handler : tmp1});
		}
		addPlateMenu.add({ text : "New plate", handler : function() {
			var table = new saturn.core.ConstructDesignTable(false);
			table.getData().push({ "Entry Clone" : name, "Start position" : start, "Stop position" : stop});
			_gthis.getWorkspace().addObject(table,true);
		}});
		return addPlateMenu;
	}
	,updateModelField: function(obj,field,value) {
		var p = js.Boot.__cast(this.getObject() , saturn.core.Protein);
		if(p.isLinked()) {
			if(p.linkedOriginField == field) {
				saturn.client.programs.sequenceeditor.SequenceEditor.prototype.updateModelField.call(this,obj,field,this.getSequence());
				return;
			}
		}
		saturn.client.programs.sequenceeditor.SequenceEditor.prototype.updateModelField.call(this,obj,field,value);
	}
	,getWorkspaceContextMenuItems: function() {
		var items = [];
		var obj = this.getEntity();
		if(Std["is"](obj,saturn.core.Protein)) {
			var p = js.Boot.__cast(obj , saturn.core.Protein);
			if(!p.isLinked()) {
				var dnaItems = this.getWorkspace().getObjectsByClass(saturn.core.DNA);
				var attachItems = Ext.create("Ext.menu.Menu",{ margin : "0 0 10 0"});
				var _g = 0;
				while(_g < dnaItems.length) {
					var dnaObj = [dnaItems[_g]];
					++_g;
					if(!dnaObj[0].isLinked()) {
						var tmp = dnaObj[0].getName();
						var tmp1 = (function(dnaObj1) {
							return function() {
								p.setDNA(dnaObj1[0]);
							};
						})(dnaObj);
						attachItems.add({ text : tmp, handler : tmp1});
					}
				}
				items.push({ text : "Attach DNA", menu : attachItems});
			} else {
				items.push({ text : "Deattach DNA", handler : function() {
					obj.setDNA(null);
				}});
			}
		}
		return items;
	}
	,setFrameOffSet: function(offSet) {
		this.frameOffSet = offSet;
	}
	,psiPredSequence: function(theSequence,name) {
		var _gthis = this;
		saturn.client.BioinformaticsServicesClient.getClient().sendPsiPredReportRequest(theSequence,name,function(response,error) {
			if(error == null) {
				var htmlReportFile = response.json.htmlPsiPredReport;
				var location = js.Browser.get_window().location;
				var dstURL = location.protocol + "//" + location.hostname + ":" + location.port + "/" + htmlReportFile;
				var webPage = new saturn.client.workspace.WebPage();
				webPage.setURL(dstURL);
				var w0 = new saturn.client.workspace.WebPageWorkspaceObject(webPage,name);
				_gthis.getApplication().getWorkspace().addObject(w0,true);
			} else {
				_gthis.getApplication().showMessage("PSIPred Error",error);
			}
		});
	}
	,tmhmmSequence: function(theSequence,name) {
		var _gthis = this;
		saturn.client.BioinformaticsServicesClient.getClient().sendTMHMMReportRequest(theSequence,name,function(response,error) {
			if(error == null) {
				var htmlReportFile = response.json.htmlTMHMMReport;
				var location = js.Browser.get_window().location;
				var dstURL = location.protocol + "//" + location.hostname + ":" + location.port + "/" + htmlReportFile;
				var webPage = new saturn.client.workspace.WebPage();
				webPage.setURL(dstURL);
				var w0 = new saturn.client.workspace.WebPageWorkspaceObject(webPage,name);
				_gthis.getApplication().getWorkspace().addObject(w0,true);
			} else {
				_gthis.getApplication().showMessage("TMHMM Error",error);
			}
		});
	}
	,blastSequence: function(theSequence,database,blastName) {
		var _gthis = this;
		saturn.client.BioinformaticsServicesClient.getClient().sendBlastReportRequest(theSequence,blastName,database,function(response,error) {
			if(error == null) {
				var reportFile = response.json.reportFile;
				var location = js.Browser.get_window().location;
				var dstURL = location.protocol + "//" + location.hostname + ":" + location.port + "/" + reportFile;
				var webPage = new saturn.client.workspace.WebPage();
				webPage.setURL(dstURL);
				var w0 = new saturn.client.workspace.WebPageWorkspaceObject(webPage,blastName);
				js.Browser.get_window().console.log("Gekk");
				_gthis.getApplication().getWorkspace()._addObject(w0,true,true,"BLAST");
			} else {
				_gthis.getApplication().showMessage("BLAST Error",error);
			}
		});
	}
	,onBlur: function() {
		saturn.client.programs.sequenceeditor.SequenceEditor.prototype.onBlur.call(this);
		var webApp = saturn.client.WorkspaceApplication.getApplication();
		var dataStore = webApp.getOutlineDataStore("DEFAULT");
		var rootNode = dataStore.getRootNode();
	}
	,installOutlineTree: function() {
		this.getApplication().installOutlineTree("DEFAULT",false,false,null);
		var webApp = saturn.client.WorkspaceApplication.getApplication();
		var dataStore = webApp.getOutlineDataStore("DEFAULT");
		var rootNode = dataStore.getRootNode();
		var folderNames = ["Current","Selected"];
		Ext.suspendLayouts();
		var _g = 0;
		while(_g < folderNames.length) {
			var folderName = folderNames[_g];
			++_g;
			var gcContentStr = "0";
			var dnaNucCountStr = "0";
			var mw = "0";
			var currentStats = rootNode.appendChild({ text : folderName, leaf : false, expanded : true, id : folderName});
			var lenNode = currentStats.appendChild({ text : "Length : " + dnaNucCountStr, leaf : true, id : folderName + " : Length"});
			var mwNode = currentStats.appendChild({ text : "MW : " + mw, leaf : true, id : folderName + " : MW"});
			currentStats.appendChild({ text : "HP : ", leaf : true, id : folderName + " : HP"});
			currentStats.appendChild({ text : "pI : ", leaf : true, id : folderName + " : pI"});
			currentStats.appendChild({ text : "E (R) : ", leaf : true, id : folderName + " : E (R)"});
			currentStats.appendChild({ text : "E (NR) : ", leaf : true, id : folderName + " : E (NR)"});
		}
		Ext.resumeLayouts(true);
	}
	,blockChanged: function(textField,blockNumber,startDelPosition,endDelPosition,newSequence) {
		saturn.client.programs.sequenceeditor.SequenceEditor.prototype.blockChanged.call(this,textField,blockNumber,startDelPosition,endDelPosition,newSequence);
	}
	,selectionUpdated: function() {
		saturn.client.programs.sequenceeditor.SequenceEditor.prototype.selectionUpdated.call(this);
	}
	,updateOutline: function() {
		saturn.client.programs.sequenceeditor.SequenceEditor.prototype.updateOutline.call(this);
		var webApp = saturn.client.WorkspaceApplication.getApplication();
		var dataStore = webApp.getOutlineDataStore("DEFAULT");
		var node = dataStore.getNodeById("Current" + " : Length");
		if(node != null && this.sequence != null) {
			node.set("text","Length : " + this.sequence.length);
			node.commit();
			node = dataStore.getNodeById("Current" + " : MW");
			if(node != null) {
				var mw = 0.;
				if(this.sequence.length > 0) {
					mw = saturn.util.MathUtils.sigFigs(new saturn.core.Protein(this.sequence).getMW(),2);
				}
				node.set("text","MW : " + mw);
				node.commit();
			}
			node = dataStore.getNodeById("Current" + " : HP");
			if(node != null) {
				var hp = 0.;
				if(this.sequence.length > 0) {
					hp = saturn.util.MathUtils.sigFigs(new saturn.core.Protein(this.sequence).getHydrophobicity(),2);
				}
				node.set("text","HP : " + hp);
				node.commit();
			}
			node = dataStore.getNodeById("Current" + " : pI");
			if(node != null) {
				var pI = 0.;
				if(this.sequence.length > 0) {
					pI = saturn.util.MathUtils.sigFigs(new saturn.core.Protein(this.sequence).getpI(),2);
				}
				node.set("text","pI : " + pI);
				node.commit();
			}
			node = dataStore.getNodeById("Current" + " : E (R)");
			if(node != null) {
				var E = 0.;
				if(this.sequence.length > 0) {
					E = saturn.util.MathUtils.sigFigs(new saturn.core.Protein(this.sequence).getExtinctionReduced(),2);
				}
				node.set("text","E (R): " + E);
				node.commit();
			}
			node = dataStore.getNodeById("Current" + " : E (NR)");
			if(node != null) {
				var E1 = 0.;
				if(this.sequence.length > 0) {
					E1 = saturn.util.MathUtils.sigFigs(new saturn.core.Protein(this.sequence).getExtinctionNonReduced(),2);
				}
				node.set("text","E (NR): " + E1);
				node.commit();
			}
		}
		node = dataStore.getNodeById("Selected" + " : Length");
		if(node != null) {
			var sel = this.getSelectedRegion();
			if(sel != null) {
				var selSeq = sel.getSequence();
				if(selSeq != null) {
					node.set("text","Length : " + selSeq.length);
					node.commit();
					node = dataStore.getNodeById("Selected" + " : MW");
					var mw1 = 0.;
					if(selSeq.length > 0) {
						mw1 = saturn.util.MathUtils.sigFigs(new saturn.core.Protein(selSeq).getMW(),2);
					}
					node.set("text","MW : " + mw1);
					node.commit();
					node = dataStore.getNodeById("Selected" + " : HP");
					var hp1 = 0.;
					if(selSeq.length > 0) {
						hp1 = saturn.util.MathUtils.sigFigs(new saturn.core.Protein(selSeq).getHydrophobicity(),2);
					}
					node.set("text","HP : " + hp1);
					node.commit();
					node = dataStore.getNodeById("Selected" + " : pI");
					var pI1 = 0.;
					if(selSeq.length > 0) {
						pI1 = saturn.util.MathUtils.sigFigs(new saturn.core.Protein(selSeq).getpI(),2);
					}
					node.set("text","pI : " + pI1);
					node.commit();
					node = dataStore.getNodeById("Selected" + " : E (R)");
					var E2 = 0.;
					if(selSeq.length > 0) {
						E2 = saturn.util.MathUtils.sigFigs(new saturn.core.Protein(selSeq).getExtinctionReduced(),2);
					}
					node.set("text","E (R): " + E2);
					node.commit();
					node = dataStore.getNodeById("Selected" + " : E (NR)");
					var E3 = 0.;
					if(selSeq.length > 0) {
						E3 = saturn.util.MathUtils.sigFigs(new saturn.core.Protein(selSeq).getExtinctionNonReduced(),2);
					}
					node.set("text","E (NR): " + E3);
					node.commit();
				}
			}
		}
	}
	,openFile: function(file,asNew,asNewOpenProgram) {
		if(asNewOpenProgram == null) {
			asNewOpenProgram = true;
		}
		if(asNew) {
			var workspace = this.getWorkspace();
			saturn.client.programs.ProteinSequenceEditor.readFastaFile(file,Ext.bind(function(seqObjs) {
				var openTabs = true;
				saturn.client.WorkspaceApplication.suspendUpdates();
				var _g = 0;
				while(_g < seqObjs.length) {
					var seqObj = seqObjs[_g];
					++_g;
					var w0;
					if(seqObj.guessType() == saturn.core.FastaEntryType.DNA) {
						w0 = new saturn.client.workspace.DNAWorkspaceObject(new saturn.core.DNA(seqObj.getSequence()),seqObj.getName());
					} else if(seqObj.guessType() == saturn.core.FastaEntryType.PROTEIN) {
						w0 = new saturn.client.workspace.ProteinWorkspaceObject(new saturn.core.Protein(seqObj.getSequence()),seqObj.getName());
					} else {
						throw new js._Boot.HaxeError(new saturn.util.HaxeException("Unsupported FASTA file"));
					}
					workspace.addObject(w0,openTabs);
					openTabs = false;
				}
				saturn.client.WorkspaceApplication.resumeUpdates(true);
			},this));
		} else {
			this.openFastaFile(file);
		}
	}
	,openFastaFile: function(file) {
		var _gthis = this;
		saturn.client.programs.ProteinSequenceEditor.readFastaFile(file,Ext.bind(function(seqObjs) {
			if(seqObjs.length > 0) {
				var tmp = seqObjs[0].getSequence();
				_gthis.blockChanged(null,null,0,null,tmp);
				_gthis.getWorkspace().renameWorkspaceObject(_gthis.getActiveObjectId(),seqObjs[0].getName());
			}
		},this));
	}
	,sequenceChanged: function(sequence) {
	}
	,getSelectedRegion: function() {
		var region = saturn.client.programs.sequenceeditor.SequenceEditor.prototype.getSelectedRegion.call(this);
		return region;
	}
	,serialise: function() {
		var object = saturn.client.programs.sequenceeditor.SequenceEditor.prototype.serialise.call(this);
		object.FRAME_OFFSET = this.frameOffSet;
		return object;
	}
	,deserialise: function(object) {
		saturn.client.programs.sequenceeditor.SequenceEditor.prototype.deserialise.call(this,object);
		this.frameOffSet = object.FRAME_OFFSET;
	}
	,getNewMoleculeInstance: function() {
		return new saturn.core.Protein(this.sequence);
	}
	,getSequenceEditorBlock: function(blockNumber,editor) {
		return new saturn.client.programs.ProteinSequenceEditorBlock(blockNumber,editor);
	}
	,__class__: saturn.client.programs.ProteinSequenceEditor
});
saturn.client.programs.BlastDatabase = $hxClasses["saturn.client.programs.BlastDatabase"] = { __ename__ : ["saturn","client","programs","BlastDatabase"], __constructs__ : ["Constructs_DNA","Constructs_Protein"] };
saturn.client.programs.BlastDatabase.Constructs_DNA = ["Constructs_DNA",0];
saturn.client.programs.BlastDatabase.Constructs_DNA.toString = $estr;
saturn.client.programs.BlastDatabase.Constructs_DNA.__enum__ = saturn.client.programs.BlastDatabase;
saturn.client.programs.BlastDatabase.Constructs_Protein = ["Constructs_Protein",1];
saturn.client.programs.BlastDatabase.Constructs_Protein.toString = $estr;
saturn.client.programs.BlastDatabase.Constructs_Protein.__enum__ = saturn.client.programs.BlastDatabase;
saturn.client.programs.ProteinSequenceEditorBlock = $hxClasses["saturn.client.programs.ProteinSequenceEditorBlock"] = function(blockNumber,sequenceEditor) {
	saturn.client.programs.sequenceeditor.SequenceEditorBlock.call(this,blockNumber,sequenceEditor);
};
saturn.client.programs.ProteinSequenceEditorBlock.__name__ = ["saturn","client","programs","ProteinSequenceEditorBlock"];
saturn.client.programs.ProteinSequenceEditorBlock.__super__ = saturn.client.programs.sequenceeditor.SequenceEditorBlock;
saturn.client.programs.ProteinSequenceEditorBlock.prototype = $extend(saturn.client.programs.sequenceeditor.SequenceEditorBlock.prototype,{
	initialise: function(blockNumber) {
		var _gthis = this;
		saturn.client.programs.sequenceeditor.SequenceEditorBlock.prototype.initialise.call(this,blockNumber);
		var contextMenu = function(event) {
			var sequenceRegion = _gthis.sequenceEditor.getSelectedRegion();
			if(sequenceRegion != null) {
				var baseName = _gthis.sequenceEditor.getActiveObject(saturn.client.workspace.WorkspaceObject).getName() + " " + (sequenceRegion.getStartPosition() + 1) + "-" + sequenceRegion.getStopPosition();
				var blastName = "Blastn " + baseName;
				var protEditor = js.Boot.__cast(_gthis.sequenceEditor , saturn.client.programs.ProteinSequenceEditor);
				var addPlateMenu = protEditor.getAddToPlateContextMenu(null,sequenceRegion.getStartPosition() + 1,sequenceRegion.getStopPosition());
				var items = [{ text : "Blast Selected", handler : function() {
					(js.Boot.__cast(_gthis.sequenceEditor , saturn.client.programs.ProteinSequenceEditor)).blastSequence(sequenceRegion.getSequence(),"UniProt (Swiss-Prot)",blastName);
				}},{ text : "New From Selected", handler : function() {
					var prot = new saturn.core.Protein(sequenceRegion.getSequence());
					prot.setMoleculeName(baseName);
					_gthis.sequenceEditor.getWorkspace().addObject(prot,true);
				}},{ text : "Add to plate", menu : addPlateMenu}];
				var contextMenu1 = Ext.create("Ext.menu.Menu",{ focusOnToFront : false, items : items});
				contextMenu1.showAt(event.clientX,event.clientY);
				event.preventDefault();
			}
			return true;
		};
		var previousOnMouseUp = this.divElem.onmouseup;
		this.divElem.onmouseup = function(event1) {
			if(event1.ctrlKey) {
				contextMenu(event1);
			} else {
				previousOnMouseUp(event1);
			}
		};
		this.divElem.oncontextmenu = contextMenu;
	}
	,destroy: function() {
		this.divElem.onmouseup = null;
		this.divElem.oncontextmenu = null;
		this.sequenceEditor = null;
	}
	,__class__: saturn.client.programs.ProteinSequenceEditorBlock
});
saturn.client.programs.PurificationHelper = $hxClasses["saturn.client.programs.PurificationHelper"] = function() {
	saturn.client.programs.BasicTableViewer.call(this);
};
saturn.client.programs.PurificationHelper.__name__ = ["saturn","client","programs","PurificationHelper"];
saturn.client.programs.PurificationHelper.getQuickLaunchItems = function() {
	return [{ iconCls : "x-btn-structure", text : "Purification Helper", cls : "quickLaunchButton", handler : function() {
		var table = new saturn.core.PurificationHelperTable();
		saturn.client.WorkspaceApplication.getApplication().getWorkspace().addObject(table,true);
	}}];
};
saturn.client.programs.PurificationHelper.__super__ = saturn.client.programs.BasicTableViewer;
saturn.client.programs.PurificationHelper.prototype = $extend(saturn.client.programs.BasicTableViewer.prototype,{
	initialiseDOMComponent: function() {
		saturn.client.programs.BasicTableViewer.prototype.initialiseDOMComponent.call(this);
	}
	,onFocus: function() {
		var _gthis = this;
		saturn.client.programs.BasicTableViewer.prototype.onFocus.call(this);
		this.getApplication().getToolBar().add({ iconCls : "x-btn-calculate", text : "generate IDs", handler : function() {
			_gthis.generateids();
		}});
		this.getApplication().getToolBar().add({ iconCls : "x-btn-save", text : "Save", handler : function() {
			_gthis.saveNew();
		}});
		this.getApplication().getToolBar().add({ iconCls : "x-btn-save", text : "Start", handler : function() {
			_gthis.startGUI();
		}});
	}
	,startGUI: function() {
		var _gthis = this;
		this.getApplication().userValuePrompt("Start","Enter PrepX run name",function(runname) {
			_gthis.runStage0(runname);
		},function() {
		});
	}
	,runStage0: function(runname) {
		var _gthis = this;
		var table = js.Boot.__cast(this.getUpdatedTable() , saturn.core.PurificationHelperTable);
		table.runStage0(runname,function(err) {
			if(err != null) {
				_gthis.getApplication().showMessage("Run failure",err);
			} else {
				_gthis.getApplication().showMessage("Success","Run complete!!!");
				_gthis.updateTable(table);
			}
		});
	}
	,saveNew: function() {
		var _gthis = this;
		var table = js.Boot.__cast(this.getUpdatedTable() , saturn.core.PurificationHelperTable);
		table.saveNew(function(err) {
			if(err != null) {
				_gthis.getApplication().showMessage("Save failure","Save failure " + err);
			} else {
				_gthis.getApplication().showMessage("Saved","All records saved");
			}
		});
	}
	,generateids: function() {
		var _gthis = this;
		var table = js.Boot.__cast(this.getUpdatedTable() , saturn.core.PurificationHelperTable);
		table.generateids(function(err) {
			if(err != null) {
				_gthis.getApplication().showMessage("ID generation failure",err);
			} else {
				_gthis.updateTable(table);
			}
		});
	}
	,__class__: saturn.client.programs.PurificationHelper
});
saturn.client.programs.SHRNADesigner = $hxClasses["saturn.client.programs.SHRNADesigner"] = function() {
	this.reg_ncbi = new EReg("^\\s*\\w+_\\d+\\s*","");
	saturn.client.programs.BasicTableViewer.call(this);
};
saturn.client.programs.SHRNADesigner.__name__ = ["saturn","client","programs","SHRNADesigner"];
saturn.client.programs.SHRNADesigner.getQuickLaunchItems = function() {
	return [{ iconCls : "x-btn-shrna", text : "shRNA Designer", cls : "quickLaunchButton", menu : Ext.create("Ext.menu.Menu",{ items : { text : "OGG1 Example", handler : function() {
		var table = new saturn.core.SHRNADesignTable(false);
		saturn.client.WorkspaceApplication.getApplication().getWorkspace().addObject(table,true);
	}}}), handler : function() {
		var table1 = new saturn.core.SHRNADesignTable(true);
		saturn.client.WorkspaceApplication.getApplication().getWorkspace().addObject(table1,true);
	}, listeners : { mouseover : function() {
		if(!this.hasVisibleMenu()) {
			this.showMenu();
		}
	}}}];
};
saturn.client.programs.SHRNADesigner.__super__ = saturn.client.programs.BasicTableViewer;
saturn.client.programs.SHRNADesigner.prototype = $extend(saturn.client.programs.BasicTableViewer.prototype,{
	reg_ncbi: null
	,initialiseDOMComponent: function() {
		this.hideTitle = true;
		saturn.client.programs.BasicTableViewer.prototype.initialiseDOMComponent.call(this);
		this.table.addCustomContextItem({ text : "Show construct alignment", handler : function(rowIndex) {
		}});
		this.registerDropFolder("Target Sequence",saturn.core.DNA,true);
	}
	,onFocus: function() {
		var _gthis = this;
		saturn.client.programs.BasicTableViewer.prototype.onFocus.call(this);
		this.getApplication().getToolBar().add({ text : "Calculate", handler : function() {
			_gthis.calculate();
		}, iconCls : "x-btn-calculate"});
		this.getApplication().enableProgramSearchField(true);
	}
	,calculate: function() {
		var _gthis = this;
		var table = js.Boot.__cast(this.getUpdatedTable() , saturn.core.SHRNADesignTable);
		var references = this.getReferences("Target Sequence");
		if(references != null && references.length > 0) {
			var dna = this.getWorkspace().getObject(references[0]);
			var tmp = dna.getSequence();
			table.setSequence(tmp);
			table.calculateOligos(function(err) {
				if(err == null) {
					_gthis.updateTable(table);
				} else {
					_gthis.getApplication().showMessage("Calculation error","Please check all fields\n" + err);
				}
			});
		} else {
			this.getApplication().showMessage("Calculation error","Please set the target sequence first");
		}
	}
	,search: function(text) {
		var _gthis = this;
		if(text == this.lastSearch || text == "") {
			return;
		} else {
			this.lastSearch = text;
		}
		var loadFunc = function(sequence,name) {
			var targetSequences = _gthis.getReferences("Target Sequence");
			if(targetSequences != null && targetSequences.length > 0) {
				var obj = _gthis.getWorkspace().getObject(targetSequences[0]);
				obj.setSequence(sequence);
				obj.setName(name);
				_gthis.getWorkspace().renameWorkspaceObject(obj.getUUID(),name);
				var prog = _gthis.getWorkspace().getProgramForObject(obj.getUUID());
				if(prog != null) {
					if(Std["is"](prog,saturn.client.programs.DNASequenceEditor)) {
						var dnaProg = js.Boot.__cast(prog , saturn.client.programs.DNASequenceEditor);
						dnaProg.setSequence(sequence);
					}
				}
			} else {
				var dna = new saturn.core.DNA(sequence);
				dna.setName(name);
				_gthis.getWorkspace().addObject(dna,false);
				var loadFunc1 = dna.getUUID();
				_gthis.registerReference(loadFunc1,"Target Sequence");
			}
		};
		if(this.reg_ncbi.match(text)) {
			saturn.core.EUtils.getDNAForAccessions([text],function(err,objs) {
				if(err == null) {
					if(objs != null && objs.length > 0) {
						_gthis.debug("Loading remote sequence");
						var tmp = objs[0].getSequence();
						var tmp1 = objs[0].getName();
						loadFunc(tmp,tmp1);
					} else {
						_gthis.getApplication().showMessage("Download failure","No sequences found");
					}
				} else {
					_gthis.getApplication().showMessage("Download failure","Unable to download sequence for " + text);
				}
			});
		} else if(text.indexOf(">") > -1) {
			var entities = saturn.core.FastaEntity.parseFasta(text);
			if(entities == null || entities.length == 0) {
				this.getApplication().showMessage("Invalid FASTA","Invalid FASTA string");
			} else {
				var tmp2 = entities[0].getSequence();
				var tmp3 = entities[0].getName();
				loadFunc(tmp2,tmp3);
			}
		} else {
			loadFunc(text,"shRNA Template");
		}
	}
	,__class__: saturn.client.programs.SHRNADesigner
});
saturn.client.workspace.ScarabELNWO = $hxClasses["saturn.client.workspace.ScarabELNWO"] = function(object,name) {
	if(object == null) {
		object = new saturn.core.scarab.LabPage();
	}
	if(name == null) {
		name = "ScarabELN";
	}
	saturn.client.workspace.WorkspaceObjectBase.call(this,object,name);
};
saturn.client.workspace.ScarabELNWO.__name__ = ["saturn","client","workspace","ScarabELNWO"];
saturn.client.workspace.ScarabELNWO.getNewMenuText = function() {
	return "ScarabELN";
};
saturn.client.workspace.ScarabELNWO.getDefaultFolderName = function() {
	return "ScarabELN";
};
saturn.client.workspace.ScarabELNWO.__super__ = saturn.client.workspace.WorkspaceObjectBase;
saturn.client.workspace.ScarabELNWO.prototype = $extend(saturn.client.workspace.WorkspaceObjectBase.prototype,{
	serialise: function() {
		var page = new saturn.core.scarab.LabPage();
		page.id = this.object.id;
		page.experimentNo = this.object.experimentNo;
		this.object = page;
		return saturn.client.workspace.WorkspaceObjectBase.prototype.serialise.call(this);
	}
	,__class__: saturn.client.workspace.ScarabELNWO
});
saturn.client.programs.ScarabELNViewer = $hxClasses["saturn.client.programs.ScarabELNViewer"] = function() {
	saturn.client.programs.SimpleExtJSProgram.call(this);
};
saturn.client.programs.ScarabELNViewer.__name__ = ["saturn","client","programs","ScarabELNViewer"];
saturn.client.programs.ScarabELNViewer.getQuickLaunchItems = function() {
	return [{ iconCls : "x-btn-dna", text : "ScarabELNViewer", cls : "quickLaunchButton", handler : function() {
		saturn.client.WorkspaceApplication.getApplication().getWorkspace().addObject(new saturn.client.workspace.ScarabELNWO(null,null),true);
	}}];
};
saturn.client.programs.ScarabELNViewer.__super__ = saturn.client.programs.SimpleExtJSProgram;
saturn.client.programs.ScarabELNViewer.prototype = $extend(saturn.client.programs.SimpleExtJSProgram.prototype,{
	theComponent: null
	,editor: null
	,emptyInit: function() {
		var _gthis = this;
		saturn.client.programs.SimpleExtJSProgram.prototype.emptyInit.call(this);
		this.theComponent = Ext.create("Ext.panel.Panel",{ width : "100%", height : "100%", autoScroll : true, region : "center", listeners : { "afterrender" : function() {
			_gthis.initialiseDOMComponent();
		}}, autoEl : { tag : "div", html : ""}});
	}
	,initialiseDOMComponent: function() {
		saturn.client.programs.SimpleExtJSProgram.prototype.initialiseDOMComponent.call(this);
	}
	,onFocus: function() {
		var _gthis = this;
		saturn.client.programs.SimpleExtJSProgram.prototype.onFocus.call(this);
		this.getApplication().getToolBar().add({ iconCls : "x-btn-copy", text : "Example Button"});
		this.getApplication().getEditMenu().add({ text : "Click me", handler : function() {
			_gthis.getApplication().showMessage("Menu","You clicked me!");
		}});
		this.getApplication().hideMiddleSouthPanel();
	}
	,setActiveObject: function(objectId) {
		var _gthis = this;
		saturn.client.programs.SimpleExtJSProgram.prototype.setActiveObject.call(this,objectId);
		var w0 = js.Boot.__cast(saturn.client.programs.SimpleExtJSProgram.prototype.getActiveObject.call(this,saturn.client.workspace.ScarabELNWO) , saturn.client.workspace.ScarabELNWO);
		var obj = js.Boot.__cast(w0.getObject() , saturn.core.scarab.LabPage);
		this.getProvider().getById(obj.experimentNo,saturn.core.scarab.LabPage,function(obj1,err) {
			w0.setObject(obj1);
			if(err != null) {
				_gthis.getApplication().showMessage("",err);
			} else {
				_gthis.getProvider().activate([obj1],4,function(err1) {
					var tmp = w0.getName();
					_gthis.setTitle(tmp);
					_gthis.renderPage();
				});
			}
		});
	}
	,setTitle: function(title) {
		if(this.theComponent.tab != null) {
			this.theComponent.tab.setText(title);
		}
	}
	,getComponent: function() {
		return this.theComponent;
	}
	,getDomElement: function() {
		return this.theComponent.getEl().down("div[id*=innerCt]").dom;
	}
	,renderPage: function() {
		var obj = this.getActiveObjectObject();
		var container = this.getDomElement();
		var _g = 0;
		var _g1 = container.childNodes;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			container.removeChild(child);
		}
		container.className = "scarab_page";
		var headerDiv = js.Browser.get_document().createElement("div");
		headerDiv.className = "scarab_header";
		var titleDiv = js.Browser.get_document().createElement("div");
		titleDiv.innerText = "Title: " + obj.title;
		titleDiv.className = "scarab_title";
		var authorDiv = js.Browser.get_document().createElement("div");
		authorDiv.innerText = "Author: " + obj.userObj.fullName;
		authorDiv.className = "scarab_author";
		var dateDiv = js.Browser.get_document().createElement("div");
		if(obj.dateStarted != null && Reflect.hasField(obj.dateStarted,"getDate")) {
			dateDiv.innerText = "Created: " + obj.dateStarted.getDate() + "/" + (obj.dateStarted.getMonth() + 1) + "/" + obj.dateStarted.getFullYear();
			dateDiv.className = "scarab_date";
		}
		var dateUpdatedDiv = js.Browser.get_document().createElement("div");
		dateUpdatedDiv.innerText = "Created: " + obj.lastEdited.getDate() + "/" + (obj.lastEdited.getMonth() + 1) + "/" + obj.lastEdited.getFullYear();
		dateUpdatedDiv.className = "scarab_date_updated";
		headerDiv.appendChild(titleDiv);
		headerDiv.appendChild(authorDiv);
		headerDiv.appendChild(dateDiv);
		headerDiv.appendChild(dateUpdatedDiv);
		container.appendChild(headerDiv);
		var counter = 1;
		var _g2 = 0;
		var _g11 = obj.items;
		while(_g2 < _g11.length) {
			var item = _g11[_g2];
			++_g2;
			if(!Std["is"](item,saturn.core.scarab.LabPageText) && !Std["is"](item,saturn.core.scarab.LabPageImage)) {
				continue;
			}
			var captionDiv = js.Browser.get_document().createElement("div");
			captionDiv.innerText = item.caption;
			container.appendChild(captionDiv);
			var sectionDiv = js.Browser.get_document().createElement("div");
			sectionDiv.className = "scarab_section";
			sectionDiv.id = "scarab_section" + "_" + counter;
			sectionDiv.style.width = "100%";
			sectionDiv.ondblclick = $bind(this,this.doubleClickHandler);
			if(Std["is"](item,saturn.core.scarab.LabPageText)) {
				var textSection = item;
				var iframe = js.Browser.get_document().createElement("iframe");
				iframe.srcdoc = textSection.content;
				iframe.setAttribute("data-caption",textSection.caption);
				iframe.setAttribute("data-elnsectionid",textSection.elnSectionId == null ? "null" : "" + textSection.elnSectionId);
				iframe.setAttribute("data-sectionid",textSection.id == null ? "null" : "" + textSection.id);
				iframe.setAttribute("data-sectionorder",textSection.itemOrder == null ? "null" : "" + textSection.itemOrder);
				iframe.onload = $bind(this,this.iframeResizeHandler);
				iframe.onchange = $bind(this,this.iframeResizeHandler);
				iframe.width = "100%";
				iframe.style.marginTop = "5px";
				iframe.style.maxHeight = "400";
				iframe.scrolling = "auto";
				iframe.setAttribute("seamless","seamless");
				iframe.className = "scarab_text_read";
				iframe.id = "scarab_text_read" + "_" + counter;
				sectionDiv.appendChild(iframe);
			} else if(Std["is"](item,saturn.core.scarab.LabPageImage)) {
				var imageSection = item;
				var image = js.Browser.get_document().createElement("img");
				var $window = js.Browser.get_window();
				var blob = new Blob([imageSection.imageEdit],{ type : "image/jpeg"});
				var urlCreator = $window.URL || $window.webkitURL;
				var imageUrl = urlCreator.createObjectURL(blob);
				image.src = imageUrl;
				image.style.maxWidth = "100%";
				image.style.maxHeight = "400px";
				image.style.display = "block";
				image.style.marginTop = "5px";
				sectionDiv.appendChild(image);
				image.className = "scarab_image_read";
				image.id = "scarab_image_read" + "_" + counter;
			}
			container.appendChild(sectionDiv);
			++counter;
		}
	}
	,doubleClickHandler: function(event) {
		var sectionDiv;
		var config = { };
		config.allowedContent = true;
		config.extraAllowedContent = "span;ul;li;table;td;style;*[id];*(*);*{*}";
		if(this.editor) {
			var iframeId = this.editor.name;
			var tmp = $("#" + iframeId).contents().find("body");
			var tmp1 = this.editor.getData();
			tmp.html(tmp1);
			this.updateActiveObject(iframeId);
			this.editor.destroy();
			$("#" + iframeId).trigger("change");
		}
		if(!$(event.target)) {
			sectionDiv = $(event.srcElement);
		} else {
			sectionDiv = true;
		}
		var iframeId1 = $(sectionDiv).children().first().attr("id");
		this.editor = CKEDITOR.replace(iframeId1,config);
		this.editor.setData($(sectionDiv).children().first().contents().find("body").html());
	}
	,iframeResizeHandler: function(event) {
		var element = event.target || event.srcElement;
		element.style.height = element.contentWindow.document.body.offsetHeight + 30 + "px";
	}
	,updateActiveObject: function(iframeId) {
		var obj = this.getActiveObjectObject();
		var temp = null;
		var itemId = null;
		itemId = $("#" + iframeId).attr("data-sectionid");
		var _g = 0;
		var _g1 = obj.items;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			if(Std["is"](item,saturn.core.scarab.LabPageText) && (item.id == null ? "null" : "" + item.id) == itemId) {
				temp = item;
				HxOverrides.remove(obj.items,item);
				var iframeContent = $("#" + iframeId).contents().find("body").html();
				temp.content = this.constructScarabCompatibleHtml(iframeId,iframeContent);
				obj.items.push(temp);
				break;
			} else {
				continue;
			}
		}
		this.getApplication().getProvider().update(temp,$bind(this,this.updateCallBack));
	}
	,updateCallBack: function() {
	}
	,constructScarabCompatibleHtml: function(iframeId,iframeContent) {
		var content = null;
		var iframeSource = $("#" + iframeId).attr("srcdoc");
		var header = iframeSource.split("<body")[0];
		var fullBody = iframeSource.split("</head>")[1];
		var bodyOpenningTag = fullBody.split(">")[0] + ">";
		content = Std.string(header) + bodyOpenningTag + Std.string(iframeContent) + "</body></html>";
		return content;
	}
	,__class__: saturn.client.programs.ScarabELNViewer
});
saturn.client.programs.Sequence = $hxClasses["saturn.client.programs.Sequence"] = function() {
};
saturn.client.programs.Sequence.__name__ = ["saturn","client","programs","Sequence"];
saturn.client.programs.Sequence.main = function() {
};
saturn.client.programs.Sequence.prototype = {
	length: null
	,sequenceStr: null
	,getLength: function() {
		return this.length;
	}
	,setLength: function(len) {
		this.length = len;
	}
	,setSequence: function(sequenceStr) {
		this.sequenceStr = sequenceStr;
		this.setLength(this.sequenceStr.length);
	}
	,__class__: saturn.client.programs.Sequence
};
saturn.client.programs.TableHelperModelData = $hxClasses["saturn.client.programs.TableHelperModelData"] = function() { };
saturn.client.programs.TableHelperModelData.__name__ = ["saturn","client","programs","TableHelperModelData"];
saturn.client.programs.TableHelperModelData.prototype = {
	setModelsToCopy: null
	,getModelsToCopy: null
	,setModels: null
	,getModels: null
	,setRawModels: null
	,setObjects: null
	,getRawModels: null
	,getObjects: null
	,__class__: saturn.client.programs.TableHelperModelData
};
saturn.client.programs.ClipBoardRow = $hxClasses["saturn.client.programs.ClipBoardRow"] = function() {
	this.contents = new haxe.ds.StringMap();
};
saturn.client.programs.ClipBoardRow.__name__ = ["saturn","client","programs","ClipBoardRow"];
saturn.client.programs.ClipBoardRow.prototype = {
	contents: null
	,set: function(key,value) {
		this.contents.set(key,value);
	}
	,getContents: function() {
		return this.contents;
	}
	,__class__: saturn.client.programs.ClipBoardRow
};
saturn.client.programs.TextEditor = $hxClasses["saturn.client.programs.TextEditor"] = function() {
	saturn.client.programs.SimpleExtJSProgram.call(this);
};
saturn.client.programs.TextEditor.__name__ = ["saturn","client","programs","TextEditor"];
saturn.client.programs.TextEditor.runCode = function(code) {
	var app = saturn.client.WorkspaceApplication.getApplication();
	app.clearPrintBuffer();
	app.setInformationPanelText(app.getPrintBufferContent(),true);
	js.Lib.eval(code + "\nflush();");
};
saturn.client.programs.TextEditor.getQuickLaunchItems = function() {
	return [{ iconCls : "x-btn-copy", text : "Script", cls : "quickLaunchButton", handler : function() {
		saturn.client.WorkspaceApplication.getApplication().getWorkspace().addObject(new saturn.core.domain.TextFile(),true);
	}, tooltip : { dismissDelay : 10000, text : "Create a new script"}}];
};
saturn.client.programs.TextEditor.__super__ = saturn.client.programs.SimpleExtJSProgram;
saturn.client.programs.TextEditor.prototype = $extend(saturn.client.programs.SimpleExtJSProgram.prototype,{
	theComponent: null
	,editor: null
	,autoRunCBX: null
	,saveAsFileName: null
	,emptyInit: function() {
		var _gthis = this;
		saturn.client.programs.SimpleExtJSProgram.prototype.emptyInit.call(this);
		this.theComponent = Ext.create("Ext.panel.Panel",{ width : "100%", autoScroll : true, layout : "border", region : "center", items : [{ xtype : "component", region : "north", autoEl : { tag : "div", itemid : "editor", style : { width : "100%", height : "100%", position : "relative", top : 0, left : 0, overflow : "auto"}}}], listeners : { "render" : function() {
			_gthis.initialiseDOMComponent();
		}, "resize" : function() {
			_gthis.editor.resize();
		}}});
	}
	,initialiseDOMComponent: function() {
		saturn.client.programs.SimpleExtJSProgram.prototype.initialiseDOMComponent.call(this);
		this.installEditorComponent();
	}
	,installEditorComponent: function() {
		var _gthis = this;
		var dWin = js.Browser.get_window();
		var ace = dWin.ace;
		ace.require("ace/ext/language_tools");
		var dom = this.getEditorComponent();
		this.editor = ace.edit(dom.id);
		this.editor.session.setMode("ace/mode/javascript");
		this.editor.setTheme("ace/theme/tomorrow");
		this.editor.setOptions({ enableBasicAutocompletion : true, enableSnippets : true, enableLiveAutocompletion : false});
		this.editor.on("change",function() {
			_gthis.getObject().value = _gthis.editor.getSession().getValue();
		});
	}
	,getEditorComponent: function() {
		return this.theComponent.getEl().down("div[itemid*=editor]").dom;
	}
	,onFocus: function() {
		var _gthis = this;
		saturn.client.programs.SimpleExtJSProgram.prototype.onFocus.call(this);
		this.getApplication().getToolBar().add({ iconCls : "x-btn-copy", text : "Run", handler : function() {
			_gthis.runCodeFromEditor();
		}});
		this.getApplication().getToolBar().add({ iconCls : "x-btn-copy", text : "Run Selected", handler : function() {
			_gthis.runSelectedCode();
		}});
		this.getApplication().getToolBar().add({ iconCls : "x-btn-copy", text : "API", handler : function() {
			_gthis.getApplication().openLocalURL("static/pages/index.html");
		}});
		var obj = this.getActiveObjectObject();
		var tmp = obj != null && obj.autoRun;
		this.autoRunCBX = this.getApplication().getToolBar().add({ xtype : "checkbox", boxLabel : "auto-run", inputValue : "1", checked : tmp, handler : function() {
			var This = this;
			_gthis.getActiveObjectObject().autoRun = This.getValue();
		}, listeners : { "afterrender" : function(c) {
			Ext.QuickTips.register({ dismissDelay : 10000, target : c.getEl(), text : "Auto-run code when loading session<br/>Useful if you wish to extend classes or auto-load datasets dynamically"});
		}}});
		if(saturn.core.Util.isHostEnvironmentAvailable()) {
			this.getApplication().getToolBar().add({ iconCls : "x-btn-open", text : "Open", handler : function() {
				saturn.core.Util.openFileAsDialog(function(err,fileName,contents) {
					_gthis.setText(contents);
					_gthis.saveAsFileName = fileName;
				});
			}});
			this.getApplication().getToolBar().add({ iconCls : "x-btn-saveas", text : "Save As", handler : function() {
				saturn.core.Util.saveFileAsDialog(_gthis.getText(),function(err1,fileName1) {
					_gthis.saveAsFileName = fileName1;
				});
			}});
			this.getApplication().getToolBar().add({ iconCls : "x-btn-save", text : "Save", handler : function() {
				if(_gthis.saveAsFileName != null) {
					saturn.core.Util.saveFile(_gthis.saveAsFileName,_gthis.getText(),function(err2) {
					});
				} else {
					saturn.core.Util.saveFileAsDialog(_gthis.getText(),function(err3,fileName2) {
						_gthis.saveAsFileName = fileName2;
					});
				}
			}});
		}
	}
	,runCodeFromEditor: function() {
		var value = this.editor.getSession().getValue();
		saturn.client.programs.TextEditor.runCode(value);
	}
	,runSelectedCode: function() {
		var value = this.editor.getSelectedText();
		saturn.client.programs.TextEditor.runCode(value);
	}
	,updateActions: function() {
		saturn.client.programs.SimpleExtJSProgram.prototype.updateActions.call(this);
		var obj = this.getActiveObjectObject();
		if(obj != null) {
			if(obj.autoRun) {
				this.autoRunCBX.setValue(true);
			} else {
				this.autoRunCBX.setValue(false);
			}
		}
	}
	,setActiveObject: function(objectId) {
		saturn.client.programs.SimpleExtJSProgram.prototype.setActiveObject.call(this,objectId);
		this.setTitle(this.getObjectName());
		this.editor.getSession().setValue(this.getObject().value);
		this.setText(this.getObject().value);
	}
	,setText: function(text) {
		this.editor.getSession().setValue(text);
	}
	,getText: function() {
		return this.editor.getSession().getValue();
	}
	,setTitle: function(title) {
		this.theComponent.setTitle(title);
	}
	,getComponent: function() {
		return this.theComponent;
	}
	,saveObject: function(cb) {
		var entity = this.getEntity();
		var tmp = this.getText();
		entity.setText(tmp);
		saturn.client.programs.SimpleExtJSProgram.prototype.saveObject.call(this,cb);
	}
	,__class__: saturn.client.programs.TextEditor
});
saturn.client.programs.TiddlyWikiViewer = $hxClasses["saturn.client.programs.TiddlyWikiViewer"] = function() {
	saturn.client.programs.SimpleExtJSProgram.call(this);
};
saturn.client.programs.TiddlyWikiViewer.__name__ = ["saturn","client","programs","TiddlyWikiViewer"];
saturn.client.programs.TiddlyWikiViewer.getQuickLaunchItems = function() {
	return [{ iconCls : "x-btn-eln", html : "ELN", cls : "quickLaunchButton", handler : function() {
		saturn.client.WorkspaceApplication.getApplication().getWorkspace().addObject(new saturn.core.domain.TiddlyWiki(),true);
	}, tooltip : { dismissDelay : 10000, text : "Create ELN page"}}];
};
saturn.client.programs.TiddlyWikiViewer.__super__ = saturn.client.programs.SimpleExtJSProgram;
saturn.client.programs.TiddlyWikiViewer.prototype = $extend(saturn.client.programs.SimpleExtJSProgram.prototype,{
	theComponent: null
	,emptyInit: function() {
		saturn.client.programs.SimpleExtJSProgram.prototype.emptyInit.call(this);
		var self = this;
		this.theComponent = Ext.create("Ext.panel.Panel",{ width : "100%", height : "95%", autoScroll : true, layout : "fit", items : [{ xtype : "component", autoEl : { tag : "iframe"}}], listeners : { "render" : function() {
			self.initialiseDOMComponent();
		}}});
	}
	,onFocus: function() {
		saturn.client.programs.SimpleExtJSProgram.prototype.onFocus.call(this);
		this.getApplication().hideMiddleSouthPanel();
	}
	,getDefaultTemplateTiddlyWiki: function(cb) {
		saturn.client.core.CommonCore.getContent("/static/emptywiki.html",function(content) {
			var page = new saturn.core.domain.TiddlyWiki();
			page.content = content;
			var d = js.Browser.get_window();
			d.content = content;
			cb(null,page);
		},function(err) {
			cb("Unable to download template page",null);
		});
	}
	,setActiveObject: function(objectId) {
		var _gthis = this;
		saturn.client.programs.SimpleExtJSProgram.prototype.setActiveObject.call(this,objectId);
		if(objectId != null) {
			var obj = this.getEntity();
			if(obj.content == null) {
				this.getDefaultTemplateTiddlyWiki(function(err,template) {
					if(err != null) {
						_gthis.getApplication().showMessage("Template error","Unable to retrieve template");
					} else {
						obj.content = template.content;
						_gthis.getApplication().userValuePrompt("Wiki ID","Enter ELN ID",function(pageId) {
							obj.pageId = pageId;
							_gthis.getWorkspace().renameWorkspaceObject(_gthis.getActiveObjectId(),pageId);
							var provider = _gthis.getApplication().getProvider();
							provider.insert(obj,function(err1) {
								if(err1 != null) {
									_gthis.getApplication().showMessage("Save failure"," Unable to save new page");
								} else {
									_gthis.setTiddlyWikiContent(obj.content);
								}
							});
							_gthis.setTitle(pageId);
							obj.pageId = pageId;
							_gthis.getApplication().getWorkspace().reloadWorkspace();
						},function() {
							_gthis.getWorkspace().removeObject(objectId);
						});
					}
				});
			} else {
				this.setTiddlyWikiContent(obj.content);
				this.setTitle(obj.pageId);
			}
		}
	}
	,saveObject: function(cb) {
		var _gthis = this;
		var obj = this.getEntity();
		obj.content = this.getTiddlyWikiContent();
		saturn.client.programs.SimpleExtJSProgram.prototype.saveObject.call(this,function(error) {
			cb(error);
			if(error != null) {
				_gthis.setTiddlyWikiClean();
			}
		});
	}
	,setTitle: function(title) {
		this.theComponent.setTitle(title);
	}
	,getComponent: function() {
		return this.theComponent;
	}
	,getIframe: function() {
		return this.theComponent.items.items[0].getEl().dom;
	}
	,setTiddlyWikiClean: function() {
		var iframe = this.getIframe();
		if(iframe != null) {
			haxe.Timer.delay(function() {
				iframe.contentWindow.$tw.syncer.taskQueue = { };
			},2000);
		}
	}
	,setTiddlyWikiContent: function(content) {
		var iframe = this.getIframe();
		if(iframe != null) {
			var iframeDoc = null;
			if(iframe.contentDocument != null) {
				iframeDoc = iframe.contentDocument;
			} else if(iframe.contentWindow.document != null) {
				iframeDoc = iframe.contentWindow.document;
			}
			if(iframeDoc != null) {
				iframeDoc.write(content);
				iframeDoc.close();
			}
		}
	}
	,getTiddlyWikiContent: function() {
		var iframe = this.getIframe();
		if(iframe != null) {
			var iframeDoc = null;
			if(iframe.contentDocument != null) {
				iframeDoc = iframe.contentDocument;
			} else if(iframe.contentWindow.document != null) {
				iframeDoc = iframe.contentWindow.document;
			}
			if(iframeDoc != null) {
				return iframe.contentWindow.$tw.wiki.renderTiddler("text/plain","$:/core/save/all");
			}
		}
		return null;
	}
	,saveWait: function(cb) {
		var obj = this.getEntity();
		obj.content = this.getTiddlyWikiContent();
		cb();
	}
	,__class__: saturn.client.programs.TiddlyWikiViewer
});
saturn.client.workspace.WONKAWO = $hxClasses["saturn.client.workspace.WONKAWO"] = function(object,name) {
	if(object == null) {
		object = new saturn.core.WONKASession();
	}
	if(name == null) {
		name = "WONKA";
	}
	this.iconPath = "/static/js/images/wonka_16.png";
	saturn.client.workspace.WorkspaceObjectBase.call(this,object,name);
};
saturn.client.workspace.WONKAWO.__name__ = ["saturn","client","workspace","WONKAWO"];
saturn.client.workspace.WONKAWO.getNewMenuText = function() {
	return "WONKA";
};
saturn.client.workspace.WONKAWO.getDefaultFolderName = function() {
	return "WONKA";
};
saturn.client.workspace.WONKAWO.__super__ = saturn.client.workspace.WorkspaceObjectBase;
saturn.client.workspace.WONKAWO.prototype = $extend(saturn.client.workspace.WorkspaceObjectBase.prototype,{
	__class__: saturn.client.workspace.WONKAWO
});
saturn.client.programs.WONKA = $hxClasses["saturn.client.programs.WONKA"] = function() {
	saturn.client.programs.SimpleExtJSProgram.call(this);
};
saturn.client.programs.WONKA.__name__ = ["saturn","client","programs","WONKA"];
saturn.client.programs.WONKA.getQuickLaunchItems = function() {
	return [{ iconCls : "x-btn-wonka", text : "WONKA", cls : "quickLaunchButton", handler : function() {
		saturn.client.WorkspaceApplication.getApplication().getWorkspace().addObject(new saturn.client.workspace.WONKAWO(null,null),true);
	}}];
};
saturn.client.programs.WONKA.__super__ = saturn.client.programs.SimpleExtJSProgram;
saturn.client.programs.WONKA.prototype = $extend(saturn.client.programs.SimpleExtJSProgram.prototype,{
	theComponent: null
	,molContainer: null
	,emptyInit: function() {
		var _gthis = this;
		saturn.client.programs.SimpleExtJSProgram.prototype.emptyInit.call(this);
		this.theComponent = Ext.create("Ext.panel.Panel",{ width : "100%", height : "95%", autoScroll : true, layout : "border", items : [{ xtype : "component", region : "north", autoEl : { tag : "iframe", src : "/WONKA/", width : "100%", style : { height : "100%"}}}], listeners : { "render" : function() {
			_gthis.initialiseDOMComponent();
		}}});
	}
	,initialiseDOMComponent: function() {
		saturn.client.programs.SimpleExtJSProgram.prototype.initialiseDOMComponent.call(this);
		this.load();
	}
	,getIframe: function() {
		var dom = this.getComponent().el.dom;
		var frames = dom.getElementsByTagName("iframe");
		var frame = frames[0];
		return frame;
	}
	,onFocus: function() {
		var _gthis = this;
		saturn.client.programs.SimpleExtJSProgram.prototype.onFocus.call(this);
		this.getApplication().hideMiddleSouthPanel();
		this.getApplication().getToolBar().add({ html : "Ligands", handler : function() {
			_gthis.getFrame().contentWindow.show_one("all-ph4","viewer-one","all-ph4");
		}, iconCls : "x-btn-blast", tooltip : { dismissDelay : 10000, text : "Ligands"}});
		this.getApplication().getToolBar().add({ html : "Residues", handler : function() {
			_gthis.getFrame().contentWindow.show_one("max-res","viewer-one","res-shows","max_shift");
		}, iconCls : "x-btn-blast", tooltip : { dismissDelay : 10000, text : "Ligands"}});
		this.getApplication().getToolBar().add({ html : "Waters", handler : function() {
			_gthis.getFrame().contentWindow.show_one("key-water","viewer-one","water-shows","key_waters");
		}, iconCls : "x-btn-blast", tooltip : { dismissDelay : 10000, text : "Ligands"}});
		this.getApplication().getToolBar().add({ html : "Sites", handler : function() {
			_gthis.getFrame().contentWindow.show_one("mol-clusts","viewer-one","clust-shows","mol_clusts");
		}, iconCls : "x-btn-blast", tooltip : { dismissDelay : 10000, text : "Ligands"}});
		if(this.molContainer != null) {
			this.attachMolContainerToIframe();
		}
	}
	,onBlur: function() {
		saturn.client.programs.SimpleExtJSProgram.prototype.onBlur.call(this);
		if(this.molContainer != null) {
			var container = this.getApplication().getOutlineTree("DEFAULT").el.dom;
			container.appendChild(this.molContainer);
			container.childNodes[1].style.display = "block";
			this.getFrame().contentDocument.body.appendChild(this.molContainer);
		}
	}
	,attachMolContainerToIframe: function() {
		var container = this.getApplication().getOutlineTree("DEFAULT").el.dom;
		container.appendChild(this.molContainer);
		container.childNodes[1].style.display = "None";
	}
	,attachMolContainerToOutline: function() {
		var container = this.getApplication().getOutlineTree("DEFAULT").el.dom;
		container.appendChild(this.molContainer);
		container.childNodes[1].style.display = "None";
	}
	,setActiveObject: function(objectId) {
		saturn.client.programs.SimpleExtJSProgram.prototype.setActiveObject.call(this,objectId);
		var w0 = js.Boot.__cast(saturn.client.programs.SimpleExtJSProgram.prototype.getActiveObject.call(this,saturn.client.workspace.WONKAWO) , saturn.client.workspace.WONKAWO);
		var obj = js.Boot.__cast(w0.getObject() , saturn.core.WONKASession);
		this.setTitle(w0.getName());
		this.load();
	}
	,load: function() {
		var _gthis = this;
		if(this.getActiveObjectId() != null) {
			var w0 = js.Boot.__cast(saturn.client.programs.SimpleExtJSProgram.prototype.getActiveObject.call(this,saturn.client.workspace.WONKAWO) , saturn.client.workspace.WONKAWO);
			var obj = js.Boot.__cast(w0.getObject() , saturn.core.WONKASession);
			if(obj != null && obj.src != null) {
				this.getIframe().src = obj.src;
			}
		}
		var configure = null;
		configure = function() {
			var dom = _gthis.getComponent().el.dom;
			var frames = dom.getElementsByTagName("iframe");
			var frame = frames[0];
			var navbar = frame.contentDocument.getElementsByClassName("navbar")[0];
			if(navbar != null) {
				navbar.style.display = "None";
				frame.contentDocument.body.style.paddingTop = "0px";
				var molContainer = frame.contentDocument.getElementById("mol-container");
				if(molContainer != null) {
					_gthis.moveComponents();
					return;
				}
			}
			haxe.Timer.delay(configure,250);
		};
		configure();
	}
	,getFrame: function() {
		var frames = this.getComponent().el.dom.getElementsByTagName("iframe");
		var frame = frames[0];
		return frame;
	}
	,moveComponents: function() {
		var dom = this.getComponent().el.dom;
		var dwin = js.Browser.get_window();
		var frame = this.getFrame();
		frame.contentWindow.app = dwin.app;
		var navbar = frame.contentDocument.getElementsByClassName("navbar")[0];
		this.molContainer = frame.contentDocument.getElementById("mol-container");
		this.molContainer.style.overflow = "auto";
		this.molContainer.style.height = "100%";
		this.molContainer.childNodes[15].style = [];
		var aElems = this.molContainer.getElementsByTagName("a");
		var _g = 0;
		while(_g < aElems.length) {
			var aElem = aElems[_g];
			++_g;
			aElem.style.overflow = "";
			aElem.style.position = "";
			aElem.style.top = "";
			aElem.style.left = "";
			aElem.style.cursor = "";
			var elems = aElem.getElementsByTagName("img");
			if(elems != null && elems.length > 0) {
				var imgElem = elems[0];
				var tmp = "app.getActiveProgram().getFrame().contentWindow." + imgElem.getAttribute("onclick");
				imgElem.setAttribute("onclick",tmp);
			}
		}
		var ddoc = js.Browser.get_document();
		var oldFunc = ($_=frame.contentDocument,$bind($_,$_.getElementById));
		frame.contentDocument.getElementById = function(id) {
			var oldFuncBind = oldFunc.bind(frame.contentDocument);
			var objs = oldFuncBind(id);
			if(objs == null || objs.length == 0) {
				objs = ddoc.getElementById(id);
			}
			return objs;
		};
		this.attachMolContainerToIframe();
		var tabPanel = frame.contentDocument.getElementById("first-div");
		tabPanel.style.height = "100%";
		tabPanel.getElementsByTagName("div")[0].style.height = "";
		tabPanel.childNodes[5].style.height = "100%";
		tabPanel.childNodes[5].style.overflow = "auto";
		var header1 = frame.contentDocument.getElementsByTagName("h1")[0];
		header1.style.display = "None";
		var btGroup = tabPanel.getElementsByTagName("div")[0].childNodes[1].style.display = "None";
		var ids = ["key-water-div","key-frag-div","mol-clusts-div","key-ring-div","key-water-div","coll-water-div","key-ph4-div","all-ph4-div","oo-ph4-div","oo-frag-div","max-res-div"];
		var _g1 = 0;
		while(_g1 < ids.length) {
			var id1 = ids[_g1];
			++_g1;
			var elem = frame.contentDocument.getElementById(id1);
			var h3 = elem.childNodes[1];
			h3.style.marginTop = "0px";
			h3.style.marginBottom = "0px";
		}
	}
	,setTitle: function(title) {
		this.theComponent.setTitle(title);
	}
	,getComponent: function() {
		return this.theComponent;
	}
	,__class__: saturn.client.programs.WONKA
});
saturn.client.workspace.WebPageWorkspaceObject = $hxClasses["saturn.client.workspace.WebPageWorkspaceObject"] = function(object,name) {
	if(object == null) {
		object = new saturn.client.workspace.WebPage();
	}
	if(name == null) {
		name = "Web Page";
	}
	saturn.client.workspace.WorkspaceObjectBase.call(this,object,name);
};
saturn.client.workspace.WebPageWorkspaceObject.__name__ = ["saturn","client","workspace","WebPageWorkspaceObject"];
saturn.client.workspace.WebPageWorkspaceObject.getNewMenuText = function() {
	return "Web Page";
};
saturn.client.workspace.WebPageWorkspaceObject.getDefaultFolderName = function() {
	return "Web Pages";
};
saturn.client.workspace.WebPageWorkspaceObject.__super__ = saturn.client.workspace.WorkspaceObjectBase;
saturn.client.workspace.WebPageWorkspaceObject.prototype = $extend(saturn.client.workspace.WorkspaceObjectBase.prototype,{
	__class__: saturn.client.workspace.WebPageWorkspaceObject
});
saturn.client.programs.WebPageViewer = $hxClasses["saturn.client.programs.WebPageViewer"] = function() {
	this.pageUrl = "";
	this.internalFrameId = "INTERNAL_FRAME";
	saturn.client.programs.SimpleExtJSProgram.call(this);
};
saturn.client.programs.WebPageViewer.__name__ = ["saturn","client","programs","WebPageViewer"];
saturn.client.programs.WebPageViewer.__super__ = saturn.client.programs.SimpleExtJSProgram;
saturn.client.programs.WebPageViewer.prototype = $extend(saturn.client.programs.SimpleExtJSProgram.prototype,{
	theComponent: null
	,internalFrameId: null
	,pageUrl: null
	,emptyInit: function() {
		saturn.client.programs.SimpleExtJSProgram.prototype.emptyInit.call(this);
		var self = this;
		this.theComponent = Ext.create("Ext.panel.Panel",{ width : "100%", height : "95%", autoScroll : true, layout : "fit", items : [{ xtype : "component", itemId : this.internalFrameId, autoEl : { tag : "iframe"}}], listeners : { "render" : function() {
			self.initialiseDOMComponent();
		}}});
	}
	,initialiseDOMComponent: function() {
		saturn.client.programs.SimpleExtJSProgram.prototype.initialiseDOMComponent.call(this);
	}
	,onFocus: function() {
		saturn.client.programs.SimpleExtJSProgram.prototype.onFocus.call(this);
		this.getApplication().hideMiddleSouthPanel();
		var self = this;
		this.getApplication().getEditMenu().add({ text : "Set URL", hidden : false, handler : function() {
			Ext.Msg.prompt("Set URL","Enter URL",function(btn,text) {
				if(btn == "ok") {
					self.setURL(text);
					(js.Boot.__cast((js.Boot.__cast(self.getActiveObject(saturn.client.workspace.WebPageWorkspaceObject) , saturn.client.workspace.WebPageWorkspaceObject)).getObject() , saturn.client.workspace.WebPage)).setURL(text);
				}
			});
		}});
	}
	,setActiveObject: function(objectId) {
		saturn.client.programs.SimpleExtJSProgram.prototype.setActiveObject.call(this,objectId);
		var w0 = js.Boot.__cast(saturn.client.programs.SimpleExtJSProgram.prototype.getActiveObject.call(this,saturn.client.workspace.WebPageWorkspaceObject) , saturn.client.workspace.WebPageWorkspaceObject);
		var webPage = js.Boot.__cast(w0.getObject() , saturn.client.workspace.WebPage);
		var url = webPage.getURL();
		if(url == null || url == "" || url == "undefined") {
			var location = js.Browser.get_window().location;
			url = location.protocol + "//" + location.hostname + ":" + location.port + "/" + "HoldingPage.html";
		}
		this.setURL(url);
		this.setTitle(w0.getName());
	}
	,setTitle: function(title) {
		this.theComponent.setTitle(title);
	}
	,setURL: function(url) {
		var element = this.theComponent.items.items[0];
		if(element != null && url != null) {
			var frame = element.getEl().dom;
			frame.src = url;
		}
		this.pageUrl = url;
	}
	,getComponent: function() {
		return this.theComponent;
	}
	,__class__: saturn.client.programs.WebPageViewer
});
if(!saturn.client.programs.blocks) saturn.client.programs.blocks = {};
saturn.client.programs.blocks.BaseScrollableCanvas = $hxClasses["saturn.client.programs.blocks.BaseScrollableCanvas"] = function(container) {
	this.fitToArea = false;
	this.renderSVG = false;
	this.theLastXPosition = 0;
	this.theViewPortXUnits = 0;
	this.theMaxIntensity = -1;
	this.lastPosition = 0;
	this.drawingWidth = -1;
	this.drawingHeight = -1;
	this.maximumCanvasWidth = 30000;
	this.defaultDrawingHeight = 300;
	this.defaultReadingSeparation = 2;
	this.keyCanvas = null;
	this.headerCanvas = null;
	this.xaxisCanvas = null;
	this.annotationCanvas = null;
	this.overlayCanvas = null;
	this.scrollCanvas = null;
	this.graphCanvas = null;
	this.container = container;
	this.lines = [];
};
saturn.client.programs.blocks.BaseScrollableCanvas.__name__ = ["saturn","client","programs","blocks","BaseScrollableCanvas"];
saturn.client.programs.blocks.BaseScrollableCanvas.prototype = {
	graphCanvas: null
	,scrollCanvas: null
	,overlayCanvas: null
	,annotationCanvas: null
	,xaxisCanvas: null
	,headerCanvas: null
	,keyCanvas: null
	,container: null
	,defaultReadingSeparation: null
	,defaultDrawingHeight: null
	,maximumCanvasWidth: null
	,drawingHeight: null
	,drawingWidth: null
	,lastPosition: null
	,theMaxIntensity: null
	,theLeftMargin: null
	,theRightMargin: null
	,theTopMargin: null
	,theBottomMargin: null
	,theXUnitSize: null
	,theYUnitSize: null
	,theGraphWidth: null
	,theGraphHeight: null
	,theTotalWidth: null
	,theYIntervalDivisions: null
	,theReadingsCount: null
	,theLastScrollBarXPos: null
	,theLastScrollBarYPos: null
	,theScrollBarBoxHeight: null
	,theScrollBarBoxWidth: null
	,theStartingXPosition: null
	,theViewPortXUnits: null
	,theLastXPosition: null
	,theLongestYLabel: null
	,showXAxisLabels: null
	,showXTicks: null
	,renderSVG: null
	,svgGraphCanvas: null
	,fitToArea: null
	,theXInternalDivisions: null
	,keyCanvasRequiredHeight: null
	,lines: null
	,getXUnitSize: function() {
		return this.theXUnitSize;
	}
	,setFitToArea: function(fitToArea) {
		this.fitToArea = fitToArea;
	}
	,render: function() {
		this.renderScrollBar();
		this.installScrollBarListeners();
		this.updateGraphArea();
	}
	,updateGraphArea: function() {
		this.renderGraph();
		this.renderXAxis();
		this.renderXLabels();
		this.renderYAxis();
		this.renderYAxisLabels();
		this.renderKey();
	}
	,renderKey: function() {
		this.getKeyCanvasContext().clearRect(0,0,this.keyCanvas.width,this.keyCanvas.height);
	}
	,renderGraph: function() {
		if(this.lastPosition > this.theLastXPosition) {
			this.lastPosition = this.theLastXPosition;
		}
		var width = this.graphCanvas.width;
		var height = this.graphCanvas.height;
		var ctx = this.graphCanvas.getContext("2d",null);
		ctx.clearRect(0,0,width,height);
		this.renderData();
		var lastIPosition = 0;
		var lineX1 = -1;
		var lineY1 = -1;
		var lineX2 = -1;
		var lineY2 = -1;
		var overlayCtx = this.overlayCanvas.getContext("2d",null);
		overlayCtx.clearRect(0,0,this.overlayCanvas.width,this.overlayCanvas.height);
		var annotationCtx = this.getAnnotationContext();
		annotationCtx.clearRect(0,0,this.annotationCanvas.width,this.annotationCanvas.height);
		this.paintLines();
	}
	,renderData: function() {
	}
	,renderXAxis: function() {
		var ctx = this.getXGraphCanvasContext();
		ctx.save();
		ctx.beginPath();
		ctx.lineWidth = 1;
		ctx.moveTo(this.theLeftMargin - 1,0);
		ctx.lineTo(this.theLeftMargin + this.theGraphWidth - 1,0);
		ctx.stroke();
		ctx.restore();
	}
	,renderYAxis: function() {
		var ctx = this.getGraphCanvasContext();
		ctx.save();
		ctx.beginPath();
		ctx.lineWidth = 1;
		ctx.moveTo(this.theLeftMargin - 0.5,this.theTopMargin);
		ctx.lineTo(this.theLeftMargin - 0.5,this.theGraphHeight + this.theTopMargin);
		ctx.stroke();
		ctx.restore();
	}
	,renderYAxisLabels: function() {
		var ctx = this.getGraphCanvasContext();
		var labels = this.getYAxisLabels();
		var mMetrics = ctx.measureText("M");
		var _g1 = 0;
		var _g = labels.length;
		while(_g1 < _g) {
			var i = _g1++;
			var label = labels[i];
			var y_pos = this.theYUnitSize * i;
			y_pos = y_pos + this.theYUnitSize / 2 - mMetrics.width / 2;
			var yLabelMetrics = ctx.measureText(label == null ? "null" : "" + label);
			ctx.fillText(label,this.theLeftMargin - yLabelMetrics.width - 2 - 2,this.theGraphHeight + this.theTopMargin - y_pos - 1);
		}
	}
	,setRenderXLabels: function(render) {
		this.showXAxisLabels = render;
	}
	,renderXLabels: function() {
		var ctx = this.getXGraphCanvasContext();
		ctx.clearRect(0,3,this.xaxisCanvas.width,20);
		this.showXTicks = true;
		if(this.showXTicks) {
			var j = this.lastPosition;
			var tickDivisions = 10;
			var magnitude = Math.pow(tickDivisions,Math.floor(Math.log(this.theGraphWidth / this.theXUnitSize) / Math.log(tickDivisions)));
			var x = this.theLeftMargin + this.theXUnitSize / 2;
			var _g1 = this.lastPosition;
			var _g = this.theReadingsCount;
			while(_g1 < _g) {
				var i = _g1++;
				var pos = i + 1;
				if(x > this.theGraphWidth + this.theLeftMargin) {
					break;
				} else if(pos == 1 || pos % magnitude == 0) {
					var posStr = pos == null ? "null" : "" + pos;
					var metrics = ctx.measureText(posStr);
					ctx.fillText(posStr,x - metrics.width / 2,10);
				}
				x += this.theXUnitSize;
			}
		}
		if(this.showXAxisLabels) {
			var labels = this.getXAxisLabels();
			var _g11 = this.lastPosition;
			var _g2 = labels.length;
			while(_g11 < _g2) {
				var i1 = _g11++;
				var correctedI = i1 - this.lastPosition;
				var label = labels[i1];
				var metrics1 = ctx.measureText(label);
				var x_pixel_pos = js.Boot.__cast(this.theXUnitSize * correctedI + this.theLeftMargin , Float);
				if(x_pixel_pos + this.theXUnitSize > this.theGraphWidth + this.theLeftMargin) {
					break;
				}
				x_pixel_pos = x_pixel_pos + this.theXUnitSize / 2 - metrics1.width / 2;
				ctx.fillText(labels[i1],x_pixel_pos,20);
			}
		}
	}
	,getXAxisLabels: function() {
		return [];
	}
	,getXAxisCanvasHeight: function() {
		return 25;
	}
	,getScrollCanvasHeight: function() {
		return this.getScrollBoxHeight();
	}
	,getScrollBoxHeight: function() {
		return 35;
	}
	,getBottomPanelHeight: function() {
		return this.getScrollCanvasHeight() + this.getXAxisCanvasHeight();
	}
	,configureXReadingCounts: function() {
		this.theReadingsCount = 1000;
	}
	,getYAxisLabels: function() {
		return [];
	}
	,configure: function() {
		this.theTopMargin = 0;
		this.recreateCanvasElements();
		var width = this.graphCanvas.width;
		var height = this.graphCanvas.height;
		this.configureXReadingCounts();
		this.configureLongestYLabel();
		var ctx = this.graphCanvas.getContext("2d",null);
		var yTextMetrics = ctx.measureText(Std.string(this.theLongestYLabel));
		this.theBottomMargin = 0;
		this.theLeftMargin = 5 + yTextMetrics.width + 2;
		this.theRightMargin = 20;
		this.theGraphHeight = height - this.theTopMargin - this.theBottomMargin;
		this.theGraphWidth = width - this.theLeftMargin - this.theRightMargin;
		if(this.showXAxisLabels) {
			var metrics = ctx.measureText("M");
			if(this.fitToArea || this.theXUnitSize < metrics.width) {
				this.theXUnitSize = metrics.width;
			}
		} else if(this.fitToArea) {
			this.theXUnitSize = this.theGraphWidth / this.theReadingsCount;
		}
		this.theTotalWidth = this.theXUnitSize * this.theReadingsCount;
		this.theViewPortXUnits = Std["int"](this.theGraphWidth / this.theXUnitSize);
		this.theLastXPosition = Std["int"](this.theReadingsCount - this.theViewPortXUnits);
		if(this.theLastXPosition < 0) {
			this.theLastXPosition = 0;
		}
		this.lastPosition = 0;
		this.theXInternalDivisions = Std["int"](this.theViewPortXUnits / 10);
	}
	,configureLongestYLabel: function() {
		this.theLongestYLabel = "Hello World";
	}
	,recreateCanvasElements: function() {
		this.removeCanvasElements();
		this.createCanvasElements();
	}
	,removeCanvasElements: function() {
		var container = this.getDomElement();
		if(this.getGraphCanvas() != null) {
			container.removeChild(this.getGraphCanvas());
		}
		if(this.getScrollCanvas() != null) {
			container.removeChild(this.getScrollCanvas());
		}
		if(this.getOverlayCanvas() != null) {
			container.removeChild(this.getOverlayCanvas());
		}
		if(this.getAnnotationCanvas() != null) {
			container.removeChild(this.getAnnotationCanvas());
		}
	}
	,getDomElement: function() {
		return this.container;
	}
	,getGraphCanvas: function() {
		return this.graphCanvas;
	}
	,getAnnotationCanvas: function() {
		return this.annotationCanvas;
	}
	,getGraphCanvasContext: function() {
		if(this.renderSVG) {
			return this.svgGraphCanvas;
		} else {
			return this.graphCanvas.getContext("2d",null);
		}
	}
	,getKeyCanvasContext: function() {
		if(this.renderSVG) {
			return this.svgGraphCanvas;
		} else {
			return this.keyCanvas.getContext("2d",null);
		}
	}
	,getXGraphCanvasContext: function() {
		if(this.renderSVG) {
			return this.svgGraphCanvas;
		} else {
			return this.xaxisCanvas.getContext("2d",null);
		}
	}
	,getScrollCanvas: function() {
		return this.scrollCanvas;
	}
	,getOverlayCanvas: function() {
		return this.overlayCanvas;
	}
	,getAnnotationContext: function() {
		if(this.renderSVG) {
			return this.svgGraphCanvas;
		} else {
			return this.annotationCanvas.getContext("2d",null);
		}
	}
	,createCanvasElements: function() {
		this.configureKeyCanvasDimensions();
		this.keyCanvas = js.Browser.get_document().createElement("canvas");
		this.keyCanvas.width = this.getContainerWidth();
		this.keyCanvas.height = this.getKeyCanvasHeight();
		this.headerCanvas = js.Browser.get_document().createElement("canvas");
		this.headerCanvas.width = this.getContainerWidth();
		this.headerCanvas.height = 20;
		this.container.appendChild(this.keyCanvas);
		this.container.appendChild(this.headerCanvas);
		var canvasContainer = js.Browser.get_document().createElement("div");
		canvasContainer.style.overflowY = "auto";
		var availableHeight = this.container.clientHeight - this.getBottomPanelHeight() - this.getTopCanvasHeight() - this.getKeyCanvasHeight();
		var requiredHeight = this.getGraphHeight() + this.theTopMargin;
		canvasContainer.style.height = Std.string(Math.min(availableHeight,requiredHeight) + "px");
		this.container.appendChild(canvasContainer);
		var scrollContainer = js.Browser.get_document().createElement("div");
		this.container.appendChild(scrollContainer);
		this.graphCanvas = js.Browser.get_document().createElement("canvas");
		var width = this.container.style.width;
		this.graphCanvas.width = this.getContainerWidth();
		var tmp = this.getGraphHeight() + this.theTopMargin;
		this.graphCanvas.height = Std["int"](tmp);
		this.overlayCanvas = js.Browser.get_document().createElement("canvas");
		this.overlayCanvas.width = this.getContainerWidth();
		var tmp1 = this.getGraphHeight() + this.theTopMargin;
		this.overlayCanvas.height = Std["int"](tmp1);
		this.overlayCanvas.style.position = "relative";
		this.overlayCanvas.style.background = "transparent";
		var offset = Std["int"](this.getGraphHeight() + this.theTopMargin);
		this.overlayCanvas.style.marginTop = "-" + offset + "px";
		this.annotationCanvas = js.Browser.get_document().createElement("canvas");
		this.annotationCanvas.width = this.getContainerWidth();
		var tmp2 = this.getGraphHeight() + this.theTopMargin;
		this.annotationCanvas.height = Std["int"](tmp2);
		this.annotationCanvas.style.position = "relative";
		this.annotationCanvas.style.marginTop = "-" + offset + "px";
		this.annotationCanvas.style.background = "transparent";
		this.scrollCanvas = js.Browser.get_document().createElement("canvas");
		this.scrollCanvas.width = this.getContainerWidth();
		this.scrollCanvas.height = this.getScrollCanvasHeight();
		this.scrollCanvas.style.display = "block";
		canvasContainer.appendChild(this.graphCanvas);
		canvasContainer.appendChild(this.annotationCanvas);
		canvasContainer.appendChild(this.overlayCanvas);
		this.xaxisCanvas = js.Browser.get_document().createElement("canvas");
		this.xaxisCanvas.width = this.getContainerWidth();
		this.xaxisCanvas.height = this.getXAxisCanvasHeight();
		this.xaxisCanvas.style.display = "block";
		scrollContainer.appendChild(this.xaxisCanvas);
		scrollContainer.appendChild(this.scrollCanvas);
		this.installOverlayListeners();
	}
	,getTopCanvasHeight: function() {
		return 20;
	}
	,getKeyCanvasHeight: function() {
		return this.keyCanvasRequiredHeight;
	}
	,installOverlayListeners: function() {
		var _gthis = this;
		var fireOverlayEvent = function(e,clicked) {
			if(clicked == null) {
				clicked = false;
			}
			var ne = _gthis.convertToBaseCanvasEvent(e);
			ne.clicked = clicked;
			var ctx = _gthis.overlayCanvas.getContext("2d",null);
			ctx.clearRect(0,0,_gthis.overlayCanvas.width,_gthis.overlayCanvas.height);
			if(ne.offsetX < _gthis.theLeftMargin || ne.offsetX > _gthis.theGraphWidth + _gthis.theLeftMargin) {
				return;
			}
			_gthis.overlayEvent(ne);
		};
		this.overlayCanvas.onmousemove = function(e1) {
			fireOverlayEvent(e1,false);
		};
		this.overlayCanvas.onmouseup = function(e2) {
			fireOverlayEvent(e2,true);
		};
	}
	,getColumnFromEvent: function(event) {
		var column = Std["int"]((event.offsetX - this.theLeftMargin) / this.theXUnitSize);
		column += this.lastPosition;
		return column;
	}
	,getRowFromEvent: function(event) {
		var row = Std["int"]((event.offsetY - this.theTopMargin) / this.theYUnitSize);
		return row;
	}
	,markEvent: function(event,colour) {
		if(colour == null) {
			colour = "red";
		}
		this.mark(event.column,event.row,colour);
		var annotationCtx = this.getAnnotationContext();
		annotationCtx.clearRect(0,0,this.getAnnotationCanvas().width,this.getAnnotationCanvas().height);
		this.paintLines();
	}
	,mark: function(column,row,colour) {
		if(colour == null) {
			colour = "red";
		}
		var removed = false;
		var _g = 0;
		var _g1 = this.lines;
		while(_g < _g1.length) {
			var line = _g1[_g];
			++_g;
			if(line.column == column && line.row == row) {
				var l = this.lines.length;
				HxOverrides.remove(this.lines,line);
				removed = true;
				break;
			}
		}
		if(!removed) {
			this.lines.push({ colour : colour, column : column, row : row});
		}
		saturn.client.WorkspaceApplication.getApplication().debug("Lines: " + this.lines.length);
	}
	,paintLines: function() {
		var annotationCtx = this.getAnnotationContext();
		var _g = 0;
		var _g1 = this.lines;
		while(_g < _g1.length) {
			var line = _g1[_g];
			++_g;
			if(line.column < this.lastPosition) {
				continue;
			}
			var x = this.theLeftMargin + (line.column - this.lastPosition) * this.theXUnitSize + this.theXUnitSize / 2;
			var y1 = this.theTopMargin + this.theYUnitSize * (line.row + 1) - 1;
			var y2 = this.theTopMargin + this.theYUnitSize * line.row;
			annotationCtx.beginPath();
			annotationCtx.strokeStyle = line.colour;
			annotationCtx.moveTo(x,y1);
			annotationCtx.lineTo(x,y2);
			annotationCtx.stroke();
			annotationCtx.closePath();
		}
	}
	,overlayEvent: function(event) {
		if(event.clicked && event.button == 0) {
			this.markEvent(event);
		}
	}
	,getContainerHeight: function() {
		var height = this.container.style.clientHeight;
		if(height == null) {
			return this.container.parentElement.style.clientHeight;
		} else {
			return height;
		}
	}
	,getGraphHeight: function() {
		return 300;
	}
	,getContainerWidth: function() {
		return Std["int"](this.container.clientWidth - 40);
	}
	,onFocus: function() {
	}
	,onBlur: function() {
	}
	,renderScrollBar: function(moveX,forwards) {
		var width = this.scrollCanvas.width;
		var height = this.scrollCanvas.height;
		var ctx = this.scrollCanvas.getContext("2d",null);
		ctx.clearRect(0,0,width,height);
		if(this.theGraphWidth >= this.theTotalWidth) {
			return;
		}
		var shownRatio = this.theGraphWidth / this.theTotalWidth;
		var padding = 5;
		var rectWidth = (this.theGraphWidth - padding * 2) * shownRatio;
		ctx.save();
		ctx.beginPath();
		ctx.strokeStyle = "black";
		ctx.rect(this.theLeftMargin,0,this.theGraphWidth,this.getScrollBoxHeight());
		ctx.stroke();
		ctx.restore();
		this.theScrollBarBoxWidth = rectWidth;
		this.theScrollBarBoxHeight = height - padding * 2;
		var leftStop = padding + this.theLeftMargin;
		var rightStop = width - this.theRightMargin - this.theScrollBarBoxWidth - padding;
		if(moveX != null) {
			if(forwards) {
				this.theLastScrollBarXPos += moveX;
			} else {
				this.theLastScrollBarXPos -= moveX;
			}
			if(this.theLastScrollBarXPos < leftStop) {
				this.theLastScrollBarXPos = leftStop;
			} else if(this.theLastScrollBarXPos > rightStop) {
				this.theLastScrollBarXPos = rightStop;
			}
		} else {
			if(this.lastPosition > 0) {
				var progress = this.lastPosition / this.theReadingsCount;
				this.theLastScrollBarXPos = this.theGraphWidth * progress + this.theLeftMargin;
				this.theLastScrollBarYPos = padding;
			} else {
				this.theLastScrollBarXPos = leftStop;
				this.theLastScrollBarYPos = padding;
			}
			if(this.theLastScrollBarXPos < leftStop) {
				this.theLastScrollBarXPos = leftStop;
			} else if(this.theLastScrollBarXPos > rightStop) {
				this.theLastScrollBarXPos = rightStop;
			}
		}
		ctx.save();
		ctx.beginPath();
		ctx.strokeStyle = "blue";
		ctx.rect(this.theLastScrollBarXPos,this.theLastScrollBarYPos,this.theScrollBarBoxWidth,this.theScrollBarBoxHeight);
		ctx.fill();
		ctx.restore();
	}
	,installScrollBarListeners: function() {
		var _gthis = this;
		var isInHitBox = function(e) {
			if(e.offsetX >= _gthis.theLastScrollBarXPos && e.offsetX <= _gthis.theLastScrollBarXPos + _gthis.theScrollBarBoxWidth && e.offsetY >= _gthis.theLastScrollBarYPos) {
				return e.offsetY <= _gthis.theLastScrollBarYPos + _gthis.theScrollBarBoxHeight;
			} else {
				return false;
			}
		};
		var lastX = this.theLeftMargin + 10;
		var lastY = 0;
		var onMouseMove = function(e1) {
			e1 = _gthis.convertToBaseCanvasEvent(e1);
			var forwards = true;
			var diff = _gthis.theReadingsCount - _gthis.lastPosition;
			if(e1.offsetX < lastX) {
				forwards = false;
			}
			var xMove = Math.abs(lastX - e1.offsetX);
			var xScrollUnits = (_gthis.theGraphWidth - 10) / _gthis.theReadingsCount;
			var numRequested = Math.ceil(xMove / xScrollUnits);
			lastX = e1.offsetX;
			lastY = e1.offsetY;
			var oldLastPosition = _gthis.lastPosition;
			if(forwards) {
				_gthis.lastPosition += numRequested;
			} else {
				_gthis.lastPosition -= numRequested;
			}
			if(_gthis.lastPosition < 0) {
				_gthis.lastPosition = 0;
			}
			_gthis.renderScrollBar();
			js.Browser.get_window().console.log("lastX: " + lastX + "/" + Std.string(e1.offsetX));
			js.Browser.get_window().console.log("xMove: " + xMove + "/" + xScrollUnits);
			js.Browser.get_window().console.log("Moved: " + numRequested);
			if(_gthis.lastPosition != oldLastPosition) {
				_gthis.updateGraphArea();
			}
		};
		this.scrollCanvas.onmousedown = function(evt) {
			var e2 = _gthis.convertToBaseCanvasEvent(evt);
			if(isInHitBox(e2)) {
				lastX = e2.offsetX;
				lastY = e2.offsetY;
				_gthis.scrollCanvas.onmousemove = onMouseMove;
			} else {
				onMouseMove(evt);
			}
		};
		this.scrollCanvas.onmouseup = function(e3) {
			_gthis.scrollCanvas.onmousemove = null;
		};
	}
	,convertToBaseCanvasEvent: function(e) {
		var ne = { offsetX : 0., offsetY : 0., column : 0, row : 0, source : null, button : -1, clicked : false};
		if(e == null) {
			e = new Event("");
		}
		var target = e.target ? e.target : e.srcElement;
		var rect = target.getBoundingClientRect();
		ne.offsetX = e.clientX - rect.left;
		ne.offsetY = e.clientY - rect.top;
		ne.column = this.getColumnFromEvent(ne);
		ne.row = this.getRowFromEvent(ne);
		ne.source = e;
		ne.button = e.button;
		return ne;
	}
	,exportSVG: function() {
		var height = this.getKeyCanvasHeight() + this.getXAxisCanvasHeight() + this.getGraphHeight() + this.theTopMargin;
		var width = this.theLeftMargin + this.theXUnitSize * this.theReadingsCount + this.theRightMargin;
		this.svgGraphCanvas = new C2S(width,height);
		this.renderSVG = true;
		var canvasWidth = this.theGraphWidth;
		var originalLastPosition = this.lastPosition;
		this.lastPosition = 0;
		this.theGraphWidth = this.theXUnitSize * this.theReadingsCount;
		this.renderKey();
		this.getGraphCanvasContext().save();
		this.getGraphCanvasContext().translate(0,this.getKeyCanvasHeight());
		this.renderYAxis();
		this.renderYAxisLabels();
		this.renderData();
		this.paintLines();
		this.getGraphCanvasContext().restore();
		this.getGraphCanvasContext().save();
		this.getGraphCanvasContext().translate(0,this.getKeyCanvasHeight() + this.theGraphHeight + this.theTopMargin);
		this.renderXAxis();
		this.renderXLabels();
		this.getGraphCanvasContext().restore();
		this.renderSVG = false;
		var d = this.svgGraphCanvas;
		saturn.client.WorkspaceApplication.getApplication().saveTextFile(d.getSerializedSvg(true),"Test.svg");
		this.theGraphWidth = canvasWidth;
		this.lastPosition = originalLastPosition;
	}
	,configureKeyCanvasDimensions: function() {
	}
	,getKeyCanvas: function() {
		return this.keyCanvas;
	}
	,__class__: saturn.client.programs.blocks.BaseScrollableCanvas
};
saturn.client.programs.blocks.BaseTable = $hxClasses["saturn.client.programs.blocks.BaseTable"] = function(columns,data,title,fixedRowHeight,hideTitle,autoAddNewRow) {
	if(autoAddNewRow == null) {
		autoAddNewRow = true;
	}
	if(hideTitle == null) {
		hideTitle = false;
	}
	this.columns = columns;
	this.data = data;
	this.title = title;
	this.fixedRowHeight = fixedRowHeight;
	this.hideTitle = hideTitle;
	this.enableAutoAddNewRow = autoAddNewRow;
	this.customContextItems = [];
};
saturn.client.programs.blocks.BaseTable.__name__ = ["saturn","client","programs","blocks","BaseTable"];
saturn.client.programs.blocks.BaseTable.__interfaces__ = [saturn.client.BuildingBlock];
saturn.client.programs.blocks.BaseTable.prototype = {
	component: null
	,name: null
	,columns: null
	,model: null
	,modelName: null
	,store: null
	,data: null
	,modelFields: null
	,cellClicked: null
	,title: null
	,editListener: null
	,fixedRowHeight: null
	,errorColumns: null
	,customContextItems: null
	,hideTitle: null
	,enableAutoAddNewRow: null
	,addCustomContextItem: function(item) {
		this.customContextItems.push(item);
	}
	,setFixedRowHeight: function(height) {
		this.fixedRowHeight = height;
	}
	,getColumns: function() {
		return this.columns;
	}
	,onFocus: function() {
	}
	,onBlur: function() {
	}
	,getComponent: function() {
		return this.component;
	}
	,getRawComponent: function() {
		return this.getComponent();
	}
	,getModelFields: function() {
		return this.modelFields;
	}
	,setEditListener: function(listener) {
		this.editListener = listener;
	}
	,onEdit: function() {
		this.editListener();
	}
	,addListener: function(callBack) {
		this.component.on("containerClick",callBack);
	}
	,reconfigure: function(tableDef) {
		if(tableDef != null) {
			this.columns = tableDef.columnDefs;
			this.data = tableDef.data;
			this.title = tableDef.title;
		}
		this.build();
	}
	,build: function() {
		var _gthis = this;
		this.name = "store_" + Std.string(Ext.id());
		this.modelName = "model" + Std.string(Ext.id());
		this.modelFields = [];
		if(this.columns != null) {
			var _g = 0;
			var _g1 = this.columns;
			while(_g < _g1.length) {
				var column = _g1[_g];
				++_g;
				this.modelFields.push(column.dataIndex);
			}
		}
		if(this.store == null) {
			this.model = Ext.define(this.modelName,{ extend : "Ext.data.Model", fields : this.modelFields});
			this.store = Ext.create("Ext.data.Store",{ storeId : this.name, model : this.model, data : { "items" : this.data}, proxy : { type : "memory", reader : { type : "json", rootProperty : "items"}}});
			this.component = Ext.create("Ext.grid.Panel",{ store : this.store, columns : this.columns, width : "100%", region : "center", scrollable : true, flex : 1, title : this.title, preventHeader : this.hideTitle, plugins : [Ext.create("Ext.grid.plugin.CellEditing",{ clicksToEdit : 2}),"gridfilters"], selType : "cellmodel", viewConfig : { enableTextSelection : true, stripeRows : false, listeners : { viewready : function(view) {
				var tmp = view.getEl();
				view.keyMap = new Ext.KeyMap(tmp,[{ key : "v", ctrl : true, fn : function(keyCode,e) {
					var pasteZone = js.Browser.get_document().createElement("textarea");
					pasteZone.style.position = "absolute";
					pasteZone.style.top = "-1000px";
					pasteZone.style.left = "-1000px";
					js.Browser.get_document().body.appendChild(pasteZone);
					js.Browser.get_window().setTimeout(function() {
						_gthis.performPaste(pasteZone.value,_gthis.cellClicked);
						js.Browser.get_document().body.removeChild(pasteZone);
					},100);
					pasteZone.focus();
					pasteZone.select();
				}}]);
				var view1 = view.el;
				var view2 = view.itemSelector;
				var tmp1 = Ext.getBody();
				var updateTipBody = function(tip) {
					var msg = null;
					var record = view.getRecord(tip.triggerElement);
					if(_gthis.errorColumns != null) {
						var _g2 = 0;
						var _g11 = _gthis.errorColumns;
						while(_g2 < _g11.length) {
							var col = _g11[_g2];
							++_g2;
							var value = record.get(col);
							if(value != null && value != "") {
								msg = value;
								break;
							}
						}
					}
					if(msg == null || msg == "") {
						msg = record.get(_gthis.columns[0].dataIndex);
					}
					tip.update(msg);
				};
				view.tooltip = Ext.create("Ext.tip.ToolTip",{ target : view1, delegate : view2, trackMouse : true, renderTo : tmp1, listeners : { beforeshow : updateTipBody}});
			}}, getRowClass : function(record1,rowIndex,rowParams,store) {
				var css = _gthis.getRecordCSS(record1);
				if(_gthis.fixedRowHeight != null) {
					if(css == null) {
						css = "";
					}
					css += "saturn-row-fixed-height";
				}
				saturn.client.WorkspaceApplication.getApplication().debug(css);
				return css;
			}}, listeners : { edit : function(editor,e1) {
				_gthis.autoAddNewRow();
				_gthis.onEdit();
			}, "cellcontextmenu" : function(view3,cell,cellIndex,record2,row,rowIndex1,event) {
				var column1 = view3.getHeaderByCell(cell);
				var position = view3.getPositionByEvent(event);
				var columnIndex = position.column;
				var dataIndex = column1.dataIndex;
				var contextMenuItems = [{ text : "Delete Row", handler : function() {
					_gthis.store.removeAt(rowIndex1);
					_gthis.autoAddNewRow();
					_gthis.onEdit();
				}},{ text : "Copy", handler : function() {
					var model = _gthis.store.getAt(rowIndex1);
					var fields = model.getFields();
					var cb = saturn.client.WorkspaceApplication.getApplication().getClipBoard();
					var cbContents = new saturn.client.programs.blocks.ClipBoardRow();
					var _g3 = 0;
					var _g12 = _gthis.columns;
					while(_g3 < _g12.length) {
						var column2 = _g12[_g3];
						++_g3;
						if(column2.dataIndex != "id") {
							cbContents.set(column2.dataIndex,model.get(column2.dataIndex));
						}
					}
					cb.setContents(cbContents);
				}},{ text : "Fill down", handler : function() {
					var model1 = _gthis.store.getAt(rowIndex1);
					var val = model1.get(column1.dataIndex);
					var c = _gthis.store.count();
					var _g13 = rowIndex1;
					var _g4 = c - 1;
					while(_g13 < _g4) {
						var i = _g13++;
						var row1 = _gthis.store.getAt(i);
						row1.set(column1.dataIndex,val);
					}
					_gthis.onEdit();
				}},{ text : "Remove column", handler : function() {
					_gthis.removeColumn(dataIndex);
				}}];
				var cb1 = saturn.client.WorkspaceApplication.getApplication().getClipBoard();
				var contents = cb1.getContents();
				if(contents != null && Std["is"](contents,saturn.client.programs.blocks.ClipBoardRow)) {
					contextMenuItems.push({ text : "Paste After", handler : function() {
						_gthis.pasteRow(rowIndex1 + 1);
					}});
					contextMenuItems.push({ text : "Paste Before", handler : function() {
						_gthis.pasteRow(rowIndex1);
					}});
				}
				var _g5 = 0;
				var _g14 = _gthis.customContextItems;
				while(_g5 < _g14.length) {
					var item = [_g14[_g5]];
					++_g5;
					contextMenuItems.push({ text : item[0].text, handler : (function(item1) {
						return function() {
							item1[0].handler(rowIndex1);
						};
					})(item)});
				}
				var contextMenu = Ext.create("Ext.menu.Menu",{ items : contextMenuItems});
				var tmp2 = event.getXY();
				contextMenu.showAt(tmp2);
				event.stopEvent();
			}, cellclick : function(grid,td,cellIndex1,record3,tr,rowIndex2,e2,eOpts) {
				_gthis.cellClicked = [cellIndex1,rowIndex2];
				js.Browser.get_window().console.log("Clicked");
			}}});
		} else {
			this.store.model.addFields(this.modelFields);
			this.store.setData(this.data);
			this.component.reconfigure(this.store,this.columns);
		}
		this.autoAddNewRow();
		return this;
	}
	,autoAddNewRow: function() {
		if(!this.enableAutoAddNewRow) {
			return;
		}
		var storeLen = this.store.count();
		var newRow = true;
		if(storeLen > 0) {
			var record = this.store.getAt(storeLen - 1);
			newRow = !this.isRecordEmpty(record);
		}
		if(newRow) {
			this.addNewRow();
		}
	}
	,addNewRow: function() {
		var model = Ext.create(this.model,{ });
		var _g = 0;
		var _g1 = this.columns;
		while(_g < _g1.length) {
			var colDef = _g1[_g];
			++_g;
			if(colDef.defaultValue != null && colDef.defaultValue != "") {
				model.set(colDef.dataIndex,colDef.defaultValue);
			}
		}
		this.store.insert(this.store.count(),model);
	}
	,isRecordEmpty: function(record) {
		var rowOccupied = false;
		var _g = 0;
		var _g1 = this.columns;
		while(_g < _g1.length) {
			var col = _g1[_g];
			++_g;
			var dataIndex = col.dataIndex;
			if(dataIndex != null && dataIndex != "" && dataIndex != "id") {
				var value = record.get(dataIndex);
				if(value != null && value != "") {
					if(col.defaultValue != null && col.defaultValue != "" && col.defaultValue == value) {
						continue;
					}
					rowOccupied = true;
					return false;
				}
			}
		}
		return !rowOccupied;
	}
	,addColumn: function(columnDef,reconfigure) {
		if(reconfigure == null) {
			reconfigure = true;
		}
		var columnName = columnDef.dataIndex;
		this.columns.push(columnDef);
		this.modelFields.push(columnName);
		this.store.model.addFields([columnName]);
		if(reconfigure) {
			this.component.reconfigure(this.store,this.columns);
		}
	}
	,removeColumn: function(columnName) {
		var _g = 0;
		var _g1 = this.columns;
		while(_g < _g1.length) {
			var column = _g1[_g];
			++_g;
			if(column.dataIndex == columnName) {
				HxOverrides.remove(this.columns,column);
			}
		}
		HxOverrides.remove(this.modelFields,columnName);
		this.store.model.replaceFields(null,[columnName]);
		this.component.reconfigure(this.store,this.columns);
		this.onEdit();
	}
	,promptAddGridColumn: function(cb) {
		var _gthis = this;
		saturn.client.WorkspaceApplication.getApplication().userValuePrompt("New Row","Add Row",function(columnName) {
			if(columnName != null) {
				_gthis.addColumn({ text : columnName, dataIndex : columnName, editor : "textfield"});
				if(cb != null) {
					cb();
				}
			}
		},null);
	}
	,getStore: function() {
		return this.store;
	}
	,getSize: function() {
		return this.store.count();
	}
	,performPaste: function(content,index) {
		Ext.suspendLayouts();
		var colCount = this.columns.length;
		var rowSep = "\n";
		if(content.indexOf("\r\n") > -1) {
			rowSep = "\r\n";
		}
		var rows = content.split(rowSep);
		var colClicked = index[0];
		var rowClicked = index[1];
		var currentCol = colClicked;
		var currentRow = rowClicked;
		var storeCount = this.store.count();
		var _g = 0;
		while(_g < rows.length) {
			var row = rows[_g];
			++_g;
			if(row == "") {
				break;
			}
			var cols = row.split("\t");
			var pasteColIndex = 0;
			var newModel;
			if(currentRow > this.store.count() - 1) {
				newModel = Ext.create(this.model,{ });
				this.store.insert(currentRow,newModel);
			} else {
				newModel = this.store.getAt(currentRow);
			}
			++currentRow;
			var _g2 = currentCol;
			var _g1 = colCount;
			while(_g2 < _g1) {
				var col = _g2++;
				var field = this.columns[col].dataIndex;
				var value = cols[pasteColIndex++];
				if(value == null || value == "" && this.columns[col].defaultValue != null && this.columns[col].defaultValue != "") {
					value = this.columns[col].defaultValue;
				}
				if(field != "id") {
					newModel.set(this.columns[col].dataIndex,value);
				} else {
					++pasteColIndex;
				}
				if(pasteColIndex > cols.length - 1) {
					break;
				}
			}
			currentCol = colClicked;
		}
		this.autoAddNewRow();
		Ext.resumeLayouts(false);
		this.onEdit();
	}
	,addRow: function(data) {
		var lastRow = this.store.count() - 1;
		var record = this.store.getAt(lastRow);
		var _g = 0;
		var _g1 = Reflect.fields(data);
		while(_g < _g1.length) {
			var field = _g1[_g];
			++_g;
			var tmp = Reflect.field(data,field);
			record.set(field,tmp);
		}
		this.autoAddNewRow();
	}
	,pasteRow: function(atPosition) {
		var cb = saturn.client.WorkspaceApplication.getApplication().getClipBoard();
		var contents = cb.getContents();
		if(Std["is"](contents,saturn.client.programs.blocks.ClipBoardRow)) {
			saturn.client.WorkspaceApplication.suspendUpdates();
			var tableRowCopy = contents;
			var attributes = tableRowCopy.getContents();
			var model = this.store.insert(atPosition,Ext.create(this.model,{ }))[0];
			var _g = 0;
			var _g1 = this.columns;
			while(_g < _g1.length) {
				var column = _g1[_g];
				++_g;
				if(column.dataIndex != "id") {
					var column1 = column.dataIndex;
					var tmp = attributes.get(column.dataIndex);
					model.set(column1,tmp);
				}
			}
			saturn.client.WorkspaceApplication.resumeUpdates(false);
		}
		this.onEdit();
	}
	,getData: function() {
		return this.storeToData();
	}
	,storeToData: function() {
		var _gthis = this;
		var data = [];
		this.store.each(function(record) {
			if(_gthis.isRecordEmpty(record)) {
				return true;
			}
			var model = record.getData();
			var row = { };
			var _g = 0;
			var _g1 = _gthis.columns;
			while(_g < _g1.length) {
				var columnDef = _g1[_g];
				++_g;
				var field = columnDef.dataIndex;
				if(field != "id") {
					Reflect.setField(row,field,Reflect.field(model,field));
				}
			}
			data.push(row);
			return true;
		});
		return data;
	}
	,getTableDefinition: function() {
		return { columnDefs : this.columns, title : this.title, data : this.storeToData(), raw : null};
	}
	,exportToString: function() {
		var entityStore = this.getStore();
		var entityCount = entityStore.count() - 1;
		var strBuf = new StringBuf();
		var _g = 0;
		var _g1 = this.columns;
		while(_g < _g1.length) {
			var colDef = _g1[_g];
			++_g;
			strBuf.add(colDef.text + "\t");
		}
		strBuf.add("\n");
		var _g11 = 0;
		var _g2 = entityCount;
		while(_g11 < _g2) {
			var i = _g11++;
			var entityModel = entityStore.getAt(i);
			var _g21 = 0;
			var _g3 = this.columns;
			while(_g21 < _g3.length) {
				var field = _g3[_g21];
				++_g21;
				var value = entityModel.get(field.dataIndex);
				if(value == null) {
					value = "";
				}
				strBuf.add(value + "\t");
			}
			strBuf.add("\n");
		}
		return strBuf.toString();
	}
	,exportToFile: function(name) {
		var str = this.exportToString();
		saturn.client.WorkspaceApplication.getApplication().saveTextFile(str,name + ".tsv");
	}
	,setErrorColumns: function(columns) {
		this.errorColumns = columns;
	}
	,getErrorColumns: function() {
		return this.errorColumns;
	}
	,getRecordCSS: function(record) {
		var invalid = false;
		if(this.errorColumns != null) {
			var _g = 0;
			var _g1 = this.errorColumns;
			while(_g < _g1.length) {
				var errorColumn = _g1[_g];
				++_g;
				var value = record.get(errorColumn);
				if(value != null && value != "") {
					invalid = true;
					break;
				}
			}
		}
		if(invalid) {
			return "gridrow-invalid";
		} else {
			return "x-grid-cell";
		}
	}
	,__class__: saturn.client.programs.blocks.BaseTable
};
saturn.client.programs.blocks.ClipBoardRow = $hxClasses["saturn.client.programs.blocks.ClipBoardRow"] = function() {
	this.contents = new haxe.ds.StringMap();
};
saturn.client.programs.blocks.ClipBoardRow.__name__ = ["saturn","client","programs","blocks","ClipBoardRow"];
saturn.client.programs.blocks.ClipBoardRow.prototype = {
	contents: null
	,set: function(key,value) {
		this.contents.set(key,value);
	}
	,getContents: function() {
		return this.contents;
	}
	,__class__: saturn.client.programs.blocks.ClipBoardRow
};
saturn.client.programs.blocks.GridVarCanvasRenderer = $hxClasses["saturn.client.programs.blocks.GridVarCanvasRenderer"] = function(container) {
	this.cellWidth = 50;
	this.cellHeight = 50;
	saturn.client.programs.blocks.BaseScrollableCanvas.call(this,container);
};
saturn.client.programs.blocks.GridVarCanvasRenderer.__name__ = ["saturn","client","programs","blocks","GridVarCanvasRenderer"];
saturn.client.programs.blocks.GridVarCanvasRenderer.__super__ = saturn.client.programs.blocks.BaseScrollableCanvas;
saturn.client.programs.blocks.GridVarCanvasRenderer.prototype = $extend(saturn.client.programs.blocks.BaseScrollableCanvas.prototype,{
	cellHeight: null
	,cellWidth: null
	,columnOrder: null
	,data: null
	,columnToLabel: null
	,rowOrder: null
	,xLabels: null
	,valueToStyle: null
	,padding: null
	,groupToStyles: null
	,setPadding: function(padding) {
		this.padding = padding;
	}
	,setStyles: function(styles) {
		this.valueToStyle = styles;
	}
	,renderData: function() {
		var ctx = this.getGraphCanvasContext();
		var labels = this.getXAxisLabels();
		var paddingCost = this.padding && this.theXUnitSize > 1 ? 1 : 0;
		var height = this.theYUnitSize - 1;
		var _g1 = 0;
		var _g = this.rowOrder.length;
		while(_g1 < _g) {
			var j = _g1++;
			var row = this.rowOrder[j];
			var y = this.theGraphHeight + this.theTopMargin - this.theYUnitSize * (j + 1) + 1;
			var startingX = null;
			var endX = null;
			var lastValue = "</NULL>";
			var _g3 = this.lastPosition;
			var _g2 = labels.length;
			while(_g3 < _g2) {
				var i = _g3++;
				var column = labels[i];
				var x = this.theLeftMargin + this.theXUnitSize * (i - this.lastPosition) + paddingCost;
				var lastPaint = false;
				if(x + this.theXUnitSize > this.theGraphWidth + this.theLeftMargin) {
					if(this.padding) {
						break;
					} else {
						lastPaint = true;
					}
				}
				var value = this.data[i][j];
				var width;
				if(!this.padding) {
					if(lastValue == "</NULL>" && !lastPaint) {
						lastValue = value;
						startingX = x;
						continue;
					} else {
						if(lastValue == value && !lastPaint) {
							endX = x;
							if(i != labels.length - 1) {
								continue;
							}
						}
						if(endX != null) {
							width = endX - startingX + this.theXUnitSize;
						} else {
							width = this.theXUnitSize;
						}
						var t = startingX;
						var tv = lastValue;
						lastValue = value;
						startingX = x;
						endX = null;
						x = t;
						value = tv;
					}
				} else {
					width = this.theXUnitSize - paddingCost;
				}
				if(this.valueToStyle.exists(value)) {
					var _g4 = 0;
					var _g5 = this.valueToStyle.get(value);
					while(_g4 < _g5.length) {
						var style = _g5[_g4];
						++_g4;
						var match = false;
						var _g6 = 0;
						var _g7 = style.columns;
						while(_g6 < _g7.length) {
							var column1 = _g7[_g6];
							++_g6;
							if(column1 == "*" || row == column1) {
								match = true;
								break;
							}
						}
						if(!match) {
							continue;
						}
						if(style.type == "rec") {
							ctx.save();
							ctx.beginPath();
							ctx.strokeStyle = "";
							ctx.fillStyle = style.colour;
							ctx.fillRect(x,y - 1,width,height);
							ctx.stroke();
							ctx.restore();
						} else if(style.type == "line") {
							ctx.save();
							ctx.beginPath();
							ctx.strokeStyle = style.colour;
							var y1 = y + this.theYUnitSize / 2 - 1.5;
							ctx.moveTo(x,y1);
							ctx.lineTo(x + width,y1);
							ctx.stroke();
							ctx.restore();
						}
					}
				}
				if(lastPaint) {
					break;
				}
			}
		}
	}
	,setCellHeight: function(height) {
		this.cellHeight = height;
		this.theYUnitSize = this.cellHeight;
	}
	,setCellWidth: function(width) {
		this.cellWidth = width;
		this.theXUnitSize = width;
	}
	,setColumnOrder: function(columnOrder) {
		this.columnOrder = columnOrder;
		this.xLabels = null;
	}
	,setData: function(data) {
		this.data = data;
	}
	,getXAxisLabels: function() {
		if(this.xLabels == null) {
			this.xLabels = [];
			var _g = 0;
			var _g1 = this.columnOrder;
			while(_g < _g1.length) {
				var column = _g1[_g];
				++_g;
				this.xLabels.push(Reflect.field(this.columnToLabel,column));
			}
		}
		return this.xLabels;
	}
	,getYAxisLabels: function() {
		return this.rowOrder;
	}
	,setColumnKeyToLabels: function(mapping) {
		this.columnToLabel = mapping;
		this.xLabels = null;
	}
	,setRowOrder: function(rowOrder) {
		this.rowOrder = rowOrder;
	}
	,configureXReadingCounts: function() {
		this.theReadingsCount = Reflect.fields(this.columnToLabel).length;
	}
	,configureLongestYLabel: function() {
		this.theLongestYLabel = "";
		var _g = 0;
		var _g1 = this.rowOrder;
		while(_g < _g1.length) {
			var label = _g1[_g];
			++_g;
			if(this.theLongestYLabel.length < label.length) {
				this.theLongestYLabel = label;
			}
		}
	}
	,getGraphHeight: function() {
		return Std["int"](this.cellHeight * this.rowOrder.length);
	}
	,overlayEvent: function(event) {
		saturn.client.programs.blocks.BaseScrollableCanvas.prototype.overlayEvent.call(this,event);
		var column = event.column;
		var ctx = this.headerCanvas.getContext("2d",null);
		var y = 20;
		var x = event.offsetX;
		if(this.columnOrder.length - 1 < column) {
			return;
		}
		var overlayCtx = this.overlayCanvas.getContext("2d",null);
		var overlayY = this.theTopMargin;
		overlayCtx.beginPath();
		overlayCtx.strokeStyle = "black";
		overlayCtx.moveTo(event.offsetX,overlayY);
		overlayCtx.lineTo(event.offsetX,this.overlayCanvas.height);
		overlayCtx.stroke();
		overlayCtx.closePath();
		ctx.clearRect(0,0,this.headerCanvas.width,this.headerCanvas.height);
		ctx.save();
		var centerLabel = { width : 0, x : 0, y : 0, font : "", label : ""};
		var leftLabel = { width : 0, x : 0, y : 0, font : "", label : ""};
		var leftPosLabel = { width : 0, x : 0, y : 0, font : "", label : ""};
		var rightLabel = { width : 0, x : 0, y : 0, font : "", label : ""};
		var rightPosLabel = { width : 0, x : 0, y : 0, font : "", label : ""};
		var labels = [centerLabel,leftLabel,leftPosLabel,rightLabel,rightPosLabel];
		centerLabel.font = "18px Arial";
		ctx.font = centerLabel.font;
		centerLabel.label = Reflect.field(this.columnToLabel,Std.string(this.columnOrder[column]));
		centerLabel.width = ctx.measureText(centerLabel.label).width;
		centerLabel.x = x - centerLabel.width / 2;
		centerLabel.y = y - 2;
		if(column - 1 > -1) {
			leftLabel.label = Reflect.field(this.columnToLabel,Std.string(this.columnOrder[column - 1]));
			leftLabel.font = "10px Arial";
			ctx.font = leftLabel.font;
			leftLabel.width = ctx.measureText(leftLabel.label).width;
			leftLabel.x = centerLabel.x - leftLabel.width - 2;
			leftLabel.y = y - 2;
			leftPosLabel.label = Std.string(Std.parseInt(this.columnOrder[column - 1]) + 1);
			leftPosLabel.font = "8px Arial";
			ctx.font = leftPosLabel.font;
			leftPosLabel.width = ctx.measureText(leftPosLabel.label).width;
			leftPosLabel.x = leftLabel.x - leftPosLabel.width;
			leftPosLabel.y = leftLabel.y - 10;
		}
		if(column + 1 < this.columnOrder.length) {
			rightLabel.label = Reflect.field(this.columnToLabel,Std.string(this.columnOrder[column + 1]));
			rightLabel.font = "10px Arial";
			ctx.font = rightLabel.font;
			rightLabel.width = ctx.measureText(rightLabel.label).width;
			rightLabel.x = centerLabel.x + centerLabel.width + 2;
			rightLabel.y = y - 2;
			rightPosLabel.label = Std.string(Std.parseInt(this.columnOrder[column + 1]) + 1);
			rightPosLabel.font = "8px Arial";
			ctx.font = rightPosLabel.font;
			rightPosLabel.width = ctx.measureText(rightPosLabel.label).width;
			rightPosLabel.x = rightLabel.x + rightLabel.width;
			rightPosLabel.y = rightLabel.y - 10;
		}
		var bStart = leftPosLabel.x;
		var bEnd = x + centerLabel.width + rightLabel.width + rightPosLabel.width;
		ctx.save();
		ctx.fillStyle = "rgba(255,255,255,0.8)";
		ctx.fillRect(bStart,y - 20,bEnd - bStart,20);
		ctx.restore();
		ctx.fillStyle = "black";
		var _g = 0;
		while(_g < labels.length) {
			var label = labels[_g];
			++_g;
			if(label.width > 0) {
				ctx.font = label.font;
				ctx.fillText(label.label,label.x,label.y);
			}
		}
		ctx.restore();
	}
	,configureKeyCanvasDimensions: function() {
		this.keyCanvasRequiredHeight = 60;
		this.groupToStyles = new haxe.ds.StringMap();
		var value = this.valueToStyle.keys();
		while(value.hasNext()) {
			var value1 = value.next();
			var _g = 0;
			var _g1 = this.valueToStyle.get(value1);
			while(_g < _g1.length) {
				var style = _g1[_g];
				++_g;
				if(!this.groupToStyles.exists(style.group)) {
					this.groupToStyles.set(style.group,new haxe.ds.StringMap());
				}
				var key = style.name + "~" + style.type + "~" + style.colour;
				if(!this.groupToStyles.get(style.group).exists(key)) {
					this.groupToStyles.get(style.group).set(key,style);
				}
			}
		}
		var canvas = js.Browser.get_document().createElement("canvas");
		canvas.style.position = "absolute";
		canvas.style.left = "-100px";
		canvas.style.top = "-100px";
		canvas.width = 100;
		canvas.height = 100;
		js.Browser.get_document().body.appendChild(canvas);
		var width = this.getContainerWidth() - this.theLeftMargin - this.theRightMargin;
		var sep = 6;
		var boxSize = 10;
		var yPos = 2;
		var ctx = canvas.getContext("2d",null);
		var group = this.groupToStyles.keys();
		while(group.hasNext()) {
			var group1 = group.next();
			var xPos = this.theLeftMargin;
			var metrics = ctx.measureText(group1);
			yPos += 12;
			var styleKey = this.groupToStyles.get(group1).keys();
			while(styleKey.hasNext()) {
				var styleKey1 = styleKey.next();
				var style1 = this.groupToStyles.get(group1).get(styleKey1);
				var colStr = "";
				var label = style1.name + " " + colStr;
				var metrics1 = ctx.measureText(label);
				var totalWidth = xPos + metrics1.width + boxSize + sep;
				if(totalWidth > width) {
					xPos = this.theLeftMargin;
					yPos += 12;
				}
				xPos += boxSize + sep;
				xPos += metrics1.width + sep;
			}
			yPos += 12;
		}
		js.Browser.get_document().body.removeChild(canvas);
		this.keyCanvasRequiredHeight = yPos;
	}
	,renderKey: function() {
		saturn.client.programs.blocks.BaseScrollableCanvas.prototype.renderKey.call(this);
		var width = this.getContainerWidth() - this.theLeftMargin - this.theRightMargin;
		var sep = 6;
		var boxSize = 10;
		var yPos = 2;
		var ctx = this.getKeyCanvasContext();
		var group = this.groupToStyles.keys();
		while(group.hasNext()) {
			var group1 = group.next();
			var xPos = this.theLeftMargin;
			ctx.save();
			ctx.fillText(group1,xPos,yPos + 10);
			var metrics = ctx.measureText(group1);
			ctx.moveTo(xPos,yPos);
			ctx.lineTo(xPos + metrics.width,yPos);
			ctx.restore();
			yPos += 12;
			var styleKey = this.groupToStyles.get(group1).keys();
			while(styleKey.hasNext()) {
				var styleKey1 = styleKey.next();
				var style = this.groupToStyles.get(group1).get(styleKey1);
				var colStr = "";
				var label = style.name + " " + colStr;
				var metrics1 = ctx.measureText(label);
				var totalWidth = xPos + metrics1.width + boxSize + sep;
				if(totalWidth > width) {
					xPos = this.theLeftMargin;
					yPos += 12;
				}
				if(style.type == "rec") {
					ctx.save();
					ctx.fillStyle = style.colour;
					ctx.fillRect(xPos,yPos,boxSize,boxSize);
					ctx.restore();
				}
				xPos += boxSize + sep;
				ctx.fillText(label,xPos,yPos + 10);
				xPos += metrics1.width + sep;
			}
			yPos += 12;
		}
	}
	,__class__: saturn.client.programs.blocks.GridVarCanvasRenderer
});
saturn.client.programs.blocks.TargetSummary = $hxClasses["saturn.client.programs.blocks.TargetSummary"] = function(targetId) {
	this.parentFolder = null;
	this.targetId = targetId;
	this.constructNameToConstruct = new haxe.ds.StringMap();
};
saturn.client.programs.blocks.TargetSummary.__name__ = ["saturn","client","programs","blocks","TargetSummary"];
saturn.client.programs.blocks.TargetSummary.prototype = {
	targetId: null
	,constructs: null
	,targetSeq: null
	,aln: null
	,fasta: null
	,gridVar: null
	,parentFolder: null
	,constructNameToConstruct: null
	,setParentFolder: function(folderNode) {
		this.parentFolder = folderNode;
	}
	,setSequences: function(constructs) {
		this.constructs = constructs;
		var _g = 0;
		var _g1 = this.constructs;
		while(_g < _g1.length) {
			var construct = _g1[_g];
			++_g;
			this.constructNameToConstruct.set(construct.constructId,construct);
		}
	}
	,generateSummary: function() {
		this.getConstructs();
	}
	,getConstructs: function() {
		var _gthis = this;
		saturn.client.core.CommonCore.getDefaultProvider().getByNamedQuery("TARGET_TO_CONSTRUCTS",[this.targetId],saturn.core.domain.SgcConstruct,false,function(constructs,exception) {
			if(exception == null && constructs != null) {
				_gthis.constructs = constructs;
				var _g = 0;
				while(_g < constructs.length) {
					var construct = constructs[_g];
					++_g;
					_gthis.constructNameToConstruct.set(construct.constructId,construct);
				}
				_gthis.getConstructStatus();
			} else {
				_gthis.lookupException(exception.message);
			}
		});
	}
	,getTargetSequence: function() {
		var _gthis = this;
		saturn.client.core.CommonCore.getDefaultProvider().getById(this.targetId,saturn.core.domain.SgcTarget,function(targetSeq,ex) {
			if(ex == null && targetSeq != null) {
				_gthis.targetSeq = targetSeq;
				_gthis.generateAlignment();
			} else {
				_gthis.lookupException(ex.message);
			}
		});
	}
	,getConstructStatus: function() {
		var values = [];
		var constructPkeyToConstruct = new haxe.ds.StringMap();
		var _g = 0;
		var _g1 = this.constructs;
		while(_g < _g1.length) {
			var construct = _g1[_g];
			++_g;
			values.push(construct.id == null ? "null" : "" + construct.id);
			constructPkeyToConstruct.set(construct.id == null ? "null" : "" + construct.id,construct);
		}
		this.getTargetSequence();
	}
	,generateFASTA: function() {
		var objs = [];
		var fastaBuf = new StringBuf();
		fastaBuf.add(">" + this.targetId + "\n" + this.targetSeq.proteinSeq + "\n");
		var _g = 0;
		var _g1 = this.constructs;
		while(_g < _g1.length) {
			var construct = _g1[_g];
			++_g;
			if(construct.proteinSeqNoTag != null) {
				fastaBuf.add(">" + construct.constructId + "\n" + construct.proteinSeqNoTag + "\n");
			}
		}
		this.fasta = fastaBuf.toString();
	}
	,generateAlignment: function() {
		var _gthis = this;
		this.generateFASTA();
		saturn.client.BioinformaticsServicesClient.getClient().sendClustalReportRequest(this.fasta,function(response,error) {
			if(error == null) {
				var clustalReport = response.json.clustalReport;
				var location = js.Browser.get_window().location;
				var dstURL = location.protocol + "//" + location.hostname + ":" + location.port + "/" + clustalReport;
				saturn.client.core.CommonCore.getContent(dstURL,function(content) {
					_gthis.aln = content;
					_gthis.finish();
				});
			} else {
				saturn.client.WorkspaceApplication.getApplication().showMessage("Clustal Error",error);
			}
		});
	}
	,finish: function() {
		this.gridVar = new saturn.core.GridVar();
		this.gridVar.dataTableDefinition = saturn.client.programs.plugins.AlignmentGVPlugin.getTableDefinitionFromAlignment(this.aln);
		this.gridVar.fit = true;
		this.gridVar.padding = false;
		this.gridVar.showXLabels = false;
		this.gridVar.configCollapse = true;
		this.colourConstructs();
		var wo = new saturn.client.workspace.GridVarWO(this.gridVar,this.targetId + " (Construct summary - no tag)");
		saturn.client.WorkspaceApplication.getApplication().getWorkspace().addObject(wo,true,this.parentFolder);
	}
	,colourConstructs: function() {
		var styles = { "No progress" : { val : 6, colour : "grey"}, "Cloned" : { val : 2, colour : "green"}, "Purified" : { val : 7, colour : "orange"}, "In xtal trials" : { val : 5, colour : "blue"}, "Diffraction criteria met" : { val : 4, colour : "red"}, "Deposited" : { val : 3, colour : "purple"}, "Unknown" : { val : 1, colour : "grey"}};
		var _g1 = 1;
		var _g = this.gridVar.dataTableDefinition.columnDefs.length;
		while(_g1 < _g) {
			var i = _g1++;
			var def = this.gridVar.dataTableDefinition.columnDefs[i];
			var constructName = def.dataIndex;
			var construct = this.constructNameToConstruct.get(constructName);
			var status = construct.status;
			var num = 1;
			if(Reflect.hasField(styles,status)) {
				num = Reflect.field(styles,status).val;
			}
			var _g3 = 0;
			var _g2 = this.gridVar.dataTableDefinition.data.length;
			while(_g3 < _g2) {
				var j = _g3++;
				if(Reflect.field(this.gridVar.dataTableDefinition.data[j],constructName) == 1) {
					Reflect.setField(this.gridVar.dataTableDefinition.data[j],constructName,num);
				}
			}
		}
		this.gridVar.styleTableDefinition.data = [];
		var _g4 = 0;
		var _g11 = Reflect.fields(styles);
		while(_g4 < _g11.length) {
			var style = _g11[_g4];
			++_g4;
			var num1 = Reflect.field(styles,style).val;
			this.gridVar.styleTableDefinition.data.push({ "data_type" : "Construct Status", "mapping" : num1, style : "rec", "color" : Reflect.field(styles,style).colour, "label" : style, "columns" : "*"});
		}
	}
	,lookupException: function(msg) {
		saturn.client.WorkspaceApplication.getApplication().showMessage("Lookup exception",msg);
	}
	,__class__: saturn.client.programs.blocks.TargetSummary
};
if(!saturn.client.programs.chromohub) saturn.client.programs.chromohub = {};
saturn.client.programs.chromohub.ChromoHubAnnotationManager = $hxClasses["saturn.client.programs.chromohub.ChromoHubAnnotationManager"] = function(legacyViewer) {
	this.legacyViewer = legacyViewer;
	phylo.PhyloAnnotationManager.call(this);
};
saturn.client.programs.chromohub.ChromoHubAnnotationManager.__name__ = ["saturn","client","programs","chromohub","ChromoHubAnnotationManager"];
saturn.client.programs.chromohub.ChromoHubAnnotationManager.__super__ = phylo.PhyloAnnotationManager;
saturn.client.programs.chromohub.ChromoHubAnnotationManager.prototype = $extend(phylo.PhyloAnnotationManager.prototype,{
	legacyViewer: null
	,treeName: null
	,subtreeName: null
	,createViewOptions: function() {
		var _gthis = this;
		this.viewOptions = [];
		if(this.jsonFile == null) {
			return;
		}
		var i = 0;
		var j = 0;
		while(i < this.jsonFile.btnGroup.length) {
			this.viewOptions[j] = { text : this.jsonFile.btnGroup[i].title, margin : "0 10 5 0", xtype : "label", cls : "x-title-viewoptions"};
			var z = 0;
			++j;
			while(z < this.jsonFile.btnGroup[i].buttons.length) {
				var b = [this.jsonFile.btnGroup[i].buttons[z]];
				if(!b[0].enabled) {
					++z;
					continue;
				}
				if(b[0].annotCode == 26 && this.treeName == "E1" || b[0].annotCode == 26 && this.treeName == "E2" || b[0].annotCode == 26 && this.treeName == "USP") {
					++z;
					continue;
				}
				if(b[0].hidden == true) {
					++z;
					continue;
				}
				if(b[0].isTitle == true) {
					this.viewOptions[j] = { text : b[0].label, margin : "0 0 5 0", xtype : "label", cls : "x-title-viewsuboptions"};
				} else {
					var auxtext;
					if(b[0].submenu) {
						var k = b[0].optionSelected[0];
						auxtext = b[0].label + " (" + b[0].options[k].label + ")";
					} else {
						auxtext = b[0].label;
					}
					var tit = [b[0].label + " Options"];
					var _viewOptions_Items = { text : "", margin : "0", xtype : "button", cls : "x-button-helpicon", icon : "/static/js/images/helpicon.png", handler : (function() {
						return function() {
						};
					})(), listeners : { mouseout : (function() {
						return function(e) {
							_gthis.closeHelpingDiv();
						};
					})(), mouseover : (function(b1) {
						return function(e1) {
							_gthis.prepareHelpingDiv(e1,b1[0].helpText);
						};
					})(b)}};
					var _viewOptions_Items1 = { text : "", margin : "0", xtype : this.activeAnnotation[b[0].annotCode] == true ? "button" : "container", width : 19, cls : this.activeAnnotation[b[0].annotCode] == true ? "x-button-uncheck-icon" : "x-button-hidden", icon : "/static/js/images/checkicon.png", handler : (function(b2) {
						return function() {
							var elem = js.Browser.get_document().getElementById("optionToolBarId");
							_gthis.menuScroll = elem.scrollTop;
							var container = saturn.client.WorkspaceApplication.getApplication().getSingleAppContainer();
							_gthis.closeAnnotWindows();
							_gthis.showAnnotation(b2[0].annotCode,false);
							if(b2[0].annotCode == 25) {
								_gthis.showAnnotation(30,false);
							}
							if(b2[0].annotCode == 28) {
								_gthis.showAnnotation(29,false);
							}
							if(b2[0].annotCode == 27) {
								_gthis.showAnnotation(31,false);
							}
							container.clearOptionsToolBar();
							_gthis.createViewOptions();
							container.addElemToOptionsToolBar(_gthis.viewOptions);
							var elem1 = js.Browser.get_document().getElementById("optionToolBarId");
							elem1.scrollTop = _gthis.menuScroll;
						};
					})(b), listeners : { mouseout : (function() {
						return function(e2) {
						};
					})(), mouseover : (function() {
						return function(e3) {
							_gthis.closeHelpingDiv();
						};
					})()}};
					var _viewOptions_Items2 = "<span>" + auxtext + "</span>";
					var _viewOptions_Items3 = b[0].submenu ? this.activeAnnotation != null && this.activeAnnotation.length > 0 && this.activeAnnotation[b[0].annotCode] == true ? "x-btn-viewoptions-suboptions-checked" : "x-btn-viewoptions-suboptions" : b[0].popUpWindows ? this.activeAnnotation != null && this.activeAnnotation.length > 0 && this.activeAnnotation[b[0].annotCode] == true ? "x-btn-viewoptions-popup-checked" : "x-btn-viewoptions-popup" : this.activeAnnotation != null && this.activeAnnotation.length > 0 && this.activeAnnotation[b[0].annotCode] == true ? "x-btn-viewoptions-checked" : "x-btn-viewoptions";
					var _viewOptions_Items4;
					if(b[0].popUpWindows == true) {
						var ia = [i];
						var za = [z];
						_viewOptions_Items4 = (function(za1,ia1,tit1,b3) {
							return function() {
								var elem2 = js.Browser.get_document().getElementById("optionToolBarId");
								_gthis.menuScroll = elem2.scrollTop;
								var container1 = saturn.client.WorkspaceApplication.getApplication().getSingleAppContainer();
								_gthis.closeAnnotWindows();
								container1.clearPopUpWindow();
								container1.setPosPopUpWindow(300,150);
								container1.setPopUpWindowTitle(tit1[0]);
								var optt = _gthis.jsonFile.btnGroup[ia1[0]].buttons[za1[0]].windowsData[0];
								container1.addFormItemToPopUpWindow(optt.form.items,b3[0].annotCode,optt.hasClass,optt.popMethod,_gthis.treeType,_gthis.treeName,null,_gthis);
								container1.showPopUpWindow();
								var fileref = js.Browser.get_document().createElement("script");
								fileref.setAttribute("type","text/javascript");
								fileref.setAttribute("src","/static/js/annotation.js");
								js.Browser.get_document().head.appendChild(fileref);
							};
						})(za,ia,tit,b);
					} else {
						_viewOptions_Items4 = (function(b4) {
							return function() {
								var elem3 = js.Browser.get_document().getElementById("optionToolBarId");
								_gthis.menuScroll = elem3.scrollTop;
								var act = _gthis.activeAnnotation[b4[0].annotCode];
								if(_gthis.activeAnnotation[b4[0].annotCode] == null || _gthis.activeAnnotation[b4[0].annotCode] == false) {
									var container2 = saturn.client.WorkspaceApplication.getApplication().getSingleAppContainer();
									_gthis.closeAnnotWindows();
									container2.hideSubMenuToolBar();
									_gthis.showAnnotation(b4[0].annotCode,true);
									var cert = !_gthis.activeAnnotation[b4[0].annotCode];
									_gthis.legacyViewer.updateLegend(b4[0],cert);
									container2.clearOptionsToolBar();
									_gthis.createViewOptions();
									container2.addElemToOptionsToolBar(_gthis.viewOptions);
									var elem4 = js.Browser.get_document().getElementById("optionToolBarId");
									elem4.scrollTop = _gthis.menuScroll;
									if(_gthis.legacyViewer.tableActive == true) {
										_gthis.legacyViewer.baseTable.reconfigure(_gthis.legacyViewer.tableAnnot.tableDefinition);
									}
									if(cert == false) {
										container2.legendPanel.expand();
									}
								} else {
									var elem5 = js.Browser.get_document().getElementById("optionToolBarId");
									_gthis.menuScroll = elem5.scrollTop;
									var container3 = saturn.client.WorkspaceApplication.getApplication().getSingleAppContainer();
									_gthis.closeAnnotWindows();
									_gthis.showAnnotation(b4[0].annotCode,false);
									container3.clearOptionsToolBar();
									_gthis.createViewOptions();
									container3.addElemToOptionsToolBar(_gthis.viewOptions);
									var elem6 = js.Browser.get_document().getElementById("optionToolBarId");
									elem6.scrollTop = _gthis.menuScroll;
								}
							};
						})(b);
					}
					var _viewOptions_Items5 = (function() {
						return function(e4) {
							var container4 = saturn.client.WorkspaceApplication.getApplication().getSingleAppContainer();
							container4.hideHelpingDiv();
							if(_gthis.onSubmenu == false) {
								container4.hideSubMenuToolBar();
							}
						};
					})();
					var _viewOptions_Items6;
					if(b[0].submenu) {
						var a = j;
						var subm = [];
						var t = [0];
						var t1;
						var i1 = [];
						var z1 = [];
						subm[0] = [];
						t1 = 0;
						var nuopt = b[0].options.length;
						while(t[0] < b[0].options.length) {
							i1[0] = i;
							z1[0] = z;
							t1 = t[0];
							var subm1 = subm[0];
							var t2 = t[0];
							var b5 = b[0].options[t[0]].label;
							var _viewOptions_Items7 = b[0].options[t[0]].isTitle == false && b[0].options[t[0]].isLabelTitle == false ? "button" : "label";
							var _viewOptions_Items8 = b[0].options[t[0]].isTitle == true || b[0].options[t[0]].isLabelTitle == true ? b[0].options[t[0]].isTitle == true ? "x-btn-viewoptions-title" : "x-btn-viewoptions-label" : b[0].optionSelected[0] == t[0] ? "x-btn-viewoptions-default" : "x-btn-viewoptions";
							var _viewOptions_Items9;
							if(b[0].options[t[0]].isTitle == false && b[0].options[t[0]].isLabelTitle == false) {
								var t21 = [t[0]];
								_viewOptions_Items9 = (function(t22,z11,i11,b6) {
									return function() {
										var container5 = saturn.client.WorkspaceApplication.getApplication().getSingleAppContainer();
										_gthis.closeAnnotWindows();
										var check = _gthis.changeDefaultOption(t22[0],i11[0],z11[0]);
										_gthis.showAnnotation(b6[0].annotCode,check);
										container5.hideExportSubMenu();
										container5.hideHelpingDiv();
										container5.hideSubMenuToolBar();
										_gthis.onSubmenu = false;
										container5.clearOptionsToolBar();
										_gthis.createViewOptions();
										container5.addElemToOptionsToolBar(_gthis.viewOptions);
									};
								})(t21,z1,i1,b);
							} else {
								_viewOptions_Items9 = (function() {
									return function() {
									};
								})();
							}
							subm1[t2] = { text : b5, xtype : _viewOptions_Items7, cls : _viewOptions_Items8, handler : _viewOptions_Items9, tooltip : { text : b[0].options[t[0]].helpText}};
							t[0]++;
						}
						_viewOptions_Items6 = (function(t3,subm2) {
							return function(e5) {
								var h = e5.ownerCt.y - e5.ownerCt.ownerCt.el.dom.scrollTop;
								var n = t3[0];
								var container6 = saturn.client.WorkspaceApplication.getApplication().getSingleAppContainer();
								container6.hideHelpingDiv();
								container6.clearSubMenuToolBar();
								container6.addElemToSubMenuToolBar(subm2[0]);
								container6.setTopSubMenuToolBar(h);
								container6.setHeightSubMenuToolBar(n * 25);
								container6.showSubMenuToolBar();
								_gthis.onSubmenu = true;
							};
						})(t,subm);
					} else {
						_viewOptions_Items6 = (function() {
							return function(e6) {
								var container7 = saturn.client.WorkspaceApplication.getApplication().getSingleAppContainer();
								container7.hideSubMenuToolBar();
								_gthis.onSubmenu = false;
							};
						})();
					}
					var _viewOptions_Items10 = [_viewOptions_Items,_viewOptions_Items1,{ html : _viewOptions_Items2, margin : "0 10 5 0", xtype : "button", cls : _viewOptions_Items3, icon : "", handler : _viewOptions_Items4, listeners : { mouseout : _viewOptions_Items5, mouseover : _viewOptions_Items6}}];
					var _viewOptions = { xtype : "container", cls : "x-group2btns", layout : "hbox", items : _viewOptions_Items10};
					this.viewOptions[j] = _viewOptions;
				}
				++j;
				++z;
			}
			++i;
		}
		var l = this.activeAnnotation.length;
		var i2 = 1;
		var num = 0;
		var showhide = false;
		while(i2 < l && num < 2) {
			if(this.activeAnnotation[i2] == true) {
				++num;
			}
			++i2;
		}
		if(num == 2) {
			showhide = true;
		}
		if(showhide == true) {
			this.viewOptions[j] = { text : "Hide all", margin : "20 10 5 0", xtype : "button", cls : "x-btn-viewoptions x-btn-viewoptions-hide", handler : function() {
				_gthis.onSubmenu = false;
				var l1 = _gthis.activeAnnotation.length;
				var i3 = 1;
				while(i3 < l1) {
					_gthis.activeAnnotation[i3] = false;
					++i3;
				}
				var container8 = saturn.client.WorkspaceApplication.getApplication().getSingleAppContainer();
				container8.hideExportSubMenu();
				container8.hideHelpingDiv();
				_gthis.closeAnnotWindows();
				container8.hideSubMenuToolBar();
				container8.clearOptionsToolBar();
				_gthis.createViewOptions();
				container8.emptyLegend();
				container8.addElemToOptionsToolBar(_gthis.viewOptions);
			}, listeners : { mouseover : function(e7) {
				_gthis.onSubmenu = false;
				var container9 = saturn.client.WorkspaceApplication.getApplication().getSingleAppContainer();
				container9.hideExportSubMenu();
				container9.hideHelpingDiv();
				container9.hideSubMenuToolBar();
			}}, tooltip : { dismissDelay : 10000, text : "Remove all Annotations"}};
		}
	}
	,showAnnotation: function(annotCode,active) {
		var _gthis = this;
		var currentAnnot = annotCode;
		this.activeAnnotation[currentAnnot] = active;
		var app = saturn.client.WorkspaceApplication.getApplication();
		var container = null;
		if(app != null) {
			container = app.getSingleAppContainer();
		}
		if(active == true) {
			var i;
			var needToExpandLegend = false;
			var _g1 = 0;
			var _g = this.activeAnnotation.length;
			while(_g1 < _g) {
				var i1 = _g1++;
				if(this.activeAnnotation[i1] == true) {
					if(this.annotations[i1].legend != "" && this.annotations[i1].legendClazz == "") {
						needToExpandLegend = true;
						if(container != null) {
							container.addImageToLegend(this.annotations[i1].legend,i1);
						}
					} else if(this.annotations[i1].legend != null && this.annotations[i1].legendClazz != "" && this.annotations[i1].legendMethod != "") {
						var clazz = Type.resolveClass(this.annotations[i1].legendClazz);
						var method = Reflect.field(clazz,this.annotations[i1].legendMethod);
						var legend = method(this.treeName);
						if(container != null) {
							container.addImageToLegend(legend,i1);
						}
					}
				}
			}
			if(needToExpandLegend == true) {
				if(container != null) {
					container.legendPanel.expand();
				}
			}
			var annot = this.annotations[currentAnnot];
			if(annot.hookName != null && annot.hookName != "") {
				var myGeneList = this.rootNode.targets;
				var currentOption = 100;
				var alias;
				var dbAccessed = false;
				var u;
				if(annot.options.length == 0) {
					alias = annot.hookName;
					annot.defaultImg = 0;
					if(this.alreadyGotAnnotation.exists(alias) == false) {
						this.alreadyGotAnnotation.set(alias,true);
						dbAccessed = false;
					} else {
						dbAccessed = true;
					}
				} else if(annot.optionSelected.length == 1) {
					currentOption = annot.optionSelected[0];
					alias = annot.options[currentOption];
					if(annot.defaultImg == null) {
						annot.defaultImg = 0;
					} else {
						annot.defaultImg = currentOption;
					}
					dbAccessed = false;
				} else {
					dbAccessed = false;
					alias = "";
				}
				var error;
				dbAccessed = false;
				if(dbAccessed == false) {
					var parameter;
					if(this.treeName != "") {
						if(this.treeName.indexOf("/") != -1) {
							var aux = this.treeName.split("/");
							parameter = aux[1];
						} else {
							parameter = this.treeName;
						}
						if(this.treeType == "gene") {
							alias = "gene_" + Std.string(alias);
						}
					} else {
						parameter = this.rootNode.targets;
					}
					saturn.client.WorkspaceApplication.getApplication().getProvider().getByNamedQuery(alias,{ param : parameter},null,true,function(db_results,error1) {
						if(error1 == null) {
							_gthis.addAnnotData(db_results,currentAnnot,currentOption,function() {
								_gthis.legacyViewer.newposition(0,0);
							});
						} else {
							saturn.client.WorkspaceApplication.getApplication().debug(error1);
						}
					});
				} else {
					this.legacyViewer.newposition(0,0);
				}
			}
			if(annot.familyMethod != "") {
				var hook;
				var clazz1;
				var method1;
				this.activeAnnotation[currentAnnot] = false;
				clazz1 = this.annotations[currentAnnot].hasClass;
				method1 = this.annotations[currentAnnot].familyMethod + "table";
				var data = new phylo.PhyloScreenData();
				data.renderer = this.legacyViewer.radialR;
				data.target = "";
				data.targetClean = "";
				data.annot = currentAnnot;
				data.divAccessed = false;
				data.root = this.rootNode;
				data.title = this.annotations[currentAnnot].label;
				hook = Reflect.field(Type.resolveClass(clazz1),method1);
				this.legacyViewer.dom = this.legacyViewer.theComponent.down("component").getEl().dom;
				var posXDiv = this.legacyViewer.dom.clientWidth / 2 - 100;
				var posYDiv = this.legacyViewer.dom.clientHeight / 5;
				this.closeDivInTable();
				hook(data,Math.round(posXDiv),Math.round(posYDiv),this.treeName,this.treeType,function(div) {
					data.created = true;
					data.div = div;
					var nn = "";
					if(data.target != data.targetClean) {
						if(data.target.indexOf("(") != -1 || data.target.indexOf("-") != -1) {
							var auxArray = data.target.split("");
							var j;
							var _g11 = 0;
							var _g2 = auxArray.length;
							while(_g11 < _g2) {
								var j1 = _g11++;
								if(auxArray[j1] == "(" || auxArray[j1] == "-") {
									nn = auxArray[j1 + 1];
									break;
								}
							}
						}
					}
					if(currentAnnot == 4) {
						if(data.annotation.text.indexOf(".") != -1) {
							var auxArray1 = data.annotation.text.split("");
							var j2;
							var naux = "";
							var _g12 = 0;
							var _g3 = auxArray1.length;
							while(_g12 < _g3) {
								var j3 = _g12++;
								if(auxArray1[j3] != ".") {
									naux += auxArray1[j3];
								}
							}
							nn += naux;
						} else if(data.annotation.text.indexOf("/") != -1) {
							var auxArray2 = data.annotation.text.split("");
							var j4;
							var naux1 = "";
							var _g13 = 0;
							var _g4 = auxArray2.length;
							while(_g13 < _g4) {
								var j5 = _g13++;
								if(auxArray2[j5] != "/") {
									naux1 += auxArray2[j5];
								}
							}
							nn += naux1;
						} else {
							nn += data.annotation.text;
						}
					}
					var nom = "";
					if(data.targetClean.indexOf("/") != -1) {
						var auxArray3 = data.targetClean.split("");
						var j6;
						var _g14 = 0;
						var _g5 = auxArray3.length;
						while(_g14 < _g5) {
							var j7 = _g14++;
							if(auxArray3[j7] != "/") {
								nom += auxArray3[j7];
							}
						}
					} else {
						nom = data.targetClean;
					}
					var id = currentAnnot + "-" + nom + nn;
					saturn.client.WorkspaceApplication.getApplication().getSingleAppContainer().showAnnotWindow(div,Math.round(posXDiv),Math.round(posYDiv),data.title,id,data);
				});
			}
		} else {
			this.legacyViewer.newposition(0,0);
			if(container != null) {
				container.emptyLegend();
			}
			var i2;
			var needToExpandLegend1 = false;
			var _g15 = 0;
			var _g6 = this.activeAnnotation.length;
			while(_g15 < _g6) {
				var i3 = _g15++;
				if(this.activeAnnotation[i3] == true) {
					if(this.annotations[i3].legend != "") {
						needToExpandLegend1 = true;
						if(container != null) {
							container.addImageToLegend(this.annotations[i3].legend,i3);
						}
					}
				}
			}
			if(needToExpandLegend1 == false) {
				if(container != null) {
					container.legendPanel.collapse();
				}
			}
		}
	}
	,dataforTable: function(annotlist,leaves) {
		var d = [];
		var total = this.numTotalAnnot;
		if(this.treeName != "") {
			var results = [];
			var _g1 = 0;
			var _g = leaves.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(this.rootNode.leafNameToNode.exists(leaves[i])) {
					var leaf = this.rootNode.leafNameToNode.get(leaves[i]);
					var j;
					var _g3 = 1;
					var _g2 = total + 1;
					while(_g3 < _g2) {
						var j1 = _g3++;
						if(annotlist[j1] != null && annotlist[j1].familyMethod != "") {
							results[j1] = "<a id=\"myLink\" title=\"Click to visualize annotation details\"  href=\"#\" onclick=\"app.getActiveProgram().showFamilyMethodDivInTable(" + j1 + ",'" + Std.string(annotlist[j1].familyMethod) + "')\";return false;\"><span style=\"text-align:center;color:\">Visualize</span></a> ";
							saturn.core.Util.debug("Here!");
						} else {
							saturn.core.Util.debug("Here2!");
							if(leaf.annotations[j1] != null) {
								if(leaf.annotations[j1] != null) {
									if(leaf.annotations[j1].hasAnnot == true) {
										if(leaf.annotations[j1].alfaAnnot.length == 0) {
											var _g4 = this.annotations[j1].shape;
											switch(_g4) {
											case "cercle":
												results[j1] = "<a id=\"myLink\" title=\"Click to visualize annotation details\"  href=\"#\" onclick=\"app.getActiveProgram().annotationManager.showDivInTable(" + j1 + ",'" + leaf.annotations[j1].myleaf.name + "')\";return false;\"><span style=\"text-align:center;color:" + leaf.annotations[j1].color[0].color + "\">O</span></a> ";
												break;
											case "html":
												results[j1] = this.generateIcon(j1,leaf.annotations[j1].myleaf.name,leaf.results);
												break;
											case "image":
												var t = leaf.annotations[j1].defaultImg;
												if(t == null) {
													t = 0;
												}
												if(this.annotations[j1].annotImg[t] != null && this.annotations[j1].annotImg[t].currentSrc != null) {
													if(t != 100) {
														if(j1 == 1) {
															results[j1] = "<a id=\"myLink\" title=\"Click to visualize annotation details\"  href=\"#\" onclick=\"app.getActiveProgram().annotationManager.showDivInTable(" + j1 + ",'" + leaf.annotations[j1].myleaf.name + "')\";return false;\"><img src=\"" + Std.string(this.annotations[j1].annotImg[t].currentSrc) + "\" width=\"20px\"/><a> ";
														} else {
															results[j1] = "<a id=\"myLink\" title=\"Click to visualize annotation details\"  href=\"#\" onclick=\"app.getActiveProgram().annotationManager.showDivInTable(" + j1 + ",'" + leaf.annotations[j1].myleaf.name + "')\";return false;\"><img src=\"" + Std.string(this.annotations[j1].annotImg[t].currentSrc) + "\"/><a> ";
														}
													} else {
														results[j1] = "";
													}
												}
												break;
											case "square":
												results[j1] = "<a id=\"myLink\" title=\"Click to visualize annotation details\"  href=\"#\" onclick=\"app.getActiveProgram().annotationManager.showDivInTable(" + j1 + ",'" + leaf.annotations[j1].myleaf.name + "')\";return false;\"><div id=\"rectangle\" style=\"text-align:center;width:10px; height:10px; background-color:" + leaf.annotations[j1].color[0].color + "\"/> </div></a> ";
												break;
											case "text":
												results[j1] = "<a id=\"myLink\" title=\"Click to visualize annotation details\"  href=\"#\" onclick=\"app.getActiveProgram().annotationManager.showDivInTable(" + j1 + ",'" + leaf.annotations[j1].myleaf.name + "')\";return false;\"><span style=\"text-align:center;color:" + leaf.annotations[j1].color[0].color + "\">" + leaf.annotations[j1].text + "</span></a> ";
												break;
											}
										} else {
											results[j1] = "";
											if(leaf.annotations[j1].hasAnnot == true) {
												var _g41 = this.annotations[j1].shape;
												switch(_g41) {
												case "cercle":
													results[j1] = results[j1] + "<a id=\"myLink\" title=\"Click to visualize annotation details\"  href=\"#\" onclick=\"app.getActiveProgram().annotationManager.showDivInTable(" + j1 + ",'" + leaf.annotations[j1].myleaf.name + "')\";return false;\"><span style=\"text-align:center;color:" + leaf.annotations[j1].color[0].color + "\">O</span></a> ";
													break;
												case "html":
													results[j1] += this.generateIcon(j1,leaf.annotations[j1].myleaf.name,leaf.results);
													break;
												case "image":
													var t1 = leaf.annotations[j1].defaultImg;
													if(t1 == null) {
														t1 = 0;
													}
													if(this.annotations[j1].annotImg[t1] != null && this.annotations[j1].annotImg[t1].currentSrc != null) {
														if(t1 != 100) {
															results[j1] = results[j1] + "<a id=\"myLink\" title=\"Click to visualize annotation details\"  href=\"#\" onclick=\"app.getActiveProgram().annotationManager.showDivInTable(" + j1 + ",'" + leaf.annotations[j1].myleaf.name + "')\";return false;\"><img src=\"" + Std.string(this.annotations[j1].annotImg[t1].currentSrc) + "\"/><a> ";
														}
													}
													break;
												case "square":
													results[j1] = results[j1] + "<a id=\"myLink\" title=\"Click to visualize annotation details\"  href=\"#\" onclick=\"app.getActiveProgram().annotationManager.showDivInTable(" + j1 + ",'" + leaf.annotations[j1].myleaf.name + "')\";return false;\"><div id=\"rectangle\" style=\"text-align:center;width:10px; height:10px; background-color:" + leaf.annotations[j1].color[0].color + "\"/> </div></a> ";
													break;
												case "text":
													results[j1] = results[j1] + "<a id=\"myLink\" title=\"Click to visualize annotation details\"  href=\"#\" onclick=\"app.getActiveProgram().annotationManager.showDivInTable(" + j1 + ",'" + leaf.annotations[j1].myleaf.name + "','" + leaf.annotations[j1].text + "')\";return false;\"><span style=\"text-align:center;color:" + leaf.annotations[j1].color[0].color + "\">" + leaf.annotations[j1].text + "</span></a> ";
													break;
												}
											}
											var b;
											var _g5 = 0;
											var _g42 = leaf.annotations[j1].alfaAnnot.length;
											while(_g5 < _g42) {
												var b1 = _g5++;
												if(leaf.annotations[j1].alfaAnnot[b1] != null) {
													var _g6 = this.annotations[j1].shape;
													switch(_g6) {
													case "cercle":
														results[j1] = results[j1] + "<a id=\"myLink\" title=\"Click to visualize annotation details\"  href=\"#\" onclick=\"app.getActiveProgram().annotationManager.showDivInTable(" + j1 + ",'" + leaf.annotations[j1].myleaf.name + "')\";return false;\"><span style=\"text-align:center;color:" + leaf.annotations[j1].alfaAnnot[b1].color[0].color + "\">O</span></a> ";
														break;
													case "html":
														results[j1] += this.generateIcon(j1,leaf.annotations[j1].myleaf.name,leaf.results);
														break;
													case "image":
														var t2 = leaf.annotations[j1].alfaAnnot[b1].defaultImg;
														if(t2 == null) {
															t2 = 0;
														}
														if(this.annotations[j1].annotImg[t2] != null && this.annotations[j1].annotImg[t2].currentSrc != null) {
															if(t2 != 100) {
																results[j1] = results[j1] + "<a id=\"myLink\" title=\"Click to visualize annotation details\"  href=\"#\" onclick=\"app.getActiveProgram().annotationManager.showDivInTable(" + j1 + ",'" + leaf.annotations[j1].myleaf.name + "')\";return false;\"><img src=\"" + Std.string(this.annotations[j1].annotImg[t2].currentSrc) + "\"/><a> ";
															}
														}
														break;
													case "square":
														results[j1] = results[j1] + "<a id=\"myLink\" title=\"Click to visualize annotation details\"  href=\"#\" onclick=\"app.getActiveProgram().annotationManager.showDivInTable(" + j1 + ",'" + leaf.annotations[j1].myleaf.name + "')\";return false;\"><div id=\"rectangle\" style=\"text-align:center;width:10px; height:10px; background-color:" + leaf.annotations[j1].alfaAnnot[b1].color[0].color + "\"/> </div></a> ";
														break;
													case "text":
														results[j1] = results[j1] + "<a id=\"myLink\" title=\"Click to visualize annotation details\"  href=\"#\" onclick=\"app.getActiveProgram().annotationManager.showDivInTable(" + j1 + ",'" + leaf.annotations[j1].myleaf.name + "','" + leaf.annotations[j1].alfaAnnot[b1].text + "')\";return false;\"><span style=\"text-align:center;color:" + leaf.annotations[j1].alfaAnnot[b1].color[0].color + "\">" + leaf.annotations[j1].alfaAnnot[b1].text + "</span></a> ";
														break;
													}
												}
											}
										}
									} else {
										results[j1] = "";
									}
								} else {
									results[j1] = "";
								}
							} else {
								results[j1] = "";
							}
						}
					}
					d[i] = { };
					var a = 0;
					Reflect.setField(d[i],"Target",leaf.name);
					var _g31 = 0;
					var _g21 = this.annotations.length;
					while(_g31 < _g21) {
						var a1 = _g31++;
						if(a1 == 12) {
							var iwanttostop = true;
						}
						if(results[a1 + 1] != null) {
							if(a1 != 10) {
								Reflect.setField(d[i],this.annotations[a1 + 1].label,results[a1 + 1]);
							}
						}
					}
				}
			}
		} else {
			var results1 = [];
			var leaf1;
			var _g11 = 0;
			var _g7 = this.searchedGenes.length;
			while(_g11 < _g7) {
				var i1 = _g11++;
				leaf1 = this.legacyViewer.geneMap.get(this.searchedGenes[i1]);
				var j2;
				var _g32 = 1;
				var _g22 = total + 1;
				while(_g32 < _g22) {
					var j3 = _g32++;
					if(annotlist[j3] != null && annotlist[j3].familyMethod != "") {
						if(leaf1.targetFamilyGene != null && leaf1.targetFamilyGene.length != 0) {
							var ii = 0;
							var r = "";
							var _g51 = 0;
							var _g43 = leaf1.targetFamilyGene.length;
							while(_g51 < _g43) {
								var ii1 = _g51++;
								r = r + leaf1.targetFamilyGene[ii1] + " ";
							}
							results1[j3] = r;
						} else {
							results1[j3] = "";
						}
					} else if(leaf1.annotations[j3] != null) {
						if(leaf1.annotations[j3].hasAnnot == true) {
							if(leaf1.annotations[j3].alfaAnnot.length == 0) {
								var _g44 = this.annotations[j3].shape;
								switch(_g44) {
								case "cercle":
									results1[j3] = "<a id=\"myLink\" title=\"Click to visualize annotation details\"  href=\"#\" onclick=\"app.getActiveProgram().annotationManager.showDivInTable(" + j3 + ",'" + leaf1.annotations[j3].myleaf.name + "')\";return false;\"><span style=\"text-align:center;color:" + leaf1.annotations[j3].color[0].color + "\">O</span></a> ";
									break;
								case "html":
									results1[j3] = this.generateIcon(j3,leaf1.annotations[j3].myleaf.name,leaf1.results);
									break;
								case "image":
									var t3 = leaf1.annotations[j3].defaultImg;
									if(t3 == null) {
										t3 = 0;
									}
									if(this.annotations[j3].annotImg[t3] != null && this.annotations[j3].annotImg[t3].currentSrc != null) {
										if(t3 != 100) {
											if(j3 == 1) {
												results1[j3] = "<a id=\"myLink\" title=\"Click to visualize annotation details\"  href=\"#\" onclick=\"app.getActiveProgram().annotationManager.showDivInTable(" + j3 + ",'" + leaf1.annotations[j3].myleaf.name + "')\";return false;\"><img src=\"" + Std.string(this.annotations[j3].annotImg[t3].currentSrc) + "\" width=\"20px\"/><a> ";
											} else {
												results1[j3] = "<a id=\"myLink\" title=\"Click to visualize annotation details\"  href=\"#\" onclick=\"app.getActiveProgram().annotationManager.showDivInTable(" + j3 + ",'" + leaf1.annotations[j3].myleaf.name + "')\";return false;\"><img src=\"" + Std.string(this.annotations[j3].annotImg[t3].currentSrc) + "\"/><a> ";
											}
										} else {
											results1[j3] = "";
										}
									}
									break;
								case "square":
									results1[j3] = "<a id=\"myLink\" title=\"Click to visualize annotation details\"  href=\"#\" onclick=\"app.getActiveProgram().annotationManager.showDivInTable(" + j3 + ",'" + leaf1.annotations[j3].myleaf.name + "')\";return false;\"><div id=\"rectangle\" style=\"text-align:center;width:10px; height:10px; background-color:" + leaf1.annotations[j3].color[0].color + "\"/> </div></a> ";
									break;
								case "text":
									results1[j3] = "<a id=\"myLink\" title=\"Click to visualize annotation details\"  href=\"#\" onclick=\"app.getActiveProgram().annotationManager.showDivInTable(" + j3 + ",'" + leaf1.annotations[j3].myleaf.name + "')\";return false;\"><span style=\"text-align:center;color:" + leaf1.annotations[j3].color[0].color + "\">" + leaf1.annotations[j3].text + "</span></a> ";
									break;
								}
							} else {
								results1[j3] = "";
								if(leaf1.annotations[j3].hasAnnot == true) {
									var _g45 = this.annotations[j3].shape;
									switch(_g45) {
									case "cercle":
										results1[j3] = results1[j3] + "<a id=\"myLink\" title=\"Click to visualize annotation details\"  href=\"#\" onclick=\"app.getActiveProgram().annotationManager.showDivInTable(" + j3 + ",'" + leaf1.annotations[j3].myleaf.name + "')\";return false;\"><span style=\"text-align:center;color:" + leaf1.annotations[j3].color[0].color + "\">O</span></a> ";
										break;
									case "html":
										results1[j3] += this.generateIcon(j3,leaf1.annotations[j3].myleaf.name,leaf1.results);
										break;
									case "image":
										var t4 = leaf1.annotations[j3].defaultImg;
										if(t4 == null) {
											t4 = 0;
										}
										if(this.annotations[j3].annotImg[t4] != null && this.annotations[j3].annotImg[t4].currentSrc != null) {
											if(t4 != 100) {
												if(j3 == 1) {
													results1[j3] = "<a id=\"myLink\" title=\"Click to visualize annotation details\"  href=\"#\" onclick=\"app.getActiveProgram().annotationManager.showDivInTable(" + j3 + ",'" + leaf1.annotations[j3].myleaf.name + "')\";return false;\"><img src=\"" + Std.string(this.annotations[j3].annotImg[t4].currentSrc) + "\" width=\"20px\"/><a> ";
												} else {
													results1[j3] = results1[j3] + "<a id=\"myLink\" title=\"Click to visualize annotation details\"  href=\"#\" onclick=\"app.getActiveProgram().annotationManager.showDivInTable(" + j3 + ",'" + leaf1.annotations[j3].myleaf.name + "')\";return false;\"><img src=\"" + Std.string(this.annotations[j3].annotImg[t4].currentSrc) + "\"/><a> ";
												}
											}
										}
										break;
									case "square":
										results1[j3] = results1[j3] + "<a id=\"myLink\" title=\"Click to visualize annotation details\"  href=\"#\" onclick=\"app.getActiveProgram().annotationManager.showDivInTable(" + j3 + ",'" + leaf1.annotations[j3].myleaf.name + "')\";return false;\"><div id=\"rectangle\" style=\"text-align:center;width:10px; height:10px; background-color:" + leaf1.annotations[j3].color[0].color + "\"/> </div></a> ";
										break;
									case "text":
										results1[j3] = results1[j3] + "<a id=\"myLink\" title=\"Click to visualize annotation details\"  href=\"#\" onclick=\"app.getActiveProgram().annotationManager.showDivInTable(" + j3 + ",'" + leaf1.annotations[j3].myleaf.name + "','" + leaf1.annotations[j3].text + "')\";return false;\"><span style=\"text-align:center;color:" + leaf1.annotations[j3].color[0].color + "\">" + leaf1.annotations[j3].text + "</span></a> ";
										break;
									}
								}
								var b2;
								var _g52 = 0;
								var _g46 = leaf1.annotations[j3].alfaAnnot.length;
								while(_g52 < _g46) {
									var b3 = _g52++;
									if(leaf1.annotations[j3].alfaAnnot[b3] != null) {
										var _g61 = this.annotations[j3].shape;
										switch(_g61) {
										case "cercle":
											results1[j3] = results1[j3] + "<a id=\"myLink\" title=\"Click to visualize annotation details\"  href=\"#\" onclick=\"app.getActiveProgram().annotationManager.showDivInTable(" + j3 + ",'" + leaf1.annotations[j3].myleaf.name + "')\";return false;\"><span style=\"text-align:center;color:" + leaf1.annotations[j3].alfaAnnot[b3].color[0].color + "\">O</span></a> ";
											break;
										case "html":
											results1[j3] = results1[j3] + "<a id=\"myLink\" title=\"Click to visualize annotation details\"  href=\"#\" onclick=\"app.getActiveProgram().annotationManager.showDivInTable(" + j3 + ",'" + leaf1.annotations[j3].myleaf.name + "')\";return false;\"><div id=\"rectangle\" style=\"text-align:center;width:10px; height:10px; background-color:" + leaf1.annotations[j3].alfaAnnot[b3].color[0].color + "\"/> </div></a> ";
											break;
										case "image":
											var t5 = leaf1.annotations[j3].alfaAnnot[b3].defaultImg;
											if(t5 == null) {
												t5 = 0;
											}
											if(this.annotations[j3].annotImg[t5] != null && this.annotations[j3].annotImg[t5].currentSrc != null) {
												if(t5 != 100) {
													if(j3 == 1) {
														results1[j3] = "<a id=\"myLink\" title=\"Click to visualize annotation details\"  href=\"#\" onclick=\"app.getActiveProgram().annotationManager.showDivInTable(" + j3 + ",'" + leaf1.annotations[j3].myleaf.name + "')\";return false;\"><img src=\"" + Std.string(this.annotations[j3].annotImg[t5].currentSrc) + "\" width=\"20px\"/><a> ";
													} else {
														results1[j3] = results1[j3] + "<a id=\"myLink\" title=\"Click to visualize annotation details\"  href=\"#\" onclick=\"app.getActiveProgram().annotationManager.showDivInTable(" + j3 + ",'" + leaf1.annotations[j3].myleaf.name + "')\";return false;\"><img src=\"" + Std.string(this.annotations[j3].annotImg[t5].currentSrc) + "\"/><a> ";
													}
												}
											}
											break;
										case "square":
											results1[j3] = results1[j3] + "<a id=\"myLink\" title=\"Click to visualize annotation details\"  href=\"#\" onclick=\"app.getActiveProgram().annotationManager.showDivInTable(" + j3 + ",'" + leaf1.annotations[j3].myleaf.name + "')\";return false;\"><div id=\"rectangle\" style=\"text-align:center;width:10px; height:10px; background-color:" + leaf1.annotations[j3].alfaAnnot[b3].color[0].color + "\"/> </div></a> ";
											break;
										case "text":
											results1[j3] = results1[j3] + "<a id=\"myLink\" title=\"Click to visualize annotation details\"  href=\"#\" onclick=\"app.getActiveProgram().annotationManager.showDivInTable(" + j3 + ",'" + leaf1.annotations[j3].myleaf.name + "','" + leaf1.annotations[j3].alfaAnnot[b3].text + "')\";return false;\"><span style=\"text-align:center;color:" + leaf1.annotations[j3].alfaAnnot[b3].color[0].color + "\">" + leaf1.annotations[j3].alfaAnnot[b3].text + "</span></a> ";
											break;
										}
									}
								}
							}
						} else {
							results1[j3] = "";
						}
					} else {
						results1[j3] = "";
					}
				}
				d[i1] = { };
				var a2 = 0;
				Reflect.setField(d[i1],"Target",leaf1.name);
				var tt = "";
				var _g33 = 0;
				var _g23 = this.annotations.length;
				while(_g33 < _g23) {
					var a3 = _g33++;
					if(results1[a3 + 1] != null) {
						if(a3 != 10) {
							if(a3 + 1 == 5) {
								Reflect.setField(d[i1],"Family Domains",results1[a3 + 1]);
							} else {
								Reflect.setField(d[i1],this.annotations[a3 + 1].label,results1[a3 + 1]);
							}
						}
					}
				}
			}
		}
		return d;
	}
	,fillInDataInAnnotTable: function(type,callback) {
		var _gthis = this;
		var annotlist = this.annotations;
		var leaves;
		var myGeneList;
		if(type == "family") {
			myGeneList = this.rootNode.targets;
			leaves = this.rootNode.targets;
		} else {
			myGeneList = this.searchedGenes;
			leaves = this.searchedGenes;
		}
		var total = this.numTotalAnnot;
		var completedAnnotations = 0;
		var onDone = function(error,annotation) {
			if(completedAnnotations == total) {
				saturn.core.Util.debug("All results fetch");
				var d = _gthis.dataforTable(annotlist,leaves);
				callback(d,null);
				return;
			}
		};
		var _g1 = 1;
		var _g = total + 1;
		while(_g1 < _g) {
			var currentAnnot = [_g1++];
			if(currentAnnot[0] == 11) {
				completedAnnotations += 1;
				onDone(null,currentAnnot[0]);
				continue;
			}
			var alias = annotlist[currentAnnot[0]].hookName;
			if(alias == "") {
				completedAnnotations += 1;
				onDone(null,currentAnnot[0]);
				continue;
			}
			var parameter;
			if(this.treeName != "") {
				if(this.treeType == "gene") {
					alias = "gene_" + alias;
				}
				parameter = this.treeName;
				if(annotlist[currentAnnot[0]].popup == false) {
					var u = [annotlist[currentAnnot[0]].optionSelected[0]];
					var tmp = saturn.client.WorkspaceApplication.getApplication().getProvider();
					var tmp1 = (function(u1,currentAnnot1) {
						return function(db_results,error1) {
							if(error1 == null) {
								var currentAnnot2 = currentAnnot1[0];
								var u2 = u1[0];
								var tmp2 = (function(currentAnnot3) {
									return function() {
										completedAnnotations += 1;
										onDone(null,currentAnnot3[0]);
									};
								})(currentAnnot1);
								_gthis.addAnnotData(db_results,currentAnnot2,u2,tmp2);
							} else {
								saturn.core.Util.debug(error1);
								completedAnnotations += 1;
								onDone(error1,currentAnnot1[0]);
							}
						};
					})(u,currentAnnot);
					tmp.getByNamedQuery(alias,{ param : parameter},null,true,tmp1);
				} else {
					var l = currentAnnot[0];
					var popMethod = annotlist[currentAnnot[0]].popMethod;
					var hasClass = annotlist[currentAnnot[0]].hasClass;
					var hook = Reflect.field(Type.resolveClass(hasClass),popMethod);
					hook(currentAnnot[0],null,this.treeType,this.treeName,null,this,(function(currentAnnot4) {
						return function(results,error2) {
							completedAnnotations += 1;
							if(error2 == null) {
								onDone(null,currentAnnot4[0]);
							} else {
								saturn.core.Util.debug(error2);
								onDone(error2,currentAnnot4[0]);
							}
						};
					})(currentAnnot));
				}
			} else if(annotlist[currentAnnot[0]].popup == false) {
				alias = "list_" + alias;
				var parameter1 = this.searchedGenes;
				if(this.treeType == "gene") {
					alias = "gene_" + alias;
				}
				var tmp3 = saturn.client.WorkspaceApplication.getApplication().getProvider();
				var tmp4 = (function(currentAnnot5) {
					return function(db_results1,error3) {
						if(error3 == null) {
							var currentAnnot6 = currentAnnot5[0];
							var tmp5 = (function(currentAnnot7) {
								return function() {
									completedAnnotations += 1;
									onDone(null,currentAnnot7[0]);
								};
							})(currentAnnot5);
							_gthis.addAnnotDataGenes(db_results1,currentAnnot6,tmp5);
						} else {
							saturn.client.WorkspaceApplication.getApplication().showMessage("Unknown",error3);
							completedAnnotations += 1;
							onDone(error3,currentAnnot5[0]);
						}
					};
				})(currentAnnot);
				tmp3.getByNamedQuery(alias,{ param : parameter1},null,true,tmp4);
			} else {
				var l1 = currentAnnot[0];
				var popMethod1 = annotlist[currentAnnot[0]].popMethod;
				var hasClass1 = annotlist[currentAnnot[0]].hasClass;
				var hook1 = Reflect.field(Type.resolveClass(hasClass1),popMethod1);
				hook1(currentAnnot[0],null,this.treeType,this.treeName,this.searchedGenes,this,(function(currentAnnot8) {
					return function(results1,error4) {
						completedAnnotations += 1;
						onDone(null,currentAnnot8[0]);
					};
				})(currentAnnot));
			}
		}
	}
	,showFamilyMethodDivInTable: function(annotation) {
		if(this.annotations[annotation].hasClass != null && this.annotations[annotation].familyMethod != null) {
			var hook;
			var clazz;
			var method;
			clazz = this.annotations[annotation].hasClass;
			method = this.annotations[annotation].familyMethod + "table";
			var data = new phylo.PhyloScreenData();
			data.renderer = this.legacyViewer.radialR;
			data.target = "";
			data.targetClean = "";
			data.annot = annotation;
			data.divAccessed = false;
			data.root = this.rootNode;
			data.title = this.annotations[annotation].label;
			hook = Reflect.field(Type.resolveClass(clazz),method);
			this.legacyViewer.dom = this.legacyViewer.theComponent.down("component").getEl().dom;
			var posXDiv = this.legacyViewer.dom.clientWidth / 2 - 100;
			var posYDiv = this.legacyViewer.dom.clientHeight / 5;
			hook(data,Math.round(posXDiv),Math.round(posYDiv),this.treeName,this.treeType,function(div) {
				data.created = true;
				data.div = div;
				var nn = "";
				if(data.target != data.targetClean) {
					if(data.target.indexOf("(") != -1 || data.target.indexOf("-") != -1) {
						var auxArray = data.target.split("");
						var j;
						var _g1 = 0;
						var _g = auxArray.length;
						while(_g1 < _g) {
							var j1 = _g1++;
							if(auxArray[j1] == "(" || auxArray[j1] == "-") {
								nn = auxArray[j1 + 1];
								break;
							}
						}
					}
				}
				var nom = "";
				if(data.targetClean.indexOf("/") != -1) {
					var auxArray1 = data.targetClean.split("");
					var j2;
					var _g11 = 0;
					var _g2 = auxArray1.length;
					while(_g11 < _g2) {
						var j3 = _g11++;
						if(auxArray1[j3] != "/") {
							nom += auxArray1[j3];
						}
					}
				} else {
					nom = data.targetClean;
				}
				var id = annotation + "-" + nom + nn;
				saturn.client.WorkspaceApplication.getApplication().getSingleAppContainer().showAnnotWindow(div,Math.round(posXDiv),Math.round(posYDiv),data.title,id,data);
			});
		}
	}
	,showDivInTable: function(annotation,target,text) {
		var leaf;
		if(this.treeName == "") {
			leaf = this.legacyViewer.geneMap.get(target);
		} else {
			leaf = this.rootNode.leafNameToNode.get(target);
		}
		if(this.annotations[annotation].hasClass != null && this.annotations[annotation].divMethod != null) {
			var hook;
			var clazz;
			var method;
			clazz = this.annotations[annotation].hasClass;
			method = this.annotations[annotation].divMethod;
			var data = new phylo.PhyloScreenData();
			data.renderer = this.legacyViewer.radialR;
			data.target = target;
			data.annot = annotation;
			if(text != null) {
				data.annotation.text = text;
			} else {
				data.annotation.text = leaf.annotations[annotation].text;
			}
			var name = "";
			if(target.indexOf("(") != -1 || target.indexOf("-") != -1) {
				var auxArray = target.split("");
				var j;
				var _g1 = 0;
				var _g = auxArray.length;
				while(_g1 < _g) {
					var j1 = _g1++;
					if(auxArray[j1] == "(" || auxArray[j1] == "-") {
						break;
					}
					name += auxArray[j1];
				}
				data.targetClean = name;
			} else {
				data.targetClean = target;
			}
			data.annot = annotation;
			data.divAccessed = false;
			data.root = this.rootNode;
			data.title = this.annotations[annotation].label;
			hook = Reflect.field(Type.resolveClass(clazz),method);
			this.legacyViewer.dom = this.legacyViewer.theComponent.down("component").getEl().dom;
			var posXDiv = this.legacyViewer.dom.clientWidth / 2 - 100;
			var posYDiv = this.legacyViewer.dom.clientHeight / 5;
			hook(data,Math.round(posXDiv),Math.round(posYDiv),this.treeType,function(div) {
				data.created = true;
				data.div = div;
				var nn = "";
				if(data.target != data.targetClean) {
					if(data.target.indexOf("(") != -1 || data.target.indexOf("-") != -1) {
						var auxArray1 = data.target.split("");
						var j2;
						var _g11 = 0;
						var _g2 = auxArray1.length;
						while(_g11 < _g2) {
							var j3 = _g11++;
							if(auxArray1[j3] == "(" || auxArray1[j3] == "-") {
								nn = auxArray1[j3 + 1];
								break;
							}
						}
					}
				}
				if(annotation == 4) {
					if(data.annotation.text.indexOf(".") != -1) {
						var auxArray2 = data.annotation.text.split("");
						var j4;
						var naux = "";
						var _g12 = 0;
						var _g3 = auxArray2.length;
						while(_g12 < _g3) {
							var j5 = _g12++;
							if(auxArray2[j5] != ".") {
								naux += auxArray2[j5];
							}
						}
						nn += naux;
					} else if(data.annotation.text.indexOf("/") != -1) {
						var auxArray3 = data.annotation.text.split("");
						var j6;
						var naux1 = "";
						var _g13 = 0;
						var _g4 = auxArray3.length;
						while(_g13 < _g4) {
							var j7 = _g13++;
							if(auxArray3[j7] != "/") {
								naux1 += auxArray3[j7];
							}
						}
						nn += naux1;
					} else {
						nn += data.annotation.text;
					}
				}
				var nom = "";
				if(data.targetClean.indexOf("/") != -1) {
					var auxArray4 = data.targetClean.split("");
					var j8;
					var _g14 = 0;
					var _g5 = auxArray4.length;
					while(_g14 < _g5) {
						var j9 = _g14++;
						if(auxArray4[j9] != "/") {
							nom += auxArray4[j9];
						}
					}
				} else {
					nom = data.targetClean;
				}
				var id = annotation + "-" + nom + nn;
				saturn.client.WorkspaceApplication.getApplication().getSingleAppContainer().showAnnotWindow(div,Math.round(posXDiv),Math.round(posYDiv),data.title,id,data);
			});
		}
	}
	,closeDivInTable: function() {
		var container = saturn.client.WorkspaceApplication.getApplication().getSingleAppContainer();
	}
	,addAnnotDataGenes: function(annotData,annotation,callback) {
		var i;
		var mapResults = new haxe.ds.StringMap();
		var target;
		var j = 0;
		var _g1 = 0;
		var _g = annotData.length;
		while(_g1 < _g) {
			var i1 = _g1++;
			if(annotation == 1) {
				var aux = annotData[i1].pmid_list;
				var aux2 = aux.split(";");
				var max = aux2.length;
				var v = this.annotations[1].fromresults[1];
				if(max > v || this.annotations[1].fromresults[1] == null) {
					this.annotations[1].fromresults[1] = max;
				}
			}
			target = Std.string(annotData[i1].target_id) + "_" + j;
			while(mapResults.exists(target)) {
				++j;
				target = Std.string(annotData[i1].target_id) + "_" + j;
			}
			j = 0;
			mapResults.set(target,annotData[i1]);
		}
		var items = [];
		var i2 = 0;
		var _g11 = 0;
		var _g2 = this.searchedGenes.length;
		while(_g11 < _g2) {
			var i3 = _g11++;
			items[i3] = this.searchedGenes[i3];
		}
		this.processGeneAnnotations(items,mapResults,annotation,callback);
	}
	,processGeneAnnotations: function(items,mapResults,annotation,cb) {
		var _gthis = this;
		var toComplete = items.length;
		var onDone = function() {
			if(toComplete == 0) {
				cb();
			}
		};
		if(toComplete == 0) {
			cb();
			return;
		}
		var _g = 0;
		while(_g < items.length) {
			var name = items[_g];
			++_g;
			var target = [name + "_0"];
			if(mapResults.exists(target[0])) {
				var res = mapResults.get(target[0]);
				var leafaux = [this.legacyViewer.geneMap.get(name)];
				var index = null;
				var variant = "1";
				if(annotation == 13 && Reflect.hasField(res,"family_id")) {
					leafaux[0].targetFamily = mapResults.get(target[0]).family_id;
				}
				if(this.annotations[annotation].hasClass != null && this.annotations[annotation].hasMethod != null) {
					var clazz = this.annotations[annotation].hasClass;
					var method = this.annotations[annotation].hasMethod;
					var hook = Reflect.field(Type.resolveClass(clazz),method);
					hook(name,res,0,this.annotations,name,(function(leafaux1,target1) {
						return function(r) {
							if(r.hasAnnot) {
								leafaux1[0].activeAnnotation[annotation] = true;
								if(leafaux1[0].annotations[annotation] == null) {
									leafaux1[0].annotations[annotation] = new phylo.PhyloAnnotation();
									leafaux1[0].annotations[annotation].myleaf = leafaux1[0];
									leafaux1[0].annotations[annotation].text = r.text;
									leafaux1[0].annotations[annotation].defaultImg = _gthis.annotations[annotation].defaultImg;
									leafaux1[0].annotations[annotation].saveAnnotationData(annotation,mapResults.get(target1[0]),100,r);
								} else if(leafaux1[0].annotations[annotation].splitresults == true) {
									var z = 0;
									while(leafaux1[0].annotations[annotation].alfaAnnot[z] != null) ++z;
									leafaux1[0].annotations[annotation].alfaAnnot[z] = new phylo.PhyloAnnotation();
									leafaux1[0].annotations[annotation].alfaAnnot[z].myleaf = leafaux1[0];
									leafaux1[0].annotations[annotation].alfaAnnot[z].text = "";
									leafaux1[0].annotations[annotation].alfaAnnot[z].defaultImg = _gthis.annotations[annotation].defaultImg;
									leafaux1[0].annotations[annotation].alfaAnnot[z].saveAnnotationData(annotation,mapResults.get(target1[0]),100,r);
								}
							}
							toComplete -= 1;
							onDone();
						};
					})(leafaux,target));
				} else {
					var col = "";
					if(this.annotations[annotation].color[0] != null) {
						col = this.annotations[annotation].color[0].color;
					}
					var r1 = { hasAnnot : true, text : "", color : { color : col, used : true}, defImage : this.annotations[annotation].defaultImg};
					var leafaux2 = this.legacyViewer.geneMap.get(name);
					leafaux2.activeAnnotation[annotation] = true;
					if(leafaux2.annotations[annotation] == null) {
						leafaux2.annotations[annotation] = new phylo.PhyloAnnotation();
						leafaux2.annotations[annotation].myleaf = leafaux2;
						leafaux2.annotations[annotation].text = "";
						leafaux2.annotations[annotation].defaultImg = this.annotations[annotation].defaultImg;
						leafaux2.annotations[annotation].saveAnnotationData(annotation,mapResults.get(target[0]),100,r1);
					} else if(leafaux2.annotations[annotation].splitresults == true) {
						var z1 = 0;
						while(leafaux2.annotations[annotation].alfaAnnot[z1] != null) ++z1;
						leafaux2.annotations[annotation].alfaAnnot[z1] = new phylo.PhyloAnnotation();
						leafaux2.annotations[annotation].alfaAnnot[z1].myleaf = leafaux2;
						leafaux2.annotations[annotation].alfaAnnot[z1].text = "";
						leafaux2.annotations[annotation].alfaAnnot[z1].defaultImg = this.annotations[annotation].defaultImg;
						leafaux2.annotations[annotation].alfaAnnot[z1].saveAnnotationData(annotation,mapResults.get(target[0]),100,r1);
					}
					toComplete -= 1;
					onDone();
				}
			} else {
				var leafaux3 = this.legacyViewer.geneMap.get(name);
				leafaux3.activeAnnotation[annotation] = false;
				leafaux3.annotations[annotation] = null;
				toComplete -= 1;
				onDone();
			}
		}
	}
	,addAnnotData: function(annotData,annotation,option,callback) {
		var i;
		var mapResults = new haxe.ds.StringMap();
		var j = 0;
		var target;
		var _g1 = 0;
		var _g = annotData.length;
		while(_g1 < _g) {
			var i1 = _g1++;
			if(annotation == 1) {
				var aux = annotData[i1].pmid_list;
				var aux2 = aux.split(";");
				var max = aux2.length;
				var v = this.annotations[1].fromresults[1];
				if(max > v || this.annotations[1].fromresults[1] == null) {
					this.annotations[1].fromresults[1] = max;
				}
			}
			target = Std.string(annotData[i1].target_id) + "_" + j;
			while(mapResults.exists(target)) {
				++j;
				target = Std.string(annotData[i1].target_id) + "_" + j;
			}
			j = 0;
			mapResults.set(target,annotData[i1]);
		}
		var items = [];
		var _g11 = 0;
		var _g2 = this.rootNode.targets.length;
		while(_g11 < _g2) {
			var i2 = _g11++;
			items[i2] = this.rootNode.targets[i2];
		}
		this.processFamilyAnnotations(items,mapResults,annotation,option,callback);
		var cookies = Cookies;
		var cookie = cookies.getJSON("annot-icons-tip");
		if(cookie == null) {
			var dialog = new phylo.PhyloTooltipWidget(js.Browser.get_document().body,"Click on icons on the tree for more details","Tooltip");
		}
	}
	,showScreenData: function(active,data,mx,my) {
		if(this.canvas == null) {
			return;
		}
		if(active == false) {
			var mxx = mx + "px";
			var myy = my + "px";
			if(data.created == false) {
				var container = saturn.client.WorkspaceApplication.getApplication().getSingleAppContainer();
				container.hideExportSubMenu();
				container.hideHelpingDiv();
				container.hideSubMenuToolBar();
				data.divAccessed = false;
				if(this.annotations[data.annotation.type].hasClass != null && this.annotations[data.annotation.type].divMethod != null) {
					var hook;
					var clazz;
					var method;
					data.suboption = this.annotations[data.annotation.type].optionSelected[0];
					data.title = this.annotations[data.annotation.type].label;
					data.family = this.treeName;
					clazz = this.annotations[data.annotation.type].hasClass;
					method = this.annotations[data.annotation.type].divMethod;
					hook = Reflect.field(Type.resolveClass(clazz),method);
					hook(data,mxx,myy,this.treeType,function(div) {
						data.created = true;
						data.div = div;
						var nn = "";
						if(data.target != data.targetClean) {
							if(data.target.indexOf("(") != -1 || data.target.indexOf("-") != -1) {
								var auxArray = data.target.split("");
								var j;
								var _g1 = 0;
								var _g = auxArray.length;
								while(_g1 < _g) {
									var j1 = _g1++;
									if(auxArray[j1] == "(" || auxArray[j1] == "-") {
										nn = auxArray[j1 + 1];
										break;
									}
								}
							}
						}
						if(data.annotation.type == 4) {
							if(data.annotation.text.indexOf(".") != -1) {
								var auxArray1 = data.annotation.text.split("");
								var j2;
								var naux = "";
								var _g11 = 0;
								var _g2 = auxArray1.length;
								while(_g11 < _g2) {
									var j3 = _g11++;
									if(auxArray1[j3] != ".") {
										naux += auxArray1[j3];
									}
								}
								nn += naux;
							} else if(data.annotation.text.indexOf("/") != -1) {
								var auxArray2 = data.annotation.text.split("");
								var j4;
								var naux1 = "";
								var _g12 = 0;
								var _g3 = auxArray2.length;
								while(_g12 < _g3) {
									var j5 = _g12++;
									if(auxArray2[j5] != "/") {
										naux1 += auxArray2[j5];
									}
								}
								nn += naux1;
							} else {
								nn += data.annotation.text;
							}
						}
						var nom = "";
						if(data.targetClean.indexOf("/") != -1) {
							var auxArray3 = data.targetClean.split("");
							var j6;
							var _g13 = 0;
							var _g4 = auxArray3.length;
							while(_g13 < _g4) {
								var j7 = _g13++;
								if(auxArray3[j7] != "/") {
									nom += auxArray3[j7];
								}
							}
						} else {
							nom = data.targetClean;
						}
						var id = data.annotation.type + "-" + nom + nn;
						container.showAnnotWindow(div,mx,my,data.title,id,data);
					});
				}
			}
		} else if(this.rootNode.divactive != 99999) {
			if(this.rootNode.screen[this.rootNode.divactive] != null) {
				this.rootNode.screen[this.rootNode.divactive].created = false;
			}
			this.rootNode.divactive = 99999;
		}
	}
	,closeHelpingDiv: function() {
		var container = saturn.client.WorkspaceApplication.getApplication().getSingleAppContainer();
		var i = 0;
		var _g = 0;
		while(_g < 300000000) {
			var i1 = _g++;
		}
		if(container.hideHelp == true) {
			container.hideHelpingDiv();
		}
	}
	,prepareHelpingDiv: function(e,text) {
		var h = e.ownerCt.y - e.ownerCt.ownerCt.el.dom.scrollTop;
		var container = saturn.client.WorkspaceApplication.getApplication().getSingleAppContainer();
		container.hideHelp = true;
		container.clearHelpingDiv();
		container.addHtmlTextHelpingDiv(text);
		container.setTopHelpingDiv(h);
		container.showHelpingDiv();
	}
	,closeAnnotWindows: function() {
		var app = saturn.client.WorkspaceApplication.getApplication();
		if(app != null) {
			var container = app.getSingleAppContainer();
			var annotWindow = container.annotWindow;
			var key;
			var numWindows = 0;
			var key1 = annotWindow.keys();
			while(key1.hasNext()) {
				var key2 = key1.next();
				++numWindows;
			}
			if(numWindows > 1) {
				saturn.client.WorkspaceApplication.getApplication().userPrompt("Question","You have popup windows opened. Do you want to close them?",function() {
					container.removeAnnotWindows();
				});
			} else if(numWindows == 1) {
				container.removeAnnotWindows();
			}
		}
	}
	,changeDefaultOption: function(newDef,groupBtn,btn) {
		this.jsonFile.btnGroup[groupBtn].buttons[btn].optionSelected[0] = newDef;
		var currentAnnot = this.jsonFile.btnGroup[groupBtn].buttons[btn].annotCode;
		var u = this.annotations[currentAnnot].optionSelected[0];
		if(u != newDef) {
			var alias = this.annotations[currentAnnot].options[u];
			if(this.alreadyGotAnnotation.exists(alias) == true) {
				this.alreadyGotAnnotation.remove(alias);
			}
		}
		this.annotations[this.jsonFile.btnGroup[groupBtn].buttons[btn].annotCode].optionSelected[0] = newDef;
		return true;
	}
	,getTreeName: function() {
		return this.treeName + "_" + this.treeType;
	}
	,hideAnnotationWindows: function() {
		var app = saturn.client.WorkspaceApplication.getApplication();
		if(app != null) {
			var container = app.getSingleAppContainer();
			if(container != null) {
				container.hideExportSubMenu();
				container.hideHelpingDiv();
				if(saturn.client.WorkspaceApplication.getApplication().getScreenMode() != saturn.client.ScreenMode.DEFAULT) {
					container.hideSubMenuToolBar();
				}
			}
		}
	}
	,__class__: saturn.client.programs.chromohub.ChromoHubAnnotationManager
});
saturn.client.workspace.ChromoHubWorkspaceObject = $hxClasses["saturn.client.workspace.ChromoHubWorkspaceObject"] = function(object,name) {
	this.standaloneMode = false;
	this.newickStr = null;
	if(object == null) {
		object = new saturn.core.domain.Alignment();
	}
	if(name == null) {
		name = "Phylogenetic tree";
	}
	this.iconPath = "/static/js/images/tree_16.png";
	saturn.client.workspace.WorkspaceObjectBase.call(this,object,name);
};
saturn.client.workspace.ChromoHubWorkspaceObject.__name__ = ["saturn","client","workspace","ChromoHubWorkspaceObject"];
saturn.client.workspace.ChromoHubWorkspaceObject.getNewMenuText = function() {
	return "Phylogenetic tree";
};
saturn.client.workspace.ChromoHubWorkspaceObject.getDefaultFolderName = function() {
	return "Trees";
};
saturn.client.workspace.ChromoHubWorkspaceObject.__super__ = saturn.client.workspace.WorkspaceObjectBase;
saturn.client.workspace.ChromoHubWorkspaceObject.prototype = $extend(saturn.client.workspace.WorkspaceObjectBase.prototype,{
	newickStr: null
	,standaloneMode: null
	,__class__: saturn.client.workspace.ChromoHubWorkspaceObject
});
saturn.client.programs.chromohub.ChromoHubViewer = $hxClasses["saturn.client.programs.chromohub.ChromoHubViewer"] = function() {
	this.currentWedgeColour = null;
	this.enableColourAdjustWedge = false;
	this.config = new phylo.PhyloCanvasConfiguration();
	this.drawingMode = saturn.client.programs.chromohub.ChromoHubDrawingMode.CIRCULAR;
	this.subtreeName = null;
	this.enableColourAdjust = false;
	this.currentAdjustmentColour = null;
	this.enableEditMode = true;
	this.standaloneMode = false;
	this.tipOfDay = true;
	this.recovered = false;
	this.userDomainMessage = true;
	this.userMessage = true;
	this.scale = 1.0;
	this.tipActive = 0;
	this.newickStr = "";
	saturn.client.programs.SimpleExtJSProgram.call(this);
};
saturn.client.programs.chromohub.ChromoHubViewer.__name__ = ["saturn","client","programs","chromohub","ChromoHubViewer"];
saturn.client.programs.chromohub.ChromoHubViewer.getQuickLaunchItems = function() {
	return [{ iconCls : "x-btn-tree", html : "Phylogenetic<br/>ViewerA", cls : "quickLaunchButton", handler : function() {
		saturn.client.WorkspaceApplication.getApplication().getWorkspace().addObject(new saturn.client.workspace.ChromoHubWorkspaceObject(new saturn.core.domain.Alignment(),"Tree"),true);
	}, tooltip : { dismissDelay : 10000, text : "Generate a phylogenetic tree from DNA or Protein sequences"}}];
};
saturn.client.programs.chromohub.ChromoHubViewer.__super__ = saturn.client.programs.SimpleExtJSProgram;
saturn.client.programs.chromohub.ChromoHubViewer.prototype = $extend(saturn.client.programs.SimpleExtJSProgram.prototype,{
	rootNode: null
	,theComponent: null
	,radialR: null
	,internalFrameId: null
	,currentView: null
	,canvas: null
	,dom: null
	,newickStr: null
	,geneMap: null
	,viewOptionsActive: null
	,controlToolsActive: null
	,tableActive: null
	,jsonTipsFile: null
	,tableAnnot: null
	,baseTable: null
	,tips: null
	,tipActive: null
	,treeName: null
	,scale: null
	,userMessage: null
	,userDomainMessage: null
	,treeType: null
	,centralTargetPanel: null
	,undolist: null
	,updatedlist: null
	,recovered: null
	,tipOfDay: null
	,standaloneMode: null
	,singleAppContainer: null
	,enableEditMode: null
	,currentAdjustmentColour: null
	,enableColourAdjust: null
	,subtreeName: null
	,drawingMode: null
	,config: null
	,enableColourAdjustWedge: null
	,currentWedgeColour: null
	,annotationManager: null
	,emptyInit: function() {
		var _gthis = this;
		saturn.client.programs.SimpleExtJSProgram.prototype.emptyInit.call(this);
		this.annotationManager = new saturn.client.programs.chromohub.ChromoHubAnnotationManager(this);
		this.config.enableTools = true;
		this.config.enableZoom = true;
		this.config.enableToolbar = true;
		this.undolist = [];
		this.updatedlist = [];
		this.config.highlightedGenes = new haxe.ds.StringMap();
		this.geneMap = new haxe.ds.StringMap();
		this.treeType = "domain";
		this.annotationManager.treeType = this.treeType;
		this.treeName = "";
		this.annotationManager.treeName = this.treeName;
		this.rootNode = null;
		this.getJSonViewOptions();
		this.internalFrameId = "INTERNAL_ALN_FRAME";
		var self = this;
		this.theComponent = Ext.create("Ext.panel.Panel",{ flex : 1, title : "ChromoHub Viewer", simpleDrag : true, width : "100%", height : "100%", region : "center", layout : "fit", items : [{ xtype : "component", itemId : this.internalFrameId, autoEl : { tag : "div"}, height : "100%", autoScroll : true, width : "100%"}], listeners : { "afterrender" : function() {
			self.initialiseDOMComponent();
		}, "render" : $bind(this,this.afterRender), "resize" : function() {
			_gthis.redraw();
		}}, cls : "x-tree-background"});
		this.registerDropFolder("Sequences",saturn.client.workspace.WorkspaceObject,true);
	}
	,afterRender: function(panel) {
		var moving = "No";
		var leaving = false;
		var current_x;
		var current_y;
		var current_mx;
		var current_my;
		var new_x;
		var new_y;
		var new_mx;
		var new_my;
	}
	,newposition: function(new_x,new_y) {
		this.canvas.newPosition(new_x,new_y);
		return;
	}
	,redraw: function() {
		if(this.canvas == null) {
			return;
		} else {
			this.canvas.redraw();
		}
	}
	,setTreeFromNewickStr: function(myNewickStr) {
		if(myNewickStr == "" || myNewickStr == null) {
			return;
		}
		this.getObject().newickStr = myNewickStr;
		this.newickStr = myNewickStr;
		var parent = this.theComponent.down("component").getEl().dom;
		this.canvas = phylo.PhyloUtil.drawRadialFromNewick(this.newickStr,parent,this.config,this.annotationManager);
		this.rootNode = this.canvas.rootNode;
	}
	,checkAnnotationJSonData: function() {
		var a = this.getApplication();
		var atLeastOneBtn = false;
		var i = 0;
		var j = 0;
		var z = 0;
		var codesUsed;
		var codesUsed1;
		var namesUsed;
		var m = saturn.client.WorkspaceApplication.getApplication();
		codesUsed1 = new haxe.ds.IntMap();
		namesUsed = new haxe.ds.StringMap();
		if(this.annotationManager.jsonFile.btnGroup.length == 0) {
			a.debug("No buttons groups defined in JSON File");
			m.showMessage("Alert","Annotations JSon file is not correct.");
			return false;
		}
		while(i < this.annotationManager.jsonFile.btnGroup.length) {
			j = 0;
			while(j < this.annotationManager.jsonFile.btnGroup[i].buttons.length) {
				atLeastOneBtn = true;
				var btn = this.annotationManager.jsonFile.btnGroup[i].buttons[j];
				if(btn.isTitle == false) {
					if(btn.annotCode == null) {
						a.debug("Annotation without Code assigned");
						m.showMessage("Alert","Annotations JSon file is not correct.");
						return false;
					}
					if(codesUsed1.exists(btn.annotCode)) {
						a.debug("Annotation Code already used");
						m.showMessage("Alert","Annotations JSon file is not correct.");
						return false;
					} else {
						codesUsed1.set(btn.annotCode,true);
					}
					if(btn.label == null) {
						a.debug("Annotation without Name/Label");
						m.showMessage("Alert","Annotations JSon file is not correct.");
						return false;
					}
					if(namesUsed.exists(btn.label)) {
						a.debug("Annotation Name already used");
						m.showMessage("Alert","Annotations JSon file is not correct.");
						return false;
					} else {
						namesUsed.set(btn.label,true);
					}
					if(btn.shape == null) {
						a.debug("Annotation without assigned SHAPE");
						m.showMessage("Alert","Annotations JSon file is not correct.");
						return false;
					}
					if(btn.shape != "image" && btn.shape != "text" && btn.shape != "cercle" && btn.shape != "square" && btn.shape != "html") {
						a.debug("Annotation SHAPE is not supported");
						m.showMessage("Alert","Annotations JSon file is not correct.");
						return false;
					}
					if(btn.shape == "image" && btn.annotImg == null) {
						a.debug("Annotation img path not specified");
						m.showMessage("Alert","Annotations JSon file is not correct.");
						return false;
					}
					if(btn.shape != "image" && btn.color == null) {
						a.debug("Annotation color not specified");
						m.showMessage("Alert","Annotations JSon file is not correct.");
						return false;
					}
					if(btn.hookName == null) {
						a.debug("Annotation mysql alias not specified");
						m.showMessage("Alert","Annotations JSon file is not correct.");
						return false;
					}
					if((btn.hasMethod != null || btn.divMethod != null || btn.familyMethod != "") && btn.hasClass == null) {
						a.debug("Annotation hasClass needed and not specified");
						m.showMessage("Alert","Annotations JSon file is not correct.");
						return false;
					}
					if(btn.options != null && btn.options.length > 0) {
						btn.submenu = true;
						var optsel = 10000;
						var z1 = 0;
					}
				}
				++j;
			}
			++i;
		}
		if(atLeastOneBtn == false) {
			a.debug("No buttons defined in JSON File");
			m.showMessage("Alert","Annotations JSon file is not correct.");
			return false;
		} else {
			return true;
		}
	}
	,fillTipswithJSonData: function() {
		var i = 0;
		var j = 0;
		var z = 0;
		this.tipActive = this.jsonTipsFile.active;
		this.tips = [];
		var b = 0;
		var _g1 = 0;
		var _g = this.jsonTipsFile.tips.length;
		while(_g1 < _g) {
			var i1 = _g1++;
			this.tips.push({ position : this.jsonTipsFile.tips[i1].position, title : this.jsonTipsFile.tips[i1].title, html : this.jsonTipsFile.tips[i1].html});
		}
	}
	,updateLegend: function(bntJson,activate) {
		var currentAnnot = bntJson.annotCode;
		if(this.annotationManager.annotations[currentAnnot].legend != "") {
			if(activate == false) {
				this.getApplication().getSingleAppContainer().addImageToLegend(this.annotationManager.annotations[currentAnnot].legend,currentAnnot);
			} else {
				this.getApplication().getSingleAppContainer().removeComponentFromLegend(currentAnnot);
			}
		}
	}
	,zoomIn: function(activeAnnotation) {
		if(this.standaloneMode) {
			var container = this.getApplication().getSingleAppContainer();
			this.annotationManager.closeAnnotWindows();
			container.hideHelpingDiv();
		}
		this.canvas.zoomIn();
		this.newposition(0,0);
	}
	,adviseUser: function(b) {
		this.userMessage = b;
	}
	,adviseDomainUser: function(b) {
		this.userDomainMessage = b;
	}
	,zoomOut: function(activeAnnotation) {
		if(this.standaloneMode) {
			var container = this.getApplication().getSingleAppContainer();
			container.hideHelpingDiv();
			this.annotationManager.closeAnnotWindows();
		}
		this.canvas.zoomOut();
		this.newposition(0,0);
	}
	,setTitle: function(title) {
		this.theComponent.setTitle(title);
	}
	,getComponent: function() {
		return this.theComponent;
	}
	,getRawComponent: function() {
		return this.theComponent;
	}
	,onFocus: function() {
		saturn.client.programs.SimpleExtJSProgram.prototype.onFocus.call(this);
		if(this.standaloneMode) {
			this.chromohubOnFocus();
		} else {
			this.treeViewInterface();
		}
	}
	,addCanvasButton: function(button) {
		if(this.standaloneMode) {
			this.getApplication().getSingleAppContainer().addComponentToCentralPanel(button);
		} else {
			this.getApplication().getToolBar().add(button);
		}
	}
	,chromohubOnFocus: function() {
		var _gthis = this;
		if(this.annotationManager.jsonFile != null) {
			var res = this.checkAnnotationJSonData();
			if(res == false) {
				saturn.client.WorkspaceApplication.getApplication().showMessage("Alert","Annotations JSon file is not correct.");
				return;
			} else {
				this.annotationManager.fillAnnotationwithJSonData();
			}
			this.fillTipswithJSonData();
		}
		var obj = this.getActiveObject(saturn.client.workspace.ChromoHubWorkspaceObject);
		var container = this.getApplication().getSingleAppContainer();
		if(container == null) {
			return;
		}
		this.getApplication().hideMiddleSouthPanel();
		if(this.standaloneMode) {
			this.currentView = 0;
		} else {
			this.currentView = 1;
		}
		container.createControlToolBar();
		container.addElemToControlToolBar({ iconCls : "x-btn-export-single", handler : function() {
		}, tooltip : { dismissDelay : 10000, text : "Export table as xls"}});
		container.createMessageDomainWindow(this);
		container.hideControlToolBar();
		container.createEditToolBar();
		container.addElemToEditToolBar({ iconCls : "x-btn-undo-single", handler : function() {
		}, tooltip : { dismissDelay : 10000, text : "Undo last action"}});
		container.addElemToEditToolBar({ iconCls : "x-btn-save-single", handler : function() {
			if(_gthis.recovered == true) {
				saturn.client.WorkspaceApplication.getApplication().getProvider().getByNamedQuery("hookDelTree",[{ "domain" : _gthis.subtreeName, "family" : _gthis.treeName}],null,false,function(db_results,error) {
					if(error == null) {
						if(_gthis.undolist.length > 0) {
							var blocks = [];
							var nodelist = new haxe.ds.IntMap();
							var k = 0;
							while(_gthis.undolist.length > 0) {
								k = _gthis.undolist.length - 1;
								var auxpop = _gthis.undolist.pop();
								_gthis.updatedlist[k] = auxpop;
								++k;
								var d = auxpop.data;
								if(nodelist.exists(d.nodeId) == false) {
									var s = { "nodeId" : d.nodeId, "family" : _gthis.subtreeName, "domain" : _gthis.treeType, "nodeX" : auxpop.x, "nodeY" : auxpop.y, "angle" : auxpop.angle, "clock" : auxpop.clock};
									blocks.push(s);
									nodelist.set(d.nodeId,true);
								}
							}
							_gthis.updatedlist = [];
							saturn.client.WorkspaceApplication.getApplication().getProvider().getByNamedQuery("hookUpTree",blocks,null,false,function(db_results1,error1) {
								if(error1 == null) {
									_gthis.getApplication().showMessage("Message","Your changes have been saved.");
									_gthis.undolist = [];
									_gthis.updatedlist = [];
									_gthis.recovered = false;
									_gthis.config.editmode = false;
									container.removeComponentFromEditToolBar("recover");
									container.hideEditToolBar();
									_gthis.undolist = [];
									if(_gthis.viewOptionsActive == false) {
										_gthis.viewOptionsActive = true;
										container.showOptionsToolBar();
									} else {
										_gthis.viewOptionsActive = false;
										container.hideOptionsToolBar();
										container.hideSubMenuToolBar();
										if(_gthis.controlToolsActive == true) {
											container.showControlToolBar();
										}
									}
									_gthis.newposition(0,0);
								} else {
									saturn.client.WorkspaceApplication.getApplication().debug(error1);
								}
							});
						} else {
							_gthis.getApplication().showMessage("Message","Your changes have been saved.");
							_gthis.undolist = [];
							_gthis.recovered = false;
							_gthis.config.editmode = false;
							container.removeComponentFromEditToolBar("recover");
							container.hideEditToolBar();
							_gthis.undolist = [];
							_gthis.updatedlist = [];
							if(_gthis.viewOptionsActive == false) {
								_gthis.viewOptionsActive = true;
								container.showOptionsToolBar();
							} else {
								_gthis.viewOptionsActive = false;
								container.hideOptionsToolBar();
								container.hideSubMenuToolBar();
								if(_gthis.controlToolsActive == true) {
									container.showControlToolBar();
								}
							}
							_gthis.newposition(0,0);
						}
					} else {
						saturn.client.WorkspaceApplication.getApplication().debug(error);
					}
				});
			} else if(_gthis.undolist.length > 0) {
				var blocks1 = [];
				var nodelist1 = new haxe.ds.IntMap();
				var k1 = 0;
				while(_gthis.undolist.length > 0) {
					k1 = _gthis.undolist.length - 1;
					var auxpop1 = _gthis.undolist.pop();
					_gthis.updatedlist[k1] = auxpop1;
					++k1;
					var d1 = auxpop1.data;
					if(nodelist1.exists(d1.nodeId) == false) {
						var s1 = { "nodeId" : d1.nodeId, "family" : _gthis.treeName, "domain" : _gthis.treeType, "nodeX" : auxpop1.x, "nodeY" : auxpop1.y, "angle" : auxpop1.angle, "clock" : auxpop1.clock};
						blocks1.push(s1);
						nodelist1.set(d1.nodeId,true);
					}
				}
				saturn.client.WorkspaceApplication.getApplication().getProvider().getByNamedQuery("hookUpTree",blocks1,null,false,function(db_results2,error2) {
					if(error2 == null) {
						_gthis.getApplication().showMessage("Message","Your changes have been saved.");
						_gthis.undolist = [];
						_gthis.recovered = false;
						_gthis.config.editmode = false;
						container.hideEditToolBar();
						_gthis.undolist = [];
						if(_gthis.viewOptionsActive == false) {
							_gthis.viewOptionsActive = true;
							container.showOptionsToolBar();
						} else {
							_gthis.viewOptionsActive = false;
							container.hideOptionsToolBar();
							container.hideSubMenuToolBar();
							container.hideExportSubMenu();
							container.hideHelpingDiv();
							if(_gthis.controlToolsActive == true) {
								container.showControlToolBar();
							}
						}
						_gthis.newposition(0,0);
					} else {
						saturn.client.WorkspaceApplication.getApplication().debug(error2);
					}
				});
			}
		}, tooltip : { dismissDelay : 10000, text : "Save Tree"}});
		this.config.editmode = false;
		container.hideEditToolBar();
		this.undolist = [];
		container.createOptionsToolBar();
		container.hideOptionsToolBar();
		container.createSubMenuToolBar();
		container.createHelpingDiv();
		container.createExportSubMenu(this);
		container.hideSubMenuToolBar();
		container.hideExportSubMenu();
		container.hideHelpingDiv();
		container.createPopUpWindow();
		container.hidePopUpWindow();
		var mapFam = new haxe.ds.StringMap();
		this.createBtnsForLandingPage(true,mapFam);
		this.createTargetCentralPanel();
		container.addComponentToCentralPanel(this.centralTargetPanel);
		var modeToolBar = container.getModeToolBar();
		this.addBtnsToMainToolBar(false);
		var cookies = Cookies;
		var cookie = cookies.getJSON("tipday");
		if(cookie == null) {
			this.showTipOfTheDay();
		}
	}
	,refreshOptionsToolBar: function(active) {
		var container = this.getApplication().getSingleAppContainer();
		container.updateOptionsToolBar(active);
	}
	,addControlBtnsToCentralPanel: function() {
		var _gthis = this;
		if(this.standaloneMode) {
			var text;
			if(this.treeType == "domain") {
				text = " tree based on alignment of the " + this.treeName + " domain";
			} else {
				text = " tree based on alignment of full-length proteins";
			}
			if(this.treeName != null) {
				text = this.treeName + text;
			}
			this.config.title = text;
			var container = this.getApplication().getSingleAppContainer();
		} else {
			this.addCanvasButton({ iconCls : "x-btn-export", text : "Export SVG", handler : function() {
				_gthis.exportSVG();
			}, tooltip : { dismissDelay : 10000, text : "Export tree as SVG (open in Illustrator or Inkscape)"}});
			this.addCanvasButton({ iconCls : "x-btn-export", text : "Export PNG", handler : function() {
				_gthis.exportPNG();
			}, tooltip : { dismissDelay : 10000, text : "Export tree as PNG"}});
			this.addCanvasButton({ iconCls : "x-btn-copy", text : "Update", handler : function() {
				_gthis.updateAlignment();
			}, tooltip : { dismissDelay : 10000, text : "Update tree with current sequences"}});
			this.addCanvasButton({ iconCls : "x-btn-copy", text : "Import Protein", handler : function() {
				_gthis.addAllProteinSequencesFromWorkspace();
			}, tooltip : { dismissDelay : 10000, text : "Import all protein sequences from the workspace (click update to update tree)"}});
			this.addCanvasButton({ iconCls : "x-btn-copy", text : "Import DNA", handler : function() {
				_gthis.addAllDNASequencesFromWorkspace();
			}, tooltip : { dismissDelay : 10000, text : "Import all DNA sequences from the workspace (click update to update tree)"}});
			this.addCanvasButton({ cls : "x-btn-magplus", xtype : "button", handler : function() {
				_gthis.zoomIn(_gthis.annotationManager.activeAnnotation);
			}, tooltip : { dismissDelay : 10000, text : "Zoom in on tree"}});
			this.addCanvasButton({ cls : "x-btn-magminus", xtype : "button", handler : function() {
				_gthis.zoomOut(_gthis.annotationManager.activeAnnotation);
			}, tooltip : { dismissDelay : 10000, text : "Zoom out of tree"}});
		}
	}
	,redrawTree: function() {
		this.setTreeFromNewickStr(this.newickStr);
	}
	,updateAlignment: function() {
		var _gthis = this;
		var self = this;
		var objectIds = this.getState().getReferences("Sequences");
		var strBuf = new StringBuf();
		var _g = 0;
		while(_g < objectIds.length) {
			var objectId = objectIds[_g];
			++_g;
			var w0 = this.getWorkspace().getObject(objectId);
			if(Std["is"](w0,saturn.client.workspace.DNAWorkspaceObject)) {
				var object = this.getWorkspace().getObjectSafely(objectId,saturn.client.workspace.DNAWorkspaceObject);
				strBuf.add(">" + w0.getName() + "\n" + object.getObject().getSequence() + "\n");
			} else if(Std["is"](w0,saturn.client.workspace.ProteinWorkspaceObject)) {
				var object1 = js.Boot.__cast(w0 , saturn.client.workspace.ProteinWorkspaceObject);
				strBuf.add(">" + w0.getName() + "\n" + object1.getObject().getSequence() + "\n");
			} else {
				var d = w0;
				strBuf.add(">" + Std.string(d.getName()) + "\n" + Std.string(d.getSequence()) + "\n");
			}
		}
		saturn.client.BioinformaticsServicesClient.getClient().sendPhyloReportRequest(strBuf.toString(),function(response,error) {
			if(error == null) {
				var phyloReport = response.json.phyloReport;
				var location = js.Browser.get_window().location;
				var dstURL = location.protocol + "//" + location.hostname + ":" + location.port + "/" + phyloReport;
				Ext.Ajax.request({ url : dstURL, success : function(response1,opts) {
					var obj = response1.responseText;
					self.setTreeFromNewickStr(obj);
				}, failure : function(response2,opts1) {
				}});
			} else {
				_gthis.getApplication().showMessage("Tree generation error",error);
			}
		});
	}
	,addAllDNASequencesFromWorkspace: function() {
		this.registerAllFromWorkspace(saturn.client.workspace.DNAWorkspaceObject,"Sequences");
	}
	,addAllProteinSequencesFromWorkspace: function() {
		this.registerAllFromWorkspace(saturn.client.workspace.ProteinWorkspaceObject,"Sequences");
	}
	,treeViewInterface: function() {
		var container = this.getApplication().getSingleAppContainer();
		if(!this.standaloneMode || this.currentView != 1) {
			if(this.standaloneMode && this.treeName == "" && this.newickStr == "") {
				if(this.currentView == 0) {
					this.getApplication().showMessage("Alert","Please select a family");
				} else if(this.currentView == 2) {
					saturn.client.WorkspaceApplication.getApplication().showMessage("Alert","This functionality is not available. Please select a family domain from Home page.");
				}
				return false;
			} else {
				this.currentView = 1;
				if(this.standaloneMode) {
					if(this.canvas != null) {
						this.canvas.destroy();
						this.canvas = null;
					}
					container.setCentralComponent(this.theComponent);
					this.theComponent.doLayout();
					if($bind(container,container.getControlToolBar) != null) {
						container.hideControlToolBar();
					}
					this.viewOptionsActive = true;
					var modeToolBar = container.getModeToolBar();
					container.clearModeToolBar();
					this.addBtnsToMainToolBar(false);
					if($bind(container,container.getOptionsToolBar) != null) {
						this.annotationManager.createViewOptions();
						container.clearOptionsToolBar();
						container.addElemToOptionsToolBar(this.annotationManager.viewOptions);
						container.optionsToolBar.doLayout();
						container.showOptionsToolBar();
					}
					container.legendPanel = null;
					container.createLegendPanel();
					var i;
					var needToExpandLegend = false;
					var _g1 = 0;
					var _g = this.annotationManager.activeAnnotation.length;
					while(_g1 < _g) {
						var i1 = _g1++;
						if(this.annotationManager.activeAnnotation[i1] == true) {
							needToExpandLegend = true;
							container.addImageToLegend(this.annotationManager.annotations[i1].legend,i1);
						}
					}
					if(needToExpandLegend == true) {
						container.legendPanel.expand();
					}
				}
				this.addControlBtnsToCentralPanel();
				if(this.standaloneMode) {
					this.theComponent.doLayout();
				}
				return true;
			}
		} else if(this.config.editmode == true) {
			return true;
		} else {
			return false;
		}
	}
	,renderTable: function() {
		if(!this.standaloneMode) {
			return;
		}
		var container = this.getApplication().getSingleAppContainer();
		this.config.editmode = false;
		container.hideEditToolBar();
		this.undolist = [];
		this.currentView = 2;
		if(this.canvas != null) {
			this.canvas.destroy();
			this.canvas = null;
		}
		container.setCentralComponent(this.theComponent);
		this.theComponent.doLayout();
		container.hideSubMenuToolBar();
		container.hideOptionsToolBar();
		var modeToolBar = container.getModeToolBar();
		container.clearModeToolBar();
		this.addBtnsToMainToolBar(true);
		this.generateAnnotTable();
	}
	,tableViewFunction: function() {
		var container = this.getApplication().getSingleAppContainer();
		container.hideExportSubMenu();
		container.hideHelpingDiv();
		this.annotationManager.closeAnnotWindows();
		if(this.currentView != 2) {
			if(this.annotationManager.annotations[1] != null && this.annotationManager.annotations[1].fromresults != null) {
				this.annotationManager.annotations[1].fromresults[1] = 0;
			}
			if(this.treeName == "") {
				if(this.annotationManager.searchedGenes.length == 0) {
					saturn.client.WorkspaceApplication.getApplication().showMessage("Alert","Use the search box on your righ to add genes.");
				} else {
					this.renderTable();
				}
			} else {
				var keepgoing = false;
				if(this.config.editmode == true) {
					if(this.undolist.length > 0) {
						saturn.client.WorkspaceApplication.getApplication().userPrompt("Question","You are going to lose your changes. Do you want to continue?",$bind(this,this.renderTable));
					} else {
						keepgoing = true;
					}
				} else {
					keepgoing = true;
				}
				if(keepgoing == true) {
					container.showProgressBar();
					this.renderTable();
				}
			}
		} else {
			this.generateAnnotTable();
		}
	}
	,generateAnnotTable: function() {
		var _gthis = this;
		if(!this.standaloneMode) {
			return;
		}
		this.currentView = 2;
		var type = "";
		if(this.treeName == "" || this.newickStr == "") {
			type = "genes";
		} else {
			type = "family";
		}
		var d = [];
		var ti = 0;
		this.annotationManager.fillInDataInAnnotTable(type,function(d1,error) {
			if(error != null) {
				saturn.core.Util.debug("An error has occurred");
			}
			if(d1 != null) {
				_gthis.tableAnnot = new saturn.core.Table();
				_gthis.tableAnnot.setFixedRowHeight(120);
				_gthis.tableAnnot.setData(d1);
				var title = "Annotation Table";
				if(_gthis.treeName != "") {
					title = title + " for " + _gthis.treeName;
				}
				_gthis.tableAnnot.setTitle(title);
				_gthis.tableAnnot.name = "Annotations Table";
				_gthis.baseTable = new saturn.client.programs.blocks.BaseTable(null,null,"Annotations Table",null,false,false);
				_gthis.baseTable.reconfigure(_gthis.tableAnnot.tableDefinition);
				_gthis.baseTable.addListener(function(event) {
					_gthis.annotationManager.closeAnnotWindows();
				});
				var tt = _gthis.baseTable.getComponent();
				tt.addCls("x-tableAnnot");
				var container = _gthis.getApplication().getSingleAppContainer();
				container.setCentralComponent(_gthis.theComponent);
				container.addComponentToCentralPanel(tt);
				_gthis.theComponent.doLayout();
				container.hideProgressBar();
			}
		});
	}
	,rebuildBtns: function(results) {
		var container = this.getApplication().getSingleAppContainer();
		container.setCentralComponent(this.theComponent);
		this.theComponent.doLayout();
		var mapFam = new haxe.ds.StringMap();
		var i;
		var _g1 = 0;
		var _g = results.length;
		while(_g1 < _g) {
			var i1 = _g1++;
			if(mapFam.exists(results[i1].family) == false) {
				mapFam.set(results[i1].family,true);
			}
		}
		this.createBtnsForLandingPage(false,mapFam);
		this.createTargetCentralPanel();
		container.addComponentToCentralPanel(this.centralTargetPanel);
		var centralPanel = container.getCentralPanel();
		centralPanel.doLayout();
	}
	,renderHome: function() {
		var _gthis = this;
		if(!this.standaloneMode) {
			return;
		}
		var container = this.getApplication().getSingleAppContainer();
		container.clearCentralPanel();
		container.hideHelpingDiv();
		var centralPanel = container.getCentralPanel();
		centralPanel.doLayout();
		this.config.editmode = false;
		container.hideEditToolBar();
		this.undolist = [];
		this.currentView = 0;
		var mapFam = new haxe.ds.StringMap();
		this.createBtnsForLandingPage(false,mapFam);
		var itemslist = this.centralTargetPanel.items;
		itemslist.each(function(item,index,length) {
			_gthis.centralTargetPanel.remove(item,false);
		});
		this.centralTargetPanel.doLayout();
		this.treeTypeSelection.doLayout();
		this.createTargetCentralPanel();
		centralPanel.doLayout();
		if(this.canvas != null) {
			this.canvas.destroy();
			this.canvas = null;
		}
		container.setCentralComponent(this.theComponent);
		this.theComponent.doLayout();
		container.hideExportSubMenu();
		if($bind(container,container.getOptionsToolBar) != null) {
			container.hideOptionsToolBar();
		}
		if($bind(container,container.getSubMenuToolBar) != null) {
			container.hideSubMenuToolBar();
		}
		if($bind(container,container.getControlToolBar) != null) {
			container.hideControlToolBar();
		}
		var modeToolBar = container.getModeToolBar();
		container.clearModeToolBar();
		this.addBtnsToMainToolBar(false);
		container.addComponentToCentralPanel(this.centralTargetPanel);
		centralPanel.doLayout();
	}
	,showTipOfTheDay: function() {
		if(this.tips == null || this.tips.length == 0) {
			return;
		}
		var container = this.getApplication().getSingleAppContainer();
		var mydom = js.Browser.get_document().childNodes[0];
		var top;
		var left;
		var width;
		var height;
		var w = mydom.clientWidth;
		width = Std["int"](w * 0.6);
		left = Std["int"](w * 0.2);
		var h = mydom.clientHeight;
		height = Std["int"](h);
		top = Std["int"](h * 0.15);
		if(container.getTipWindow() == null) {
			var title = this.tips[this.tipActive].title;
			var html = this.tips[this.tipActive].html;
			var text = "<h2>" + title + "</h2>" + html;
			container.createTipWindow(this,top,left,width,height,text);
		} else {
			container.showTipWindow();
		}
	}
	,showDemoVideo: function() {
		var container = this.getApplication().getSingleAppContainer();
		var mydom = js.Browser.get_document().childNodes[0];
		var top;
		var left;
		var width;
		var height;
		var w = mydom.clientWidth;
		width = Std["int"](w * 0.7);
		left = Std["int"](w * 0.15);
		var h = mydom.clientHeight;
		height = Std["int"](h);
		top = Std["int"](h * 0.15);
		if(container.getDemoWindow() == null) {
			var html = "<video controls=\"\" height=\"580\" width=\"900\"><source src=\"/static/tips/UbiHub_demo.mov\" type=\"video/mp4\" />Your browser does not support the video tag.</video>";
			var text = html;
			container.createDemoWindow(this,top,left,width,height,text);
		} else {
			container.showDemoWindow();
		}
	}
	,addBtnsToMainToolBar: function(searchField) {
		var _gthis = this;
		if(!this.standaloneMode) {
			return;
		}
		var container = this.getApplication().getSingleAppContainer();
		container.addElemToModeToolBar({ cls : this.currentView == 0 ? "btn-selected" : "", xtype : "button", text : "Home", handler : function() {
			if(_gthis.currentView != 0) {
				var container1 = _gthis.getApplication().getSingleAppContainer();
				container1.hideExportSubMenu();
				container1.hideHelpingDiv();
				_gthis.annotationManager.closeAnnotWindows();
				if(_gthis.annotationManager.annotations[1] != null && _gthis.annotationManager.annotations[1].fromresults != null) {
					_gthis.annotationManager.annotations[1].fromresults[1] = 0;
				}
				var keepgoing = false;
				if(_gthis.config.editmode == true) {
					if(_gthis.undolist.length > 0) {
						saturn.client.WorkspaceApplication.getApplication().userPrompt("Question","You are going to lose your changes. Do you want to continue?",$bind(_gthis,_gthis.renderHome));
					} else {
						keepgoing = true;
					}
				} else {
					keepgoing = true;
				}
				if(keepgoing == true) {
					_gthis.renderHome();
				}
			}
		}, tooltip : { dismissDelay : 10000, text : "Protein Family Selection"}});
		container.addElemToModeToolBar({ cls : this.currentView == 1 ? "btn-selected" : "", xtype : "button", text : "Tree View", handler : function() {
			if(_gthis.treeName == "") {
				if(_gthis.currentView == 0) {
					_gthis.getApplication().showMessage("Alert","Please select a family");
				} else if(_gthis.currentView == 2) {
					saturn.client.WorkspaceApplication.getApplication().showMessage("Alert","This functionality is not available. Please select a family domain from Home page.");
				}
			} else {
				_gthis.annotationManager.menuScroll = 0;
				if(_gthis.annotationManager.annotations[1] != null && _gthis.annotationManager.annotations[1].fromresults != null) {
					_gthis.annotationManager.annotations[1].fromresults[1] = 0;
				}
				_gthis.showTree(_gthis.newickStr);
				var elem = js.Browser.get_document().getElementById("optionToolBarId");
				elem.scrollTop = _gthis.annotationManager.menuScroll;
			}
		}, tooltip : { dismissDelay : 10000, text : "Phylogenetic Viewer"}});
		container.addElemToModeToolBar({ cls : this.currentView == 2 ? "btn-selected" : "", xtype : "button", text : "Annotation Table", handler : $bind(this,this.tableViewFunction), tooltip : { dismissDelay : 10000, text : "Annotation List"}});
		if(searchField == true && this.treeName == "") {
			container.addElemToModeToolBar({ xtype : "label", text : "Add Genes", cls : "addGene-menu-title", handler : function() {
			}, tooltip : { text : "", dismissDelay : 0}, iconCls : ""});
			var searchFieldObj = this.getApplication().getGlobalSearchFieldObj();
			searchFieldObj.setValue("");
			container.addElemToModeToolBar(searchFieldObj);
		}
		container.addElemToModeToolBar({ cls : this.currentView == 3 ? "btn-selected" : "", xtype : "button", text : "Help", handler : function() {
			var keepgoing1 = false;
			var container2 = _gthis.getApplication().getSingleAppContainer();
			container2.hideHelpingDiv();
			if(_gthis.config.editmode == true) {
				if(_gthis.undolist.length > 0) {
					saturn.client.WorkspaceApplication.getApplication().userPrompt("Question","You are going to lose your changes. Do you want to continue?",function() {
						keepgoing1 = false;
						_gthis.config.editmode = false;
						container2.viewClose(true);
						container2.hideEditToolBar();
						_gthis.undolist = [];
						if(_gthis.viewOptionsActive == false) {
							_gthis.viewOptionsActive = true;
							container2.showOptionsToolBar();
						}
						_gthis.newposition(0,0);
					});
				} else {
					keepgoing1 = true;
				}
			} else {
				keepgoing1 = true;
			}
			if(keepgoing1 == true) {
				_gthis.config.editmode = false;
				container2.hideEditToolBar();
				_gthis.undolist = [];
				if(_gthis.viewOptionsActive == false) {
					_gthis.viewOptionsActive = true;
					container2.showOptionsToolBar();
				}
				_gthis.showTipOfTheDay();
			}
		}, tooltip : { dismissDelay : 10000, text : "Help"}});
	}
	,redrawTable: function() {
		var _gthis = this;
		var type = "";
		if(this.treeName == "" || this.newickStr == "") {
			type = "genes";
		} else {
			type = "family";
		}
		var leaves;
		if(type == "family") {
			leaves = this.canvas.rootNode.targets;
		} else {
			leaves = this.annotationManager.searchedGenes;
		}
		var d = this.annotationManager.dataforTable(this.annotationManager.annotations,leaves);
		this.tableAnnot = new saturn.core.Table();
		this.tableAnnot.setFixedRowHeight(120);
		this.tableAnnot.setData(d);
		var title = "Annotation Table";
		if(this.treeName != "") {
			title = title + " for " + this.treeName;
		}
		this.tableAnnot.setTitle(title);
		this.tableAnnot.name = "Annotations Table";
		this.baseTable = new saturn.client.programs.blocks.BaseTable(null,null,"Annotations Table",null,false,false);
		this.baseTable.reconfigure(this.tableAnnot.tableDefinition);
		this.baseTable.addListener(function(event) {
			_gthis.annotationManager.closeAnnotWindows();
		});
		var tt = this.baseTable.getComponent();
		tt.addCls("x-tableAnnot");
		var container = this.getApplication().getSingleAppContainer();
		container.setCentralComponent(this.theComponent);
		container.addComponentToCentralPanel(tt);
		this.theComponent.doLayout();
		container.hideProgressBar();
	}
	,generateFamilyDomainList: function(families) {
		var i;
		var tt = "";
		var _g1 = 0;
		var _g = families.length;
		while(_g1 < _g) {
			var i1 = _g1++;
			tt += "<a id=\"myLink\" title=\"Click to visualize family domain tree\"  href=\"#\" onclick=\"app.getActiveProgram().changeToFamilyDomain('" + Std.string(families[i1].family) + "')\";return false;\">" + Std.string(families[i1].family) + "</a> ";
		}
		return tt;
	}
	,changeToFamilyDomain: function(treeName) {
		var _gthis = this;
		saturn.client.WorkspaceApplication.getApplication().userPrompt("Question","You are going to lose your gene list. Do you want to continue?",function() {
			_gthis.treeName = treeName;
			_gthis.annotationManager.searchedGenes = [];
			_gthis.geneMap = new haxe.ds.StringMap();
			_gthis.generateTree(treeName,_gthis.treeType);
		});
	}
	,myDoLayout: function(el) {
		el.doLayout();
	}
	,createTargetCentralPanel: function() {
		var _gthis = this;
		this.centralTargetPanel = Ext.create("Ext.panel.Panel",{ region : "center", cls : "x-page-targetclass", autoScroll : true, listeners : { resize : { fn : function(el) {
			_gthis.myDoLayout(el);
		}}, render : { fn : function(el1) {
			_gthis.myDoLayout(el1);
		}}}});
		var title = "Search/Add Genes";
		this.centralTargetPanel.add({ xtype : "label", text : title, cls : "searchgene-title", handler : function() {
		}, tooltip : { text : "", dismissDelay : 0}, iconCls : ""});
		var sobj = this.getApplication().getGlobalSearchFieldObj();
		this.centralTargetPanel.add(sobj);
		this.centralTargetPanel.add(this.treeTypeSelection);
		this.centralTargetPanel.add({ xtype : "label", text : "Chemical Modification of Proteins", cls : "targetclass-title"});
		this.centralTargetPanel.add(Ext.create("Ext.panel.Panel",{ width : "100%", layout : "hbox", bodyPadding : "10px 0px", cls : "x-table-targeticons", defaults : { frame : true, bodyPadding : 10}, items : [{ title : "Writers", flex : 3, xtype : "panel", items : this.chmodproWriters},{ title : "Readers", flex : 6, xtype : "panel", items : this.chmodproReaders},{ title : "Erasers", flex : 3, xtype : "panel", items : this.chmodproErasers}]}));
		this.centralTargetPanel.doLayout();
		this.centralTargetPanel.add(Ext.create("Ext.panel.Panel",{ layout : "hbox", cls : "x-table-targetgroup", defaults : { frame : false, bodyPadding : 0}, items : [{ title : "Chemical Modifications of DNA", flex : 4, margin : "0 10 0 0", xtype : "panel", layout : "column", cls : "chmodDRnagroup", items : this.chmodDna},{ title : "Chemical Modifications of RNA", flex : 4, margin : "0 10 0 0", xtype : "panel", layout : "column", cls : "chmodDRnagroup", items : this.chmodRna}]}));
		this.centralTargetPanel.doLayout();
		var items = [{ title : "Chromation Remodelling", flex : 2, margin : "0 10 0 0", xtype : "panel", items : this.chromatin},{ title : "Histones", flex : 1, margin : "0 10 0 0", xtype : "panel", items : this.histones},{ title : "WDR", flex : 1, margin : "0 10 0 0", xtype : "panel", items : this.wdr},{ title : "NUDIX", flex : 3, margin : "0 10 0 0", xtype : "panel", items : this.nudix},{ title : " ", flex : 1, margin : "0 10 0 0", xtype : "panel", cls : "x-target-addmore", items : this.addicon}];
		this.centralTargetPanel.add(Ext.create("Ext.panel.Panel",{ layout : "hbox", bodyPadding : 10, cls : "x-table-targetlasticons", defaults : { frame : false, bodyPadding : "10 10 10 0"}, items : items}));
		this.centralTargetPanel.doLayout();
		this.centralTargetPanel.add({ xtype : "panel", html : "If you find this resource helpful in your research, thank you for citing the following article:<br>\n                   Liu L, Zhen XT, Denton E, Marsden BD, Schapira M., Bioinformatics (2012): <b>ChromoHub: a data hub for navigators of chromatin-mediated signalling</b> <a href=\"http://www.ncbi.nlm.nih.gov/pubmed/22718786\" target=\"_blank\">[pubmed]</a>", cls : "targetclass-citation"});
	}
	,setAlignmentURL: function(alignmentURL) {
		var frame = this.theComponent.getComponent(this.internalFrameId).getEl().dom;
		frame.src = alignmentURL;
		this.getActiveAlignmentObject().setAlignmentURL(alignmentURL);
	}
	,getActiveAlignmentObject: function() {
		var activeObject = saturn.client.programs.SimpleExtJSProgram.prototype.getActiveObject.call(this,saturn.client.workspace.ChromoHubWorkspaceObject);
		if(activeObject != null) {
			var w0 = js.Boot.__cast(activeObject , saturn.client.workspace.ChromoHubWorkspaceObject);
			return w0.getObject();
		} else {
			return null;
		}
	}
	,setActiveObject: function(objectId) {
		saturn.client.programs.SimpleExtJSProgram.prototype.setActiveObject.call(this,objectId);
		this.standaloneMode = this.getObject().standloneMode;
		if(!this.standaloneMode) {
			this.setTreeFromNewickStr(this.getObject().newickStr);
		}
	}
	,exportPNG: function() {
	}
	,exportSVG: function() {
	}
	,getCentralPanelLayout: function() {
		return "hbox";
	}
	,showTree: function(myNewickStr) {
		var _gthis = this;
		var container = null;
		if(this.standaloneMode) {
			container = this.getApplication().getSingleAppContainer();
			container.hideHelpingDiv();
			if(container.getExportSubMenu() != null) {
				container.hideExportSubMenu();
			}
			this.annotationManager.closeAnnotWindows();
		}
		var keepgoing = false;
		if(this.recovered == true) {
			keepgoing = true;
		} else if(this.config.editmode == true) {
			if(this.undolist.length > 0) {
				saturn.client.WorkspaceApplication.getApplication().userPrompt("Question","You are going to lose your changes. Do you want to continue?",function() {
					keepgoing = false;
					_gthis.config.editmode = false;
					if(_gthis.standaloneMode) {
						container.viewClose(true);
						container.hideEditToolBar();
					}
					_gthis.undolist = [];
					if(_gthis.viewOptionsActive == false) {
						_gthis.viewOptionsActive = true;
						if(_gthis.standaloneMode) {
							container.showOptionsToolBar();
						}
					}
					_gthis.annotationManager.activeAnnotation = [];
					var go = _gthis.treeViewInterface();
					if(go == true) {
						var a = _gthis.annotationManager.annotations;
						_gthis.setTreeFromNewickStr(myNewickStr);
						_gthis.rootNode.targetFamily = _gthis.treeName;
					}
					_gthis.newposition(0,0);
					var elem = js.Browser.get_document().getElementById("optionToolBarId");
					elem.scrollTop = _gthis.annotationManager.menuScroll;
				});
			} else {
				keepgoing = true;
			}
		} else {
			keepgoing = true;
		}
		if(keepgoing == true) {
			if(this.recovered == false) {
				this.undolist = [];
				if(this.viewOptionsActive == false) {
					this.viewOptionsActive = true;
					if(this.standaloneMode) {
						container.showOptionsToolBar();
					}
					var elem1 = js.Browser.get_document().getElementById("optionToolBarId");
					elem1.scrollTop = this.annotationManager.menuScroll;
				}
			}
			this.annotationManager.activeAnnotation = [];
			var go1 = this.treeViewInterface();
			if(this.recovered == false) {
				this.config.editmode = false;
				if(this.standaloneMode) {
					container.hideEditToolBar();
				}
			}
			if(go1 == true) {
				var a1 = this.annotationManager.annotations;
				this.setTreeFromNewickStr(myNewickStr);
				if(this.standaloneMode) {
					container.viewClose(true);
				}
				this.rootNode.targetFamily = this.treeName;
			}
			this.newposition(0,0);
			var nav = js.Browser.get_navigator().appName;
			if(this.standaloneMode) {
				var elem2 = js.Browser.get_document().getElementById("optionToolBarId");
				elem2.scrollTop = this.annotationManager.menuScroll;
			}
		}
	}
	,showSearchedGenes: function(targetId) {
		var _gthis = this;
		if(this.currentView == 0) {
			saturn.client.WorkspaceApplication.getApplication().getProvider().getByNamedQuery("getFamilies",{ gene : "%" + targetId + "%"},null,true,function(db_results,error) {
				if(error == null) {
					_gthis.rebuildBtns(db_results);
				} else {
					saturn.client.WorkspaceApplication.getApplication().debug(error);
				}
			});
		}
	}
	,showAddedGenes: function(targetId) {
		this.treeName = "";
		this.annotationManager.treeName = "";
		this.treeType = "gene";
		this.newickStr = "";
		if(this.geneMap.exists(targetId) == true) {
			saturn.client.WorkspaceApplication.getApplication().showMessage("Alert","This gene already exists in the gene list.");
		} else {
			this.annotationManager.searchedGenes[this.annotationManager.searchedGenes.length] = targetId;
			var geneNode = new phylo.PhyloTreeNode(null,targetId,true,0);
			geneNode.l = 1;
			geneNode.annotations = [];
			geneNode.activeAnnotation = [];
			this.geneMap.set(targetId,geneNode);
			if(this.currentView == 0) {
				this.treeName = "";
				this.annotationManager.treeName = "";
				this.tableViewFunction();
			} else if(this.currentView == 2) {
				this.generateAnnotTable();
			}
		}
	}
	,generateTree: function(name,type,subtreeName) {
		var _gthis = this;
		this.annotationManager.treeName = name;
		this.annotationManager.subtreeName = subtreeName;
		this.annotationManager.treeType = this.treeType;
		this.config.drawingMode = phylo.PhyloDrawingMode.CIRCULAR;
		saturn.client.WorkspaceApplication.getApplication().debug(name);
		this.annotationManager.searchedGenes = [];
		this.config.highlightedGenes = new haxe.ds.StringMap();
		this.geneMap = new haxe.ds.StringMap();
		if((name == "KAT" || name == "E1" || name == "E2" || name == "NON_USP" || name == "USP" || name == "Histone" || name == "MACRO" || name == "WDR" || name == "NUDIX") && type == "domain") {
			if(this.userDomainMessage == true) {
				var container = this.getApplication().getSingleAppContainer();
				container.showMessageDomainWindow();
			}
			this.treeType = "gene";
			this.annotationManager.treeType = this.treeType;
			type = this.treeType;
		}
		if(subtreeName == null) {
			subtreeName = name;
		}
		saturn.client.WorkspaceApplication.getApplication().getProvider().getByNamedQuery("getNewickStr",{ family : subtreeName, type : type},null,true,function(db_results,error) {
			if(error == null) {
				if(_gthis.treeName.indexOf("/") != -1) {
					var aux = _gthis.treeName.split("/");
					_gthis.treeName = aux[1];
					_gthis.annotationManager.treeName = _gthis.treeName;
				}
				_gthis.setNewickStr(db_results[0].newickstr);
			} else {
				saturn.client.WorkspaceApplication.getApplication().debug(error);
			}
		});
	}
	,setNewickStr: function(newickStr) {
		var _gthis = this;
		var myNewickStr = newickStr;
		if(myNewickStr == "") {
			saturn.client.WorkspaceApplication.getApplication().debug("newickstr is empty");
		} else {
			this.showTree(myNewickStr);
			if(this.recovered == false && this.treeName != null) {
				saturn.client.WorkspaceApplication.getApplication().getProvider().getByNamedQuery("getTreeUpdates",{ family : this.subtreeName, domain : this.treeType},null,false,function(results,error) {
					if(error == null && results.length != 0) {
						var i = 0;
						var auxlist = [];
						_gthis.updatedlist = [];
						var _g1 = 0;
						var _g = results.length;
						while(_g1 < _g) {
							var i1 = _g1++;
							_gthis.updatedlist.push(results[i1]);
							auxlist.push(results[i1]);
						}
						var j = 0;
						while(auxlist.length > 0) {
							var node;
							var alpha;
							var n;
							var auxpop = auxlist.pop();
							var z = 0;
							var d = null;
							var _g11 = 0;
							var _g2 = _gthis.rootNode.screen.length;
							while(_g11 < _g2) {
								var z1 = _g11++;
								if(_gthis.rootNode.screen[z1].nodeId == auxpop.nodeId) {
									d = _gthis.rootNode.screen[z1];
								}
							}
							node = _gthis.rootNode.nodeIdToNode.get(auxpop.nodeId);
							node.x = auxpop.nodeX;
							node.y = auxpop.nodeY;
							node.angle = auxpop.angle;
							if(auxpop.clock == true) {
								alpha = 0.3;
							} else {
								alpha = -0.3;
							}
							node.x = (node.x - d.parentx) * Math.cos(alpha) - (node.y - d.parenty) * Math.sin(alpha) + d.parentx;
							node.y = (node.x - d.parentx) * Math.sin(alpha) + (node.y - d.parenty) * Math.cos(alpha) + d.parenty;
							node.angle += alpha;
							n = node.angle;
							var i2 = 0;
							while(i2 < node.children.length) {
								node.children[i2].wedge = node.children[i2].l / node.children[i2].root.l * 2 * Math.PI + Math.PI / 20;
								node.children[i2].angle = n;
								n += node.children[i2].wedge;
								if(_gthis.drawingMode == saturn.client.programs.chromohub.ChromoHubDrawingMode.STRAIGHT) {
									node.children[i2].preOrderTraversal2(0);
								} else if(_gthis.drawingMode == saturn.client.programs.chromohub.ChromoHubDrawingMode.CIRCULAR) {
									node.children[i2].preOrderTraversal(0);
								}
								++i2;
							}
							_gthis.newposition(0,0);
						}
					} else if(error != null) {
						saturn.client.WorkspaceApplication.getApplication().debug("Error getting the tree updates from the db: " + error);
					} else {
						saturn.client.WorkspaceApplication.getApplication().debug("No tree updates from the db");
					}
				});
			}
		}
	}
	,treeTypeSelection: null
	,chmodproWriters: null
	,chmodproReaders: null
	,chmodproErasers: null
	,chmodDnaWriters: null
	,chmodDnaReaders: null
	,chmodDnaErasers: null
	,chmodRnaWriters: null
	,chmodRnaReaders: null
	,chmodRnaErasers: null
	,nudix: null
	,chromatin: null
	,histones: null
	,wdr: null
	,addicon: null
	,chmodDna: null
	,chmodRna: null
	,ubiButtons: null
	,createBtnsForLandingPage: function(first,mapFam) {
		var _gthis = this;
		var ge = false;
		var dom = true;
		if(this.treeType != "domain") {
			ge = true;
			dom = false;
		}
		if(first == true) {
			this.treeTypeSelection = null;
			this.treeTypeSelection = Ext.create("Ext.form.Panel",{ bodyPadding : 10, id : "treeTypeCmp", width : 300, items : [{ xtype : "radiogroup", fieldLabel : "View trees based on alignment of", cls : "x-treetype-select", defaults : { flex : 1}, id : "treeType", layout : "hbox", items : [{ boxLabel : "the specified domain", name : "type", inputValue : "domain", id : "domain-radio", checked : dom, handler : function(e) {
				if(e.getValue()) {
					_gthis.treeType = "domain";
					_gthis.annotationManager.treeType = _gthis.treeType;
				}
			}},{ boxLabel : "full-length proteins", name : "type", inputValue : "gene", checked : ge, id : "gene-radio", handler : function(e1) {
				if(e1.getValue()) {
					_gthis.treeType = "gene";
					_gthis.annotationManager.treeType = _gthis.treeType;
				}
			}}], listeners : { change : function(field,newValue,oldValue) {
				_gthis.treeType = newValue.type;
				_gthis.annotationManager.treeType = _gthis.treeType;
				_gthis.renderHome();
			}}}]});
		} else {
			this.treeTypeSelection.items.items[0].items.items[0].setValue(dom);
			this.treeTypeSelection.items.items[0].items.items[1].setValue(ge);
		}
		this.chmodproWriters = [];
		this.chmodproWriters = [{ margin : "0 10 5 0", xtype : "button", cls : mapFam.exists("HMT") == true && this.treeType == "domain" ? "x-btn-target-found x-btn-target-pmt" : mapFam.exists("PMT") == true && this.treeType == "gene" ? "x-btn-target-found x-btn-target-pmt-gene" : mapFam.exists("PMT") == false && this.treeType == "domain" ? "x-btn-target-pmt" : "x-btn-target-pmt-gene", handler : function() {
			_gthis.treeName = "PMT/HMT";
			_gthis.subtreeName = _gthis.treeName;
			_gthis.generateTree(_gthis.treeName,_gthis.treeType);
		}, tooltip : { dismissDelay : 10000, text : "PMT: Methylate lysines"}}];
		if(this.treeType == "domain") {
			this.chmodproWriters.push({ margin : "0 10 5 0", xtype : "button", cls : mapFam.exists("HMT") == true ? "x-btn-target-found x-btn-target-pmt2" : "x-btn-target-pmt2", handler : function() {
				_gthis.treeName = "PMT-2/HMT";
				_gthis.subtreeName = _gthis.treeName;
				_gthis.generateTree(_gthis.treeName,_gthis.treeType);
			}, tooltip : { dismissDelay : 10000, text : "PMT: Methylate lysines"}});
		}
		this.chmodproWriters.push({ margin : "0 10 5 0", xtype : "button", cls : mapFam.exists("KAT") == true && this.treeType == "domain" ? "x-btn-target-found x-btn-target-kat" : mapFam.exists("KAT") == true && this.treeType == "gene" ? "x-btn-target-found x-btn-target-kat-gene" : mapFam.exists("KAT") == false && this.treeType == "domain" ? "x-btn-target-kat" : "x-btn-target-kat-gene", handler : function(e2) {
			_gthis.treeName = "KAT";
			_gthis.subtreeName = _gthis.treeName;
			_gthis.generateTree(_gthis.treeName,_gthis.treeType);
		}, tooltip : { dismissDelay : 10000, text : this.treeType == "gene" ? "KAT: Acetylate lysines" : "There is no domain-based alignment for this family. Select \"full length proteins\" above to see access this tree."}});
		this.chmodproWriters.push({ margin : "0 10 5 0", xtype : "button", cls : mapFam.exists("PARP") == true && this.treeType == "domain" ? "x-btn-target-found x-btn-target-parp" : mapFam.exists("PARP") == true && this.treeType == "gene" ? "x-btn-target-found x-btn-target-parp-gene" : mapFam.exists("PARP") == false && this.treeType == "domain" ? "x-btn-target-parp" : "x-btn-target-parp-gene", handler : function() {
			_gthis.treeName = "PARP";
			_gthis.subtreeName = _gthis.treeName;
			_gthis.generateTree(_gthis.treeName,_gthis.treeType);
		}, tooltip : { dismissDelay : 10000, text : "PARP: ADP - ribosylate proteins"}});
		this.chmodproReaders = [];
		this.chmodproReaders = [{ margin : "0 10 5 0", xtype : "button", cls : mapFam.exists("ADD") == true && this.treeType == "domain" ? "x-btn-target-found x-btn-target-add" : mapFam.exists("ADD") == true && this.treeType == "gene" ? "x-btn-target-found x-btn-target-add-gene" : mapFam.exists("ADD") == false && this.treeType == "domain" ? "x-btn-target-add" : "x-btn-target-add-gene", handler : function() {
			_gthis.treeName = "ADD";
			_gthis.subtreeName = _gthis.treeName;
			_gthis.generateTree(_gthis.treeName,_gthis.treeType);
		}, tooltip : { dismissDelay : 10000, text : "ADD"}},{ margin : "0 10 5 0", xtype : "button", cls : mapFam.exists("BAH") == true && this.treeType == "domain" ? "x-btn-target-found x-btn-target-bah" : mapFam.exists("BAH") == true && this.treeType == "gene" ? "x-btn-target-found x-btn-target-bah-gene" : mapFam.exists("BAH") == false && this.treeType == "domain" ? "x-btn-target-bah" : "x-btn-target-bah-gene", handler : function() {
			_gthis.treeName = "BAH";
			_gthis.subtreeName = _gthis.treeName;
			_gthis.generateTree(_gthis.treeName,_gthis.treeType);
		}, tooltip : { dismissDelay : 10000, text : "BAH: Read methyl-lysines"}},{ margin : "0 10 5 0", xtype : "button", cls : mapFam.exists("BROMO") == true && this.treeType == "domain" ? "x-btn-target-found x-btn-target-bromo" : mapFam.exists("BROMO") == true && this.treeType == "gene" ? "x-btn-target-found x-btn-target-bromo-gene" : mapFam.exists("BROMO") == false && this.treeType == "domain" ? "x-btn-target-bromo" : "x-btn-target-bromo-gene", handler : function() {
			_gthis.treeName = "BROMO";
			_gthis.subtreeName = _gthis.treeName;
			_gthis.generateTree(_gthis.treeName,_gthis.treeType);
		}, tooltip : { dismissDelay : 10000, text : "BROMO: Read Acetyl-lysines"}},{ margin : "0 10 5 0", xtype : "button", cls : mapFam.exists("CW") == true && this.treeType == "domain" ? "x-btn-target-found x-btn-target-cw" : mapFam.exists("CW") == true && this.treeType == "gene" ? "x-btn-target-found x-btn-target-cw-gene" : mapFam.exists("CW") == false && this.treeType == "domain" ? "x-btn-target-cw" : "x-btn-target-cw-gene", handler : function() {
			_gthis.treeName = "CW";
			_gthis.subtreeName = _gthis.treeName;
			_gthis.generateTree(_gthis.treeName,_gthis.treeType);
		}, tooltip : { dismissDelay : 10000, text : "CW: methyl-lysine reader"}},{ margin : "0 10 5 0", xtype : "button", cls : mapFam.exists("CHROMO") == true && this.treeType == "domain" ? "x-btn-target-found x-btn-target-chromo" : mapFam.exists("CHROMO") == true && this.treeType == "gene" ? "x-btn-target-found x-btn-target-chromo-gene" : mapFam.exists("CHROMO") == false && this.treeType == "domain" ? "x-btn-target-chromo" : "x-btn-target-chromo-gene", handler : function() {
			_gthis.treeName = "CHROMO";
			_gthis.subtreeName = _gthis.treeName;
			_gthis.generateTree(_gthis.treeName,_gthis.treeType);
		}, tooltip : { dismissDelay : 10000, text : "CHROMO: Read methyl-lysines"}},{ margin : "0 10 5 0", xtype : "button", cls : mapFam.exists("MACRO") == true && this.treeType == "domain" ? "x-btn-target-found x-btn-target-macro" : mapFam.exists("MACRO") == true && this.treeType == "gene" ? "x-btn-target-found x-btn-target-macro-gene" : mapFam.exists("MACRO") == false && this.treeType == "domain" ? "x-btn-target-macro" : "x-btn-target-macro-gene", handler : function() {
			_gthis.treeName = "MACRO";
			_gthis.subtreeName = _gthis.treeName;
			_gthis.generateTree(_gthis.treeName,_gthis.treeType);
		}, tooltip : { dismissDelay : 10000, text : this.treeType == "gene" ? "MACRO: bind ADP-ribosylated proteins" : "There is no domain-based alignment for this family. Select \"full length proteins\" above to see access this tree."}},{ margin : "0 10 5 0", xtype : "button", cls : mapFam.exists("MBT") == true && this.treeType == "domain" ? "x-btn-target-found x-btn-target-mbt" : mapFam.exists("MBT") == true && this.treeType == "gene" ? "x-btn-target-found x-btn-target-mbt-gene" : mapFam.exists("MBT") == false && this.treeType == "domain" ? "x-btn-target-mbt" : "x-btn-target-mbt-gene", handler : function() {
			_gthis.treeName = "MBT";
			_gthis.subtreeName = _gthis.treeName;
			_gthis.generateTree(_gthis.treeName,_gthis.treeType);
		}, tooltip : { dismissDelay : 10000, text : "MBT: Read methyl-lysines"}},{ margin : "0 10 5 0", xtype : "button", cls : mapFam.exists("PHD") == true && this.treeType == "domain" ? "x-btn-target-found x-btn-target-phd" : mapFam.exists("PHD") == true && this.treeType == "gene" ? "x-btn-target-found x-btn-target-phd-gene" : mapFam.exists("PHD") == false && this.treeType == "domain" ? "x-btn-target-phd" : "x-btn-target-phd-gene", handler : function() {
			_gthis.treeName = "PHD";
			_gthis.subtreeName = _gthis.treeName;
			_gthis.generateTree(_gthis.treeName,_gthis.treeType);
		}, tooltip : { dismissDelay : 10000, text : "PHD: Read methyl-lysines, acetylated lysines, methyl-arginines, unmodified lysines"}},{ margin : "0 10 5 0", xtype : "button", cls : mapFam.exists("PWWP") == true && this.treeType == "domain" ? "x-btn-target-found x-btn-target-pwwp" : mapFam.exists("PWWP") == true && this.treeType == "gene" ? "x-btn-target-found x-btn-target-pwwp-gene" : mapFam.exists("PWWP") == false && this.treeType == "domain" ? "x-btn-target-pwwp" : "x-btn-target-pwwp-gene", handler : function() {
			_gthis.treeName = "PWWP";
			_gthis.subtreeName = _gthis.treeName;
			_gthis.generateTree(_gthis.treeName,_gthis.treeType);
		}, tooltip : { dismissDelay : 10000, text : "PWWP: Read methyl-lysines, bind DNA"}},{ margin : "0 10 5 0", xtype : "button", cls : mapFam.exists("SPINDLIN") == true && this.treeType == "domain" ? "x-btn-target-found x-btn-target-spindlin" : mapFam.exists("SPINDLIN") == true && this.treeType == "gene" ? "x-btn-target-found x-btn-target-spindlin-gene" : mapFam.exists("SPINDLIN") == false && this.treeType == "domain" ? "x-btn-target-spindlin" : "x-btn-target-spindlin-gene", handler : function() {
			_gthis.treeName = "SPINDLIN";
			_gthis.subtreeName = _gthis.treeName;
			_gthis.generateTree(_gthis.treeName,_gthis.treeType);
		}, tooltip : { dismissDelay : 10000, text : "SPINDLIN: methyl-lysine/arginine reader"}},{ margin : "0 10 5 0", xtype : "button", cls : mapFam.exists("TUDOR") == true && this.treeType == "domain" ? "x-btn-target-found x-btn-target-tudor" : mapFam.exists("TUDOR") == true && this.treeType == "gene" ? "x-btn-target-found x-btn-target-tudor-gene" : mapFam.exists("TUDOR") == false && this.treeType == "domain" ? "x-btn-target-tudor" : "x-btn-target-tudor-gene", handler : function() {
			_gthis.treeName = "TUDOR";
			_gthis.subtreeName = _gthis.treeName;
			_gthis.generateTree(_gthis.treeName,_gthis.treeType);
		}, tooltip : { dismissDelay : 10000, text : "TUDOR: Read methyl-lysines, methyl-arginines"}},{ margin : "0 10 5 0", xtype : "button", cls : mapFam.exists("YEATS") == true && this.treeType == "domain" ? "x-btn-target-found x-btn-target-yeats" : mapFam.exists("YEATS") == true && this.treeType == "gene" ? "x-btn-target-found x-btn-target-yeats-gene" : mapFam.exists("YEATS") == false && this.treeType == "domain" ? "x-btn-target-yeats" : "x-btn-target-yeats-gene", handler : function() {
			_gthis.treeName = "YEATS";
			_gthis.subtreeName = _gthis.treeName;
			_gthis.generateTree(_gthis.treeName,_gthis.treeType);
		}, tooltip : { dismissDelay : 10000, text : "YEATS: read acetyl-lysines and crotonyl-lysines"}}];
		this.chmodproErasers = [];
		this.chmodproErasers = [{ margin : "0 10 5 0", xtype : "button", cls : mapFam.exists("HDAC") == true && this.treeType == "domain" ? "x-btn-target-found x-btn-target-hdac" : mapFam.exists("HDAC") == true && this.treeType == "gene" ? "x-btn-target-found x-btn-target-hdac-gene" : mapFam.exists("HDAC") == false && this.treeType == "domain" ? "x-btn-target-hdac" : "x-btn-target-hdac-gene", handler : function() {
			_gthis.treeName = "HDAC_SIRT";
			_gthis.subtreeName = _gthis.treeName;
			_gthis.generateTree(_gthis.treeName,_gthis.treeType);
		}, tooltip : { dismissDelay : 10000, text : "HDAC: Deacetylate lysines"}},{ margin : "0 10 5 0", xtype : "button", cls : mapFam.exists("KDM") == true && this.treeType == "domain" ? "x-btn-target-found x-btn-target-kdm" : mapFam.exists("KDM") == true && this.treeType == "gene" ? "x-btn-target-found x-btn-target-kdm-gene" : mapFam.exists("KDM") == false && this.treeType == "domain" ? "x-btn-target-kdm" : "x-btn-target-kdm-gene", handler : function() {
			_gthis.treeName = "KDM";
			_gthis.subtreeName = _gthis.treeName;
			_gthis.generateTree(_gthis.treeName,_gthis.treeType);
		}, tooltip : { dismissDelay : 10000, text : "KDM: De-methylate lysines"}},{ margin : "0 10 5 0", xtype : "button", cls : mapFam.exists("PADI") == true && this.treeType == "domain" ? "x-btn-target-found x-btn-target-padi" : mapFam.exists("PADI") == true && this.treeType == "gene" ? "x-btn-target-found x-btn-target-padi-gene" : mapFam.exists("PADI") == false && this.treeType == "domain" ? "x-btn-target-padi" : "x-btn-target-padi-gene", handler : function() {
			_gthis.treeName = "PADI";
			_gthis.subtreeName = _gthis.treeName;
			_gthis.generateTree(_gthis.treeName,_gthis.treeType);
		}, tooltip : { dismissDelay : 10000, text : "PADI: Deiminate arginines"}}];
		this.chmodDnaWriters = [];
		this.chmodDnaWriters = [{ margin : "0 10 5 0", bodyPadding : "0 0 0 9px", xtype : "button", cls : mapFam.exists("DNMT") == true && this.treeType == "domain" ? "x-btn-target-found x-btn-target-dnmt" : mapFam.exists("DNMT") == true && this.treeType == "gene" ? "x-btn-target-found x-btn-target-dnmt-gene" : mapFam.exists("DNMT") == false && this.treeType == "domain" ? "x-btn-target-dnmt" : "x-btn-target-dnmt-gene", handler : function() {
			_gthis.treeName = "DNMT";
			_gthis.subtreeName = _gthis.treeName;
			_gthis.generateTree(_gthis.treeName,_gthis.treeType);
		}, tooltip : { dismissDelay : 10000, text : "DNMT: Methylate CpG dinucleotides"}}];
		this.chmodDnaReaders = [];
		this.chmodDnaReaders = [{ margin : "0 10 5 0", xtype : "button", cls : mapFam.exists("CXXC") == true && this.treeType == "domain" ? "x-btn-target-found x-btn-target-cxxc" : mapFam.exists("CXXC") == true && this.treeType == "gene" ? "x-btn-target-found x-btn-target-cxxc-gene" : mapFam.exists("CXXC") == false && this.treeType == "domain" ? "x-btn-target-cxxc" : "x-btn-target-cxxc-gene", handler : function() {
			_gthis.treeName = "CXXC";
			_gthis.subtreeName = _gthis.treeName;
			_gthis.generateTree(_gthis.treeName,_gthis.treeType);
		}, tooltip : { dismissDelay : 10000, text : "CXXC: Bind to nonmethyl-CpG dinucleotides"}},{ margin : "0 10 5 0", xtype : "button", cls : mapFam.exists("MBD") == true && this.treeType == "domain" ? "x-btn-target-found x-btn-target-mbd" : mapFam.exists("MBD") == true && this.treeType == "gene" ? "x-btn-target-found x-btn-target-mbd-gene" : mapFam.exists("MBD") == false && this.treeType == "domain" ? "x-btn-target-mbd" : "x-btn-target-mbd-gene", handler : function() {
			_gthis.treeName = "MBD";
			_gthis.subtreeName = _gthis.treeName;
			_gthis.generateTree(_gthis.treeName,_gthis.treeType);
		}, tooltip : { dismissDelay : 10000, text : "MBD: Bind to methyl-CpG dinucleotides"}}];
		this.chmodDnaErasers = [];
		this.chmodDnaErasers = [{ margin : "0 10 5 0", xtype : "button", cls : mapFam.exists("TET") == true && this.treeType == "domain" ? "x-btn-target-found x-btn-target-tet" : mapFam.exists("TET") == true && this.treeType == "gene" ? "x-btn-target-found x-btn-target-tet-gene" : mapFam.exists("TET") == false && this.treeType == "domain" ? "x-btn-target-tet" : "x-btn-target-tet-gene", handler : function() {
			_gthis.treeName = "TET";
			_gthis.subtreeName = _gthis.treeName;
			_gthis.generateTree(_gthis.treeName,_gthis.treeType);
		}, tooltip : { dismissDelay : 10000, text : "TET: DNA hydroxylases. Participate in DNA de-methylation"}}];
		this.chmodRnaWriters = [];
		this.chmodRnaWriters = [{ margin : "0 10 5 0", xtype : "button", cls : mapFam.exists("RNMT") == true && this.treeType == "domain" ? "x-btn-target-found x-btn-target-rnmt" : mapFam.exists("RNMT") == true && this.treeType == "gene" ? "x-btn-target-found x-btn-target-rnmt-gene" : mapFam.exists("RNMT") == false && this.treeType == "domain" ? "x-btn-target-rnmt" : "x-btn-target-rnmt-gene", handler : function() {
			_gthis.treeName = "RNMT";
			_gthis.subtreeName = _gthis.treeName;
			_gthis.generateTree(_gthis.treeName,_gthis.treeType);
		}, tooltip : { dismissDelay : 10000, text : "RNMT: Methylate RNA"}},{ margin : "0 10 5 0", xtype : "button", cls : mapFam.exists("PUS") == true && this.treeType == "domain" ? "x-btn-target-found x-btn-target-pus" : mapFam.exists("PUS") == true && this.treeType == "gene" ? "x-btn-target-found x-btn-target-pus-gene" : mapFam.exists("PUS") == false && this.treeType == "domain" ? "x-btn-target-pus" : "x-btn-target-pus-gene", handler : function() {
			_gthis.treeName = "PUS";
			_gthis.subtreeName = _gthis.treeName;
			_gthis.generateTree(_gthis.treeName,_gthis.treeType);
		}, tooltip : { dismissDelay : 10000, text : "Pseudouridine synthases: catalyze the site-specific isomerization of uridines on RNA"}}];
		this.chmodRnaReaders = [];
		this.chmodRnaReaders = [{ margin : "0 10 5 0", xtype : "button", cls : mapFam.exists("YTH") == true && this.treeType == "domain" ? "x-btn-target-found x-btn-target-yth" : mapFam.exists("YTH") == true && this.treeType == "gene" ? "x-btn-target-found x-btn-target-yth-gene" : mapFam.exists("YTH") == false && this.treeType == "domain" ? "x-btn-target-yth" : "x-btn-target-yth-gene", handler : function() {
			_gthis.treeName = "YTH";
			_gthis.subtreeName = _gthis.treeName;
			_gthis.generateTree(_gthis.treeName,_gthis.treeType);
		}, tooltip : { dismissDelay : 10000, text : "YTH: bind to methylated RNA"}}];
		this.chmodRnaErasers = [];
		this.chmodRnaErasers = [{ margin : "0 10 5 0", xtype : "button", cls : mapFam.exists("RNA-DMT") == true && this.treeType == "domain" ? "x-btn-target-found x-btn-target-rna-dmt" : mapFam.exists("RNA-DMT") == true && this.treeType == "gene" ? "x-btn-target-found x-btn-target-rna-dmt-gene" : mapFam.exists("RNA-DMT") == false && this.treeType == "domain" ? "x-btn-target-rna-dmt" : "x-btn-target-rna-dmt-gene", handler : function() {
			_gthis.treeName = "RNA-DMT";
			_gthis.subtreeName = _gthis.treeName;
			_gthis.generateTree(_gthis.treeName,_gthis.treeType);
		}, tooltip : { dismissDelay : 10000, text : "RNA-DMT"}}];
		this.chmodDna = [];
		this.chmodDna = [{ title : "Writers", flex : 1, margin : "0 10 0 0", xtype : "panel", cls : "x-panel-floating", items : this.chmodDnaWriters},{ title : "Readers", flex : 2, margin : "0 10 0 0", xtype : "panel", cls : "x-panel-floating2", items : this.chmodDnaReaders},{ title : "Erasers", flex : 1, margin : "0 10 0 0", xtype : "panel", cls : "x-panel-floating", items : this.chmodDnaErasers}];
		this.chmodRna = [];
		this.chmodRna = [{ title : "Writers", flex : 2, margin : "0 10 0 0", xtype : "panel", cls : "x-panel-floating2", items : this.chmodRnaWriters},{ title : "Readers", flex : 1, margin : "0 10 0 0", xtype : "panel", cls : "x-panel-floating", items : this.chmodRnaReaders},{ title : "Erasers", flex : 1, margin : "0 10 0 0", xtype : "panel", cls : "x-panel-floating", items : this.chmodRnaErasers}];
		this.chromatin = [];
		this.chromatin = [{ margin : "0 10 5 0", xtype : "button", cls : mapFam.exists("DEXDc") == true && this.treeType == "domain" ? "x-btn-target-found x-btn-target-dexdc" : mapFam.exists("DEXDc") == true && this.treeType == "gene" ? "x-btn-target-found x-btn-target-dexdc-gene" : mapFam.exists("DEXDc") == false && this.treeType == "domain" ? "x-btn-target-dexdc" : "x-btn-target-dexdc-gene", handler : function() {
			_gthis.treeName = "DEXDc";
			_gthis.subtreeName = _gthis.treeName;
			_gthis.generateTree(_gthis.treeName,_gthis.treeType);
		}, tooltip : { dismissDelay : 10000, text : "DEXDc"}},{ margin : "0 10 5 0", xtype : "button", cls : mapFam.exists("Helicases") == true && this.treeType == "domain" ? "x-btn-target-found x-btn-target-helicc" : mapFam.exists("Helicases") == true && this.treeType == "gene" ? "x-btn-target-found x-btn-target-helicc-gene" : mapFam.exists("Helicases") == false && this.treeType == "domain" ? "x-btn-target-helicc" : "x-btn-target-helicc-gene", handler : function() {
			_gthis.treeName = "HELICC/Helicases";
			_gthis.subtreeName = _gthis.treeName;
			_gthis.generateTree(_gthis.treeName,_gthis.treeType);
		}, tooltip : { dismissDelay : 10000, text : "HELICc"}},{ margin : "0 10 5 0", xtype : "button", cls : mapFam.exists("SANT") == true && this.treeType == "domain" ? "x-btn-target-found x-btn-target-sant" : mapFam.exists("SANT") == true && this.treeType == "gene" ? "x-btn-target-found x-btn-target-sant-gene" : mapFam.exists("SANT") == false && this.treeType == "domain" ? "x-btn-target-sant" : "x-btn-target-sant-gene", handler : function() {
			_gthis.treeName = "SANT";
			_gthis.subtreeName = _gthis.treeName;
			_gthis.generateTree(_gthis.treeName,_gthis.treeType);
		}, tooltip : { dismissDelay : 10000, text : "SANT: Involved in chromatin remodeling"}}];
		this.histones = [];
		this.histones = [{ margin : "0 10 5 0", xtype : "button", cls : mapFam.exists("HISTONE") == true && this.treeType == "domain" ? "x-btn-target-found x-btn-target-histone" : mapFam.exists("HISTONE") == true && this.treeType == "gene" ? "x-btn-target-found x-btn-target-histone-gene" : mapFam.exists("HISTONE") == false && this.treeType == "domain" ? "x-btn-target-histone" : "x-btn-target-histone-gene", handler : function() {
			_gthis.treeName = "Histone";
			_gthis.subtreeName = _gthis.treeName;
			_gthis.generateTree(_gthis.treeName,_gthis.treeType);
		}, tooltip : { dismissDelay : 10000, text : this.treeType == "gene" ? "Histone" : "There is no domain-based alignment for this family. Select \"full length proteins\" above to see access this tree."}}];
		this.wdr = [];
		this.wdr = [{ margin : "0 10 5 0", xtype : "button", cls : mapFam.exists("WDR") == true && this.treeType == "domain" ? "x-btn-target-found x-btn-target-wdr" : mapFam.exists("WDR") == true && this.treeType == "gene" ? "x-btn-target-found x-btn-target-wdr-gene" : mapFam.exists("WDR") == false && this.treeType == "domain" ? "x-btn-target-wdr" : "x-btn-target-wdr-gene", handler : function() {
			_gthis.treeName = "WDR";
			_gthis.subtreeName = _gthis.treeName;
			_gthis.generateTree(_gthis.treeName,_gthis.treeType);
		}, tooltip : { dismissDelay : 10000, text : this.treeType == "gene" ? "WDR: Versatile binding module" : "There is no domain-based alignment for this family. Select \"full length proteins\" above to see access this tree."}}];
		this.nudix = [];
		this.nudix = [{ margin : "0 10 5 0", xtype : "button", cls : mapFam.exists("NUDIX") == true && this.treeType == "domain" ? "x-btn-target-found x-btn-target-nudix" : mapFam.exists("NUDIX") == true && this.treeType == "gene" ? "x-btn-target-found x-btn-target-nudix-gene" : mapFam.exists("NUDIX") == false && this.treeType == "domain" ? "x-btn-target-nudix" : "x-btn-target-nudix-gene", handler : function() {
			_gthis.treeName = "NUDIX";
			_gthis.subtreeName = _gthis.treeName;
			_gthis.generateTree(_gthis.treeName,_gthis.treeType);
		}, tooltip : { dismissDelay : 10000, text : this.treeType == "gene" ? "NUDIX: Break a phosphate bond from RNA caps and other substrates" : "There is no domain-based alignment for this family. Select \"full length proteins\" above to see access this tree."}}];
		this.addicon = [];
		this.addicon = [{ margin : "0 10 5 0", xtype : "button", cls : "x-btn-target-ultradd", handler : function() {
			_gthis.showUltraDDGenes();
		}, tooltip : { dismissDelay : 10000, text : "Show UltraDD genes list"}}];
	}
	,showUltraDDGenes: function() {
		var _gthis = this;
		saturn.client.WorkspaceApplication.getApplication().getProvider().getByNamedQuery("getUltraDDGenes",{ param : ""},null,true,function(db_results,error) {
			if(error == null) {
				if(db_results.length != 0) {
					var div = [];
					var i = 0;
					var title = db_results.length;
					var _g1 = 0;
					var _g = db_results.length;
					while(_g1 < _g) {
						var i1 = _g1++;
						div[i1] = { xtype : "checkboxfield", boxLabel : db_results[i1].target_id, labelSeparator : "", name : "ultradd", cls : "ultradd-checkbox", inputValue : db_results[i1].target_id, id : "ultradd-" + i1};
					}
					var container = _gthis.getApplication().getSingleAppContainer();
					var mydom = js.Browser.get_document().getElementById("id-centralPanel");
					var parentWidth = mydom.clientWidth;
					var parentHeight = mydom.clientHeight;
					var cx = Math.round(parentWidth / 2) - 350;
					var cy = Math.round(parentHeight / 5);
					container.showUltraDDWindow(div,cx,cy,title,_gthis);
				} else {
					saturn.client.WorkspaceApplication.getApplication().showMessage("Alert","No UltraDD genes in the current database.");
				}
			}
		});
	}
	,getJSonViewOptions: function() {
		var _gthis = this;
		saturn.client.core.CommonCore.getContent("/static/json/ViewOptionsBtns.json",function(content) {
			var d = saturn.client.WorkspaceApplication.getApplication().getActiveProgram();
			d.annotationManager.jsonFile = JSON.parse(content);
			_gthis.getJSonTips();
		},function(err) {
			saturn.client.WorkspaceApplication.getApplication().debug(err);
			_gthis.getJSonTips();
		});
	}
	,getJSonTips: function() {
		if(this.standaloneMode) {
			saturn.client.core.CommonCore.getContent("/static/json/tipsHtmlData.json",function(content) {
				var d = saturn.client.WorkspaceApplication.getApplication().getActiveProgram();
				d.jsonTipsFile = JSON.parse(content);
				saturn.client.WorkspaceApplication.getApplication().setMode(saturn.client.ScreenMode.SINGLE_APP);
			},function(err) {
				saturn.client.WorkspaceApplication.getApplication().debug(err);
				saturn.client.WorkspaceApplication.getApplication().setMode(saturn.client.ScreenMode.SINGLE_APP);
			});
		}
	}
	,showTips: function(show) {
		var cookies = Cookies;
		if(show == true) {
			var cookie = cookies.getJSON("tipday");
			if(cookie != null) {
				cookies.remove("tipday");
			}
		} else {
			cookies.set("tipday",false,{ "expires" : 14});
		}
	}
	,__class__: saturn.client.programs.chromohub.ChromoHubViewer
});
saturn.client.programs.chromohub.ChromoHubDrawingMode = $hxClasses["saturn.client.programs.chromohub.ChromoHubDrawingMode"] = { __ename__ : ["saturn","client","programs","chromohub","ChromoHubDrawingMode"], __constructs__ : ["STRAIGHT","CIRCULAR"] };
saturn.client.programs.chromohub.ChromoHubDrawingMode.STRAIGHT = ["STRAIGHT",0];
saturn.client.programs.chromohub.ChromoHubDrawingMode.STRAIGHT.toString = $estr;
saturn.client.programs.chromohub.ChromoHubDrawingMode.STRAIGHT.__enum__ = saturn.client.programs.chromohub.ChromoHubDrawingMode;
saturn.client.programs.chromohub.ChromoHubDrawingMode.CIRCULAR = ["CIRCULAR",1];
saturn.client.programs.chromohub.ChromoHubDrawingMode.CIRCULAR.toString = $estr;
saturn.client.programs.chromohub.ChromoHubDrawingMode.CIRCULAR.__enum__ = saturn.client.programs.chromohub.ChromoHubDrawingMode;
saturn.client.programs.chromohub.ChromoHubViewerHome = $hxClasses["saturn.client.programs.chromohub.ChromoHubViewerHome"] = function(viewer) {
	this.viewer = viewer;
};
saturn.client.programs.chromohub.ChromoHubViewerHome.__name__ = ["saturn","client","programs","chromohub","ChromoHubViewerHome"];
saturn.client.programs.chromohub.ChromoHubViewerHome.prototype = {
	viewer: null
	,uploadForm: null
	,annotations: null
	,addUploadForm: function() {
		var _gthis = this;
		var items = [];
		items.push({ xtype : "textarea", fieldLabel : "FASTA upload", name : "fasta_content"});
		items.push({ xtype : "button", text : "Generate Tree", handler : function() {
			_gthis.generateTreeFromFASTA(_gthis.uploadForm.form.findField("fasta_content").lastValue);
		}});
		items.push({ xtype : "textarea", fieldLabel : "Newick upload", name : "newick_content"});
		items.push({ xtype : "button", text : "Show Tree", handler : function() {
			_gthis.viewer.setNewickStr(_gthis.uploadForm.form.findField("newick_content").lastValue);
		}});
		items.push({ xtype : "textarea", fieldLabel : "Annotations", name : "annotation_content"});
		items.push({ xtype : "button", text : "Upload", handler : function() {
			_gthis.loadAnnotations(_gthis.uploadForm.form.findField("annotation_content").lastValue);
		}});
		this.uploadForm = Ext.create("Ext.form.Panel",{ items : items});
		this.viewer.centralTargetPanel.add(this.uploadForm);
	}
	,generateTreeFromFASTA: function(fasta) {
		var _gthis = this;
		saturn.client.BioinformaticsServicesClient.getClient().sendPhyloReportRequest(fasta,function(response,error) {
			var phyloReport = response.json.phyloReport;
			var location = js.Browser.get_window().location;
			var dstURL = location.protocol + "//" + location.hostname + ":" + location.port + "/" + phyloReport;
			Ext.Ajax.request({ url : dstURL, success : function(response1,opts) {
				var newickString = response1.responseText;
				_gthis.viewer.setNewickStr(newickString);
			}, failure : function(response2,opts1) {
			}});
		});
	}
	,handleAnnotation: function(alias,params,clazz,cb) {
		var annotationIndex = Std.parseInt(alias.charAt(alias.length - 1));
		cb(this.annotations[annotationIndex],null);
	}
	,loadAnnotations: function(annotationString) {
		var _gthis = this;
		var lines = annotationString.split("\n");
		var header = lines[0];
		var cols = header.split(",");
		this.annotations = [];
		this.viewer.annotationManager.jsonFile = { btnGroup : [{ title : "Annotations", buttons : []}]};
		var _g1 = 1;
		var _g = cols.length;
		while(_g1 < _g) {
			var i = [_g1++];
			this.annotations[i[0] - 1] = [];
			var hookName = ["STANDALONE_ANNOTATION_" + (i[0] - 1)];
			var styleAnnotation = (function(i1) {
				return function(target,data,selected,annotList,item,callBack) {
					var colours = ["red","blue"];
					var r = { hasAnnot : true, text : "", color : { color : colours[i1[0] - 1], used : false}, defImage : 100};
					if(data == null || data.annotation == "No") {
						r.hasAnnot = false;
					}
					callBack(r);
				};
			})(i);
			this.viewer.annotationManager.jsonFile.btnGroup[0].buttons.push({ label : cols[i[0]], hookName : hookName[0], annotCode : i[0], isTitle : false, enabled : true, familyMethod : "", hasMethod : styleAnnotation, hasClass : "", color : [{ color : "#ed0e2d", used : "false"}], shape : "cercle"});
			saturn.client.core.CommonCore.getDefaultProvider((function(hookName1) {
				return function(error,provider) {
					provider.resetCache();
					provider.addHook($bind(_gthis,_gthis.handleAnnotation),hookName1[0]);
				};
			})(hookName));
		}
		var _g11 = 1;
		var _g2 = lines.length;
		while(_g11 < _g2) {
			var i2 = _g11++;
			var cols1 = lines[i2].split(",");
			var _g3 = 1;
			var _g21 = cols1.length;
			while(_g3 < _g21) {
				var j = _g3++;
				this.annotations[j - 1].push({ "target_id" : cols1[0], "annotation" : cols1[j]});
			}
		}
		this.viewer.annotationManager.fillAnnotationwithJSonData();
		this.viewer.annotationManager.createViewOptions();
	}
	,__class__: saturn.client.programs.chromohub.ChromoHubViewerHome
};
if(!saturn.client.programs.phylo5) saturn.client.programs.phylo5 = {};
saturn.client.programs.phylo5.Phylo5Annotation = $hxClasses["saturn.client.programs.phylo5.Phylo5Annotation"] = function() {
	this.hasAnnot = false;
	this.text = "";
	this.splitresults = false;
};
saturn.client.programs.phylo5.Phylo5Annotation.__name__ = ["saturn","client","programs","phylo5","Phylo5Annotation"];
saturn.client.programs.phylo5.Phylo5Annotation.prototype = {
	type: null
	,summary: null
	,summary_img: null
	,imgtest: null
	,annotImg: null
	,defaultImg: null
	,shape: null
	,color: null
	,mysqlAlias: null
	,text: null
	,options: null
	,optionSelected: null
	,dbData: null
	,legend: null
	,hasClass: null
	,hasMethod: null
	,divMethod: null
	,familyMethod: null
	,hasAnnot: null
	,alfaAnnot: null
	,splitresults: null
	,myleaf: null
	,uploadImg: function(imgList) {
		var i;
		this.annotImg = [];
		var _g1 = 0;
		var _g = imgList.length;
		while(_g1 < _g) {
			var i1 = _g1++;
			this.annotImg[i1] = js.Browser.get_document().createElement("img");
			this.annotImg[i1].src = imgList[i1];
			this.annotImg[i1].onload = function() {
			};
		}
	}
	,saveAnnotationData: function(annotation,data) {
		var _gthis = this;
		this.type = annotation;
		this.dbData = [];
		this.dbData = data;
		this.color = saturn.core.Util.clone(this.myleaf.root.annotations[annotation].color);
		var hook;
		var r_hasAnnot = true;
		var r_text = "";
		var r_color = "";
		var r_defImage = 100;
		var clazz;
		var method;
		if(this.myleaf.root.annotations[annotation].hasClass != null && this.myleaf.root.annotations[annotation].hasMethod != null) {
			clazz = this.myleaf.root.annotations[annotation].hasClass;
			method = this.myleaf.root.annotations[annotation].hasMethod;
			hook = Reflect.field(Type.resolveClass(clazz),method);
			hook(this.myleaf.name,this.dbData,this.myleaf.root,function(r) {
				_gthis.defaultImg = r.defImage;
				if(_gthis.color[0] != null) {
					_gthis.color[0].color = r.color;
				}
				_gthis.text = r.text;
				_gthis.hasAnnot = r.hasAnnot;
			});
		} else {
			this.hasAnnot = true;
			this.color = this.myleaf.root.annotations[annotation].color;
		}
	}
	,delAnnotation: function(annotation) {
	}
	,__class__: saturn.client.programs.phylo5.Phylo5Annotation
};
saturn.client.programs.phylo5.Phylo5AnnotationMethods = $hxClasses["saturn.client.programs.phylo5.Phylo5AnnotationMethods"] = function() {
};
saturn.client.programs.phylo5.Phylo5AnnotationMethods.__name__ = ["saturn","client","programs","phylo5","Phylo5AnnotationMethods"];
saturn.client.programs.phylo5.Phylo5AnnotationMethods.hasPubmed = function(target,data,root,callBack) {
	var r = { hasAnnot : true, text : "", color : "", defImage : 100};
	if(data.pubs < 10) {
		r.defImage = 0;
	} else if(data.pubs >= 10 && data.pubs < 20) {
		r.defImage = 1;
	} else if(data.pubs >= 20 && data.pubs < 50) {
		r.defImage = 2;
	} else if(data.pubs >= 50 && data.pubs < 100) {
		r.defImage = 3;
	} else if(data.pubs >= 100) {
		r.defImage = 4;
	}
	callBack(r);
};
saturn.client.programs.phylo5.Phylo5AnnotationMethods.hasFunding = function(target,data,root,callBack) {
	var r = { hasAnnot : false, text : "", color : "", defImage : 100};
	if(data.funds > 15000000) {
		r.text = "$$$";
		r.color = "#f60808";
		r.hasAnnot = true;
	} else if(data.funds > 5000000) {
		r.text = "$$";
		r.color = "#f69908";
		r.hasAnnot = true;
	} else if(data.funds > 500000) {
		r.text = "$";
		r.color = "#085cf6";
		r.hasAnnot = true;
	}
	callBack(r);
};
saturn.client.programs.phylo5.Phylo5AnnotationMethods.hasSubstrate = function(target,data,root,callBack) {
	var r = { hasAnnot : true, text : data.sub, color : "", defImage : 100};
	if(root.auxMap.exists(data.sub)) {
		r.color = root.auxMap.get(data.sub);
	} else {
		var k;
		var c;
		var _g1 = 0;
		var _g = root.annotations[4].color.length;
		while(_g1 < _g) {
			var k1 = _g1++;
			var g = root.annotations[4].color[k1].used;
			if(g == false) {
				c = root.annotations[4].color[k1].color;
				root.annotations[4].color[k1].used = true;
				root.auxMap.set(data.sub,c);
				r.color = c;
				break;
			}
		}
	}
	callBack(r);
};
saturn.client.programs.phylo5.Phylo5AnnotationMethods.hasSubcellular = function(target,data,root,callBack) {
	var r = { hasAnnot : true, text : "", color : "", defImage : 100};
	if(data.location.indexOf("Nucleus") != -1) {
		r.defImage = 0;
	} else {
		r.defImage = 1;
	}
	callBack(r);
};
saturn.client.programs.phylo5.Phylo5AnnotationMethods.hasHighlight = function(target,data,root,callBack) {
	var r = { hasAnnot : false, text : "", color : "", defImage : 100};
	var year = root.annotations[17].optionSelected;
	var tg = target;
	saturn.client.WorkspaceApplication.getApplication().getProvider().getByNamedQuery("highlightJumpInLast1",{ target_id : tg, year : year},null,true,function(db_results,error) {
		if(error == null) {
			if(db_results != null) {
				r.defImage = 0;
				r.hasAnnot = true;
				callBack(r);
			}
		} else {
			saturn.client.WorkspaceApplication.getApplication().debug(error);
		}
	});
};
saturn.client.programs.phylo5.Phylo5AnnotationMethods.hasNonSilent = function(target,data,root,callBack) {
	var r = { hasAnnot : false, text : "", color : "", defImage : 100};
	saturn.client.WorkspaceApplication.getApplication().getProvider().getByNamedQuery("nonSilentSPNsPoly",{ uniprot : data.uniprot, pkey : data.variant_pkey},null,true,function(db_results,error) {
		if(error == null) {
			if(db_results[0].num_total == null || db_results[0].num_total == "0") {
				r.text = "";
				r.hasAnnot = false;
			} else {
				r.text = "" + db_results[0].num_total + "";
				r.hasAnnot = true;
				if(db_results[0].is_disease == "Disease" && db_results[0].num_dom != 0) {
					r.color = "#9026b3";
				} else if(db_results[0].is_disease == "Disease") {
					r.color = "#e60841";
				} else if(db_results[0].num_dom != 0) {
					r.color = "#06fff7";
				} else {
					r.color = "#000000";
				}
			}
			callBack(r);
		} else {
			saturn.client.WorkspaceApplication.getApplication().debug(error);
		}
	});
};
saturn.client.programs.phylo5.Phylo5AnnotationMethods.hasLigands = function(target,data,root,callBack) {
	var r = { hasAnnot : true, text : data.variant_pkey, color : "#68229d", defImage : 100};
	callBack(r);
};
saturn.client.programs.phylo5.Phylo5AnnotationMethods.divDiseaseAssociation = function(screenData,x,y,callBack) {
	if(screenData.divAccessed == false) {
		screenData.divAccessed = true;
		saturn.client.WorkspaceApplication.getApplication().debug("access db");
		saturn.client.WorkspaceApplication.getApplication().getProvider().getByNamedQuery("diseaseAssociationDiv",{ target : screenData.target},null,true,function(results,error) {
			if(error == null) {
				var div = js.Browser.get_document().createElement("div");
				var numMax;
				var numMid;
				var numMidt;
				var infH = 150;
				var cancerH = 150;
				var virInfH = 150;
				var neuDisH = 150;
				var metDisH = 150;
				var immDisH = 150;
				var regMedH = 150;
				var infN = 0;
				var cancerN = 0;
				var virInfN = 0;
				var neuDisN = 0;
				var metDisN = 0;
				var immDisN = 0;
				var regMedN = 0;
				var infNt;
				var cancerNt;
				var virInfNt;
				var neuDisNt;
				var metDisNt;
				var immDisNt;
				var regMedNt;
				var pmids = [];
				var br = 5;
				var bw = 25;
				var i;
				var mapResults = new haxe.ds.StringMap();
				var _g1 = 0;
				var _g = results.length;
				while(_g1 < _g) {
					var i1 = _g1++;
					var aux = results[i1].pmid_list;
					var aux2 = aux.split(";");
					pmids[i1] = aux2.length;
					mapResults.set(results[i1].id,pmids[i1]);
					var _g2 = results[i1].id;
					switch(_g2) {
					case "Cancer":
						cancerN = pmids[i1];
						break;
					case "Immune Disorders":
						immDisN = pmids[i1];
						break;
					case "Inflammation":
						infN = pmids[i1];
						break;
					case "Metabolic Disorders":
						metDisN = pmids[i1];
						break;
					case "Neurological Diseases":
						neuDisN = pmids[i1];
						break;
					case "Regenerative Medicine":
						regMedN = pmids[i1];
						break;
					case "Viral Infections":
						virInfN = pmids[i1];
						break;
					}
				}
				numMax = pmids[0];
				var _g11 = 1;
				var _g3 = pmids.length;
				while(_g11 < _g3) {
					var i2 = _g11++;
					if(pmids[i2] > numMax) {
						numMax = pmids[i2];
					}
				}
				if(numMax != 1) {
					var a = numMax / 2;
					numMid = Math.round(a);
					numMidt = "" + numMid;
				} else {
					numMidt = "";
				}
				infH = Math.round(150 * infN / numMax);
				cancerH = Math.round(150 * cancerN / numMax);
				virInfH = Math.round(150 * virInfN / numMax);
				neuDisH = Math.round(150 * neuDisN / numMax);
				metDisH = Math.round(150 * metDisN / numMax);
				immDisH = Math.round(150 * immDisN / numMax);
				regMedH = Math.round(150 * regMedN / numMax);
				if(infN == 0) {
					infNt = "";
				} else {
					infNt = "" + infN + "";
				}
				if(cancerN == 0) {
					cancerNt = "";
				} else {
					cancerNt = "" + cancerN + "";
				}
				if(virInfN == 0) {
					virInfNt = "";
				} else {
					virInfNt = "" + virInfN + "";
				}
				if(neuDisN == 0) {
					neuDisNt = "";
				} else {
					neuDisNt = "" + neuDisN + "";
				}
				if(metDisN == 0) {
					metDisNt = "";
				} else {
					metDisNt = "" + metDisN + "";
				}
				if(immDisN == 0) {
					immDisNt = "";
				} else {
					immDisNt = "" + immDisN + "";
				}
				if(regMedN == 0) {
					regMedNt = "";
				} else {
					regMedNt = "" + regMedN + "";
				}
				var t = "<style type=\"text/css\">\n                    .disAsTableContent {width:300px; background-color:#ffffff; border:1px solid #cccccc; padding:5px;}\n                    .disAsTable  {border-collapse:collapse;border-spacing:0;}\n                    .disAsTable th{vertical-align: bottom!important;}\n                    .disAsTablePreText{margin-top:30px;padding:0 3px; float:left;-webkit-transform: rotate(-90deg); -moz-transform: rotate(-90deg);-ms-transform: rotate(-90deg);-o-transform: rotate(-90deg);transform: rotate(-90deg); font-size:11px;}\n                    .disAsTableNum{float:left;width:25px;border-right:1px solid #000;}\n                    .disAsTableNum {}\n                    .disAsTableNum .disAsTableTop {height:70px;}\n                    .disAsTableNum .disAsTableMiddle {height:70px;}\n                    .disAsTableNum .disAsTableBottom {}\n                    .disAsTable .disAsTableInf {font-size:10px;background-color:#2980d6;width:20px;height:" + infH + "px;}\n                    .disAsTable .disAsTableCancer {font-size:10px;background-color:#bf0000;width:20px;height:" + cancerH + "px;}\n                    .disAsTable .disAsTableVirInf {font-size:10px;background-color:#63cf1b;width:20px;height:" + virInfH + "px;}\n                    .disAsTable .disAsTableNeuDis {font-size:10px;background-color:#ff8000;width:20px;height:" + neuDisH + "px;}\n                    .disAsTable .disAsTableMetDis {font-size:10px;background-color:#c05691;width:20px;height:" + metDisH + "px;}\n                    .disAsTable .disAsTableImmDis {font-size:10px;background-color:#ffcc00;width:20px;height:" + immDisH + "px;}\n                    .disAsTable .disAsTableRegMed {font-size:10px;background-color:#793ff3;width:20px;height:" + regMedH + "px;}\n                    </style>\n                    <div class=\"disAsTableContent\">\n                    <h3>Disease Association (" + screenData.target + ")</h3>\n                    <div class=\"disAsTablePreText\"># of Articles</div>\n                    <div class=\"disAsTableNum\"> <div class=\"disAsTableTop\">" + numMax + "</div><div class=\"disAsTableMiddle\">" + numMidt + "</div><div class=\"disAsTableBottom\">0</div></div>\n                    <table class=\"disAsTable\">\n                      <tr>\n                        <th><div class=\"disAsTableInf\">" + infNt + "</div></th>\n                        <th><div class=\"disAsTableCancer\">" + cancerNt + "</div></th>\n                        <th><div class=\"disAsTableVirInf\">" + virInfNt + "</div></th>\n                        <th><div class=\"disAsTableNeuDis\">" + neuDisNt + "</div></th>\n                        <th><div class=\"disAsTableMetDis\">" + metDisNt + "</div></th>\n                        <th><div class=\"disAsTableImmDis\">" + immDisNt + "</div></th>\n                        <th><div class=\"disAsTableRegMed\">" + regMedNt + "</div></th>\n                      </tr>\n                    </table>\n                    </div>\n                    ";
				div.innerHTML = t;
				div.id = "divAnnotTable";
				div.style.cssText = "position:fixed;width:50px;left:" + x + ";top:" + y + ";-moz-border-radius:100px;border:1px  solid #ddd;-moz-box-shadow: 0px 0px 8px  #fff;";
				callBack(div);
			} else {
				saturn.client.WorkspaceApplication.getApplication().debug(error);
			}
		});
	} else {
		saturn.client.WorkspaceApplication.getApplication().debug("NOT access db");
	}
};
saturn.client.programs.phylo5.Phylo5AnnotationMethods.divPubmed = function(screenData,x,y,callBack) {
	if(screenData.divAccessed == false) {
		screenData.divAccessed = true;
		var al;
		var auxtext;
		saturn.client.WorkspaceApplication.getApplication().debug("access db");
		al = "pubmedAllDiv";
		auxtext = "";
		if(screenData.suboption == 1) {
			al = "pubmedCSNDiv";
			auxtext = "in Cell/Science/Nature";
		}
		saturn.client.WorkspaceApplication.getApplication().getProvider().getByNamedQuery(al,{ target : screenData.target},null,true,function(results,error) {
			if(error == null) {
				var div = js.Browser.get_document().createElement("div");
				div.id = "box";
				var numMax;
				var numMid;
				var numMidt = "";
				var numArray;
				var heightArray;
				numArray = [];
				heightArray = [];
				if(results[0] != null) {
					numMax = results[0].pubs;
					var _g1 = 1;
					var _g = results.length;
					while(_g1 < _g) {
						var i = _g1++;
						if(results[i].pubs > numMax) {
							numMax = results[i].pubs;
						}
					}
					var a = numMax / 2;
					if(numMax != 1) {
						var a1 = numMax / 2;
						numMid = Math.round(a1);
						numMidt = "" + numMid;
					} else {
						numMidt = "";
					}
					var _g11 = 0;
					var _g2 = results.length;
					while(_g11 < _g2) {
						var i1 = _g11++;
						heightArray[i1] = Math.round(150 * results[i1].pubs / numMax);
						if(results[i1].pubs == 0) {
							numArray[i1] = "";
						} else {
							numArray[i1] = "" + results[i1].pubs + "";
						}
					}
				} else {
					numMax = 1;
					numArray[0] = "0";
					heightArray[0] = 0;
					numMidt = "";
				}
				var totalwidth = results.length * 35 + 180;
				var t = "<style type=\"text/css\">\n                    .pubmedTableContent {width:" + totalwidth + "px; background-color:#ffffff; border:1px solid #cccccc; padding:5px; }\n                    .pubmedTable  {border-collapse:collapse;border-spacing:0;}\n                    .pubmedTableN2  {margin-left:117px; margin-top:8px;}\n                    .pubmedTable th{vertical-align: bottom!important;}\n                    .pubmedTablePreText{margin-top:30px;padding:0 3px; float:left;-webkit-transform: rotate(-90deg); -moz-transform: rotate(-90deg);-ms-transform: rotate(-90deg);-o-transform: rotate(-90deg);transform: rotate(-90deg); font-size:11px;}\n                    .pubmedTableNum{float:left;width:25px;border-right:1px solid #000;}\n                    .pubmedTable th a {text-decoration:none!important;}\n                    .pubmedTableNum .pubmedTableTop {height:70px;}\n                    .pubmedTableNum .pubmedTableMiddle {height:70px;}\n                    .pubmedTableNum .pubmedTableBottom {}\n                    .pubmedTableYear{width:18px; -webkit-transform: rotate(-90deg); -moz-transform: rotate(-90deg);-ms-transform: rotate(-90deg);-o-transform: rotate(-90deg);transform: rotate(-90deg); font-size:9px;}";
				var _g12 = 0;
				var _g3 = numArray.length;
				while(_g12 < _g3) {
					var i2 = _g12++;
					t = t + ".pubmedTable .pubmedTable" + i2 + " {font-size:10px;background-color:#2980d6;width:20px;height:" + heightArray[i2] + "px;}";
				}
				t = t + "\n                    </style>\n                    <div class=\"pubmedTableContent\">\n                    <h3>Pubmed for " + screenData.target + " " + auxtext + "</h3>\n                    <div class=\"pubmedTablePreText\"># of Publications</div>\n                    <div class=\"pubmedTableNum\"> <div class=\"pubmedTableTop\">" + numMax + "</div><div class=\"pubmedTableMiddle\">" + numMidt + "</div><div class=\"pubmedTableBottom\">0</div></div>\n                    <table class=\"pubmedTable\">\n                      <tr>";
				var _g13 = 0;
				var _g4 = numArray.length;
				while(_g13 < _g4) {
					var i3 = _g13++;
					t = t + "<th><a href=\"http://www.google.com\" target=\"_blank\"><div class=\"pubmedTable" + i3 + "\">" + numArray[i3] + "</div></a></th>";
				}
				t += "\n                      </tr>\n                    </table>\n                    <table class=\"pubmedTableN2\">\n                      <tr>";
				var _g14 = 0;
				var _g5 = results.length;
				while(_g14 < _g5) {
					var i4 = _g14++;
					t = t + "<th><div class=\"pubmedTableYear\">" + results[i4].year + "</div></th>";
				}
				t += "\n                      </tr>\n                    </table>\n                    </div>\n                    ";
				div.innerHTML = t;
				div.id = "divAnnotTable";
				div.style.cssText = "position:fixed;width:50px;left:" + x + ";top:" + y + ";-moz-border-radius:100px;border:1px  solid #ddd;-moz-box-shadow: 0px 0px 8px  #fff;";
				callBack(div);
			} else {
				saturn.client.WorkspaceApplication.getApplication().debug(error);
			}
		});
	} else {
		saturn.client.WorkspaceApplication.getApplication().debug("NOT access db");
	}
};
saturn.client.programs.phylo5.Phylo5AnnotationMethods.divNonSilent = function(screenData,x,y,callBack) {
	if(screenData.divAccessed == false) {
		screenData.divAccessed = true;
		var div = js.Browser.get_document().createElement("div");
		div.id = "box";
		var t = "<style type=\"text/css\">\n                    .interactionContent {width:500px; background-color:#ffffff; border:1px solid #cccccc;}\n                    .interactionTitle{background-color:#eee; padding:5px 15px; }\n                    .interactionInfo{font-size:10px}\n                    .interactionResult{padding:3px 10px ;}\n                    </style>\n                    <div class=\"interactionContent\">\n                    <div class=\"interactionTitle\">\n                    <h3>Non-silent SNPs (" + screenData.target + ")</h3>\n                    <img src=\"http://apps.thesgc.org/resources/phylogenetic_trees/polymorphism_images/" + screenData.root.targetFamily + "/" + screenData.target + "-1_" + screenData.root.targetFamily + ".png\"><br>\n                    </div></div>\n                ";
		div.innerHTML = t;
		div.id = "divAnnotTable";
		div.style.cssText = "position:fixed;width:50px;left:" + x + ";top:" + y + ";-moz-border-radius:100px;border:1px  solid #ddd;-moz-box-shadow: 0px 0px 8px  #fff;";
		callBack(div);
	} else {
		saturn.client.WorkspaceApplication.getApplication().debug("NOT access db");
	}
};
saturn.client.programs.phylo5.Phylo5AnnotationMethods.divInteraction = function(screenData,x,y,callBack) {
	if(screenData.divAccessed == false) {
		screenData.divAccessed = true;
		var div = js.Browser.get_document().createElement("div");
		div.id = "box";
		var t = "<style type=\"text/css\">\n                    .interactionContent {width:500px; background-color:#ffffff; border:1px solid #cccccc;}\n                    .interactionTitle{background-color:#eee; padding:5px 15px; }\n                    .interactionInfo{font-size:10px}\n                    .interactionResult{padding:3px 10px ;}\n                    </style>\n                    <div class=\"interactionContent\">\n                    <div class=\"interactionTitle\">\n                    <h3>Protein Interaction (" + screenData.target + ")</h3>\n                    <img src=\"http://apps.thesgc.org/resources/phylogenetic_trees/interaction/" + screenData.target + ".png\"><br>\n                    <span class=\"interactionInfo\">Image Source: http://string-db.org</span>\n                    </div></div>\n                ";
		div.innerHTML = t;
		div.id = "divAnnotTable";
		div.style.cssText = "position:fixed;width:50px;left:" + x + ";top:" + y + ";-moz-border-radius:100px;border:1px  solid #ddd;-moz-box-shadow: 0px 0px 8px  #fff;";
		callBack(div);
	} else {
		saturn.client.WorkspaceApplication.getApplication().debug("NOT access db");
	}
};
saturn.client.programs.phylo5.Phylo5AnnotationMethods.divSummary = function(screenData,x,y,callBack) {
	if(screenData.divAccessed == false) {
		screenData.divAccessed = true;
		var al;
		var auxtext;
		saturn.client.WorkspaceApplication.getApplication().debug("access db");
		al = "summaryDiv";
		auxtext = "";
		saturn.client.WorkspaceApplication.getApplication().getProvider().getByNamedQuery(al,{ target : screenData.target},null,true,function(results,error) {
			if(error == null) {
				var div = js.Browser.get_document().createElement("div");
				div.id = "box";
				var ii;
				var ttext;
				var uniprot;
				ttext = "";
				uniprot = "";
				var _g1 = 0;
				var _g = results.length;
				while(_g1 < _g) {
					var ii1 = _g1++;
					ttext = ttext + results[ii1].fun + "<br><br>";
					uniprot = results[ii1].uniprot;
				}
				if(ttext == "null<br><br>" || ttext == "<br><br>") {
					ttext = "No Summary Available";
				}
				var t = "<style type=\"text/css\">\n                    .summaryContent {width:300px; background-color:#ffffff; border:1px solid #cccccc;}\n                    .summaryTitle{background-color:#eee; padding:5px 15px; }\n                    .summaryInfo{font-size:10px}\n                    .summaryResult{padding:3px 10px ;}\n                    </style>\n                    <div class=\"summaryContent\">\n                    <div class=\"summaryTitle\">\n                    <h3><a href=\"http://www.uniprot.org/uniprot/" + uniprot + "\" target=\"_blank\">" + screenData.target + "</a></h3>\n                    <span class=\"summaryInfo\">Click title for Uniprot reference page</span>\n                    </div><br><br>\n                    <div class=\"summaryResult\">\n                    " + ttext + "\n                    </div>\n                    </div>";
				div.innerHTML = t;
				div.id = "divAnnotTable";
				div.style.cssText = "position:fixed;width:50px;left:" + x + ";top:" + y + ";-moz-border-radius:100px;border:1px  solid #ddd;-moz-box-shadow: 0px 0px 8px  #fff;";
				callBack(div);
			} else {
				saturn.client.WorkspaceApplication.getApplication().debug(error);
			}
		});
	} else {
		saturn.client.WorkspaceApplication.getApplication().debug("NOT access db");
	}
};
saturn.client.programs.phylo5.Phylo5AnnotationMethods.divChemicalProbes = function(screenData,x,y,callBack) {
	if(screenData.divAccessed == false) {
		screenData.divAccessed = true;
		var al;
		var auxtext;
		saturn.client.WorkspaceApplication.getApplication().debug("access db");
		al = "chemicalDiv";
		auxtext = "";
		saturn.client.WorkspaceApplication.getApplication().getProvider().getByNamedQuery(al,{ target : screenData.target},null,true,function(results,error) {
			if(error == null) {
				var div = js.Browser.get_document().createElement("div");
				div.id = "box";
				var ii;
				var ttext = "";
				ii = 0;
				var _g1 = 0;
				var _g = results.length;
				while(_g1 < _g) {
					var ii1 = _g1++;
					ttext = ttext + "<div class=\"inhibitorsRes\"><img src=\"http://apps.thesgc.org/resources/phylogenetic_trees/ligands_images/ligand" + results[ii1].pkey + ".png\"><br>\n                        " + results[ii1].name + "<br>";
					if(results[ii1].ic50 != null) {
						ttext = ttext + "IC50/Kd/Ki: " + results[ii1].ic50 + "&microM<br>";
					}
					if(results[ii1].pmid != null || results[ii1].pmid != "") {
						ttext = ttext + "Pubmed ID: <a href=\"http://www.ncbi.nlm.nih.gov/pubmed/" + results[ii1].pmid + "\" target=\"_blank\">" + results[ii1].pmid + "</a>";
					}
					if(results[ii1].ref != null || results[ii1].ref != "") {
						ttext = ttext + results[ii1].ref + "<br>";
					}
					ttext += "</div>";
				}
				var l = (ii + 1) * 310;
				var t = "\n                    <style type=\"text/css\">\n                    .inhibitorsContent {width:" + l + "px; background-color:#ffffff; border:1px solid #cccccc;}\n                    .inhibitorsTitle{background-color:#eee; padding:5px 15px; }\n                    .inhibitorsInfo{font-size:10px}\n                    .inhibitorsResult{padding:3px 10px ;}\n                    </style>\n                    <div class=\"inhibitorsContent\">\n                    <div class=\"inhibitorsTitle\">\n                    <h3>" + screenData.target + "</h3>\n                    <span class=\"inhibitorsInfo\">Activity indicated is that reported by authors, but does not necessarily indicate an examination of the mechanism of action of the compound</span>\n                    <div class=\"inhibitorsResult\">\n                    " + ttext + "\n                    </div>\n                    </div>\n                    </div>";
				div.innerHTML = t;
				div.id = "divAnnotTable";
				div.style.cssText = "position:fixed;width:50px;left:" + x + ";top:" + y + ";-moz-border-radius:100px;border:1px  solid #ddd;-moz-box-shadow: 0px 0px 8px  #fff;";
				callBack(div);
			} else {
				saturn.client.WorkspaceApplication.getApplication().debug(error);
			}
		});
	} else {
		saturn.client.WorkspaceApplication.getApplication().debug("NOT access db");
	}
};
saturn.client.programs.phylo5.Phylo5AnnotationMethods.divLigands = function(screenData,x,y,callBack) {
	if(screenData.divAccessed == false) {
		screenData.divAccessed = true;
		var al;
		var auxtext;
		saturn.client.WorkspaceApplication.getApplication().debug("access db");
		al = "";
		var _g = screenData.suboption;
		switch(_g) {
		case 1:
			al = "ligands95Div";
			break;
		case 2:
			al = "ligands95BestDiv";
			break;
		case 3:
			al = "ligands40Div";
			break;
		}
		auxtext = "";
		saturn.client.WorkspaceApplication.getApplication().getProvider().getByNamedQuery(al,{ pkey : screenData.annotation.text},null,true,function(results,error) {
			if(error == null) {
				var div = js.Browser.get_document().createElement("div");
				div.id = "box";
				var ii;
				var ttext = "";
				var k;
				var myArray;
				var keyArray;
				myArray = [];
				keyArray = [];
				var kt = 0;
				var pdbi = 0;
				ii = 0;
				var _g2 = 0;
				var _g1 = results.length;
				while(_g2 < _g1) {
					var ii1 = _g2++;
					k = results[ii1].lig_pkey;
					if(myArray[k] == null) {
						keyArray[kt] = k;
						++kt;
						myArray[k] = { pkey : results[ii1].lig_pkey, id : results[ii1].lig_id, formula : results[ii1].lig_formula, name : results[ii1].lig_name, title : results[ii1].title, pdbs : [], pdb : new haxe.ds.StringMap()};
						pdbi = 0;
						myArray[k].pdbs[pdbi] = results[ii1].pdb_id;
						++pdbi;
						var h = { percent : results[ii1].percent_id, title : results[ii1].title};
						myArray[k].pdb.set(results[ii1].pdb_id,h);
					}
					if(myArray[k].pdb.exists(results[ii1].pdb_id) == false) {
						var h1 = { percent : results[ii1].percent_id, title : results[ii1].title};
						myArray[k].pdb.set(results[ii1].pdb_id,h1);
						myArray[k].pdbs[pdbi] = results[ii1].pdb_id;
						++pdbi;
					} else {
						var pd = myArray[k].pdb.get(results[ii1].pdb_id);
						var per = pd.percent;
						var h2 = { percent : results[ii1].percent_id, title : results[ii1].title};
						if(results[ii1].percent_id > per) {
							myArray[k].pdb.set(results[ii1].pdb_id,h2);
						}
					}
				}
				var lig;
				var _g21 = 0;
				var _g11 = keyArray.length;
				while(_g21 < _g11) {
					var kt1 = _g21++;
					var a = keyArray[kt1];
					ttext = ttext + "<div class=\"ligandRes\"><img src=\"http://apps.thesgc.org/resources/phylogenetic_trees/pdb_ligand_images/" + myArray[a].id + ".gif\" width=\"250px\"><br>\n                        " + myArray[a].id + "<br>structures:";
					var _g4 = 0;
					var _g3 = myArray[a].pdbs.length;
					while(_g4 < _g3) {
						var pdbi1 = _g4++;
						var pdbb = myArray[a].pdb.get(myArray[a].pdbs[pdbi1]);
						var tit = pdbb.title;
						var cent = pdbb.percent;
						ttext = ttext + "<a href=\"http://www.rcsb.org/pdb/explore/explore.do?structureId=" + myArray[a].pdbs[pdbi1] + "\" alt=\"" + tit + "\" target=\"_blank\">" + myArray[a].pdbs[pdbi1] + "</a>(" + cent + "%) - ";
					}
					ttext += "</div><br>";
				}
				var t = "\n                    <style type=\"text/css\">\n                    .inhibitorsContent {width:400px; background-color:#ffffff; border:1px solid #cccccc;}\n                    .inhibitorsTitle{background-color:#eee; padding:5px 15px; }\n                    .inhibitorsInfo{font-size:10px}\n                    .inhibitorsResult{padding:3px 10px ;}\n                    </style>\n                    <div class=\"inhibitorsContent\">\n                    <div class=\"inhibitorsTitle\">\n                    <h3>" + screenData.target + "</h3>\n                    <div class=\"inhibitorsResult\">\n                    " + ttext + "\n                    </div>\n                    </div>\n                    </div>";
				div.innerHTML = t;
				div.id = "divAnnotTable";
				div.style.cssText = "position:fixed;width:50px;left:" + x + ";top:" + y + ";-moz-border-radius:100px;border:1px  solid #ddd;-moz-box-shadow: 0px 0px 8px  #fff;";
				callBack(div);
			} else {
				saturn.client.WorkspaceApplication.getApplication().debug(error);
			}
		});
	} else {
		saturn.client.WorkspaceApplication.getApplication().debug("NOT access db");
	}
};
saturn.client.programs.phylo5.Phylo5AnnotationMethods.divInhibitors = function(screenData,x,y,callBack) {
	if(screenData.divAccessed == false) {
		screenData.divAccessed = true;
		var al;
		var auxtext;
		saturn.client.WorkspaceApplication.getApplication().debug("access db");
		al = "";
		var _g = screenData.suboption;
		switch(_g) {
		case 0:
			al = "inhibitorsAllDiv";
			break;
		case 1:
			al = "inhibitors5nDiv";
			break;
		case 2:
			al = "inhibitors2nDiv";
			break;
		case 3:
			al = "inhibitors05nDiv";
			break;
		}
		auxtext = "";
		saturn.client.WorkspaceApplication.getApplication().getProvider().getByNamedQuery(al,{ target : screenData.target},null,true,function(results,error) {
			if(error == null) {
				var div = js.Browser.get_document().createElement("div");
				div.id = "box";
				var ii;
				var ttext = "";
				ii = 0;
				var _g2 = 0;
				var _g1 = results.length;
				while(_g2 < _g1) {
					var ii1 = _g2++;
					ttext = ttext + "<div class=\"inhibitorsRes\"><img src=\"http://apps.thesgc.org/resources/phylogenetic_trees/ligands_images/ligand" + results[ii1].pkey + ".png\"><br>\n                        " + results[ii1].name + "<br>";
					if(results[ii1].ic50 != null) {
						ttext = ttext + "IC50/Kd/Ki: " + results[ii1].ic50 + "&microM<br>";
					}
					if(results[ii1].pmid != null || results[ii1].pmid != "") {
						ttext = ttext + "Pubmed ID: <a href=\"http://www.ncbi.nlm.nih.gov/pubmed/" + results[ii1].pmid + "\" target=\"_blank\">" + results[ii1].pmid + "</a>";
					}
					if(results[ii1].ref != null || results[ii1].ref != "") {
						ttext = ttext + results[ii1].ref + "<br>";
					}
					ttext += "</div>";
				}
				var l = (ii + 1) * 310;
				var t = "\n                    <style type=\"text/css\">\n                    .inhibitorsContent {width:" + l + "px; background-color:#ffffff; border:1px solid #cccccc;}\n                    .inhibitorsTitle{background-color:#eee; padding:5px 15px; }\n                    .inhibitorsInfo{font-size:10px}\n                    .inhibitorsResult{padding:3px 10px ;}\n                    </style>\n                    <div class=\"inhibitorsContent\">\n                    <div class=\"inhibitorsTitle\">\n                    <h3>" + screenData.target + "</h3>\n                    <span class=\"inhibitorsInfo\">Activity indicated is that reported by authors, but does not necessarily indicate an examination of the mechanism of action of the compound</span>\n                    <div class=\"inhibitorsResult\">\n                    " + ttext + "\n                    </div>\n                    </div>\n                    </div>";
				div.innerHTML = t;
				div.id = "divAnnotTable";
				div.style.cssText = "position:fixed;width:50px;left:" + x + ";top:" + y + ";-moz-border-radius:100px;border:1px  solid #ddd;-moz-box-shadow: 0px 0px 8px  #fff;";
				callBack(div);
			} else {
				saturn.client.WorkspaceApplication.getApplication().debug(error);
			}
		});
	} else {
		saturn.client.WorkspaceApplication.getApplication().debug("NOT access db");
	}
};
saturn.client.programs.phylo5.Phylo5AnnotationMethods.divSubstrate = function(screenData,x,y,callBack) {
	if(screenData.divAccessed == false) {
		screenData.divAccessed = true;
		var al;
		var auxtext;
		saturn.client.WorkspaceApplication.getApplication().debug("access db");
		al = "substrateDiv";
		auxtext = "";
		saturn.client.WorkspaceApplication.getApplication().getProvider().getByNamedQuery(al,{ target : screenData.target, subb : screenData.annotation.text},null,true,function(results,error) {
			if(error == null) {
				var div = js.Browser.get_document().createElement("div");
				div.id = "box";
				var ii;
				var ttext;
				var subs;
				ttext = "Pubmed Ids: <br>";
				subs = "";
				var _g1 = 0;
				var _g = results.length;
				while(_g1 < _g) {
					var ii1 = _g1++;
					ttext = ttext + "<a href=\"http://www.ncbi.nlm.nih.gov/pubmed/" + results[ii1].pmid_list + "\" target=\"_blank\">" + results[ii1].pmid_list + "</a><br><br>";
					subs = results[ii1].sub;
					break;
				}
				var t = "<style type=\"text/css\">\n                    .substrateContent {width:300px; background-color:#ffffff; border:1px solid #cccccc;}\n                    .substrateTitle{background-color:#eee; padding:5px 15px; }\n                    .substrateResult{padding:3px 10px ;}\n                    </style>\n                    <div class=\"substrateContent\">\n                    <div class=\"substrateTitle\">\n                    <h3>" + screenData.target + " (" + subs + ")</h3>\n                    </div><br><br>\n                    <div class=\"substrateResult\">\n                    " + ttext + "\n                    </div>\n                    </div>";
				div.innerHTML = t;
				div.id = "divAnnotTable";
				div.style.cssText = "position:fixed;width:50px;left:" + x + ";top:" + y + ";-moz-border-radius:100px;border:1px  solid #ddd;-moz-box-shadow: 0px 0px 8px  #fff;";
				callBack(div);
			} else {
				saturn.client.WorkspaceApplication.getApplication().debug(error);
			}
		});
	} else {
		saturn.client.WorkspaceApplication.getApplication().debug("NOT access db");
	}
};
saturn.client.programs.phylo5.Phylo5AnnotationMethods.divSubcellular = function(screenData,x,y,callBack) {
	if(screenData.divAccessed == false) {
		screenData.divAccessed = true;
		var al;
		var auxtext;
		saturn.client.WorkspaceApplication.getApplication().debug("access db");
		al = "subcellularDiv";
		auxtext = "";
		saturn.client.WorkspaceApplication.getApplication().getProvider().getByNamedQuery(al,{ target : screenData.target},null,true,function(results,error) {
			if(error == null) {
				var div = js.Browser.get_document().createElement("div");
				div.id = "box";
				var ii;
				var ttext;
				var subs;
				ttext = results[0].location + "<br>";
				var t = "<style type=\"text/css\">\n                    .subcellularContent {width:300px; background-color:#ffffff; border:1px solid #cccccc;}\n                    .subcellularTitle{background-color:#eee; padding:5px 15px; }\n                    .subcellularInfo{font-size:10px}\n                    .subcellularResult{padding:3px 10px ;}\n                    </style>\n                    <div class=\"subcellularContent\">\n                    <div class=\"subcellularTitle\">\n                    <h3><a href=\"http://www.uniprot.org/uniprot/" + results[0].uniprot + "\" target=\"_blank\">" + screenData.target + "</a></h3>\n                    <span class=\"subcellularInfo\">Click title for Uniprot reference page</span>\n                    </div><br><br>\n                    <div class=\"subcellularResult\">\n                    " + ttext + "\n                    </div>\n                    </div>";
				div.innerHTML = t;
				div.id = "divAnnotTable";
				div.style.cssText = "position:fixed;width:50px;left:" + x + ";top:" + y + ";-moz-border-radius:100px;border:1px  solid #ddd;-moz-box-shadow: 0px 0px 8px  #fff;";
				callBack(div);
			} else {
				saturn.client.WorkspaceApplication.getApplication().debug(error);
			}
		});
	} else {
		saturn.client.WorkspaceApplication.getApplication().debug("NOT access db");
	}
};
saturn.client.programs.phylo5.Phylo5AnnotationMethods.divInteractome = function(screenData,x,y,callBack) {
	if(screenData.divAccessed == false) {
		screenData.divAccessed = true;
		var al;
		var auxtext;
		saturn.client.WorkspaceApplication.getApplication().debug("access db");
		al = "interactomeDiv";
		auxtext = "";
		saturn.client.WorkspaceApplication.getApplication().getProvider().getByNamedQuery(al,{ target : screenData.target},null,true,function(results,error) {
			if(error == null) {
				var div = js.Browser.get_document().createElement("div");
				div.id = "box";
				var ii;
				var ttext;
				var subs;
				ttext = "";
				var _g1 = 0;
				var _g = results.length;
				while(_g1 < _g) {
					var ii1 = _g1++;
					ttext = ttext + "<a href=\"http://www.ncbi.nlm.nih.gov/gene/?term=" + results[ii1].geneid_b + "\" target=\"_blank\">" + results[ii1].target_id_b + "</a><br>";
				}
				var t = "<style type=\"text/css\">\n                    .interactomeContent {width:300px; background-color:#ffffff; border:1px solid #cccccc;}\n                    .interactomeTitle{background-color:#eee; padding:5px 15px; }\n                    .interactomeResult{padding:3px 10px ;}\n                    </style>\n                    <div class=\"interactomeContent\">\n                    <div class=\"interactomeTitle\">\n                    <h3>Protein Interactome (" + screenData.target + ")</h3>\n                    </div><br><br>\n                    <div class=\"interactomeResult\">\n                    " + ttext + "\n                    </div>\n                    </div>";
				div.innerHTML = t;
				div.id = "divAnnotTable";
				div.style.cssText = "position:fixed;width:50px;left:" + x + ";top:" + y + ";-moz-border-radius:100px;border:1px  solid #ddd;-moz-box-shadow: 0px 0px 8px  #fff;";
				callBack(div);
			} else {
				saturn.client.WorkspaceApplication.getApplication().debug(error);
			}
		});
	} else {
		saturn.client.WorkspaceApplication.getApplication().debug("NOT access db");
	}
};
saturn.client.programs.phylo5.Phylo5AnnotationMethods.divOrphanet = function(screenData,x,y,callBack) {
	if(screenData.divAccessed == false) {
		screenData.divAccessed = true;
		var al;
		var auxtext;
		saturn.client.WorkspaceApplication.getApplication().debug("access db");
		al = "orphanetDiv";
		auxtext = "";
		saturn.client.WorkspaceApplication.getApplication().getProvider().getByNamedQuery(al,{ target : screenData.target},null,true,function(results,error) {
			if(error == null) {
				var div = js.Browser.get_document().createElement("div");
				div.id = "box";
				var ii;
				var ttext;
				var geneid;
				ttext = "";
				geneid = "";
				var _g1 = 0;
				var _g = results.length;
				while(_g1 < _g) {
					var ii1 = _g1++;
					ttext = ttext + results[ii1].disorder_gene_assoc_type + " " + results[ii1].disorder_name + " (" + results[ii1].disorder_gene_assoc_status + ")<br><br>";
					geneid = results[ii1].geneid;
				}
				var t = "<style type=\"text/css\">\n                    .orphanetContent {width:300px; background-color:#ffffff; border:1px solid #cccccc;}\n                    .orphanetTitle{background-color:#eee; padding:5px 15px; }\n                    .orphanetInfo{font-size:10px}\n                    .orphanetResult{padding:3px 10px ;}\n                    </style>\n                    <div class=\"orphanetContent\">\n                    <div class=\"orphanetTitle\">\n                    <h3><a href=\"http://www.orpha.net/consor/cgi-bin/Disease_Genes.php?lng=EN&data_id=" + geneid + "\" target=\"_blank\">" + screenData.target + "</a></h3>\n                    <span class=\"orphanetInfo\">Click title for Orphanet reference page</span>\n                    </div><br><br>\n                    <div class=\"orphanetResult\">\n                    " + ttext + "\n                    </div>\n                    </div>";
				div.innerHTML = t;
				div.id = "divAnnotTable";
				div.style.cssText = "position:fixed;width:50px;left:" + x + ";top:" + y + ";-moz-border-radius:100px;border:1px  solid #ddd;-moz-box-shadow: 0px 0px 8px  #fff;";
				callBack(div);
			} else {
				saturn.client.WorkspaceApplication.getApplication().debug(error);
			}
		});
	} else {
		saturn.client.WorkspaceApplication.getApplication().debug("NOT access db");
	}
};
saturn.client.programs.phylo5.Phylo5AnnotationMethods.familyDomain = function(targetFamily,callBack) {
	var component = Ext.create("Ext.Img",{ src : "http://apps.thesgc.org/resources/phylogenetic_trees/static_images/" + targetFamily + "_tree.png", renderTo : Ext.getBody()});
	callBack(component);
};
saturn.client.programs.phylo5.Phylo5AnnotationMethods.prototype = {
	__class__: saturn.client.programs.phylo5.Phylo5AnnotationMethods
};
saturn.client.programs.phylo5.Phylo5RendererI = $hxClasses["saturn.client.programs.phylo5.Phylo5RendererI"] = function() { };
saturn.client.programs.phylo5.Phylo5RendererI.__name__ = ["saturn","client","programs","phylo5","Phylo5RendererI"];
saturn.client.programs.phylo5.Phylo5RendererI.prototype = {
	drawLine: null
	,drawText: null
	,startGroup: null
	,endGroup: null
	,__class__: saturn.client.programs.phylo5.Phylo5RendererI
};
saturn.client.programs.phylo5.Phylo5CanvasRenderer = $hxClasses["saturn.client.programs.phylo5.Phylo5CanvasRenderer"] = function(width,height,parentElement,rootNode) {
	this.scale = 1.0;
	var doc;
	this.canvas = js.Browser.get_document().createElement("canvas");
	this.parent = parentElement;
	parentElement.appendChild(this.canvas);
	this.canvas.width = width;
	this.canvas.height = height;
	this.rootNode = rootNode;
	this.ctx = this.canvas.getContext("2d");
	this.ctx.translate(0.5,0.5);
};
saturn.client.programs.phylo5.Phylo5CanvasRenderer.__name__ = ["saturn","client","programs","phylo5","Phylo5CanvasRenderer"];
saturn.client.programs.phylo5.Phylo5CanvasRenderer.__interfaces__ = [saturn.client.programs.phylo5.Phylo5RendererI];
saturn.client.programs.phylo5.Phylo5CanvasRenderer.prototype = {
	canvas: null
	,ctx: null
	,scale: null
	,parent: null
	,rootNode: null
	,cx: null
	,cy: null
	,drawLine: function(x0,y0,x1,y1,strokeStyle) {
		this.ctx.strokeStyle = strokeStyle;
		this.ctx.beginPath();
		this.ctx.moveTo(Math.round(x0),Math.round(y0));
		this.ctx.lineTo(Math.round(x1),Math.round(y1));
		this.ctx.stroke();
	}
	,drawText: function(text,tx,ty,x,y,rotation,textAlign,color) {
		this.ctx.save();
		this.ctx.translate(tx,ty);
		this.ctx.rotate(rotation);
		this.ctx.textAlign = textAlign;
		this.ctx.fillStyle = color;
		this.ctx.fillText(text,x,y);
		this.ctx.restore();
	}
	,drawSquare: function(tx,ty,color) {
		this.ctx.save();
		this.ctx.beginPath();
		this.ctx.rect(tx,ty,10,10);
		this.ctx.fillStyle = color;
		this.ctx.fill();
		this.ctx.restore();
	}
	,drawCircle: function(tx,ty,color) {
		var radius = 5;
		this.ctx.save();
		this.ctx.beginPath();
		this.ctx.strokeStyle = color;
		this.ctx.arc(tx,ty,radius,0,2 * Math.PI);
		this.ctx.fillStyle = color;
		this.ctx.fill();
		this.ctx.restore();
	}
	,drawImg: function(tx,ty,img) {
		this.ctx.drawImage(img,tx,ty);
	}
	,mesureText: function(text) {
		return this.ctx.measureText(text).width;
	}
	,startGroup: function(groupName) {
	}
	,endGroup: function() {
	}
	,zoomIn: function(annotations) {
		this.scale += 0.2;
		var newWidth = this.canvas.width * this.scale;
		var newHeight = this.canvas.height * this.scale;
		this.ctx.save();
		this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height);
		this.ctx.translate(this.cx,this.cy);
		this.ctx.scale(this.scale,this.scale);
		var radialRendererObj = new saturn.client.programs.phylo5.Phylo5RadialTreeLayout(this.canvas.width,this.canvas.height);
		radialRendererObj.render(this.rootNode,this,annotations);
		this.ctx.restore();
	}
	,zoomOut: function(annotations) {
		if(this.scale > 0.4) {
			this.scale -= 0.2;
			var newWidth = this.canvas.width * this.scale;
			var newHeight = this.canvas.height * this.scale;
			this.ctx.save();
			this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height);
			this.ctx.translate(this.cx,this.cy);
			this.ctx.scale(this.scale,this.scale);
			var radialRendererObj = new saturn.client.programs.phylo5.Phylo5RadialTreeLayout(this.canvas.width,this.canvas.height);
			radialRendererObj.render(this.rootNode,this,annotations);
			this.ctx.restore();
		}
	}
	,__class__: saturn.client.programs.phylo5.Phylo5CanvasRenderer
};
saturn.client.programs.phylo5.Phylo5Math = $hxClasses["saturn.client.programs.phylo5.Phylo5Math"] = function() { };
saturn.client.programs.phylo5.Phylo5Math.__name__ = ["saturn","client","programs","phylo5","Phylo5Math"];
saturn.client.programs.phylo5.Phylo5Math.degreesToRadians = function(a) {
	return a * (Math.PI / 180);
};
saturn.client.programs.phylo5.Phylo5Math.radiansToDegrees = function(b) {
	return b * (180 / Math.PI);
};
saturn.client.programs.phylo5.Phylo5Math.getMaxOfArray = function(a) {
	var i;
	var n = a[0];
	var _g1 = 1;
	var _g = a.length;
	while(_g1 < _g) {
		var i1 = _g1++;
		if(n < a[i1]) {
			n = a[i1];
		}
	}
	return n;
};
saturn.client.programs.phylo5.Phylo5NewickParser = $hxClasses["saturn.client.programs.phylo5.Phylo5NewickParser"] = function() {
};
saturn.client.programs.phylo5.Phylo5NewickParser.__name__ = ["saturn","client","programs","phylo5","Phylo5NewickParser"];
saturn.client.programs.phylo5.Phylo5NewickParser.prototype = {
	parse: function(newickString) {
		var rootNode = new saturn.client.programs.phylo5.Phylo5TreeNode();
		var currentNode = rootNode;
		var a;
		var branch;
		var charArray = newickString.split("");
		var j = 0;
		var _g1 = 0;
		var _g = charArray.length;
		while(_g1 < _g) {
			var j1 = _g1++;
			var i = j1;
			if(charArray[i] == "(" && charArray[i + 1] == "(") {
				var childNode = new saturn.client.programs.phylo5.Phylo5TreeNode(currentNode,"",false,0);
				currentNode = childNode;
			} else if(charArray[i] == "(" && charArray[i + 1] != "(" || charArray[i] == "," && charArray[i + 1] != "(") {
				++i;
				var name = "";
				while(charArray[i] != ":" && charArray[i] != "," && charArray[i] != ")") {
					name += charArray[i];
					++i;
				}
				if(charArray[i] == ":") {
					++i;
					branch = "";
					while(charArray[i] != "," && charArray[i] != ")" && charArray[i] != ";") {
						branch += charArray[i];
						++i;
					}
					--i;
					branch = Std.parseFloat(branch);
				} else {
					branch = 1;
				}
				var child = new saturn.client.programs.phylo5.Phylo5TreeNode(currentNode,name,true,branch);
			} else if(charArray[i] == "," && charArray[i + 1] == "(") {
				var child1 = new saturn.client.programs.phylo5.Phylo5TreeNode(currentNode,"",false,0);
				currentNode = child1;
			} else if(charArray[i] == ")") {
				if(charArray[i + 1] == ":") {
					i += 2;
					branch = "";
					while(charArray[i] != "," && charArray[i] != ")" && charArray[i] != ";") {
						branch += charArray[i];
						++i;
					}
					--i;
					currentNode.branch = Std.parseFloat(branch);
				}
				currentNode = currentNode.parent;
			}
		}
		if(currentNode == null) {
			return rootNode;
		} else {
			return currentNode;
		}
	}
	,__class__: saturn.client.programs.phylo5.Phylo5NewickParser
};
saturn.client.programs.phylo5.Phylo5RadialTreeLayout = $hxClasses["saturn.client.programs.phylo5.Phylo5RadialTreeLayout"] = function(width,height) {
	this.cx = width / 2;
	this.cy = height / 2;
};
saturn.client.programs.phylo5.Phylo5RadialTreeLayout.__name__ = ["saturn","client","programs","phylo5","Phylo5RadialTreeLayout"];
saturn.client.programs.phylo5.Phylo5RadialTreeLayout.prototype = {
	cx: null
	,cy: null
	,render: function(treeNode,renderer,annotations) {
		var i = 0;
		var x = treeNode.x;
		var y = treeNode.y;
		while(i < treeNode.children.length) {
			treeNode.children[i].space = 0;
			if(treeNode.children[i].isLeaf()) {
				renderer.drawLine(x,y,treeNode.children[i].x,treeNode.children[i].y,"rgb(28,102,224)");
				var t;
				if(treeNode.children[i].angle > Math.PI / 2 && treeNode.children[i].angle < 3 * Math.PI / 2) {
					renderer.drawText(treeNode.children[i].name,treeNode.children[i].x,treeNode.children[i].y,-2,3,treeNode.children[i].angle + Math.PI + Math.PI / 20,"end","#585b5f");
					t = renderer.mesureText(treeNode.children[i].name) + 10;
				} else {
					renderer.drawText(" " + treeNode.children[i].name,treeNode.children[i].x,treeNode.children[i].y,-2,3,treeNode.children[i].angle + Math.PI / 20,"start","#585b5f");
					t = renderer.mesureText(treeNode.children[i].name) + 10;
				}
				var j;
				var _g1 = 1;
				var _g = annotations.length;
				while(_g1 < _g) {
					var j1 = _g1++;
					if(annotations[j1] == true) {
						var added = this.addAnnotation(treeNode.children[i],j1,t,renderer);
						if(treeNode.children[i].annotations[j1] != null && treeNode.children[i].annotations[j1].alfaAnnot != null && treeNode.children[i].annotations[j1].alfaAnnot.length > 0) {
							var u = 0;
							treeNode.children[i].space += 1;
							var _g3 = 0;
							var _g2 = treeNode.children[i].annotations[j1].alfaAnnot.length;
							while(_g3 < _g2) {
								var u1 = _g3++;
								added = this.addAlfaAnnotation(treeNode.children[i],treeNode.children[i].annotations[j1].alfaAnnot[u1],j1,t,renderer);
								if(added == true) {
									treeNode.children[i].space += 1;
								}
							}
						} else if(added == true) {
							treeNode.children[i].space += 1;
						}
					}
				}
			} else {
				this.render(treeNode.children[i],renderer,annotations);
				renderer.drawLine(x,y,treeNode.children[i].x,treeNode.children[i].y,"rgb(28,102,224)");
			}
			++i;
		}
	}
	,addAnnotation: function(leave,annotation,$long,renderer) {
		var res = false;
		var data = new saturn.client.programs.phylo5.Phylo5ScreenData();
		data.target = leave.name;
		data.annot = annotation;
		data.annotation = leave.annotations[annotation];
		var rootN = leave.root;
		var _g = rootN.annotations[annotation].shape;
		switch(_g) {
		case "cercle":
			if(leave.activeAnnotation[annotation] == true) {
				if(leave.annotations[annotation].hasAnnot == true) {
					if(leave.space == 0) {
						++$long;
					} else {
						$long += 27 * leave.space;
					}
					var nx = leave.x + Math.cos(leave.angle + Math.PI / 20) * $long;
					var ny = leave.y + Math.sin(leave.angle + Math.PI / 20) * $long;
					renderer.drawCircle(nx,ny,leave.annotations[annotation].color[0].color);
					var aux = nx * renderer.scale;
					data.x = Math.round(aux);
					aux = ny * renderer.scale;
					data.y = Math.round(aux);
					aux = 7 * renderer.scale;
					data.width = Math.round(aux);
					data.height = Math.round(aux);
					data.point = 1;
					res = true;
				} else {
					return false;
				}
			}
			break;
		case "image":
			if(leave.activeAnnotation[annotation] == true) {
				if(leave.annotations[annotation].hasAnnot == true) {
					if(leave.space == 0) {
						$long += 7;
					} else {
						$long += 27 * leave.space;
					}
					var aux_x = leave.x;
					var aux_y = leave.y;
					if(leave.root.annotations[annotation].annotImg[leave.annotations[annotation].defaultImg] != null) {
						aux_x = leave.x - leave.root.annotations[annotation].annotImg[leave.annotations[annotation].defaultImg].width / 2;
						aux_y = leave.y - leave.root.annotations[annotation].annotImg[leave.annotations[annotation].defaultImg].height / 2;
						var nx1 = aux_x + Math.cos(leave.angle + Math.PI / 20) * $long;
						var ny1 = aux_y + Math.sin(leave.angle + Math.PI / 20) * $long;
						var imge = leave.root.annotations[annotation].annotImg[leave.annotations[annotation].defaultImg];
						if(imge != null) {
							renderer.drawImg(nx1,ny1,imge);
							var aux1 = nx1 * renderer.scale;
							data.x = Math.round(aux1);
							aux1 = ny1 * renderer.scale;
							data.y = Math.round(aux1);
							aux1 = 22 * renderer.scale;
							data.width = Math.round(aux1);
							aux1 = 21 * renderer.scale;
							data.height = Math.round(aux1);
							data.point = 1;
						}
					}
					res = true;
				} else {
					return false;
				}
			}
			break;
		case "square":
			if(leave.activeAnnotation[annotation] == true) {
				if(leave.annotations[annotation].hasAnnot == true) {
					if(leave.space == 0) {
						++$long;
					} else {
						$long += 27 * leave.space;
					}
					var aux_x1 = leave.x;
					var aux_y1 = leave.y;
					aux_x1 = leave.x - 7;
					aux_y1 = leave.y - 7;
					var nx2 = aux_x1 + Math.cos(leave.angle + Math.PI / 20) * $long;
					var ny2 = aux_y1 + Math.sin(leave.angle + Math.PI / 20) * $long;
					renderer.drawSquare(nx2,ny2,leave.annotations[annotation].color[0].color);
					data.point = 1;
					var aux2 = nx2 * renderer.scale;
					data.x = Math.round(aux2);
					aux2 = ny2 * renderer.scale;
					data.y = Math.round(aux2);
					aux2 = 20 * renderer.scale;
					data.width = Math.round(aux2);
					aux2 = 20 * renderer.scale;
					data.height = Math.round(aux2);
					res = true;
				} else {
					return false;
				}
			}
			break;
		case "text":
			if(leave.activeAnnotation[annotation] == true) {
				if(leave.annotations[annotation].hasAnnot == true) {
					if(leave.space == 0) {
						$long += 5;
					} else {
						$long += 25 * leave.space;
					}
					var aux_x2 = leave.x;
					var aux_y2 = leave.y;
					aux_x2 = leave.x - 7;
					aux_y2 = leave.y - 7;
					data.point = 2;
					var nx3 = aux_x2 + Math.cos(leave.angle + Math.PI / 20) * $long;
					var ny3 = aux_y2 + Math.sin(leave.angle + Math.PI / 20) * $long;
					renderer.drawText(leave.annotations[annotation].text,nx3,ny3,-2,3,0,"start",leave.annotations[annotation].color[0].color);
					var aux3 = nx3 * renderer.scale;
					data.x = Math.round(aux3) - 12;
					aux3 = ny3 * renderer.scale;
					data.y = Math.round(aux3);
					aux3 = leave.annotations[annotation].text.length * renderer.scale;
					data.width = 7 * Math.round(aux3);
					aux3 = 10 * renderer.scale;
					data.height = Math.round(aux3);
					res = true;
				} else {
					return false;
				}
			}
			break;
		}
		leave.root.screen[leave.root.screen.length] = data;
		return res;
	}
	,addAlfaAnnotation: function(leave,alfaAnnot,annotation,$long,renderer) {
		var res = false;
		var data = new saturn.client.programs.phylo5.Phylo5ScreenData();
		data.target = leave.name;
		data.annot = annotation;
		data.annotation = alfaAnnot;
		var rootN = leave.root;
		var _g = rootN.annotations[annotation].shape;
		switch(_g) {
		case "cercle":
			if(leave.activeAnnotation[annotation] == true) {
				if(alfaAnnot.hasAnnot == true) {
					if(leave.space == 0) {
						++$long;
					} else {
						$long += 27 * leave.space;
					}
					var nx = leave.x + Math.cos(leave.angle + Math.PI / 20) * $long;
					var ny = leave.y + Math.sin(leave.angle + Math.PI / 20) * $long;
					renderer.drawCircle(nx,ny,alfaAnnot.color[0].color);
					var aux = nx * renderer.scale;
					data.x = Math.round(aux);
					aux = ny * renderer.scale;
					data.y = Math.round(aux);
					aux = 7 * renderer.scale;
					data.width = Math.round(aux);
					data.height = Math.round(aux);
					data.point = 1;
					res = true;
				} else {
					return false;
				}
			}
			break;
		case "image":
			if(leave.activeAnnotation[annotation] == true) {
				if(alfaAnnot.hasAnnot == true) {
					if(leave.space == 0) {
						$long += 7;
					} else {
						$long += 27 * leave.space;
					}
					var aux_x = leave.x;
					var aux_y = leave.y;
					if(leave.root.annotations[annotation].annotImg[alfaAnnot.defaultImg] != null) {
						aux_x = leave.x - leave.root.annotations[annotation].annotImg[alfaAnnot.defaultImg].width / 2;
						aux_y = leave.y - leave.root.annotations[annotation].annotImg[alfaAnnot.defaultImg].height / 2;
						var nx1 = aux_x + Math.cos(leave.angle + Math.PI / 20) * $long;
						var ny1 = aux_y + Math.sin(leave.angle + Math.PI / 20) * $long;
						var imge = leave.root.annotations[annotation].annotImg[alfaAnnot.defaultImg];
						if(imge != null) {
							renderer.drawImg(nx1,ny1,imge);
							var aux1 = nx1 * renderer.scale;
							data.x = Math.round(aux1);
							aux1 = ny1 * renderer.scale;
							data.y = Math.round(aux1);
							aux1 = 22 * renderer.scale;
							data.width = Math.round(aux1);
							aux1 = 21 * renderer.scale;
							data.height = Math.round(aux1);
							data.point = 1;
						}
					}
					res = true;
				} else {
					return false;
				}
			}
			break;
		case "square":
			if(leave.activeAnnotation[annotation] == true) {
				if(alfaAnnot.hasAnnot == true) {
					if(leave.space == 0) {
						++$long;
					} else {
						$long += 27 * leave.space;
					}
					var aux_x1 = leave.x;
					var aux_y1 = leave.y;
					aux_x1 = leave.x - 7;
					aux_y1 = leave.y - 7;
					var nx2 = aux_x1 + Math.cos(leave.angle + Math.PI / 20) * $long;
					var ny2 = aux_y1 + Math.sin(leave.angle + Math.PI / 20) * $long;
					renderer.drawSquare(nx2,ny2,alfaAnnot.color[0].color);
					data.point = 1;
					var aux2 = nx2 * renderer.scale;
					data.x = Math.round(aux2);
					aux2 = ny2 * renderer.scale;
					data.y = Math.round(aux2);
					aux2 = 20 * renderer.scale;
					data.width = Math.round(aux2);
					aux2 = 20 * renderer.scale;
					data.height = Math.round(aux2);
					res = true;
				} else {
					return false;
				}
			}
			break;
		case "text":
			if(leave.activeAnnotation[annotation] == true) {
				if(alfaAnnot.hasAnnot == true) {
					if(leave.space == 0) {
						$long += 5;
					} else {
						$long += 25 * leave.space;
					}
					var aux_x2 = leave.x;
					var aux_y2 = leave.y;
					aux_x2 = leave.x - 7;
					aux_y2 = leave.y - 7;
					data.point = 2;
					var nx3 = aux_x2 + Math.cos(leave.angle + Math.PI / 20) * $long;
					var ny3 = aux_y2 + Math.sin(leave.angle + Math.PI / 20) * $long;
					renderer.drawText(alfaAnnot.text,nx3,ny3,-2,3,0,"start",alfaAnnot.color[0].color);
					var aux3 = nx3 * renderer.scale;
					data.x = Math.round(aux3) - 12;
					aux3 = ny3 * renderer.scale;
					data.y = Math.round(aux3);
					aux3 = alfaAnnot.text.length * renderer.scale;
					data.width = 7 * Math.round(aux3);
					aux3 = 10 * renderer.scale;
					data.height = Math.round(aux3);
					res = true;
				} else {
					return false;
				}
			}
			break;
		}
		leave.root.screen[leave.root.screen.length] = data;
		return res;
	}
	,addScreenPos: function(annotation,nx,ny,root) {
		var x0;
		var y0;
		x0 = Math.round(nx);
		y0 = Math.round(ny);
		switch(annotation) {
		case 1:
			break;
		case 2:
			break;
		}
	}
	,__class__: saturn.client.programs.phylo5.Phylo5RadialTreeLayout
};
saturn.client.programs.phylo5.Phylo5ScreenData = $hxClasses["saturn.client.programs.phylo5.Phylo5ScreenData"] = function() {
	this.suboption = 0;
	this.annotation = new saturn.client.programs.phylo5.Phylo5Annotation();
	this.created = false;
	this.divAccessed = false;
};
saturn.client.programs.phylo5.Phylo5ScreenData.__name__ = ["saturn","client","programs","phylo5","Phylo5ScreenData"];
saturn.client.programs.phylo5.Phylo5ScreenData.prototype = {
	point: null
	,x: null
	,y: null
	,width: null
	,height: null
	,annotation: null
	,created: null
	,target: null
	,annot: null
	,root: null
	,div: null
	,divAccessed: null
	,suboption: null
	,checkMouse: function(mx,my) {
		var _g = this.point;
		switch(_g) {
		case 1:
			if(mx > this.x - this.width && mx < this.x && my < this.y + this.height && my > this.y) {
				return true;
			} else {
				return false;
			}
			break;
		case 2:
			if(mx > this.x && mx < this.x + this.width && my > this.y - this.height / 2 && my < this.y + this.height / 2) {
				return true;
			} else {
				return false;
			}
			break;
		case 3:
			if(this.x < mx && mx < this.x + this.width / 2 && (my < this.y && my > this.y - this.height / 2)) {
				return true;
			} else {
				return false;
			}
			break;
		default:
			return false;
		}
	}
	,__class__: saturn.client.programs.phylo5.Phylo5ScreenData
};
saturn.client.programs.phylo5.Phylo5TreeNode = $hxClasses["saturn.client.programs.phylo5.Phylo5TreeNode"] = function(parent,name,leaf,branch) {
	this.leaves = 0;
	this.ratio = 0.6;
	this.dist = 40;
	this.space = 0;
	this.parent = parent;
	this.children = [];
	this.name = name;
	this.leaf = leaf;
	if(branch < 0) {
		branch = 0;
	}
	this.branch = branch;
	if(this.parent != null) {
		this.parent.addChild(this);
		this.root = this.parent.root;
	} else {
		this.targets = [];
		this.root = this;
		this.screen = [];
		this.divactive = 99999;
		this.leafNameToNode = new haxe.ds.StringMap();
		this.auxMap = new haxe.ds.StringMap();
	}
	this.angle = 0;
	this.x = 0;
	this.y = 0;
	this.wedge = 0;
	this.length = 0;
	this.l = 0;
};
saturn.client.programs.phylo5.Phylo5TreeNode.__name__ = ["saturn","client","programs","phylo5","Phylo5TreeNode"];
saturn.client.programs.phylo5.Phylo5TreeNode.prototype = {
	parent: null
	,name: null
	,targetFamily: null
	,leaf: null
	,branch: null
	,angle: null
	,x: null
	,y: null
	,wedge: null
	,length: null
	,l: null
	,root: null
	,annotations: null
	,activeAnnotation: null
	,targets: null
	,screen: null
	,divactive: null
	,space: null
	,auxMap: null
	,children: null
	,dist: null
	,ratio: null
	,leaves: null
	,leafNameToNode: null
	,postOrderTraversal: function() {
		if(this.isLeaf() == true) {
			this.l = 1;
			this.root.targets[this.root.leaves] = this.name;
			this.root.leaves += 1;
			this.annotations = [];
			this.activeAnnotation = [];
			this.root.leafNameToNode.set(this.name,this);
		} else {
			var i = 0;
			while(i < this.children.length) {
				this.children[i].postOrderTraversal();
				this.l += this.children[i].l;
				++i;
			}
		}
	}
	,preOrderTraversal: function() {
		if(this.parent != null) {
			var parent = this.parent;
			this.x = parent.x + Math.cos(this.angle + this.wedge / 2) * this.root.dist;
			this.y = parent.y + Math.sin(this.angle + this.wedge / 2) * this.root.dist;
		}
		var n = this.angle;
		var i = 0;
		while(i < this.children.length) {
			this.children[i].wedge = this.children[i].l / this.children[i].root.l * 2 * Math.PI + Math.PI / 20;
			this.children[i].angle = n;
			n += this.children[i].wedge;
			this.children[i].preOrderTraversal();
			++i;
		}
	}
	,getChildren: function() {
		return this.children;
	}
	,getChildN: function(i) {
		return this.children[i];
	}
	,addChild: function(child) {
		this.children[this.children.length] = child;
	}
	,isLeaf: function() {
		return this.leaf;
	}
	,getLeafCount: function() {
		if(this.isLeaf() == true) {
			return 1;
		} else {
			var total = 0;
			var i = 0;
			var _g1 = 0;
			var _g = this.children.length;
			while(_g1 < _g) {
				var i1 = _g1++;
				total += this.children[i1].getLeafCount();
			}
			return total;
		}
	}
	,getDepth: function() {
		if(this.parent == null) {
			return 0;
		} else {
			return 1 + this.parent.getDepth();
		}
	}
	,getHeight: function() {
		if(this.isLeaf()) {
			return 0;
		} else {
			var heightList = [];
			var i = 0;
			var _g1 = 0;
			var _g = this.children.length;
			while(_g1 < _g) {
				var i1 = _g1++;
				heightList[i1] = this.children[i1].getHeight() + 1;
			}
			return saturn.client.programs.phylo5.Phylo5Math.getMaxOfArray(heightList);
		}
	}
	,__class__: saturn.client.programs.phylo5.Phylo5TreeNode
};
if(!saturn.client.programs.plugins) saturn.client.programs.plugins = {};
saturn.client.programs.plugins.AbstractPDBRendererPlugin = $hxClasses["saturn.client.programs.plugins.AbstractPDBRendererPlugin"] = function() {
	saturn.client.BaseProgramPlugin.call(this);
};
saturn.client.programs.plugins.AbstractPDBRendererPlugin.__name__ = ["saturn","client","programs","plugins","AbstractPDBRendererPlugin"];
saturn.client.programs.plugins.AbstractPDBRendererPlugin.__super__ = saturn.client.BaseProgramPlugin;
saturn.client.programs.plugins.AbstractPDBRendererPlugin.prototype = $extend(saturn.client.BaseProgramPlugin.prototype,{
	surfaceOn: function() {
	}
	,surfaceOff: function() {
	}
	,resize: function() {
	}
	,loadPDB: function() {
	}
	,loadICB: function() {
	}
	,initialise: function() {
	}
	,ribbonOn: function() {
	}
	,ribbonOff: function() {
	}
	,wireOn: function() {
	}
	,wireOff: function() {
	}
	,labelsOn: function() {
	}
	,labelsOff: function() {
	}
	,getName: function() {
		return "PDB Renderer";
	}
	,__class__: saturn.client.programs.plugins.AbstractPDBRendererPlugin
});
saturn.client.programs.plugins.ActiveICMPlugin = $hxClasses["saturn.client.programs.plugins.ActiveICMPlugin"] = function() {
	saturn.client.programs.plugins.AbstractPDBRendererPlugin.call(this);
};
saturn.client.programs.plugins.ActiveICMPlugin.__name__ = ["saturn","client","programs","plugins","ActiveICMPlugin"];
saturn.client.programs.plugins.ActiveICMPlugin.__super__ = saturn.client.programs.plugins.AbstractPDBRendererPlugin;
saturn.client.programs.plugins.ActiveICMPlugin.prototype = $extend(saturn.client.programs.plugins.AbstractPDBRendererPlugin.prototype,{
	id: null
	,object: null
	,loadPDB: function() {
		var pdbId = this.theProgram.getActiveObjectObject().pdbId;
		var url = "\"http://www.rcsb.org/pdb/files/" + pdbId.toUpperCase() + ".pdb\"";
		this.clear();
		this.object.RunCommands("read pdb " + url);
		this.display();
		this.applyConfiguration();
	}
	,loadICB: function() {
		this.object.RunCommands("read binary \"" + Std.string(this.theProgram.getActiveObjectObject().icbURL) + "\"");
		this.display();
	}
	,clear: function() {
		this.object.RunCommands("delete all");
	}
	,display: function() {
		this.object.RunCommands("display");
	}
	,applyConfiguration: function() {
		if(this.theProgram.getActiveObjectObject().ribbonOn) {
			this.ribbonOn();
		} else {
			this.ribbonOff();
		}
		if(this.theProgram.getActiveObjectObject().wireOn) {
			this.wireOn();
		} else {
			this.wireOff();
		}
	}
	,ribbonOn: function() {
		this.object.RunCommands("display ribbon");
	}
	,ribbonOff: function() {
		this.object.RunCommands("undisplay ribbon");
	}
	,wireOn: function() {
		this.object.RunCommands("display wire");
	}
	,wireOff: function() {
		this.object.RunCommands("undisplay wire");
	}
	,initialise: function() {
		var dom = this.theProgram.getComponent().down("component").getEl().dom;
		this.object = js.Browser.get_document().createElement("object");
		this.object.setAttribute("type","application/x-molsoft-icb");
		this.object.setAttribute("width","600px");
		this.object.setAttribute("height","600px");
		this.id = Ext.id();
		this.object.setAttribute("id",this.id);
		dom.appendChild(this.object);
	}
	,destroy: function() {
		var dom = this.theProgram.getComponent().down("component").getEl().dom;
		var children = dom.children;
		var _g = 0;
		while(_g < children.length) {
			var childNode = children[_g];
			++_g;
			dom.removeChild(childNode);
		}
	}
	,onFocus: function() {
		saturn.client.programs.plugins.AbstractPDBRendererPlugin.prototype.onFocus.call(this);
		this.theProgram.reload();
	}
	,getName: function() {
		return "ActiveICM";
	}
	,__class__: saturn.client.programs.plugins.ActiveICMPlugin
});
saturn.client.programs.plugins.GridVarPlugin = $hxClasses["saturn.client.programs.plugins.GridVarPlugin"] = function() { };
saturn.client.programs.plugins.GridVarPlugin.__name__ = ["saturn","client","programs","plugins","GridVarPlugin"];
saturn.client.programs.plugins.GridVarPlugin.prototype = {
	outlineAdd: null
	,__class__: saturn.client.programs.plugins.GridVarPlugin
};
saturn.client.programs.plugins.AlignmentGVPlugin = $hxClasses["saturn.client.programs.plugins.AlignmentGVPlugin"] = function() {
	saturn.client.BaseProgramPlugin.call(this);
};
saturn.client.programs.plugins.AlignmentGVPlugin.__name__ = ["saturn","client","programs","plugins","AlignmentGVPlugin"];
saturn.client.programs.plugins.AlignmentGVPlugin.__interfaces__ = [saturn.client.programs.plugins.GridVarPlugin];
saturn.client.programs.plugins.AlignmentGVPlugin.getTableDefinitionFromAlignment = function(alignmentString) {
	var msa = saturn.core.ClustalOmegaParser.read(alignmentString);
	return saturn.client.programs.plugins.AlignmentGVPlugin.getTableDefinition(msa.getFirstName(),msa);
};
saturn.client.programs.plugins.AlignmentGVPlugin.getTableDefinition = function(baseItem,msa) {
	msa.idToAlnStr.remove(" ");
	msa.seqOrder.pop();
	var baseSequence = msa.getAlignment(baseItem);
	var overlaps = [];
	var def = { title : "Data", data : [], columnDefs : [], raw : null};
	def.raw = msa;
	var alns = [];
	var columnOrder = [];
	var _g = 0;
	var _g1 = msa.seqOrder;
	while(_g < _g1.length) {
		var column = _g1[_g];
		++_g;
		if(column != baseItem) {
			columnOrder.push(column);
			alns.push(msa.getAlignment(column));
			def.columnDefs.unshift({ text : column, dataIndex : column, editor : "textfield"});
		}
	}
	def.columnDefs.unshift({ text : "Residue", dataIndex : "residue", editor : "textfield"});
	var _g11 = 0;
	var _g2 = baseSequence.length;
	while(_g11 < _g2) {
		var i = _g11++;
		var $char = baseSequence.charAt(i);
		if($char != "-") {
			var row = { "residue" : $char};
			var _g3 = 0;
			var _g21 = columnOrder.length;
			while(_g3 < _g21) {
				var j = _g3++;
				if(alns[j].charAt(i) != "-") {
					Reflect.setField(row,columnOrder[j],"1");
				}
			}
			def.data.push(row);
		}
	}
	return def;
};
saturn.client.programs.plugins.AlignmentGVPlugin.__super__ = saturn.client.BaseProgramPlugin;
saturn.client.programs.plugins.AlignmentGVPlugin.prototype = $extend(saturn.client.BaseProgramPlugin.prototype,{
	outlineAdd: function(objectId) {
		var object = this.getProgram().getWorkspace().getObject(objectId);
		if(Std["is"](object,saturn.client.workspace.AlignmentWorkspaceObject)) {
			this.refreshAlignment(object);
		} else if(Std["is"](object,saturn.client.workspace.DNAWorkspaceObject)) {
			this.refreshDNASequence(object);
		} else if(Std["is"](object,saturn.client.workspace.ProteinWorkspaceObject)) {
			this.refreshProteinSequence(object);
		} else if(Std["is"](object,saturn.core.Protein) || Std["is"](object,saturn.core.DNA)) {
			this.refreshSequenceString(this.rowSequence(object.getSequence()));
		}
	}
	,refreshDNASequence: function(object) {
		this.refreshSequenceString(this.rowSequence(object.getDNAObject().getSequence()));
	}
	,refreshProteinSequence: function(object) {
		this.refreshSequenceString(this.rowSequence(object.getObject().getSequence()));
	}
	,refreshSequenceString: function(contents) {
		var prog = this.getProgram();
		prog.getDataTable().performPaste(contents,[0,0]);
	}
	,refreshAlignment: function(object) {
		var _gthis = this;
		if(object != null) {
			var aln = object.getObject();
			var alnURL = aln.getAlignmentURL();
			if(alnURL != null) {
				saturn.client.core.CommonCore.getContent(alnURL,function(content) {
					var def = saturn.client.programs.plugins.AlignmentGVPlugin.getTableDefinitionFromAlignment(content);
					var prog = _gthis.getProgram();
					var dataTable = prog.getDataTable();
					dataTable.reconfigure(def);
					prog.redrawGridVar();
				});
			}
		}
	}
	,rowSequence: function(sequence) {
		var buf = new StringBuf();
		var _g1 = 0;
		var _g = sequence.length;
		while(_g1 < _g) {
			var i = _g1++;
			buf.add(sequence.charAt(i) + "\n");
		}
		return buf.toString();
	}
	,__class__: saturn.client.programs.plugins.AlignmentGVPlugin
});
saturn.client.programs.plugins.AnnotationPlugin = $hxClasses["saturn.client.programs.plugins.AnnotationPlugin"] = function() {
	saturn.client.BaseProgramPlugin.call(this);
};
saturn.client.programs.plugins.AnnotationPlugin.__name__ = ["saturn","client","programs","plugins","AnnotationPlugin"];
saturn.client.programs.plugins.AnnotationPlugin.__interfaces__ = [saturn.client.programs.sequenceeditor.SequenceChangeListener];
saturn.client.programs.plugins.AnnotationPlugin.__super__ = saturn.client.BaseProgramPlugin;
saturn.client.programs.plugins.AnnotationPlugin.prototype = $extend(saturn.client.BaseProgramPlugin.prototype,{
	onFocus: function() {
		saturn.client.BaseProgramPlugin.prototype.onFocus.call(this);
		var program = this.getProgram();
		program.addAnnotation("Test Annotation");
		program.setAnnotationClass("Test Annotation",saturn.client.programs.sequenceeditor.CanvasAnnotationBlock);
	}
	,setProgram: function(program) {
		saturn.client.BaseProgramPlugin.prototype.setProgram.call(this,program);
		program.addSequenceChangeListener(this);
	}
	,sequenceChanged: function(sequence) {
		var program = this.getProgram();
		var blocks = program.getAnnotationBlocks("Test Annotation");
		var aC = "rgb(0,255,0)";
		var tC = "rgb(255,0,0)";
		var gC = "rgb(0,0,255)";
		var cC = "rgb(125,125,125)";
		var pos = 0;
		var _g = 0;
		while(_g < blocks.length) {
			var block = blocks[_g];
			++_g;
			var canvasBlock = js.Boot.__cast(block , saturn.client.programs.sequenceeditor.CanvasAnnotationBlock);
			var canvas = canvasBlock.getCanvas();
			var ctx = canvas.getContext("2d");
			ctx.clearRect(0,0,canvas.width,canvas.height);
			var width = canvas.width;
			var charWidth = program.getDefaultCharWidth();
			var xPos = 0.;
			var yPos = Math.round(canvas.height) + 0.5;
			var charsDone = 0;
			while(charsDone < program.blockSize) {
				++charsDone;
				var $char = sequence.charAt(pos++);
				var c;
				switch($char) {
				case "A":
					c = aC;
					break;
				case "C":
					c = cC;
					break;
				case "G":
					c = gC;
					break;
				case "T":
					c = tC;
					break;
				default:
					c = aC;
				}
				ctx.beginPath();
				xPos += charWidth;
				ctx.lineWidth = 1;
				ctx.moveTo(xPos + 0.5,0);
				ctx.lineTo(xPos + 0.5,yPos);
				ctx.strokeStyle = c;
				ctx.stroke();
				ctx.closePath();
			}
			ctx.beginPath();
			var yCenterPos = yPos / 2;
			ctx.moveTo(0,yCenterPos);
			ctx.lineTo(width,yCenterPos);
			ctx.stroke();
			ctx.closePath();
		}
	}
	,__class__: saturn.client.programs.plugins.AnnotationPlugin
});
saturn.client.programs.plugins.DisoPredAnnotationPlugin = $hxClasses["saturn.client.programs.plugins.DisoPredAnnotationPlugin"] = function() {
	this.firstChangeEvent = true;
	saturn.client.BaseProgramPlugin.call(this);
};
saturn.client.programs.plugins.DisoPredAnnotationPlugin.__name__ = ["saturn","client","programs","plugins","DisoPredAnnotationPlugin"];
saturn.client.programs.plugins.DisoPredAnnotationPlugin.__interfaces__ = [saturn.client.programs.sequenceeditor.SequenceChangeListener];
saturn.client.programs.plugins.DisoPredAnnotationPlugin.__super__ = saturn.client.BaseProgramPlugin;
saturn.client.programs.plugins.DisoPredAnnotationPlugin.prototype = $extend(saturn.client.BaseProgramPlugin.prototype,{
	annotationPos: null
	,firstChangeEvent: null
	,lastCrc: null
	,lastSSStr: null
	,onFocus: function() {
		saturn.client.BaseProgramPlugin.prototype.onFocus.call(this);
	}
	,setProgram: function(program) {
		saturn.client.BaseProgramPlugin.prototype.setProgram.call(this,program);
		program.addSequenceChangeListener(this);
		this.annotationPos = program.addAnnotation("DisoPred");
		program.setAnnotationClass("DisoPred",saturn.client.programs.sequenceeditor.AnnotationEditorBlockDiv);
	}
	,destroy: function() {
		var seqProg = this.theProgram;
		seqProg.removeSequenceChangeListener(this);
		saturn.client.BaseProgramPlugin.prototype.destroy.call(this);
	}
	,paintFromString: function(ssStr) {
		this.lastSSStr = ssStr;
		var program = this.getProgram();
		var blocks = program.getAnnotationBlocks("DisoPred");
		var pos = 0;
		var blockSize = program.blockSize;
		var _g = 0;
		while(_g < blocks.length) {
			var block = blocks[_g];
			++_g;
			var dBlock = js.Boot.__cast(block , saturn.client.programs.sequenceeditor.AnnotationEditorBlockDiv);
			if(ssStr == null || ssStr == "") {
				dBlock.setHtml("");
				continue;
			}
			var ss = HxOverrides.substr(ssStr,pos,blockSize);
			pos += blockSize;
			var bNum = block.getBlockNumber();
			var strBuf = new StringBuf();
			var lChar = "-";
			var bCount = 0;
			var _g2 = 0;
			var _g1 = ss.length;
			while(_g2 < _g1) {
				var i = _g2++;
				++bCount;
				var cChar = ss.charAt(i);
				if(cChar == lChar) {
					strBuf.add(cChar);
				} else {
					var c = "red";
					if(cChar == "*") {
						c = "red";
					} else if(cChar == ".") {
						c = "green";
					}
					if(cChar == "E") {
						c = "blue";
					}
					if(i != 0) {
						strBuf.add("</pre></font>");
					}
					strBuf.add("<font color=\"" + c + "\"\"><pre block_part_start =" + (bCount - 1) + " blockNumber =" + bNum + " style=\"display:inline-block\" class=\"molbio-sequenceeditor-block-part\">" + cChar);
				}
			}
			dBlock.setHtml(strBuf.toString());
		}
		program.setAnnotationSequence(this.annotationPos,ssStr);
	}
	,sequenceChanged: function(sequence) {
		var _gthis = this;
		var program = this.getProgram();
		if(!program.isAnnotationOn(this.annotationPos)) {
			return;
		}
		if(!program.liveUpdateEnabled()) {
			return;
		}
		var crc = haxe.crypto.Md5.encode(sequence);
		if(crc == this.lastCrc && sequence != null && sequence != "") {
			this.paintFromString(this.lastSSStr);
			return;
		} else {
			this.lastCrc = crc;
		}
		var wo = program.getActiveObject(saturn.client.workspace.ProteinWorkspaceObject);
		var name = wo.getName();
		program.getApplication().showMessage("Disopred Warning","Disorder prediction can be slow.  You can use MolBio whilst it is being predicted by clicking OK");
		saturn.client.BioinformaticsServicesClient.getClient().sendDisoPredReportRequest(sequence,name,function(response,error) {
			if(error == null) {
				var report = response.json.rawHoriReport;
				var location = js.Browser.get_window().location;
				var dstURL = location.protocol + "//" + location.hostname + ":" + location.port + "/" + report;
				Ext.Ajax.request({ url : dstURL, success : function(response1,opts) {
					var obj = response1.responseText;
					_gthis.paintFromDisoPredString(obj);
				}, failure : function(response2,opts1) {
					program.getApplication().showMessage("DisoPred Error","DisoPred error");
				}});
			} else {
				program.getApplication().showMessage("DisoPred Error",error);
			}
		});
	}
	,paintFromDisoPredString: function(psiPredStr) {
		var ssStr = new StringBuf();
		var lines = psiPredStr.split("\n");
		var _g = 0;
		while(_g < lines.length) {
			var line = lines[_g];
			++_g;
			if(saturn.client.programs.plugins.DisoPredAnnotationPlugin.reg_predLines.match(line)) {
				var ss = saturn.client.programs.plugins.DisoPredAnnotationPlugin.reg_predLines.matched(1);
				ssStr.add(ss);
			}
		}
		this.paintFromString(ssStr.toString());
	}
	,__class__: saturn.client.programs.plugins.DisoPredAnnotationPlugin
});
saturn.client.programs.plugins.DomainAnnotationPlugin = $hxClasses["saturn.client.programs.plugins.DomainAnnotationPlugin"] = function() {
	saturn.client.BaseProgramPlugin.call(this);
};
saturn.client.programs.plugins.DomainAnnotationPlugin.__name__ = ["saturn","client","programs","plugins","DomainAnnotationPlugin"];
saturn.client.programs.plugins.DomainAnnotationPlugin.__interfaces__ = [saturn.client.programs.sequenceeditor.SequenceChangeListener];
saturn.client.programs.plugins.DomainAnnotationPlugin.__super__ = saturn.client.BaseProgramPlugin;
saturn.client.programs.plugins.DomainAnnotationPlugin.prototype = $extend(saturn.client.BaseProgramPlugin.prototype,{
	onFocus: function() {
		saturn.client.BaseProgramPlugin.prototype.onFocus.call(this);
	}
	,setProgram: function(program) {
		saturn.client.BaseProgramPlugin.prototype.setProgram.call(this,program);
		program.addSequenceChangeListener(this);
		program.addAnnotation("Pfam");
		program.setAnnotationClass("Pfam",saturn.client.programs.sequenceeditor.CanvasAnnotationBlock);
	}
	,destroy: function() {
		var seqProg = this.theProgram;
		seqProg.removeSequenceChangeListener(this);
		saturn.client.BaseProgramPlugin.prototype.destroy.call(this);
	}
	,paintDomains: function(domains,sequence) {
		var program = this.getProgram();
		var orderedDomains = [];
		var domainToLevel = new haxe.ds.ObjectMap();
		var maxLevel = -1;
		var _g = 0;
		while(_g < domains.length) {
			var domain = domains[_g];
			++_g;
			var level = 1;
			var _g1 = 0;
			while(_g1 < orderedDomains.length) {
				var oDomain = orderedDomains[_g1];
				++_g1;
				if(domain.start >= oDomain.start && domain.start <= oDomain.stop) {
					level = domainToLevel.get(oDomain) + 1;
					break;
				}
			}
			if(level > maxLevel) {
				maxLevel = level;
			}
			domainToLevel.set(domain,level);
			orderedDomains.unshift(domain);
		}
		var blocks = program.getAnnotationBlocks("Pfam");
		var pos = 0;
		var yUnit = 17 / (maxLevel * 2);
		var _g2 = 0;
		while(_g2 < blocks.length) {
			var block = blocks[_g2];
			++_g2;
			var canvasBlock = js.Boot.__cast(block , saturn.client.programs.sequenceeditor.CanvasAnnotationBlock);
			var canvas = canvasBlock.getCanvas();
			var ctx = canvas.getContext("2d");
			ctx.clearRect(0,0,canvas.width,canvas.height);
			var width = canvas.width;
			var charWidth = program.getDefaultCharWidth();
			var xPos = 0.;
			var charsDone = 0;
			while(charsDone < program.blockSize) {
				++charsDone;
				var cPos = ++pos;
				var _g11 = 0;
				while(_g11 < orderedDomains.length) {
					var domain1 = orderedDomains[_g11];
					++_g11;
					if(domain1.start != 1 && cPos >= domain1.start && cPos <= domain1.stop) {
						var l = domainToLevel.get(domain1) * yUnit;
						ctx.lineWidth = 1;
						ctx.save();
						ctx.beginPath();
						ctx.moveTo(xPos,l);
						ctx.lineTo(xPos + charWidth,l);
						ctx.strokeStyle = "#00ff00";
						ctx.closePath();
						ctx.stroke();
						ctx.restore();
						if(cPos == domain1.start) {
							ctx.save();
							ctx.beginPath();
							ctx.moveTo(xPos,l - 1);
							ctx.lineTo(xPos,l + 1);
							ctx.strokeStyle = "#0000ff";
							ctx.closePath();
							ctx.stroke();
							ctx.restore();
							var bb_w = width;
							var c_pos = xPos;
							var t_w = ctx.measureText(domain1.accession).width;
							var h_w = t_w / 2;
							var l_w = xPos;
							var r_w = bb_w - l_w;
							var t_pos = c_pos - h_w;
							if(t_w > bb_w) {
								t_pos = 0.;
							} else if(h_w > l_w) {
								var shift_w = h_w - l_w;
								t_pos += shift_w;
							} else if(h_w > r_w) {
								var shift_w1 = h_w - r_w;
								t_pos -= shift_w1;
							}
							ctx.fillText(domain1.accession,Std["int"](t_pos),l - 2);
						} else if(cPos == domain1.stop) {
							ctx.save();
							ctx.beginPath();
							ctx.moveTo(xPos + charWidth,l - 1);
							ctx.lineTo(xPos + charWidth,l + 1);
							ctx.strokeStyle = "#ff0000";
							ctx.closePath();
							ctx.stroke();
							ctx.restore();
						}
					}
				}
				xPos += charWidth;
			}
		}
	}
	,sequenceChanged: function(sequence) {
		var _gthis = this;
		var program = this.getProgram();
		var wo = program.getActiveObject(saturn.client.workspace.ProteinWorkspaceObject);
		if(wo != null) {
			var domainObj = wo.getDomainObj();
			if(domainObj != null && Std["is"](domainObj,saturn.core.domain.SgcSeqData)) {
				var targetId = domainObj.targetId;
				if(targetId != null) {
					var crc = domainObj.crc;
					var cCrc = haxe.crypto.Md5.encode(sequence);
					if(crc == cCrc) {
						if(Reflect.hasField(domainObj,"domains")) {
							this.paintDomains(domainObj.domains,sequence);
						} else {
							program.getProvider().getByNamedQuery("TARGET_PKEY_TO_DOMAIN",[domainObj.targetId],saturn.core.domain.SgcDomain,false,function(domains,err) {
								if(err == null) {
									domainObj.domains = domains;
									_gthis.paintDomains(domains,sequence);
								}
							});
						}
					} else {
						domainObj.domains = null;
					}
				}
			}
		}
	}
	,__class__: saturn.client.programs.plugins.DomainAnnotationPlugin
});
saturn.client.programs.plugins.FASTAGridVarPlugin = $hxClasses["saturn.client.programs.plugins.FASTAGridVarPlugin"] = function() {
	saturn.client.BaseProgramPlugin.call(this);
};
saturn.client.programs.plugins.FASTAGridVarPlugin.__name__ = ["saturn","client","programs","plugins","FASTAGridVarPlugin"];
saturn.client.programs.plugins.FASTAGridVarPlugin.__super__ = saturn.client.BaseProgramPlugin;
saturn.client.programs.plugins.FASTAGridVarPlugin.prototype = $extend(saturn.client.BaseProgramPlugin.prototype,{
	openFile: function(file,next) {
		var _gthis = this;
		var ext = saturn.client.core.CommonCore.getFileExtension(file.name);
		if(ext == "fasta") {
			saturn.client.core.CommonCore.getFileAsText(file,function(content) {
				var entities = saturn.core.FastaEntity.parseFasta(content);
				if(entities.length > 0) {
					content = entities[0].getSequence().split("").join("\n");
					var prog = _gthis.getProgram();
					prog.getDataTable().performPaste(content,[0,0]);
				}
			});
		} else {
			next();
		}
	}
	,__class__: saturn.client.programs.plugins.FASTAGridVarPlugin
});
saturn.client.programs.plugins.GLmolViewerPlugin = $hxClasses["saturn.client.programs.plugins.GLmolViewerPlugin"] = function() {
	saturn.client.programs.plugins.AbstractPDBRendererPlugin.call(this);
};
saturn.client.programs.plugins.GLmolViewerPlugin.__name__ = ["saturn","client","programs","plugins","GLmolViewerPlugin"];
saturn.client.programs.plugins.GLmolViewerPlugin.__super__ = saturn.client.programs.plugins.AbstractPDBRendererPlugin;
saturn.client.programs.plugins.GLmolViewerPlugin.prototype = $extend(saturn.client.programs.plugins.AbstractPDBRendererPlugin.prototype,{
	glmol: null
	,loadPDB: function() {
		this.glmol.loadMoleculeStr(true,this.theProgram.getActiveObjectObject().contents);
	}
	,initialise: function() {
		var dom = this.theProgram.getComponent().down("component").getEl().dom;
		dom.width = "600px";
		dom.height = "600px";
		var id = dom.id;
		this.glmol = new GLmol(id, true);
	}
	,destroy: function() {
		var dom = this.theProgram.getComponent().down("component").getEl().dom;
		var children = dom.children;
		var _g = 0;
		while(_g < children.length) {
			var childNode = children[_g];
			++_g;
			dom.removeChild(childNode);
		}
	}
	,getName: function() {
		return "GLmol";
	}
	,__class__: saturn.client.programs.plugins.GLmolViewerPlugin
});
saturn.client.programs.plugins.IViewPlugin = $hxClasses["saturn.client.programs.plugins.IViewPlugin"] = function() {
	saturn.client.programs.plugins.AbstractPDBRendererPlugin.call(this);
};
saturn.client.programs.plugins.IViewPlugin.__name__ = ["saturn","client","programs","plugins","IViewPlugin"];
saturn.client.programs.plugins.IViewPlugin.loadResources = function() {
	var head = js.Browser.get_document().head;
	var scripts = ["js/iview/three.min.js","js/iview/AnaglyphEffect.js","js/iview/ParallaxBarrierEffect.js","js/iview/OculusRiftEffect.js","js/iview/StereoEffect.js","js/iview/iview.js","js/iview/surface.min.js"];
	var _g = 0;
	while(_g < scripts.length) {
		var script = scripts[_g];
		++_g;
		var scriptElem = js.Browser.get_document().createElement("script");
		scriptElem.setAttribute("src",script);
		scriptElem.setAttribute("type","text/javascript");
		head.appendChild(scriptElem);
	}
};
saturn.client.programs.plugins.IViewPlugin.__super__ = saturn.client.programs.plugins.AbstractPDBRendererPlugin;
saturn.client.programs.plugins.IViewPlugin.prototype = $extend(saturn.client.programs.plugins.AbstractPDBRendererPlugin.prototype,{
	iview: null
	,loadPDB: function() {
		this.iview.loadPDB(this.theProgram.getActiveObjectObject().contents);
	}
	,initialise: function() {
		var dom = this.theProgram.getComponent().down("component").getEl().dom;
		js.Browser.get_window().console.log("w:" + dom.width);
		var canvas = js.Browser.get_document().createElement("canvas");
		canvas.width = 600;
		canvas.height = 600;
		canvas.id = Ext.id();
		dom.appendChild(canvas);
		var id = dom.id;
		this.iview = new iview(canvas.id);
		this.iview.options.secondaryStructure = "ribbon";
		this.iview.options.surface = "Van der Waals surface";
	}
	,destroy: function() {
		var dom = this.theProgram.getComponent().down("component").getEl().dom;
		var children = dom.children;
		var _g = 0;
		while(_g < children.length) {
			var childNode = children[_g];
			++_g;
			dom.removeChild(childNode);
		}
	}
	,getName: function() {
		return "IView";
	}
	,__class__: saturn.client.programs.plugins.IViewPlugin
});
saturn.client.programs.plugins.SSAnnotationPlugin = $hxClasses["saturn.client.programs.plugins.SSAnnotationPlugin"] = function() {
	this.firstChangeEvent = true;
	saturn.client.BaseProgramPlugin.call(this);
};
saturn.client.programs.plugins.SSAnnotationPlugin.__name__ = ["saturn","client","programs","plugins","SSAnnotationPlugin"];
saturn.client.programs.plugins.SSAnnotationPlugin.__interfaces__ = [saturn.client.programs.sequenceeditor.SequenceChangeListener];
saturn.client.programs.plugins.SSAnnotationPlugin.__super__ = saturn.client.BaseProgramPlugin;
saturn.client.programs.plugins.SSAnnotationPlugin.prototype = $extend(saturn.client.BaseProgramPlugin.prototype,{
	annotationPos: null
	,firstChangeEvent: null
	,lastCrc: null
	,lastSSStr: null
	,onFocus: function() {
		saturn.client.BaseProgramPlugin.prototype.onFocus.call(this);
	}
	,destroy: function() {
		var seqProg = this.theProgram;
		seqProg.removeSequenceChangeListener(this);
		saturn.client.BaseProgramPlugin.prototype.destroy.call(this);
	}
	,setProgram: function(program) {
		saturn.client.BaseProgramPlugin.prototype.setProgram.call(this,program);
		program.addSequenceChangeListener(this);
		this.annotationPos = program.addAnnotation("SS");
		program.setAnnotationClass("SS",saturn.client.programs.sequenceeditor.AnnotationEditorBlockDiv);
	}
	,paintFromString: function(ssStr) {
		this.lastSSStr = ssStr;
		var program = this.getProgram();
		var blocks = program.getAnnotationBlocks("SS");
		var pos = 0;
		var blockSize = program.blockSize;
		var _g = 0;
		while(_g < blocks.length) {
			var block = blocks[_g];
			++_g;
			var dBlock = js.Boot.__cast(block , saturn.client.programs.sequenceeditor.AnnotationEditorBlockDiv);
			if(ssStr == null || ssStr == "") {
				dBlock.setHtml("");
				continue;
			}
			var ss = HxOverrides.substr(ssStr,pos,blockSize);
			pos += blockSize;
			var replacements_0 = { p1 : "E", p2 : "C", c : "red"};
			var replacements_1 = { p1 : "E", p2 : "H", c : "green"};
			var replacements_2 = { p1 : "H", p2 : "C", c : "red"};
			var replacements_3 = { p1 : "H", p2 : "E", c : "blue"};
			var replacements_4 = { p1 : "C", p2 : "E", c : "blue"};
			var replacements_5 = { p1 : "C", p2 : "H", c : "green"};
			var bNum = block.getBlockNumber();
			var strBuf = new StringBuf();
			var lChar = "-";
			var bCount = 0;
			var _g2 = 0;
			var _g1 = ss.length;
			while(_g2 < _g1) {
				var i = _g2++;
				++bCount;
				var cChar = ss.charAt(i);
				if(cChar == lChar) {
					strBuf.add(cChar);
				} else {
					var c = "red";
					if(cChar == "C") {
						c = "red";
					} else if(cChar == "H") {
						c = "green";
					}
					if(cChar == "E") {
						c = "blue";
					}
					if(i != 0) {
						strBuf.add("</pre></font>");
					}
					strBuf.add("<font color=\"" + c + "\"\"><pre block_part_start =" + (bCount - 1) + " blockNumber =" + bNum + " style=\"display:inline-block\" class=\"molbio-sequenceeditor-block-part\">" + cChar);
				}
			}
			dBlock.setHtml(strBuf.toString());
		}
		program.setAnnotationSequence(this.annotationPos,ssStr);
		program.getApplication().getMiddleSouthPanel().body.update("<b>Secondary structure prediction performed using PSIPred - <a target=\"_blank\" href=\"http://bioinfadmin.cs.ucl.ac.uk/downloads/psipred/LICENSE\">license</a></b>");
	}
	,sequenceChanged: function(sequence) {
		var _gthis = this;
		var program = this.getProgram();
		if(!program.isAnnotationOn(this.annotationPos)) {
			return;
		}
		if(!program.liveUpdateEnabled()) {
			return;
		}
		var crc = haxe.crypto.Md5.encode(sequence);
		if(crc == this.lastCrc && sequence != null && sequence != "") {
			this.paintFromString(this.lastSSStr);
			return;
		} else {
			this.lastCrc = crc;
		}
		var wo = program.getActiveObject(saturn.client.workspace.ProteinWorkspaceObject);
		var name = wo.getName();
		saturn.client.BioinformaticsServicesClient.getClient().sendPsiPredReportRequest(sequence,name,function(response,error) {
			if(error == null) {
				var rawHoriReport = response.json.rawHoriReport;
				var location = js.Browser.get_window().location;
				var dstURL = location.protocol + "//" + location.hostname + ":" + location.port + "/" + rawHoriReport;
				Ext.Ajax.request({ url : dstURL, success : function(response1,opts) {
					var obj = response1.responseText;
					_gthis.paintFromPsiPredString(obj);
				}, failure : function(response2,opts1) {
					program.getApplication().showMessage("PSIPred Error","PSIPred error");
				}});
			} else {
				program.getApplication().showMessage("PSIPred Error",error);
			}
		});
	}
	,paintFromPsiPredString: function(psiPredStr) {
		var ssStr = new StringBuf();
		var lines = psiPredStr.split("\n");
		var _g = 0;
		while(_g < lines.length) {
			var line = lines[_g];
			++_g;
			if(saturn.client.programs.plugins.SSAnnotationPlugin.reg_predLines.match(line)) {
				var ss = saturn.client.programs.plugins.SSAnnotationPlugin.reg_predLines.matched(1);
				ssStr.add(ss);
			}
		}
		this.paintFromString(ssStr.toString());
	}
	,__class__: saturn.client.programs.plugins.SSAnnotationPlugin
});
saturn.client.programs.plugins.SVGDomainAnnotationPlugin = $hxClasses["saturn.client.programs.plugins.SVGDomainAnnotationPlugin"] = function() {
	this.firstChangeEvent = true;
	saturn.client.BaseProgramPlugin.call(this);
};
saturn.client.programs.plugins.SVGDomainAnnotationPlugin.__name__ = ["saturn","client","programs","plugins","SVGDomainAnnotationPlugin"];
saturn.client.programs.plugins.SVGDomainAnnotationPlugin.__interfaces__ = [saturn.client.programs.sequenceeditor.SequenceChangeListener];
saturn.client.programs.plugins.SVGDomainAnnotationPlugin.__super__ = saturn.client.BaseProgramPlugin;
saturn.client.programs.plugins.SVGDomainAnnotationPlugin.prototype = $extend(saturn.client.BaseProgramPlugin.prototype,{
	firstChangeEvent: null
	,annotationId: null
	,bgStyle: null
	,onFocus: function() {
		var _gthis = this;
		saturn.client.BaseProgramPlugin.prototype.onFocus.call(this);
		this.getProgram().getApplication().getViewMenu().add({ text : "Domain report", handler : function() {
			_gthis.displayRawAnnotationData("PFAM");
		}});
	}
	,destroy: function() {
		var seqProg = this.theProgram;
		seqProg.removeSequenceChangeListener(this);
		saturn.client.BaseProgramPlugin.prototype.destroy.call(this);
	}
	,setProgram: function(program) {
		saturn.client.BaseProgramPlugin.prototype.setProgram.call(this,program);
		program.addSequenceChangeListener(this);
		this.annotationId = program.addAnnotation("Domains");
		program.setAnnotationClass("Domains",saturn.client.programs.sequenceeditor.SVGAnnotationBlock);
		program.setAnnotationPosition(this.annotationId,saturn.client.programs.sequenceeditor.AnnotationPosition.TOP);
	}
	,paintDomains: function(domains,sequence) {
		var _gthis = this;
		this.bgStyle = "rgb(255,255,255)";
		var program = this.getProgram();
		var blocks = program.getAnnotationBlocks("Domains");
		if(domains == null) {
			var _g = 0;
			while(_g < blocks.length) {
				var block = blocks[_g];
				++_g;
				var canvasBlock = js.Boot.__cast(block , saturn.client.programs.sequenceeditor.SVGAnnotationBlock);
				var canvas = canvasBlock.getCanvas();
				canvasBlock.clear(this.bgStyle);
			}
			return;
		}
		var orderedDomains = [];
		var domainToLevel = new haxe.ds.ObjectMap();
		var maxLevel = -1;
		var _g1 = 0;
		while(_g1 < domains.length) {
			var domain = domains[_g1];
			++_g1;
			var level = 1;
			var _g11 = 0;
			while(_g11 < orderedDomains.length) {
				var oDomain = orderedDomains[_g11];
				++_g11;
				if(oDomain == domain) {
					continue;
				}
				if(Math.max(domain.start,oDomain.start) <= Math.min(domain.stop,oDomain.stop)) {
					level = domainToLevel.get(oDomain) + 1;
					saturn.core.Util.debug("Overlap " + domain.referent.entityId + " with " + oDomain.referent.entityId);
					break;
				}
			}
			if(level > maxLevel) {
				maxLevel = level;
			}
			domainToLevel.set(domain,level);
			orderedDomains.unshift(domain);
		}
		var pos = 0;
		saturn.core.Util.debug("Max level " + maxLevel);
		var height = maxLevel * 20 + 4;
		var color = "green";
		var levelToColor = new haxe.ds.IntMap();
		var _g12 = 1;
		var _g2 = maxLevel + 1;
		while(_g12 < _g2) {
			var i = _g12++;
			levelToColor.set(i,"green");
		}
		var _g3 = 0;
		while(_g3 < blocks.length) {
			var block1 = blocks[_g3];
			++_g3;
			var canvasBlock1 = js.Boot.__cast(block1 , saturn.client.programs.sequenceeditor.SVGAnnotationBlock);
			var canvas1 = canvasBlock1.getCanvas();
			canvasBlock1.clear(this.bgStyle);
			canvasBlock1.setHeight(height + "px");
			var charWidth = program.getDefaultCharWidth();
			var xPos = 0.;
			var charsDone = 0;
			while(charsDone < program.blockSize) {
				++charsDone;
				var cPos = ++pos;
				var _g13 = 0;
				while(_g13 < orderedDomains.length) {
					var domain1 = [orderedDomains[_g13]];
					++_g13;
					if(domain1[0].start != 1 && cPos >= domain1[0].start && cPos <= domain1[0].stop) {
						var l = domainToLevel.get(domain1[0]) * 20;
						var color1 = levelToColor.get(domainToLevel.get(domain1[0]));
						if(cPos == domain1[0].start) {
							var text = js.Browser.get_document().createElementNS("http://www.w3.org/2000/svg","text");
							text.textContent = domain1[0].referent.entityId + ":" + domain1[0].referent.altName;
							if(color1 == "green") {
								color1 = "orange";
							} else if(color1 == "orange") {
								color1 = "green";
							}
							levelToColor.set(domainToLevel.get(domain1[0]),color1);
							text.setAttribute("x",-1000);
							text.setAttribute("y",-1000);
							text.setAttribute("font-size","10");
							text.setAttribute("fill",color1);
							var protEditor = js.Boot.__cast(this.getProgram() , saturn.client.programs.ProteinSequenceEditor);
							var addPlateMenu = protEditor.getAddToPlateContextMenu(null,domain1[0].start,domain1[0].stop);
							var items = [[]];
							var tmp = (function(domain2) {
								return function() {
									var name = _gthis.getProgram().getActiveObject(saturn.client.workspace.WorkspaceObject).getName();
									var seq = sequence.substring(domain2[0].start,domain2[0].stop);
									var protSeq = new saturn.core.Protein(seq);
									var wo = new saturn.client.workspace.ProteinWorkspaceObject(protSeq,name + "(" + domain2[0].referent.entityId + " " + domain2[0].start + "-" + domain2[0].stop + ")");
									_gthis.getProgram().getWorkspace().addObject(wo,true);
								};
							})(domain1);
							items[0].push({ text : "New Protein", handler : tmp});
							var tmp1 = (function(domain3) {
								return function() {
									var ac = domain3[0].referent.entityId;
									var id = "";
									if(saturn.client.programs.plugins.SVGDomainAnnotationPlugin.reg_pfam.match(ac)) {
										id = "PF" + saturn.client.programs.plugins.SVGDomainAnnotationPlugin.reg_pfam.matched(1);
									} else {
										id = ac;
									}
									_gthis.getProgram().getApplication().openUrl("http://pfam.xfam.org/family/" + id);
								};
							})(domain1);
							items[0].push({ text : "Goto Pfam", handler : tmp1});
							items[0].push({ text : "Add to plate", menu : addPlateMenu});
							var contextMenu = [(function(items1) {
								return function(event) {
									var contextMenu1 = Ext.create("Ext.menu.Menu",{ focusOnToFront : false, items : items1[0]});
									contextMenu1.showAt(event.clientX,event.clientY);
									event.preventDefault();
									return true;
								};
							})(items)];
							text.onclick = (function(contextMenu2) {
								return function(event1) {
									contextMenu2[0](event1);
								};
							})(contextMenu);
							canvas1.appendChild(text);
							var bb_w = Std.parseInt(canvas1.style.width);
							var c_pos = xPos;
							var t_w = text.getComputedTextLength();
							var h_w = t_w / 2;
							var l_w = xPos;
							var r_w = bb_w - l_w;
							var t_pos = c_pos - h_w;
							if(t_w > bb_w) {
								t_pos = 0.;
							} else if(h_w > l_w) {
								var shift_w = h_w - l_w;
								t_pos += shift_w;
							} else if(h_w > r_w) {
								var shift_w1 = h_w - r_w;
								t_pos -= shift_w1;
							}
							text.setAttribute("x",t_pos == null ? "null" : "" + t_pos);
							text.setAttribute("y",Std.string(l - 4));
						}
						var path = js.Browser.get_document().createElementNS("http://www.w3.org/2000/svg","path");
						path.setAttribute("d","M " + (xPos + 1) + " " + l + " L " + (xPos + charWidth + 1) + " " + l + " ");
						path.setAttribute("charWidth",charWidth == null ? "null" : "" + charWidth);
						path.setAttribute("stroke",color1);
						canvas1.appendChild(path);
					}
				}
				xPos += charWidth;
			}
		}
	}
	,sequenceChanged: function(sequence) {
		var _gthis = this;
		var program = this.getProgram();
		if(!program.isAnnotationOn(this.annotationId)) {
			return;
		}
		if(!program.liveUpdateEnabled()) {
			return;
		}
		var wo = program.getActiveObject(saturn.client.workspace.ProteinWorkspaceObject);
		if(wo != null) {
			if(Reflect.isFunction($bind(wo,wo.getDomainObj)) && wo.getDomainObj() != null && Std["is"](wo.getDomainObj(),saturn.core.domain.SgcSeqData)) {
				var domainObj = wo.getDomainObj();
				var targetId = domainObj.targetId;
				if(targetId != null) {
					var crc = domainObj.crc;
					var cCrc = haxe.crypto.Md5.encode(sequence);
					if(crc == cCrc) {
						if(Reflect.hasField(domainObj,"domains")) {
							this.paintDomains(this.getProgram().getEntity().getAnnotations("PFAM"),sequence);
						} else {
							program.getProvider().getByNamedQuery("TARGET_PKEY_TO_DOMAIN",[domainObj.targetId],saturn.core.domain.SgcDomain,false,function(domains,err) {
								if(err == null) {
									var objs = [];
									var _g = 0;
									while(_g < domains.length) {
										var domain = domains[_g];
										++_g;
										var obj = new saturn.core.domain.MoleculeAnnotation();
										obj.start = domain.start;
										obj.stop = domain.stop;
										obj.referent = new saturn.core.domain.Entity();
										obj.referent.entityId = domain.accession;
										if(domain.accession == "userdefined:Full_Length") {
											continue;
										}
										objs.push(obj);
									}
									_gthis.getProgram().getEntity().setAnnotations(objs,"PFAM");
									_gthis.paintDomains(objs,sequence);
								}
							});
						}
					} else {
						this.getProgram().getEntity().setAnnotations(null,"PFAM");
						domainObj.domains = null;
					}
				}
			} else {
				this.updateAnnotation("PFAM",function(err1,objs1) {
					if(err1 == null) {
						var editor = _gthis.getProgram();
						var tmp = editor.getSequence();
						_gthis.paintDomains(objs1,tmp);
					}
				});
			}
		}
	}
	,updateAnnotation: function(annotationName,cb) {
		var m = js.Boot.__cast(this.getProgram().getWorkspaceObject() , saturn.core.molecule.Molecule);
		var editor = this.getProgram();
		m.setSequence(editor.getSequence());
		var tmp = saturn.client.core.CommonCore.getAnnotationManager();
		m.updateAnnotations(annotationName,{ "removeOverlaps" : true},tmp,cb);
	}
	,displayRawAnnotationData: function(annotationName) {
		var _gthis = this;
		var m = js.Boot.__cast(this.getProgram().getWorkspaceObject() , saturn.core.molecule.Molecule);
		this.updateAnnotation(annotationName,function(err,objs) {
			if(err == null) {
				var m1 = js.Boot.__cast(_gthis.getProgram().getEntity() , saturn.core.molecule.Molecule);
				var dstURL = m1.getRawAnnotationData(annotationName);
				var webPage = new saturn.client.workspace.WebPage();
				webPage.setURL(dstURL);
				var w0 = new saturn.client.workspace.WebPageWorkspaceObject(webPage,m1.getMoleculeName() + "(" + annotationName + ")");
				_gthis.getProgram().getApplication().getWorkspace().addObject(w0,true);
			}
		});
	}
	,__class__: saturn.client.programs.plugins.SVGDomainAnnotationPlugin
});
saturn.client.programs.plugins.TMHMMAnnotationPlugin = $hxClasses["saturn.client.programs.plugins.TMHMMAnnotationPlugin"] = function() {
	this.seqObserved = false;
	saturn.client.BaseProgramPlugin.call(this);
};
saturn.client.programs.plugins.TMHMMAnnotationPlugin.__name__ = ["saturn","client","programs","plugins","TMHMMAnnotationPlugin"];
saturn.client.programs.plugins.TMHMMAnnotationPlugin.__interfaces__ = [saturn.client.programs.sequenceeditor.SequenceChangeListener];
saturn.client.programs.plugins.TMHMMAnnotationPlugin.__super__ = saturn.client.BaseProgramPlugin;
saturn.client.programs.plugins.TMHMMAnnotationPlugin.prototype = $extend(saturn.client.BaseProgramPlugin.prototype,{
	seqObserved: null
	,annotationId: null
	,domains: null
	,lastCrc: null
	,bgStyle: null
	,onFocus: function() {
		saturn.client.BaseProgramPlugin.prototype.onFocus.call(this);
	}
	,destroy: function() {
		var seqProg = this.theProgram;
		seqProg.removeSequenceChangeListener(this);
		saturn.client.BaseProgramPlugin.prototype.destroy.call(this);
	}
	,setProgram: function(program) {
		saturn.client.BaseProgramPlugin.prototype.setProgram.call(this,program);
		program.addSequenceChangeListener(this);
		this.annotationId = program.addAnnotation("TM");
		program.setAnnotationClass("TM",saturn.client.programs.sequenceeditor.SVGAnnotationBlock);
		program.setAnnotationPosition(this.annotationId,saturn.client.programs.sequenceeditor.AnnotationPosition.TOP);
	}
	,paintDomains: function(domains,sequence) {
		var _gthis = this;
		this.bgStyle = "rgb(255,255,255)";
		var program = this.getProgram();
		var blocks = program.getAnnotationBlocks("TM");
		var pos = 0;
		var yUnit = 5;
		var _g = 0;
		while(_g < blocks.length) {
			var block = blocks[_g];
			++_g;
			var canvasBlock = js.Boot.__cast(block , saturn.client.programs.sequenceeditor.SVGAnnotationBlock);
			var canvas = canvasBlock.getCanvas();
			canvasBlock.clear(this.bgStyle);
			if(domains == null || domains.length == 0) {
				continue;
			}
			var charWidth = program.getDefaultCharWidth();
			var xPos = 0.;
			var _g1 = new haxe.ds.StringMap();
			_g1.set("inside","green");
			_g1.set("outside","blue");
			_g1.set("TMhelix","red");
			var domainColours = _g1;
			var charsDone = 0;
			while(charsDone < program.blockSize) {
				++charsDone;
				var cPos = ++pos;
				var _g2 = 0;
				while(_g2 < domains.length) {
					var domain = [domains[_g2]];
					++_g2;
					if(cPos >= domain[0].start && cPos <= domain[0].stop) {
						var l = 15;
						var c = domainColours.get(domain[0].accession);
						var path = js.Browser.get_document().createElementNS("http://www.w3.org/2000/svg","path");
						path.setAttribute("d","M " + (xPos + 1) + " " + l + " L " + (xPos + charWidth + 1) + " " + l + " ");
						path.setAttribute("charWidth",charWidth == null ? "null" : "" + charWidth);
						path.setAttribute("stroke",c);
						canvas.appendChild(path);
						if(cPos == domain[0].start) {
							var text = js.Browser.get_document().createElementNS("http://www.w3.org/2000/svg","text");
							text.textContent = domain[0].accession;
							text.setAttribute("x",-1000);
							text.setAttribute("y",-1000);
							text.setAttribute("font-size","10");
							text.setAttribute("fill",c);
							var contextMenu = [(function(domain1) {
								return function(event) {
									var contextMenu1 = Ext.create("Ext.menu.Menu",{ focusOnToFront : false, items : [{ text : "New Protein", handler : (function(domain2) {
										return function() {
											var name = _gthis.getProgram().getActiveObject(saturn.client.workspace.WorkspaceObject).getName();
											var seq = sequence.substring(domain2[0].start - 1,domain2[0].stop);
											var protSeq = new saturn.core.Protein(seq);
											var wo = new saturn.client.workspace.ProteinWorkspaceObject(protSeq,name + "(" + domain2[0].accession + " " + domain2[0].start + "-" + domain2[0].stop + ")");
											_gthis.getProgram().getWorkspace().addObject(wo,true);
										};
									})(domain1)}], listeners : { "close" : (function() {
										return function() {
											program.redraw();
										};
									})()}});
									contextMenu1.showAt(event.clientX,event.clientY);
									event.preventDefault();
									return true;
								};
							})(domain)];
							text.onclick = (function(contextMenu2) {
								return function(event1) {
									contextMenu2[0](event1);
								};
							})(contextMenu);
							canvas.appendChild(text);
							var bb_w = Std.parseInt(canvas.style.width);
							var c_pos = xPos;
							var t_w = text.getComputedTextLength();
							var h_w = t_w / 2;
							var l_w = xPos;
							var r_w = bb_w - l_w;
							var t_pos = c_pos - h_w;
							if(t_w > bb_w) {
								t_pos = 0.;
							} else if(h_w > l_w) {
								var shift_w = h_w - l_w;
								t_pos += shift_w;
							} else if(h_w > r_w) {
								var shift_w1 = h_w - r_w;
								t_pos -= shift_w1;
							}
							text.setAttribute("x",t_pos == null ? "null" : "" + t_pos);
							text.setAttribute("y",Std.string(l - 4));
						} else {
							var tmp = cPos == domain[0].stop;
						}
					}
				}
				xPos += charWidth;
			}
		}
	}
	,sequenceChanged: function(sequence) {
		var _gthis = this;
		var program = this.getProgram();
		if(!program.isAnnotationOn(this.annotationId)) {
			return;
		}
		if(!program.liveUpdateEnabled()) {
			return;
		}
		var crc = haxe.crypto.Md5.encode(sequence);
		if(crc == this.lastCrc && this.domains != null) {
			this.paintDomains(this.domains,sequence);
			return;
		} else {
			this.lastCrc = crc;
		}
		var wo = program.getActiveObject(saturn.client.workspace.ProteinWorkspaceObject);
		var name = wo.getName();
		if(wo != null) {
			saturn.client.BioinformaticsServicesClient.getClient().sendTMHMMReportRequest(sequence,name,function(response,error) {
				if(error == null) {
					var report = response.json.rawReport;
					var location = js.Browser.get_window().location;
					var dstURL = location.protocol + "//" + location.hostname + ":" + location.port + "/" + report;
					Ext.Ajax.request({ url : dstURL, success : function(response1,opts) {
						var content = response1.responseText;
						var lines = content.split("\n");
						_gthis.domains = [];
						var _g = 0;
						while(_g < lines.length) {
							var line = lines[_g];
							++_g;
							if(!StringTools.startsWith(line,"#")) {
								if(saturn.client.programs.plugins.TMHMMAnnotationPlugin.reg_tmhmm_domain.match(line)) {
									var domain = new saturn.core.domain.SgcDomain();
									domain.start = Std.parseInt(saturn.client.programs.plugins.TMHMMAnnotationPlugin.reg_tmhmm_domain.matched(2));
									domain.stop = Std.parseInt(saturn.client.programs.plugins.TMHMMAnnotationPlugin.reg_tmhmm_domain.matched(3));
									domain.accession = saturn.client.programs.plugins.TMHMMAnnotationPlugin.reg_tmhmm_domain.matched(1);
									_gthis.domains.push(domain);
								}
							}
						}
						_gthis.paintDomains(_gthis.domains,sequence);
					}, failure : function(response2,opts1) {
						program.getApplication().showMessage("TMHMM Error","TMHMM error");
					}});
				} else {
					program.getApplication().showMessage("TMHMM Error",error);
				}
			});
		}
	}
	,__class__: saturn.client.programs.plugins.TMHMMAnnotationPlugin
});
saturn.client.programs.plugins.ThreeDMolViewer = $hxClasses["saturn.client.programs.plugins.ThreeDMolViewer"] = function() {
	this.waiting = false;
	this.delayedLoad = false;
	this.ready = false;
	saturn.client.programs.plugins.AbstractPDBRendererPlugin.call(this);
};
saturn.client.programs.plugins.ThreeDMolViewer.__name__ = ["saturn","client","programs","plugins","ThreeDMolViewer"];
saturn.client.programs.plugins.ThreeDMolViewer.__super__ = saturn.client.programs.plugins.AbstractPDBRendererPlugin;
saturn.client.programs.plugins.ThreeDMolViewer.prototype = $extend(saturn.client.programs.plugins.AbstractPDBRendererPlugin.prototype,{
	viewer: null
	,ready: null
	,delayedLoad: null
	,waiting: null
	,loadPDB: function() {
		if(this.ready) {
			this.viewer.clear();
			this.viewer.addModel(this.theProgram.getActiveObjectObject().contents,"pdb");
			this.viewer.zoomTo();
			this.viewer.render();
			this.viewer.addSurface($3Dmol.SurfaceType.VDW,{ opacity : 0.7, color : "white"},{ },{ });
			this.viewer.setStyle({ },{ cartoon : { color : "spectrum"}});
			this.viewer.setBackgroundColor("white");
			this.theProgram.getActiveObjectObject().surfaceOn = true;
			this.theProgram.getActiveObjectObject().ribbonOn = true;
		} else {
			this.delayedLoad = true;
		}
	}
	,labelsOn: function() {
		if(this.viewer != null) {
			this.viewer.addResLabels({ });
			this.viewer.render();
		}
	}
	,labelsOff: function() {
		if(this.viewer != null) {
			this.viewer.removeAllLabels({ });
			this.viewer.render();
		}
	}
	,surfaceOn: function() {
		if(this.viewer != null) {
			this.viewer.addSurface($3Dmol.SurfaceType.VDW,{ opacity : 0.7, color : "white"},{ },{ });
		}
	}
	,surfaceOff: function() {
		if(this.viewer != null) {
			this.viewer.removeAllSurfaces();
		}
	}
	,ribbonOn: function() {
		if(this.viewer != null) {
			this.viewer.setStyle({ },{ cartoon : { color : "spectrum"}});
			this.viewer.render();
		}
	}
	,ribbonOff: function() {
		if(this.viewer != null) {
			this.viewer.setStyle({ },{ line : { }});
			this.viewer.render();
		}
	}
	,initialise: function() {
		var _gthis = this;
		var dom = this.theProgram.getComponent().down("component").getEl().dom;
		dom.style.height = this.theProgram.getHeight();
		dom.style.width = this.theProgram.getWidth();
		var run = null;
		run = function() {
			var dom1 = _gthis.theProgram.getComponent().down("component").getEl().dom;
			var height = dom1.offsetHeight;
			if(height > 1) {
				var id = dom1.id;
				var config = {defaultcolors: $3Dmol.rasmolElementColors }
				_gthis.viewer = $3Dmol.createViewer(id, config);
				_gthis.ready = true;
				if(_gthis.delayedLoad) {
					_gthis.loadPDB();
					_gthis.delayedLoad = false;
				}
			} else {
				haxe.Timer.delay(run,1000);
			}
		};
		run();
	}
	,resize: function() {
		var _gthis = this;
		if(this.waiting) {
			return;
		} else {
			this.waiting = true;
			haxe.Timer.delay(function() {
				try {
					var dom = _gthis.theProgram.getComponent().down("component").getEl().dom;
					dom.style.height = _gthis.theProgram.getHeight();
					dom.style.width = _gthis.theProgram.getWidth();
					_gthis.viewer.resize();
				} catch( exception ) {
				}
				_gthis.waiting = false;
			},500);
		}
	}
	,destroy: function() {
		var dom = this.theProgram.getComponent().down("component").getEl().dom;
		var children = dom.children;
		var _g = 0;
		while(_g < children.length) {
			var childNode = children[_g];
			++_g;
			dom.removeChild(childNode);
		}
	}
	,getName: function() {
		return "3DMol";
	}
	,__class__: saturn.client.programs.plugins.ThreeDMolViewer
});
saturn.client.programs.sequenceeditor.AnnotationEditorBlockDiv = $hxClasses["saturn.client.programs.sequenceeditor.AnnotationEditorBlockDiv"] = function(blockNumber,sequenceEditor,annotationNumber) {
	saturn.client.programs.sequenceeditor.AnnotationEditorBlock.call(this,blockNumber,sequenceEditor,annotationNumber);
};
saturn.client.programs.sequenceeditor.AnnotationEditorBlockDiv.__name__ = ["saturn","client","programs","sequenceeditor","AnnotationEditorBlockDiv"];
saturn.client.programs.sequenceeditor.AnnotationEditorBlockDiv.__super__ = saturn.client.programs.sequenceeditor.AnnotationEditorBlock;
saturn.client.programs.sequenceeditor.AnnotationEditorBlockDiv.prototype = $extend(saturn.client.programs.sequenceeditor.AnnotationEditorBlock.prototype,{
	createElement: function() {
		this.elem = js.Browser.get_document().createElement("div");
	}
	,setHtml: function(str) {
		this.elem.innerHTML = str;
	}
	,__class__: saturn.client.programs.sequenceeditor.AnnotationEditorBlockDiv
});
saturn.client.programs.sequenceeditor.CanvasAnnotationBlock = $hxClasses["saturn.client.programs.sequenceeditor.CanvasAnnotationBlock"] = function(blockNumber,sequenceEditor,annotationNumber) {
	saturn.client.programs.sequenceeditor.AnnotationEditorBlock.call(this,blockNumber,sequenceEditor,annotationNumber);
};
saturn.client.programs.sequenceeditor.CanvasAnnotationBlock.__name__ = ["saturn","client","programs","sequenceeditor","CanvasAnnotationBlock"];
saturn.client.programs.sequenceeditor.CanvasAnnotationBlock.__super__ = saturn.client.programs.sequenceeditor.AnnotationEditorBlock;
saturn.client.programs.sequenceeditor.CanvasAnnotationBlock.prototype = $extend(saturn.client.programs.sequenceeditor.AnnotationEditorBlock.prototype,{
	theCanvas: null
	,createElement: function() {
		this.theCanvas = js.Browser.get_document().createElement("canvas");
		this.theCanvas.height = 17;
		this.elem = this.theCanvas;
	}
	,initialise: function(blockNumber) {
		saturn.client.programs.sequenceeditor.AnnotationEditorBlock.prototype.initialise.call(this,blockNumber);
		this.theCanvas.setAttribute("width",this.theCanvas.style.width);
		this.theCanvas.setAttribute("height","17px");
		var ctx = this.theCanvas.getContext("2d");
		var width = this.theCanvas.width;
		var charWidth = width / this.getSequenceEditor().blockSize;
		var xPos = 0.;
		var yPos = Math.round(this.theCanvas.height) + 0.5;
		while(xPos < width) {
			ctx.beginPath();
			xPos = Math.round(xPos + charWidth) + 0.5;
			ctx.lineWidth = 1;
			ctx.moveTo(xPos,0);
			ctx.lineTo(xPos,yPos);
			ctx.stroke();
			ctx.closePath();
		}
		ctx.beginPath();
		var yCenterPos = yPos / 2;
		ctx.moveTo(0,yCenterPos);
		ctx.lineTo(width,yCenterPos);
		ctx.stroke();
		ctx.closePath();
	}
	,getCanvas: function() {
		return this.theCanvas;
	}
	,__class__: saturn.client.programs.sequenceeditor.CanvasAnnotationBlock
});
saturn.client.programs.sequenceeditor.SVGAnnotationBlock = $hxClasses["saturn.client.programs.sequenceeditor.SVGAnnotationBlock"] = function(blockNumber,sequenceEditor,annotationNumber) {
	saturn.client.programs.sequenceeditor.AnnotationEditorBlock.call(this,blockNumber,sequenceEditor,annotationNumber);
};
saturn.client.programs.sequenceeditor.SVGAnnotationBlock.__name__ = ["saturn","client","programs","sequenceeditor","SVGAnnotationBlock"];
saturn.client.programs.sequenceeditor.SVGAnnotationBlock.__super__ = saturn.client.programs.sequenceeditor.AnnotationEditorBlock;
saturn.client.programs.sequenceeditor.SVGAnnotationBlock.prototype = $extend(saturn.client.programs.sequenceeditor.AnnotationEditorBlock.prototype,{
	theCanvas: null
	,createElement: function() {
		this.theCanvas = js.Browser.get_document().createElementNS("http://www.w3.org/2000/svg","svg");
		this.theCanvas.classList.add("molbio-sequenceeditor-block");
		this.theCanvas.setAttribute("style",Std.string(this.theCanvas.style) + ";margin-top:2px;margin-left:2px;margin-right:2px");
		this.elem = this.theCanvas;
	}
	,initialise: function(blockNumber) {
		saturn.client.programs.sequenceeditor.AnnotationEditorBlock.prototype.initialise.call(this,blockNumber);
		this.theCanvas.setAttribute("width",this.theCanvas.style.width);
		this.theCanvas.setAttribute("height","30");
	}
	,getCanvas: function() {
		return this.theCanvas;
	}
	,clear: function(fillStyle) {
		var canvas = this.getCanvas();
		if(canvas.children != null) {
			var foo = canvas;
			while(foo.firstChild != null) foo.removeChild(foo.firstChild);
		}
		var rect = js.Browser.get_document().createElementNS("http://www.w3.org/2000/svg","rect");
		rect.setAttribute("width",canvas.getAttribute("width"));
		rect.setAttribute("height",canvas.getAttribute("height"));
		rect.setAttribute("style","fill:" + fillStyle);
		canvas.appendChild(rect);
	}
	,setHeight: function(height) {
		this.theCanvas.style.height = height;
		this.theCanvas.parentElement.style.height = height;
	}
	,__class__: saturn.client.programs.sequenceeditor.SVGAnnotationBlock
});
saturn.client.programs.sequenceeditor.AnnotationPosition = $hxClasses["saturn.client.programs.sequenceeditor.AnnotationPosition"] = { __ename__ : ["saturn","client","programs","sequenceeditor","AnnotationPosition"], __constructs__ : ["TOP","BOTTOM"] };
saturn.client.programs.sequenceeditor.AnnotationPosition.TOP = ["TOP",0];
saturn.client.programs.sequenceeditor.AnnotationPosition.TOP.toString = $estr;
saturn.client.programs.sequenceeditor.AnnotationPosition.TOP.__enum__ = saturn.client.programs.sequenceeditor.AnnotationPosition;
saturn.client.programs.sequenceeditor.AnnotationPosition.BOTTOM = ["BOTTOM",1];
saturn.client.programs.sequenceeditor.AnnotationPosition.BOTTOM.toString = $estr;
saturn.client.programs.sequenceeditor.AnnotationPosition.BOTTOM.__enum__ = saturn.client.programs.sequenceeditor.AnnotationPosition;
saturn.client.programs.sequenceeditor.SequenceRegion = $hxClasses["saturn.client.programs.sequenceeditor.SequenceRegion"] = function(startPosition,stopPosition,selectedRow) {
	this.startPosition = startPosition;
	this.stopPosition = stopPosition;
	this.selectedRow = selectedRow;
};
saturn.client.programs.sequenceeditor.SequenceRegion.__name__ = ["saturn","client","programs","sequenceeditor","SequenceRegion"];
saturn.client.programs.sequenceeditor.SequenceRegion.prototype = {
	startPosition: null
	,stopPosition: null
	,selectedRow: null
	,sequence: null
	,annotationStartPosition: null
	,annotationStopPosition: null
	,annotationSequence: null
	,forwardSelection: null
	,setStartPosition: function(startPosition) {
		this.startPosition = startPosition;
	}
	,setStopPosition: function(stopPosition) {
		this.stopPosition = stopPosition;
	}
	,setIsForward: function(isForwardSelection) {
		this.forwardSelection = isForwardSelection;
	}
	,isForwardSelection: function() {
		return this.forwardSelection;
	}
	,setAnnotationSequence: function(annotationSequence) {
		this.annotationSequence = annotationSequence;
	}
	,getAnnotationSequence: function() {
		return this.annotationSequence;
	}
	,setAnnotationStartPosition: function(startPosition) {
		this.annotationStartPosition = startPosition;
	}
	,getAnnotationStartPosition: function() {
		return this.annotationStartPosition;
	}
	,setAnnotationStopPosition: function(stopPosition) {
		this.annotationStopPosition = stopPosition;
	}
	,getAnnotationStopPosition: function() {
		return this.annotationStopPosition;
	}
	,getSelectedRow: function() {
		return this.selectedRow;
	}
	,setSequence: function(sequence) {
		this.sequence = sequence;
	}
	,getSequence: function() {
		return this.sequence;
	}
	,getStartPosition: function() {
		return this.startPosition;
	}
	,getStopPosition: function() {
		return this.stopPosition;
	}
	,__class__: saturn.client.programs.sequenceeditor.SequenceRegion
};
saturn.client.workspace.TextFileWO = $hxClasses["saturn.client.workspace.TextFileWO"] = function(object,name) {
	if(object == null) {
		object = new saturn.core.domain.TextFile();
	}
	if(name == null) {
		name = "TextFile";
	}
	saturn.client.workspace.WorkspaceObjectBase.call(this,object,name);
};
saturn.client.workspace.TextFileWO.__name__ = ["saturn","client","workspace","TextFileWO"];
saturn.client.workspace.TextFileWO.getNewMenuText = function() {
	return "TextFile";
};
saturn.client.workspace.TextFileWO.getDefaultFolderName = function() {
	return "TextFiles";
};
saturn.client.workspace.TextFileWO.__super__ = saturn.client.workspace.WorkspaceObjectBase;
saturn.client.workspace.TextFileWO.prototype = $extend(saturn.client.workspace.WorkspaceObjectBase.prototype,{
	__class__: saturn.client.workspace.TextFileWO
});
saturn.client.workspace.WebPage = $hxClasses["saturn.client.workspace.WebPage"] = function() {
};
saturn.client.workspace.WebPage.__name__ = ["saturn","client","workspace","WebPage"];
saturn.client.workspace.WebPage.prototype = {
	url: null
	,setURL: function(url) {
		this.url = url;
	}
	,getURL: function() {
		return this.url;
	}
	,__class__: saturn.client.workspace.WebPage
};
saturn.client.workspace.Workspace = $hxClasses["saturn.client.workspace.Workspace"] = function() {
	this.reg_linked = new EReg("__LINKED_(\\d+)","");
	this.reloading = false;
	this.theListeners = new List();
	this.theObjects = new haxe.ds.StringMap();
	this.nameToObjectUUID = new haxe.ds.StringMap();
	this.objectIdToOpenProgramId = new haxe.ds.StringMap();
	this.programIdToObjectIds = new haxe.ds.StringMap();
	this.programIdToProgram = new haxe.ds.StringMap();
	this.nextObjectId = 0;
	this.nextProgramId = 0;
	this.treeUpdatesSuspended = false;
	this.wkModel = Ext.define("WorkspaceObject",{ extend : "Ext.data.TreeModel", fields : [{ name : "objectId", type : "string"},{ name : "text", type : "string"},{ name : "type", type : "string"}], idProperty : "objectId"});
	this.initialiseComponent();
	this.initialiseWorkspaceStore();
	this.theWorkspaceName = "DEFAULT";
};
saturn.client.workspace.Workspace.__name__ = ["saturn","client","workspace","Workspace"];
saturn.client.workspace.Workspace.__interfaces__ = [saturn.client.BuildingBlock];
saturn.client.workspace.Workspace.convertId = function(id) {
	var underScorePos = id.indexOf("_");
	if(underScorePos > -1) {
		id = id.substring(0,underScorePos);
	}
	return id;
};
saturn.client.workspace.Workspace.generateClass = function(name) {
	__js__("" + hxClasses + "[name] = function(){};");
	__js__("" + hxClasses + "[name].__name__ = name.split('.')");
};
saturn.client.workspace.Workspace.installWorkspaceExtensions = function(obj) {
	obj.uuid = null;
	obj.iconPath = null;
	if(!Reflect.hasField(obj,"name") || Reflect.field(obj,"name") == null || Reflect.field(obj,"name") == "") {
		var name = "Object";
		var clazz = Type.getClass(obj);
		if(clazz != null) {
			var model = saturn.client.WorkspaceApplication.getApplication().getProvider().getModel(clazz);
			if(model != null) {
				var nameField = model.getFirstKey();
				if(Reflect.hasField(obj,nameField)) {
					name = Reflect.field(obj,nameField);
				}
			}
		}
		obj.name = name;
	}
	var clazz1 = Type.getClass(obj);
	if(clazz1 != null) {
		var model1 = saturn.client.WorkspaceApplication.getApplication().getProvider().getModel(clazz1);
		if(model1 != null) {
			var icon = model1.getIcon();
			if(icon != null) {
				obj.iconPath = "/static/js/images/" + icon;
			}
		}
	}
	obj.object = null;
	obj.hidden = null;
	var type_str = typeof(obj.__class__);
	if(type_str != "function" || Reflect.field(obj,"__class__") == null || Reflect.field(obj,"__class__") == "") {
		obj.__class__ = "GENERIC";
	}
	obj.objectMap = new haxe.ds.StringMap();
	saturn.client.workspace.Workspace.installWOExtensionFunctions(obj);
	obj.__WOEXTENSIONS = true;
};
saturn.client.workspace.Workspace.removeWOExtensionFunctions = function(obj) {
	obj.clone = null;
	obj.getIconPath = null;
	obj.serialise = null;
	obj.deserialise = null;
	obj.setName = null;
	obj.getName = null;
	obj.getUUID = null;
	obj.setUUID = null;
	obj.getObject = null;
	obj.setObject = null;
	obj.toJSON = null;
	obj.isHidden = null;
	obj.hide = null;
	obj.addReference = null;
	obj.getReferences = null;
	obj.hasReference = null;
	obj.removeReferences = null;
	obj.getMatchingReferences = null;
};
saturn.client.workspace.Workspace.installWOExtensionFunctions = function(obj) {
	obj.clone = function() {
		var cloneData = obj.serialise();
		var unserObj = haxe.Unserializer.run(cloneData);
		saturn.client.workspace.Workspace.installWorkspaceExtensions(unserObj);
		unserObj.setUUID(null);
		return unserObj;
	};
	obj.getIconPath = function() {
		return obj.iconPath;
	};
	var serFunc = function(obj1) {
		return haxe.Serializer.run(obj1);
	};
	obj.serialise = function() {
		saturn.client.workspace.Workspace.removeWOExtensionFunctions(obj);
		var serial = serFunc(obj);
		saturn.client.workspace.Workspace.installWorkspaceExtensions(obj);
		return serial;
	};
	obj.deserialise = function(object) {
		obj.setName(object.NAME);
		obj.setUUID(object.UUID);
		obj.hide(object.HIDDEN);
		obj.setIconPath(object.iconPath);
	};
	obj.setName = function(name) {
		obj.name = name;
		var model = saturn.client.WorkspaceApplication.getApplication().getProvider().getModel(Type.getClass(obj));
		var field = model.getFirstKey();
		if(field != null) {
			Reflect.setField(obj,field,name);
		}
	};
	obj.getName = function() {
		return obj.name;
	};
	obj.getUUID = function() {
		return obj.uuid;
	};
	obj.setUUID = function(uuid) {
		obj.uuid = uuid;
	};
	obj.getObject = function() {
		return obj;
	};
	obj.setObject = function(object1) {
		obj.object = object1;
	};
	obj.toJSON = function() {
		return "";
	};
	obj.isHidden = function() {
		return obj.hidden;
	};
	obj.hide = function(hide) {
		obj.hidden = hide;
	};
	obj.addReference = function(group,objectId) {
		if(!obj.objectMap.exists(group)) {
			obj.objectMap.set(group,[]);
		}
		obj.objectMap.get(group).push(objectId);
	};
	obj.getReferences = function(group1) {
		var refs = [];
		if(obj.objectMap.exists(group1)) {
			var ids = obj.objectMap.get(group1);
			var _g = 0;
			while(_g < ids.length) {
				var objectId1 = ids[_g];
				++_g;
				refs.push(objectId1);
			}
		}
		return refs;
	};
	obj.hasReference = function(group2,objectId2) {
		var match = false;
		if(obj.objectMap.exists(group2)) {
			var ids1 = obj.objectMap.get(group2);
			var _g1 = 0;
			while(_g1 < ids1.length) {
				var id = ids1[_g1];
				++_g1;
				var cId = saturn.client.workspace.Workspace.convertId(id);
				if(cId == objectId2) {
					match = true;
					break;
				}
			}
		}
		return match;
	};
	obj.removeReferences = function(referenceId) {
		var removed = [];
		var map = obj.objectMap;
		var group3 = map.keys();
		while(group3.hasNext()) {
			var group4 = group3.next();
			var ids2 = obj.objectMap.get(group4);
			var _g2 = 0;
			while(_g2 < ids2.length) {
				var objectId3 = ids2[_g2];
				++_g2;
				if(referenceId == objectId3 || saturn.client.workspace.Workspace.convertId(objectId3) == referenceId) {
					obj.objectMap.get(group4).remove(objectId3);
					removed.push(objectId3);
				}
			}
		}
		return removed;
	};
	obj.getMatchingReferences = function(referenceId1) {
		var refs1 = [];
		var map1 = obj.objectMap;
		var group5 = map1.keys();
		while(group5.hasNext()) {
			var group6 = group5.next();
			var ids3 = obj.objectMap.get(group6);
			var _g3 = 0;
			while(_g3 < ids3.length) {
				var objectId4 = ids3[_g3];
				++_g3;
				if(referenceId1 == objectId4 || saturn.client.workspace.Workspace.convertId(objectId4) == referenceId1) {
					refs1.push(objectId4);
				}
			}
		}
		return refs1;
	};
};
saturn.client.workspace.Workspace.prototype = {
	theComponent: null
	,theListeners: null
	,theObjects: null
	,nameToObjectUUID: null
	,objectIdToOpenProgramId: null
	,programIdToObjectIds: null
	,programIdToProgram: null
	,nextObjectId: null
	,nextProgramId: null
	,theWorkspaceDatabase: null
	,theWorkspaceName: null
	,theWorkspaceDataStore: null
	,treeUpdatesSuspended: null
	,wkModel: null
	,reloading: null
	,getProgramForObject: function(objectId) {
		if(this.objectIdToOpenProgramId.exists(objectId)) {
			var programId = this.objectIdToOpenProgramId.get(objectId);
			if(this.programIdToProgram.exists(programId)) {
				return this.programIdToProgram.get(programId);
			}
		}
		return null;
	}
	,getProgram: function(programId) {
		return this.programIdToProgram.get(programId);
	}
	,getTreeStore: function() {
		return this.theWorkspaceDataStore;
	}
	,closeWorkspace: function() {
		this.beginUpdate();
		this.setReloading(true);
		var program = this.programIdToProgram.iterator();
		while(program.hasNext()) {
			var program1 = program.next();
			saturn.client.WorkspaceApplication.getApplication().closeProgram(program1);
		}
		var key = this.theObjects.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			this.theObjects.remove(key1);
		}
		var key2 = this.objectIdToOpenProgramId.keys();
		while(key2.hasNext()) {
			var key3 = key2.next();
			this.objectIdToOpenProgramId.remove(key3);
		}
		var key4 = this.programIdToProgram.keys();
		while(key4.hasNext()) {
			var key5 = key4.next();
			this.programIdToProgram.remove(key5);
		}
		var key6 = this.programIdToObjectIds.keys();
		while(key6.hasNext()) {
			var key7 = key6.next();
			this.programIdToObjectIds.remove(key7);
		}
		var name = this.nameToObjectUUID.keys();
		while(name.hasNext()) {
			var name1 = name.next();
			this.nameToObjectUUID.remove(name1);
		}
		this.nextObjectId = 0;
		this.nextProgramId = 0;
		this.setReloading(false);
		saturn.client.WorkspaceApplication.getApplication().cleanEnvironment();
		this.reloadWorkspace();
		this.theWorkspaceName = "DEFAULT";
		saturn.client.WorkspaceApplication.getApplication().setActiveProgram(null);
		this.createTreeStore();
		this.theComponent.reconfigure(this.theWorkspaceDataStore);
	}
	,registerProgram: function(program) {
		if(program.getId() == null) {
			program.setId(Std.string(this.nextProgramId));
			this.nextProgramId++;
		}
		if(!this.programIdToProgram.exists(program.getId())) {
			var haxeApp = saturn.client.WorkspaceApplication.getApplication();
			haxeApp.addProgram(program,true);
			if(!this.isReloading()) {
				haxeApp.setActiveProgram(program);
			}
			var programId = Std.string(program.getId());
			this.programIdToProgram.set(programId,program);
		}
	}
	,isReloading: function() {
		return this.reloading;
	}
	,setReloading: function(reloading) {
		this.reloading = reloading;
	}
	,registerObjectWith: function(object,program) {
		if(object == null) {
			return;
		}
		this.registerProgram(program);
		var objectId = object.getUUID();
		if(objectId == null) {
			this.addObject(object,false);
			objectId = object.getUUID();
		}
		var programId = Std.string(program.getId());
		this.objectIdToOpenProgramId.set(objectId,programId);
		if(this.programIdToObjectIds.exists(programId) == false) {
			this.programIdToObjectIds.set(programId,[]);
		}
		this.programIdToObjectIds.get(programId).push(objectId);
		program.addWorkspaceObject(objectId);
	}
	,removeObject: function(objectId,reload) {
		if(reload == null) {
			reload = true;
		}
		if(!this.theObjects.exists(objectId)) {
			throw new js._Boot.HaxeError(new saturn.client.workspace.WorkspaceObjectNotFoundException("Object " + objectId + " not found in object tree"));
		} else {
			var object = this.theObjects.get(objectId);
			var listener = this.theListeners.iterator();
			while(listener.hasNext()) {
				var listener1 = listener.next();
				listener1.objectRemoved(object);
			}
			this.theObjects.remove(objectId);
			this.nameToObjectUUID.remove(object.getName());
		}
		if(this.objectIdToOpenProgramId.exists(objectId)) {
			var programId = this.objectIdToOpenProgramId.get(objectId);
			this.objectIdToOpenProgramId.remove(objectId);
			var program = this.programIdToProgram.get(programId);
			program.closeWorkspaceObject(objectId);
			HxOverrides.remove(this.programIdToObjectIds.get(programId),objectId);
			if(this.programIdToObjectIds.get(programId).length == 0) {
				saturn.client.WorkspaceApplication.getApplication().closeProgram(program);
				this.programIdToObjectIds.remove(programId);
				this.programIdToProgram.remove(programId);
			}
			if(!this.programIdToObjectIds.keys().hasNext()) {
				saturn.client.WorkspaceApplication.getApplication().setActiveProgram(null);
			}
		}
		if(!reload) {
			this.theWorkspaceDataStore.suspendEvents();
		}
		var node = this.theWorkspaceDataStore.getRootNode().findChild("objectId",objectId,true);
		if(node != null) {
			node.remove(true);
			this.theWorkspaceDataStore.remove(node,true);
		}
		if(reload) {
			this.reloadWorkspace();
		}
	}
	,getOpenProgram: function(objectId) {
		if(this.objectIdToOpenProgramId.exists(objectId)) {
			return this.programIdToProgram.get(this.objectIdToOpenProgramId.get(objectId));
		} else {
			return null;
		}
	}
	,closeOtherObjects: function(keepId) {
		this.setReloading(true);
		var objectId = this.objectIdToOpenProgramId.keys();
		while(objectId.hasNext()) {
			var objectId1 = objectId.next();
			if(objectId1 != keepId) {
				this._closeObject(objectId1,false);
			}
		}
		this.setReloading(false);
		saturn.client.WorkspaceApplication.getApplication().cleanEnvironment();
		this.setActiveObject(keepId);
		this.reloadWorkspace();
	}
	,closeAllObjects: function() {
		this.setReloading(true);
		var objectId = this.objectIdToOpenProgramId.keys();
		while(objectId.hasNext()) {
			var objectId1 = objectId.next();
			this._closeObject(objectId1,false);
		}
		this.setReloading(false);
		saturn.client.WorkspaceApplication.getApplication().cleanEnvironment();
		this.reloadWorkspace();
	}
	,closeObjectAndDelete: function(objectId) {
		this.closeObject(objectId);
		this.removeObject(objectId);
	}
	,closeObject: function(objectId) {
		this._closeObject(objectId,true);
	}
	,_closeObject: function(objectId,refresh) {
		if(this.objectIdToOpenProgramId.exists(objectId)) {
			var programId = this.objectIdToOpenProgramId.get(objectId);
			var program = this.programIdToProgram.get(programId);
			program.closeWorkspaceObject(objectId);
			HxOverrides.remove(this.programIdToObjectIds.get(programId),objectId);
			this.objectIdToOpenProgramId.remove(objectId);
			if(this.programIdToObjectIds.get(programId).length == 0) {
				saturn.client.WorkspaceApplication.getApplication().closeProgram(program);
				this.programIdToObjectIds.remove(programId);
				this.programIdToProgram.remove(programId);
			}
		}
		if(refresh) {
			this.reloadWorkspace();
		}
	}
	,setActiveObject: function(objectId) {
		var programId = this.objectIdToOpenProgramId.get(objectId);
		var program = this.programIdToProgram.get(programId);
		var haxeApp = saturn.client.WorkspaceApplication.getApplication();
		if(program == null) {
			var object = this.getObject(objectId);
			var objectId1 = object.getUUID();
			var progReg = haxeApp.getProgramRegistry();
			var programType = progReg.getDefaultProgram(Type.getClass(object));
			if(programType != null) {
				var program1 = Type.createInstance(programType,[]);
				progReg.installPlugins(program1);
				this.registerObjectWith(object,program1);
			}
		} else {
			haxeApp.setActiveProgram(program);
			Ext.resumeLayouts(false);
		}
	}
	,getActiveObject: function() {
		return this.getObject(saturn.client.WorkspaceApplication.getApplication().getActiveProgram().getActiveObjectId());
	}
	,initialiseWorkspaceStore: function() {
		if(saturn.client.WorkspaceApplication.getApplication().isNaked() == false) {
			this.theWorkspaceDatabase = new saturn.client.workspace.WorkspaceStore("WORKSPACE_SESSIONS",1,function(e) {
				saturn.client.WorkspaceApplication.getApplication().showMessage("",e);
			});
		}
	}
	,installRemoteWorkspaceStore: function() {
		if(saturn.client.WorkspaceApplication.getApplication().isNaked() == false) {
			this.theWorkspaceDatabase = new saturn.client.workspace.WorkspaceStoreProvider("WORKSPACE_SESSIONS",1,function(e) {
				saturn.client.WorkspaceApplication.getApplication().showMessage("",e);
			});
		}
	}
	,saveWorkspace: function() {
		var _gthis = this;
		var cb = function(res) {
			_gthis.theWorkspaceDatabase.store(res,function(e) {
				saturn.client.WorkspaceApplication.getApplication().showMessage("",e);
			},function(e1) {
			});
		};
		this.serialise(cb);
	}
	,saveWorkspaceToFile: function(fileName) {
		var cb = function(res) {
			saturn.client.WorkspaceApplication.getApplication().saveTextFile(haxe.Serializer.run(res),fileName);
		};
		this.serialise(cb);
	}
	,getDOMComponent: function() {
		return this.getComponent().el.dom;
	}
	,createTreeStore: function() {
		this.theWorkspaceDataStore = Ext.create("Ext.data.TreeStore",{ model : "WorkspaceObject", root : { expanded : true, autoSync : false}, proxy : { type : "memory", reader : { type : "json"}}});
	}
	,initialiseComponent: function() {
		var _gthis = this;
		this.createTreeStore();
		var menu = function(view,record,item,index,event) {
			var self = _gthis;
			var objectId = record.get("objectId");
			var object = self.getObject(objectId);
			var menuArray = [{ text : "Rename " + Std.string(record.get("text")), handler : function() {
				_gthis.renameItem(objectId);
			}},{ text : "Remove " + Std.string(record.get("text")), handler : function() {
				_gthis.removeItem(objectId);
			}},{ text : "Duplicate " + Std.string(record.get("text")), handler : function() {
				_gthis.duplicateItem(objectId);
			}},{ text : "Close Programs", handler : function() {
				_gthis.closeItem(objectId);
			}}];
			var prog = _gthis.getProgramForObject(objectId);
			if(prog != null) {
				var items = prog.getWorkspaceContextMenuItems();
				if(items != null) {
					var _g = 0;
					while(_g < items.length) {
						var item1 = items[_g];
						++_g;
						menuArray.push(item1);
					}
				}
			}
			if(record.get("type") == "folder") {
				menuArray.push({ text : "Add folder", handler : function() {
					_gthis.addFolderPrompt(objectId);
				}});
			}
			var contextMenu = Ext.create("Ext.menu.Menu",{ items : menuArray});
			contextMenu.showAt(event.getXY());
			event.stopEvent();
		};
		var me = this;
		var tmp = this.theWorkspaceDataStore;
		var tmp1 = Ext.bind(function(self1) {
			_gthis.initialiseDOMComponent();
		},this);
		this.theComponent = Ext.create("Ext.tree.Panel",{ store : tmp, rootVisible : false, enableDrag : true, border : false, autoScroll : true, viewConfig : { plugins : { ptype : "treeviewdragdrop", enableDrop : true, pluginId : "treedd", allowContainerDrops : true, appendOnly : true, containerScroll : true}, listeners : { }}, listeners : { itemclick : function(view1,rec,item2,index1,event1) {
			if(event1.ctrlKey) {
				menu(view1,rec,item2,index1,event1);
			} else {
				var id = rec.get("objectId");
				if(rec.get("type") != "folder") {
					_gthis.setActiveObject(id);
				}
			}
		}, render : tmp1, containercontextmenu : function(node,event2) {
			var menuItems = [];
			menuItems.push({ text : "Add folder", handler : function() {
				_gthis.addFolderPrompt(null);
			}});
			var contextMenu1 = Ext.create("Ext.menu.Menu",{ items : menuItems});
			contextMenu1.showAt(event2.getXY());
			event2.stopEvent();
		}}, cls : "x-drag-drop-background"});
		this.theComponent.on("itemcontextmenu",menu,this);
	}
	,renameWorkspaceObjectPrompt: function(objectId) {
		var self = this;
		var dialog = Ext.Msg.prompt("Rename object","Type new name",function(btn,text) {
			if(btn == "ok") {
				self.renameWorkspaceObject(objectId,text);
			}
		},this,false,this.theObjects.get(objectId).getName());
	}
	,removeItem: function(objectId) {
		this.theWorkspaceDataStore.suspendEvents();
		var firstNode = this.theWorkspaceDataStore.getRootNode().findChild("objectId",objectId,true);
		if(firstNode.get("type") != "folder") {
			this.removeObject(objectId,true);
		} else {
			Ext.suspendLayouts();
			saturn.client.WorkspaceApplication.suspendUpdates();
			var objectIdsToRemove = this.getObjectIdsBelow(firstNode);
			var _g = 0;
			while(_g < objectIdsToRemove.length) {
				var woId = objectIdsToRemove[_g];
				++_g;
				this.removeObject(woId,false);
			}
			firstNode.parentNode.removeChild(firstNode,false,false,true);
			Ext.resumeLayouts(true);
			this.reloadWorkspace();
		}
	}
	,duplicateItem: function(objectId) {
		this.theWorkspaceDataStore.suspendEvents();
		var firstNode = this.theWorkspaceDataStore.getRootNode().findChild("objectId",objectId,true);
		if(firstNode.get("type") != "folder") {
			this.duplicateObject(objectId,true);
		} else {
			Ext.suspendLayouts();
			var objectIdsToDuplicate = this.getObjectIdsBelow(firstNode);
			var folder = this._addFolder(firstNode.get("text"),firstNode.parentNode);
			var _g = 0;
			while(_g < objectIdsToDuplicate.length) {
				var woId = objectIdsToDuplicate[_g];
				++_g;
				this.duplicateObject(woId,false,folder);
			}
			this.reloadWorkspace();
		}
	}
	,duplicateObject: function(objectId,refresh,folder) {
		var object = this.getObject(objectId);
		if(folder == null) {
			folder = this.theWorkspaceDataStore.getRootNode().findChild("objectId",objectId,true).parentNode;
		}
		var workspaceObj = object.clone();
		if(workspaceObj != null) {
			this._addObject(workspaceObj,false,refresh,folder);
		} else {
			Ext.Msg.alert("","Duplicate not supported for object");
		}
	}
	,closeItem: function(itemId) {
		var firstNode = this.theWorkspaceDataStore.getRootNode().findChild("objectId",itemId,true);
		if(firstNode.get("type") != "folder") {
			this.closeObject(itemId);
		} else {
			var objectIdsToClose = this.getObjectIdsBelow(firstNode);
			var _g = 0;
			while(_g < objectIdsToClose.length) {
				var woId = objectIdsToClose[_g];
				++_g;
				this._closeObject(woId,false);
			}
			this.reloadWorkspace();
		}
	}
	,findNode: function(itemId) {
		return this.theWorkspaceDataStore.getRootNode().findChild("objectId",itemId,true);
	}
	,getObjectIdsBelow: function(node) {
		var nodes = [node];
		var objectIdsToRemove = [];
		while(nodes.length > 0) {
			var node1 = nodes.pop();
			var children = node1.childNodes;
			if(children != null) {
				var _g = 0;
				while(_g < children.length) {
					var child = children[_g];
					++_g;
					nodes.push(child);
				}
			}
			if(node1.get("type") != "folder") {
				objectIdsToRemove.push(node1.get("objectId"));
			}
		}
		return objectIdsToRemove;
	}
	,getTreeAsSimple: function() {
		var nodes = [{ model : this.theWorkspaceDataStore.getRootNode()}];
		var root = nodes[0];
		while(nodes.length > 0) {
			var node = nodes.pop();
			node.text = node.model.get("text");
			node.objectId = node.model.get("objectId");
			node.type = node.model.get("type");
			node.leaf = node.model.get("leaf");
			node.expanded = node.model.get("expanded");
			node.icon = node.model.get("icon");
			node.children = [];
			var childNodes = node.model.childNodes;
			if(childNodes != null) {
				var _g = 0;
				while(_g < childNodes.length) {
					var childNode = childNodes[_g];
					++_g;
					var childNodeObj = { model : childNode};
					node.children.unshift(childNodeObj);
					nodes.push(childNodeObj);
				}
			}
			node.model = null;
		}
		root = { "children" : root.children};
		return root;
	}
	,beginUpdate: function() {
		Ext.suspendLayouts();
		this.theWorkspaceDataStore.suspendEvents();
	}
	,restoreTreeFromSimple: function(root) {
		this.theWorkspaceDataStore.suspendEvents();
		Ext.suspendLayouts();
		var nodes = root.children;
		var _g = 0;
		while(_g < nodes.length) {
			var node = nodes[_g];
			++_g;
			node.parentNode = this.theWorkspaceDataStore.getRootNode();
		}
		while(nodes.length > 0) {
			var node1 = nodes.pop();
			var parentNode = node1.parentNode;
			var treeNode = Ext.create("WorkspaceObject",{ text : node1.text, leaf : node1.leaf, expandable : true, expanded : node1.expanded, objectId : node1.objectId, type : node1.type, icon : node1.icon});
			var treeNode1 = parentNode.appendChild(treeNode);
			var children = node1.children;
			if(children != null && children.length > 0) {
				var _g1 = 0;
				while(_g1 < children.length) {
					var child = children[_g1];
					++_g1;
					child.parentNode = treeNode1;
					nodes.push(child);
				}
			}
		}
		this.reloadWorkspace();
	}
	,renameItem: function(objectId) {
		var _gthis = this;
		var node = this.theWorkspaceDataStore.getRootNode().findChild("objectId",objectId,true);
		var dialog = Ext.Msg.prompt("Rename object","Type new name",function(btn,text) {
			if(btn == "ok") {
				if(node.get("type") == "folder") {
					node.set("text",text);
					node.commit();
					_gthis.reloadWorkspace();
				} else {
					_gthis.renameWorkspaceObject(objectId,text);
				}
			}
		},this,false,node.get("text"));
	}
	,renameWorkspaceObject: function(objectId,newName) {
		var object = this.getObject(objectId);
		newName = this.generateName(newName,1,object.getUUID());
		this.nameToObjectUUID.remove(object.getName());
		var entity = object;
		if(Std["is"](object,saturn.client.workspace.WorkspaceObject)) {
			entity = object.getObject();
		}
		var clazz = Type.getClass(entity);
		if(clazz != null) {
			var model = saturn.client.WorkspaceApplication.getApplication().getProvider().getModel(clazz);
			if(model != null) {
				var id_field = model.getFirstKey();
				if(id_field != null) {
					saturn.client.WorkspaceApplication.getApplication().getActiveProgram().setModelOutlineValue(id_field,newName);
					Reflect.setField(entity,id_field,newName);
				}
			}
		}
		object.setName(newName);
		this.nameToObjectUUID.set(object.getName(),object.getUUID());
		var node = this.theWorkspaceDataStore.getRootNode().findChild("objectId",objectId == null ? "null" : "" + objectId,true);
		if(node != null) {
			node.set("text",newName);
			node.commit();
		}
		var program = this.getOpenProgram(objectId);
		if(program != null) {
			program.setTitle(newName);
		}
		var listener = this.theListeners.iterator();
		while(listener.hasNext()) {
			var listener1 = listener.next();
			listener1.objectRenamed(object);
		}
		this.reloadWorkspace();
	}
	,initialiseDOMComponent: function() {
		this.initialiseDragAndDrop();
	}
	,initialiseDragAndDrop: function() {
		var elem = this.getDOMComponent();
		var self = this;
		elem.addEventListener("dragenter",function(e) {
			e.preventDefault();
			elem.style.backgroundColor = "rgba(168,168,168,0.5) ";
			return false;
		});
		elem.addEventListener("dragexit",function(e1) {
			e1.preventDefault();
			elem.style.backgroundColor = "green";
			return false;
		});
		elem.addEventListener("dragover",function(e2) {
			e2.preventDefault();
			return false;
		});
		elem.addEventListener("dragleave",function(e3) {
			e3.preventDefault();
			elem.style.backgroundColor = "white";
			return false;
		});
		elem.addEventListener("drop",function(e4) {
			e4.preventDefault();
			var file = e4.dataTransfer.files[0];
			self.openFile(file);
			elem.style.backgroundColor = "white";
			return false;
		});
	}
	,onFocus: function() {
	}
	,onBlur: function() {
	}
	,getComponent: function() {
		return this.theComponent;
	}
	,getRawComponent: function() {
		return this.getRawComponent();
	}
	,addListener: function(listener) {
		this.theListeners.add(listener);
	}
	,removeListener: function(listener) {
		this.theListeners.remove(listener);
	}
	,openFile: function(file,openProgram) {
		var _gthis = this;
		if(file == null) {
			return;
		}
		var r = new EReg("\\.(\\w+)","");
		r.match(file.name);
		var extension = r.matched(1);
		if(extension == "zip") {
			this.openZipFile(file);
		} else if(extension == "sat") {
			saturn.client.core.CommonCore.getFileAsText(file,function(contents) {
				var obj = haxe.Unserializer.run(contents);
				_gthis._openWorkspace(obj);
			});
		} else {
			var programRegistry = saturn.client.WorkspaceApplication.getApplication().getProgramRegistry();
			var clazz = programRegistry.getDefaultProgramByFileExtension(extension);
			if(clazz != null) {
				if(Reflect.hasField(clazz,"parseFile")) {
					var func = Reflect.field(clazz,"parseFile");
					Reflect.callMethod(clazz,func,[file,null,openProgram]);
				} else {
					var program = Type.createInstance(clazz,[]);
					program.openFile(file,true,openProgram);
				}
			}
		}
	}
	,openZipFile: function(file) {
		var _gthis = this;
		var load = function(buf) {
			var zip = new JSZip(buf);
			var open = true;
			var _g = 0;
			var _g1 = Reflect.fields(zip.files);
			while(_g < _g1.length) {
				var file1 = _g1[_g];
				++_g;
				var fh = zip.file(file1);
				_gthis.openFile(fh,open);
				open = false;
			}
		};
		if(Std["is"](file,saturn.core.FileShim)) {
			var tmp = file.getAsArrayBuffer();
			load(tmp);
		} else {
			var fileReader = new FileReader();
			fileReader.onload = function(e) {
				load(e.target.result);
			};
			fileReader.readAsArrayBuffer(file);
		}
	}
	,addObject: function(object,autoOpen,folderNode) {
		this._addObject(object,autoOpen,true,folderNode);
	}
	,getParentFolder: function(objectId) {
		var node = this.theWorkspaceDataStore.getRootNode().findChild("objectId",objectId,true);
		return node.parentNode;
	}
	,generateName: function(name,nextId,uuid) {
		if(!this.nameToObjectUUID.exists(name)) {
			return name;
		} else if(this.nameToObjectUUID.get(name) == uuid) {
			return name;
		}
		var newName = name + " (" + nextId + ")";
		if(this.nameToObjectUUID.exists(newName)) {
			if(this.nameToObjectUUID.get(newName) == uuid) {
				return newName;
			} else {
				return this.generateName(name,++nextId,uuid);
			}
		} else {
			return newName;
		}
	}
	,changeObjectType: function(objectId,model) {
		var newObj = Type.createInstance(model.getClass(),[]);
		return this.switchObject(objectId,newObj);
	}
	,switchObject: function(objectId,newObj) {
		if(!Std["is"](newObj,saturn.client.workspace.WorkspaceObject)) {
			saturn.client.workspace.Workspace.installWorkspaceExtensions(newObj);
		}
		var currentObject = this.getObject(objectId);
		newObj.setUUID(currentObject.getUUID());
		newObj.setName(currentObject.getName());
		this._addObject(newObj,false,false,null,true);
		if(Reflect.isFunction(newObj.setup)) {
			newObj.setup();
		}
		return newObj;
	}
	,_addObject: function(object,autoOpen,reload,folderNode,replacing) {
		if(replacing == null) {
			replacing = false;
		}
		if(object == null) {
			return;
		}
		if(!Std["is"](object,saturn.client.workspace.WorkspaceObject) && !Reflect.hasField(object,"__WOEXTENSIONS")) {
			saturn.client.workspace.Workspace.installWorkspaceExtensions(object);
		}
		if(object.getUUID() == null || object.getUUID() == "") {
			object.setUUID(Std.string(this.nextObjectId));
			var name = this.generateName(object.getName(),1,object.getUUID());
			object.setName(name);
			this.nextObjectId++;
		}
		if(this.theObjects.exists(object.getUUID()) && this.theObjects.get(object.getUUID()) == object) {
			if(autoOpen) {
				this.setActiveObject(object.getUUID());
			}
			return;
		}
		this.nameToObjectUUID.set(object.getName(),object.getUUID());
		this.theObjects.set(object.getUUID(),object);
		var listener = this.theListeners.iterator();
		while(listener.hasNext()) {
			var listener1 = listener.next();
			listener1.objectAdded(object);
		}
		if(autoOpen) {
			this.setActiveObject(object.getUUID());
		}
		if(replacing == false && !this.isTreeUpdatesSuspended()) {
			var rootNode = this.theWorkspaceDataStore.getRootNode();
			var folderName = "Objects";
			if(folderNode == null) {
				var clazz = Type.getClass(object);
				var className;
				if(clazz != null) {
					var o = object;
					if(Std["is"](object,saturn.client.workspace.WorkspaceObject)) {
						o = object.getObject();
					}
					var ot = Type.getClass(o);
					var model = saturn.client.WorkspaceApplication.getApplication().getProvider().getModel(ot);
					if(model != null) {
						folderName = model.getAlias();
					} else if(Reflect.hasField(clazz,"getDefaultFolderName")) {
						folderName = Reflect.callMethod(clazz,Reflect.field(clazz,"getDefaultFolderName"),[]);
					} else {
						folderName = Type.getClassName(clazz);
					}
				}
			}
			if(folderNode == null) {
				folderNode = this.theWorkspaceDataStore.getRootNode().findChild("text",folderName,false);
			} else if(typeof(folderNode) == "string") {
				folderName = folderNode;
				folderNode = this.theWorkspaceDataStore.getRootNode().findChild("text",folderName,false);
			}
			if(folderNode == null) {
				folderNode = rootNode.appendChild(Ext.create("WorkspaceObject",{ text : folderName, leaf : false, expanded : true, objectId : this.nextObjectId++, type : "folder"}));
			}
			folderNode.appendChild(Ext.create("WorkspaceObject",{ text : object.getName(), leaf : true, expanded : true, objectId : object.getUUID(), type : "object", icon : object.getIconPath()}));
		}
		if(reload) {
			this.reloadWorkspace();
		}
	}
	,addFolderPrompt: function(objectId) {
		var _gthis = this;
		var dialog = Ext.Msg.prompt("Add Folder","Folder name",function(btn,text) {
			if(btn == "ok") {
				_gthis.addFolder(objectId,text);
			}
		},this,false,"");
	}
	,addFolder: function(objectId,folderName) {
		var folderNode;
		if(objectId == null) {
			folderNode = this.theWorkspaceDataStore.getRootNode();
		} else {
			folderNode = this.theWorkspaceDataStore.getRootNode().findChild("objectId",objectId,true);
		}
		var folder = this._addFolder(folderName,folderNode);
		this.theComponent.view.refresh();
		return folder;
	}
	,_addFolder: function(folderName,parentFolder) {
		var nextId = this.nextObjectId++;
		if(parentFolder == null) {
			parentFolder = this.theWorkspaceDataStore.getRootNode();
		}
		var folder = Ext.create("WorkspaceObject",{ text : folderName, leaf : false, expanded : true, id : nextId, objectId : nextId, type : "folder"});
		var folder1 = parentFolder.appendChild(folder);
		return folder1;
	}
	,getObject: function(id) {
		return this.getObjectSafely(id,null);
	}
	,_getObject: function(id) {
		var obj = this.getObjectSafely(id,null);
		return obj;
	}
	,getObjectSafely: function(id,type) {
		if(id == null) {
			return null;
		}
		id = saturn.client.workspace.Workspace.convertId(id);
		if(this.theObjects.exists(id)) {
			var obj = this.theObjects.get(id);
			if(type == null) {
				return obj;
			} else if(Std["is"](obj,type)) {
				return obj;
			} else {
				return obj;
			}
		} else {
			return null;
		}
	}
	,isObject: function(id) {
		id = saturn.client.workspace.Workspace.convertId(id);
		if(this.theObjects.exists(id)) {
			return true;
		} else {
			return false;
		}
	}
	,getAllObjects: function(clazz) {
		var objects = [];
		var objectId = this.theObjects.keys();
		while(objectId.hasNext()) {
			var objectId1 = objectId.next();
			var object = this.theObjects.get(objectId1);
			if(Std["is"](object,clazz)) {
				objects.push(object);
			}
		}
		return objects;
	}
	,getObjectsByClass: function(clazz) {
		var objects = [];
		var objectId = this.theObjects.keys();
		while(objectId.hasNext()) {
			var objectId1 = objectId.next();
			var object = this.theObjects.get(objectId1);
			if(Std["is"](object,clazz)) {
				objects.push(object);
			}
		}
		return objects;
	}
	,reloadWorkspace: function() {
		this.theWorkspaceDataStore.resumeEvents();
		this.theComponent.view.refresh();
		this.theWorkspaceDataStore.sync();
		Ext.resumeLayouts(true);
	}
	,serialise: function(cb) {
		var _gthis = this;
		var programs = [];
		var programObj = this.programIdToProgram.iterator();
		while(programObj.hasNext()) {
			var programObj1 = programObj.next();
			programs.push(programObj1);
		}
		var next = null;
		next = function() {
			if(programs.length == 0) {
				var next1 = _gthis._serialise();
				cb(next1);
				return;
			}
			var program = programs.pop();
			program.saveWait(next);
		};
		next();
	}
	,_serialise: function() {
		var serialisedObjects = [];
		var retVal = this.theWorkspaceName;
		var retVal1 = this.nextObjectId;
		var retVal2 = this.nextProgramId;
		var retVal3 = saturn.client.WorkspaceApplication.getApplication().getActiveProgramId();
		var retVal4 = { workspaceName : retVal, nextObjectId : retVal1, nextProgramId : retVal2, workspaceObjects : [], programs : [], programStateMap : { }, activeProgramId : retVal3};
		var i = 0;
		var workspaceObj = this.theObjects.iterator();
		while(workspaceObj.hasNext()) {
			var workspaceObj1 = workspaceObj.next();
			var fieldMap = new haxe.ds.StringMap();
			var _g = 0;
			var _g1 = Reflect.fields(workspaceObj1);
			while(_g < _g1.length) {
				var field = _g1[_g];
				++_g;
				var val = Reflect.field(workspaceObj1,field);
				if(val != null && (Std["is"](val,saturn.client.workspace.WorkspaceObject) || Reflect.hasField(val,"__WOEXTENSIONS"))) {
					fieldMap.set(field,val);
					Reflect.setField(workspaceObj1,field,"__LINKED_" + Std.string(val.getUUID()));
				}
			}
			retVal4.workspaceObjects[i] = workspaceObj1.serialise();
			var field1 = fieldMap.keys();
			while(field1.hasNext()) {
				var field2 = field1.next();
				Reflect.setField(workspaceObj1,field2,fieldMap.get(field2));
			}
			++i;
		}
		i = 0;
		var programObj = this.programIdToProgram.iterator();
		while(programObj.hasNext()) {
			var programObj1 = programObj.next();
			retVal4.programs[i] = programObj1.serialise();
			++i;
		}
		var objectId = this.objectIdToOpenProgramId.keys();
		while(objectId.hasNext()) {
			var objectId1 = objectId.next();
			var tmp = this.objectIdToOpenProgramId.get(objectId1);
			retVal4.programStateMap.objectId = tmp;
		}
		retVal4.programStateMap = this.objectIdToOpenProgramId;
		retVal4.workspaceTree = this.getTreeAsSimple();
		return retVal4;
	}
	,getWorkspaceName: function() {
		return this.theWorkspaceName;
	}
	,setWorkspaceName: function(workspaceName) {
		this.theWorkspaceName = workspaceName;
	}
	,openDefaultWorkspace: function() {
		this.openWorkspace("DEFAULT");
	}
	,openWorkspace: function(workspaceName) {
		var _gthis = this;
		this.theWorkspaceDatabase.query(workspaceName,function(e) {
			saturn.client.WorkspaceApplication.getApplication().showMessage("",e);
		},function(workspaceObject) {
			_gthis._openWorkspace(workspaceObject);
		});
	}
	,suspendTreeUpdates: function(suspend) {
		this.treeUpdatesSuspended = suspend;
	}
	,isTreeUpdatesSuspended: function() {
		return this.treeUpdatesSuspended;
	}
	,reg_linked: null
	,_openWorkspace: function(workspaceObject) {
		this.closeWorkspace();
		this.restoreTreeFromSimple(workspaceObject.workspaceTree);
		this.theWorkspaceName = workspaceObject.workspaceName;
		Ext.suspendLayouts();
		this.suspendTreeUpdates(true);
		var objects = workspaceObject.workspaceObjects;
		var _g = 0;
		while(_g < objects.length) {
			var workspaceObject1 = objects[_g];
			++_g;
			var unserObj = haxe.Unserializer.run(workspaceObject1);
			var clazz = Type.getClass(unserObj);
			if(clazz != null) {
				if(!Std["is"](unserObj,saturn.client.workspace.WorkspaceObject)) {
					saturn.client.workspace.Workspace.installWOExtensionFunctions(unserObj);
				}
			}
			this._addObject(unserObj,false,false);
		}
		var uuid = this.theObjects.keys();
		while(uuid.hasNext()) {
			var uuid1 = uuid.next();
			var obj = this.theObjects.get(uuid1);
			var _g1 = 0;
			var _g11 = Reflect.fields(obj);
			while(_g1 < _g11.length) {
				var field = _g11[_g1];
				++_g1;
				var val = Reflect.field(obj,field);
				if(val != null && typeof(val) == "string" && this.reg_linked.match(val)) {
					var linkedId = this.reg_linked.matched(1);
					Reflect.setField(obj,field,this.theObjects.get(linkedId));
				}
			}
		}
		this.setReloading(true);
		var progReg = saturn.client.WorkspaceApplication.getApplication().getProgramRegistry();
		var programs = workspaceObject.programs;
		var _g2 = 0;
		while(_g2 < programs.length) {
			var program = programs[_g2];
			++_g2;
			var newProg = Type.createInstance(Type.resolveClass(program.CLASS),[]);
			newProg.deserialise(program);
			progReg.installPlugins(newProg);
			this.registerProgram(newProg);
		}
		var programStateMap = workspaceObject.programStateMap;
		var _g3 = 0;
		var _g12 = Reflect.fields(programStateMap.h);
		while(_g3 < _g12.length) {
			var field1 = _g12[_g3];
			++_g3;
			var programId = Reflect.field(programStateMap.h,field1);
			var objectId = field1;
			var program1 = this.getProgram(programId);
			this.registerObjectWith(this.getObject(objectId),program1);
			program1._setActiveObject(objectId);
			program1.setTitle(this._getObject(objectId).getName());
			this.setActiveObject(objectId);
			program1.postRestore();
		}
		this.setReloading(false);
		if(workspaceObject.activeProgramId != "-1") {
			this.setActiveObject(this.getProgram(workspaceObject.activeProgramId).getActiveObjectId());
		}
		this.nextObjectId = workspaceObject.nextObjectId;
		this.nextProgramId = workspaceObject.nextProgramId;
		var objId = this.theObjects.keys();
		while(objId.hasNext()) {
			var objId1 = objId.next();
			var wo = this.theObjects.get(objId1);
			if(Std["is"](wo,saturn.client.workspace.TextFileWO)) {
				var obj1 = wo.getObject();
				if(obj1.autoRun) {
					if(obj1.value != null) {
						saturn.client.programs.TextEditor.runCode(obj1.value);
					}
				}
			}
		}
		Ext.resumeLayouts(true);
		this.suspendTreeUpdates(false);
		Ext.suspendLayouts();
		Ext.resumeLayouts(true);
	}
	,getWorkspaceNames: function(onSuccess) {
		this.theWorkspaceDatabase.getWorkspaceNames(onSuccess);
	}
	,__class__: saturn.client.workspace.Workspace
};
saturn.client.workspace.WorkspaceStore = $hxClasses["saturn.client.workspace.WorkspaceStore"] = function(databaseName,version,onErrorAction) {
	this.databaseName = databaseName;
	this.version = version;
	this.onErrorAction = onErrorAction;
	this.init();
};
saturn.client.workspace.WorkspaceStore.__name__ = ["saturn","client","workspace","WorkspaceStore"];
saturn.client.workspace.WorkspaceStore.prototype = {
	databaseName: null
	,version: null
	,conn: null
	,onErrorAction: null
	,init: function() {
		var _gthis = this;
		if(window.indexedDB) {
			var request = indexedDB.open(this.databaseName,this.version);
			request.onupgradeneeded = function(e) {
				var db = e.target.result;
				e.target.transaction.onerror = _gthis.onErrorAction;
				if(db.objectStoreNames.contains(_gthis.databaseName)) {
					db.deleteObjectStore(_gthis.databaseName);
				}
				var store = db.createObjectStore(_gthis.databaseName,{ keyPath : "workspaceName"});
			};
			request.onsuccess = function(e1) {
				_gthis.conn = e1.target.result;
			};
			request.onerror = this.onErrorAction;
		}
	}
	,store: function(object,onErrorAction,onSuccessAction) {
		var trans = this.conn.transaction([this.databaseName],"readwrite");
		var store = trans.objectStore(this.databaseName);
		var request = store.put(object);
	}
	,query: function(key,onError,onSuccess) {
		var trans = this.conn.transaction([this.databaseName]);
		var objectStore = trans.objectStore(this.databaseName);
		var request = objectStore.get(key);
		request.onerror = onError;
		request.onsuccess = function(result) {
			onSuccess(result.target.result);
		};
	}
	,getWorkspaceNames: function(onSuccess) {
		var trans = this.conn.transaction([this.databaseName],"readonly");
		var objectStore = trans.objectStore(this.databaseName);
		var workspaceNames = [];
		objectStore.openCursor().onsuccess = function(event) {
			var cursor = this.result;
			if(cursor != null) {
				workspaceNames.push(cursor.key);
				cursor.advance(1);
			} else {
				onSuccess(workspaceNames);
			}
		};
	}
	,__class__: saturn.client.workspace.WorkspaceStore
};
saturn.client.workspace.WorkspaceStoreProvider = $hxClasses["saturn.client.workspace.WorkspaceStoreProvider"] = function(databaseName,version,onErrorAction) {
	saturn.client.workspace.WorkspaceStore.call(this,databaseName,version,onErrorAction);
};
saturn.client.workspace.WorkspaceStoreProvider.__name__ = ["saturn","client","workspace","WorkspaceStoreProvider"];
saturn.client.workspace.WorkspaceStoreProvider.__super__ = saturn.client.workspace.WorkspaceStore;
saturn.client.workspace.WorkspaceStoreProvider.prototype = $extend(saturn.client.workspace.WorkspaceStore.prototype,{
	store: function(rawSession,onErrorAction,onSuccessAction) {
		var app = saturn.client.WorkspaceApplication.getApplication();
		var name = saturn.client.core.ClientCore.getClientCore().getUser().fullname + " - " + Std.string(rawSession.workspaceName);
		rawSession = JSON.stringify(rawSession);
		app.getProvider().getByValue(name,saturn.core.domain.SaturnSession,"sessionName",function(obj,error) {
			if(error != null) {
				onErrorAction(error);
			} else if(obj == null) {
				obj = new saturn.core.domain.SaturnSession();
				obj.sessionName = name;
				obj.sessionContent = rawSession;
				obj.isPublic = "yes";
				app.getProvider().insertObjects([obj],function(error1) {
					app.getProvider().resetCache();
					if(error1 != null) {
						onErrorAction(error1);
					} else {
						onSuccessAction();
					}
				});
			} else {
				obj.sessionContent = rawSession;
				app.getProvider().updateObjects([obj],function(error2) {
					app.getProvider().resetCache();
					if(error2 != null) {
						onErrorAction(error2);
					} else {
						onSuccessAction();
					}
				});
			}
		});
	}
	,query: function(key,onError,onSuccess) {
		var app = saturn.client.WorkspaceApplication.getApplication();
		if(key.indexOf("~") == -1) {
			key = saturn.client.core.ClientCore.getClientCore().getUser().fullname + " - " + key;
		}
		app.getProvider().getByValue(key,saturn.core.domain.SaturnSession,"sessionName",function(obj,error) {
			app.getProvider().resetCache();
			if(error != null) {
				onError(error);
			} else if(obj != null) {
				var rawSession = obj.sessionContent;
				rawSession = JSON.parse(rawSession);
				onSuccess(rawSession);
			} else {
				onError("A default session doesn't exist for your account.");
			}
		});
	}
	,getWorkspaceNames: function(onSuccess) {
		var workspaceNames = [];
		var app = saturn.client.WorkspaceApplication.getApplication();
		app.getProvider().getByValues([saturn.client.core.ClientCore.getClientCore().getUser().username],saturn.core.domain.SaturnSession,"userName",function(objs,error) {
			app.getProvider().resetCache();
			var names = [];
			if(objs != null) {
				var _g = 0;
				while(_g < objs.length) {
					var obj = objs[_g];
					++_g;
					names.push(obj.sessionName);
				}
			}
			onSuccess(names);
		});
	}
	,init: function() {
	}
	,__class__: saturn.client.workspace.WorkspaceStoreProvider
});
saturn.client.workspace.WorkspaceObjectNotFoundException = $hxClasses["saturn.client.workspace.WorkspaceObjectNotFoundException"] = function(message) {
	saturn.util.HaxeException.call(this,message);
};
saturn.client.workspace.WorkspaceObjectNotFoundException.__name__ = ["saturn","client","workspace","WorkspaceObjectNotFoundException"];
saturn.client.workspace.WorkspaceObjectNotFoundException.__super__ = saturn.util.HaxeException;
saturn.client.workspace.WorkspaceObjectNotFoundException.prototype = $extend(saturn.util.HaxeException.prototype,{
	__class__: saturn.client.workspace.WorkspaceObjectNotFoundException
});
saturn.core.Alignment = $hxClasses["saturn.core.Alignment"] = function(seqA,seqB) {
	this.seqID = 0;
	this.lMinScore = 2;
	this.lMaxScore = -1;
	this.lMaxI = 0;
	this.lMaxJ = 0;
	this.localMode = false;
	this.missMatchScore = -2;
	this.matchScore = 1;
	this.gapScore = -1;
	this.sequenceA = seqA.toUpperCase();
	this.sequenceB = seqB.toUpperCase();
	this.localBlocks = [];
};
saturn.core.Alignment.__name__ = ["saturn","core","Alignment"];
saturn.core.Alignment.prototype = {
	sequenceA: null
	,sequenceB: null
	,alnMatrix: null
	,alnDMatrix: null
	,sequenceALen: null
	,sequenceBLen: null
	,gapScore: null
	,matchScore: null
	,missMatchScore: null
	,sequenceAAlnStr: null
	,sequenceBAlnStr: null
	,localMode: null
	,lMaxJ: null
	,lMaxI: null
	,lMaxScore: null
	,lMinScore: null
	,localBlocks: null
	,seqID: null
	,setAlignmentType: function(alnType) {
		if(alnType == saturn.core.AlignmentType.SW) {
			this.localMode = true;
		} else {
			this.localMode = false;
		}
	}
	,getAlignment: function() {
		var localBlock = this.localBlocks[0];
		var retArray = [localBlock.sequenceA,localBlock.sequenceB];
		return retArray;
	}
	,getAlignmentRegion: function() {
		return this.getAlignment();
	}
	,setBlock: function(block) {
		this.localBlocks.push(block);
	}
	,getAllLocalAlignments: function() {
		return this.localBlocks;
	}
	,align: function() {
		this.lMaxJ = 0;
		this.lMaxI = 0;
		this.lMaxScore = -1;
		this.alnMatrix = [];
		this.alnDMatrix = [];
		this.localBlocks = [];
		this.sequenceALen = this.sequenceA.length;
		this.sequenceBLen = this.sequenceB.length;
		var _g1 = 0;
		var _g = this.sequenceBLen + 1;
		while(_g1 < _g) {
			var i = _g1++;
			var iAln = [];
			var iDAln = [];
			var _g3 = 0;
			var _g2 = this.sequenceALen + 1;
			while(_g3 < _g2) {
				var j = _g3++;
				iAln.push(0);
				iDAln.push("");
			}
			this.alnMatrix.push(iAln);
			this.alnDMatrix.push(iDAln);
		}
		this.alnMatrix[0][0] = 0;
		this.alnDMatrix[0][0] = "N";
		var _g11 = 1;
		var _g4 = this.sequenceALen + 1;
		while(_g11 < _g4) {
			var i1 = _g11++;
			this.alnMatrix[0][i1] = i1 * this.gapScore;
			this.alnDMatrix[0][i1] = "L";
		}
		var _g12 = 1;
		var _g5 = this.sequenceBLen + 1;
		while(_g12 < _g5) {
			var j1 = _g12++;
			this.alnMatrix[j1][0] = j1 * this.gapScore;
			this.alnDMatrix[j1][0] = "L";
		}
		var _g13 = 1;
		var _g6 = this.sequenceBLen + 1;
		while(_g13 < _g6) {
			var j2 = _g13++;
			var _g31 = 1;
			var _g21 = this.sequenceALen + 1;
			while(_g31 < _g21) {
				var i2 = _g31++;
				var dScore;
				if(this.sequenceB.charAt(j2 - 1) == this.sequenceA.charAt(i2 - 1)) {
					dScore = this.alnMatrix[j2 - 1][i2 - 1] + this.matchScore;
				} else {
					dScore = this.alnMatrix[j2 - 1][i2 - 1] + this.missMatchScore;
				}
				var lScore = this.alnMatrix[j2][i2 - 1] + this.gapScore;
				var uScore = this.alnMatrix[j2 - 1][i2] + this.gapScore;
				if(dScore >= uScore) {
					if(dScore >= lScore) {
						this.alnMatrix[j2][i2] = dScore;
						this.alnDMatrix[j2][i2] = "D";
					} else {
						this.alnMatrix[j2][i2] = lScore;
						this.alnDMatrix[j2][i2] = "L";
					}
				} else if(uScore >= lScore) {
					this.alnMatrix[j2][i2] = uScore;
					this.alnDMatrix[j2][i2] = "U";
				} else {
					this.alnMatrix[j2][i2] = lScore;
					this.alnDMatrix[j2][i2] = "L";
				}
				if(this.localMode) {
					if(0 > this.alnMatrix[j2][i2]) {
						this.alnMatrix[j2][i2] = 0;
						this.alnDMatrix[j2][i2] = "S";
					} else {
						if(this.alnMatrix[j2][i2] > this.lMaxScore) {
							this.lMaxScore = this.alnMatrix[j2][i2];
							this.lMaxJ = j2;
							this.lMaxI = i2;
						}
						if(this.alnMatrix[j2][i2] > this.lMinScore) {
							this.localBlocks.push(new saturn.core.LocalBlock(j2,i2,this.alnMatrix[j2][i2]));
						}
					}
				}
			}
		}
		var blocksToProcess = [];
		if(this.localMode) {
			var scoreToBlocks = new haxe.ds.IntMap();
			var _g14 = 0;
			var _g7 = this.localBlocks.length;
			while(_g14 < _g7) {
				var l = _g14++;
				var localBlock = this.localBlocks[l];
				if(!scoreToBlocks.exists(localBlock.score)) {
					scoreToBlocks.set(localBlock.score,[]);
				}
				scoreToBlocks.get(localBlock.score).push(localBlock);
			}
			var scoreList = [];
			var key = scoreToBlocks.keys();
			while(key.hasNext()) {
				var key1 = key.next();
				scoreList.push(key1);
			}
			scoreList.sort(function(a,b) {
				return b - a;
			});
			var _g8 = 0;
			while(_g8 < scoreList.length) {
				var score = scoreList[_g8];
				++_g8;
				var _g15 = 0;
				var _g22 = scoreToBlocks.get(score);
				while(_g15 < _g22.length) {
					var localBlock1 = _g22[_g15];
					++_g15;
					blocksToProcess.push(localBlock1);
				}
			}
		} else {
			blocksToProcess.push(new saturn.core.LocalBlock(this.sequenceBLen,this.sequenceALen,0));
		}
		this.localBlocks = [];
		this.seqID = 0;
		var visitedPositions = new haxe.ds.StringMap();
		var _g16 = 0;
		var _g9 = blocksToProcess.length;
		while(_g16 < _g9) {
			var l1 = _g16++;
			var sequenceAAln = [];
			var sequenceBAln = [];
			var localBlock2 = blocksToProcess[l1];
			var i3 = localBlock2.iPosition;
			var j3 = localBlock2.jPosition;
			var breaked = false;
			while(true) if(this.alnDMatrix[j3][i3] == "N" || this.alnDMatrix[j3][i3] == "S" || 0 > i3) {
				break;
			} else if(this.alnDMatrix[j3][i3] == "D") {
				if(visitedPositions.exists("I" + Std.string(i3 - 1))) {
					breaked = true;
					break;
				} else if(visitedPositions.exists("J" + Std.string(j3 - 1))) {
					breaked = true;
					break;
				}
				visitedPositions.set("I" + Std.string(i3 - 1),"");
				visitedPositions.set("J" + Std.string(j3 - 1),"");
				sequenceAAln.push(this.sequenceA.charAt(i3 - 1));
				sequenceBAln.push(this.sequenceB.charAt(j3 - 1));
				if(this.sequenceA.charAt(i3 - 1) == this.sequenceB.charAt(j3 - 1)) {
					this.seqID++;
				}
				--j3;
				--i3;
			} else if(this.alnDMatrix[j3][i3] == "L") {
				if(visitedPositions.exists("I" + Std.string(i3 - 1))) {
					breaked = true;
					break;
				}
				visitedPositions.set("I" + Std.string(i3 - 1),"");
				sequenceAAln.push(this.sequenceA.charAt(i3 - 1));
				sequenceBAln.push("-");
				--i3;
			} else if(this.alnDMatrix[j3][i3] == "U") {
				if(visitedPositions.exists("J" + Std.string(j3 - 1))) {
					breaked = true;
					break;
				}
				visitedPositions.set("J" + Std.string(j3 - 1),"");
				sequenceBAln.push(this.sequenceB.charAt(j3 - 1));
				sequenceAAln.push("-");
				--j3;
			}
			if(!breaked) {
				sequenceAAln.reverse();
				this.sequenceAAlnStr = sequenceAAln.join("");
				sequenceBAln.reverse();
				this.sequenceBAlnStr = sequenceBAln.join("");
				localBlock2.sequenceA = this.sequenceAAlnStr;
				localBlock2.sequenceB = this.sequenceBAlnStr;
				this.localBlocks.push(localBlock2);
			}
		}
	}
	,getSeqAId: function() {
		return this.seqID / this.sequenceA.length * 100;
	}
	,__class__: saturn.core.Alignment
};
saturn.core.LocalBlock = $hxClasses["saturn.core.LocalBlock"] = function(j,i,hitScore) {
	this.iPosition = i;
	this.jPosition = j;
	this.score = hitScore;
};
saturn.core.LocalBlock.__name__ = ["saturn","core","LocalBlock"];
saturn.core.LocalBlock.prototype = {
	iPosition: null
	,jPosition: null
	,score: null
	,sequenceA: null
	,sequenceB: null
	,__class__: saturn.core.LocalBlock
};
saturn.core.AlignmentType = $hxClasses["saturn.core.AlignmentType"] = { __ename__ : ["saturn","core","AlignmentType"], __constructs__ : ["SW","NW"] };
saturn.core.AlignmentType.SW = ["SW",0];
saturn.core.AlignmentType.SW.toString = $estr;
saturn.core.AlignmentType.SW.__enum__ = saturn.core.AlignmentType;
saturn.core.AlignmentType.NW = ["NW",1];
saturn.core.AlignmentType.NW.toString = $estr;
saturn.core.AlignmentType.NW.__enum__ = saturn.core.AlignmentType;
if(!saturn.core.molecule) saturn.core.molecule = {};
saturn.core.molecule.Molecule = $hxClasses["saturn.core.molecule.Molecule"] = function(seq) {
	this.linked = false;
	this.allowStar = false;
	this.floatAttributes = new haxe.ds.StringMap();
	this.stringAttributes = new haxe.ds.StringMap();
	this.annotations = new haxe.ds.StringMap();
	this.rawAnnotationData = new haxe.ds.StringMap();
	this.annotationCRC = new haxe.ds.StringMap();
	this.setSequence(seq);
};
saturn.core.molecule.Molecule.__name__ = ["saturn","core","molecule","Molecule"];
saturn.core.molecule.Molecule.prototype = {
	sequence: null
	,starPosition: null
	,originalSequence: null
	,linkedOriginField: null
	,sequenceField: null
	,floatAttributes: null
	,stringAttributes: null
	,name: null
	,alternativeName: null
	,annotations: null
	,rawAnnotationData: null
	,annotationCRC: null
	,crc: null
	,allowStar: null
	,parent: null
	,linked: null
	,getValue: function() {
		return this.getSequence();
	}
	,isLinked: function() {
		return this.linked;
	}
	,setParent: function(parent) {
		this.parent = parent;
	}
	,getParent: function() {
		return this.parent;
	}
	,isChild: function() {
		return this.parent != null;
	}
	,setCRC: function(crc) {
		this.crc = crc;
	}
	,updateCRC: function() {
		if(this.sequence != null) {
			this.crc = haxe.crypto.Md5.encode(this.sequence);
		}
	}
	,getAnnotationCRC: function(annotationName) {
		return this.annotationCRC.get(annotationName);
	}
	,getCRC: function() {
		return this.crc;
	}
	,setRawAnnotationData: function(rawAnnotationData,annotationName) {
		this.rawAnnotationData.set(annotationName,rawAnnotationData);
	}
	,getRawAnnotationData: function(annotationName) {
		return this.rawAnnotationData.get(annotationName);
	}
	,setAllAnnotations: function(annotations) {
		this.removeAllAnnotations();
		var annotationName = annotations.keys();
		while(annotationName.hasNext()) {
			var annotationName1 = annotationName.next();
			this.setAnnotations(annotations.get(annotationName1),annotationName1);
		}
	}
	,removeAllAnnotations: function() {
		var annotationName = this.annotations.keys();
		while(annotationName.hasNext()) {
			var annotationName1 = annotationName.next();
			this.annotations.remove(annotationName1);
			this.annotationCRC.remove(annotationName1);
		}
	}
	,setAnnotations: function(annotations,annotationName) {
		this.annotations.set(annotationName,annotations);
		this.annotationCRC.set(annotationName,this.getCRC());
	}
	,getAnnotations: function(name) {
		return this.annotations.get(name);
	}
	,getAllAnnotations: function() {
		return this.annotations;
	}
	,getAlternativeName: function() {
		return this.alternativeName;
	}
	,setAlternativeName: function(altName) {
		this.alternativeName = altName;
	}
	,getMoleculeName: function() {
		return this.name;
	}
	,setMoleculeName: function(name) {
		this.name = name;
	}
	,getName: function() {
		return this.getMoleculeName();
	}
	,setName: function(name) {
		this.setMoleculeName(name);
	}
	,getSequence: function() {
		return this.sequence;
	}
	,setSequence: function(seq) {
		if(seq != null) {
			seq = seq.toUpperCase();
			seq = saturn.core.molecule.Molecule.whiteSpaceReg.replace(seq,"");
			seq = saturn.core.molecule.Molecule.newLineReg.replace(seq,"");
			seq = saturn.core.molecule.Molecule.carLineReg.replace(seq,"");
			this.starPosition = seq.indexOf("*");
			if(!this.allowStar) {
				this.originalSequence = seq;
				seq = saturn.core.molecule.Molecule.reg_starReplace.replace(seq,"");
			}
			this.sequence = seq;
		}
		this.updateCRC();
	}
	,getFirstPosition: function(seq) {
		return this.sequence.indexOf(seq);
	}
	,getLastPosition: function(seq) {
		if(seq == "") {
			return -1;
		}
		var c = 0;
		var lastMatchPos = -1;
		var lastLastMatchPos = -1;
		while(true) {
			lastMatchPos = this.sequence.indexOf(seq,lastMatchPos + 1);
			if(lastMatchPos != -1) {
				lastLastMatchPos = lastMatchPos;
				++c;
			} else {
				break;
			}
		}
		return lastLastMatchPos;
	}
	,getLocusCount: function(seq) {
		if(seq == "") {
			return 0;
		}
		var c = 0;
		var lastMatchPos = -1;
		while(true) {
			lastMatchPos = this.sequence.indexOf(seq,lastMatchPos + 1);
			if(lastMatchPos != -1) {
				++c;
			} else {
				break;
			}
		}
		return c;
	}
	,contains: function(seq) {
		if(this.sequence.indexOf(seq) > -1) {
			return true;
		} else {
			return false;
		}
	}
	,getLength: function() {
		return this.sequence.length;
	}
	,getStarPosition: function() {
		return this.starPosition;
	}
	,setStarPosition: function(starPosition) {
		this.starPosition = starPosition;
	}
	,getStarSequence: function() {
		return this.originalSequence;
	}
	,equals: function(other) {
		if(other.getStarPosition() != this.getStarPosition()) {
			return false;
		} else if(this.getSequence() != other.getSequence()) {
			return false;
		}
		return true;
	}
	,getCutPosition: function(template) {
		if(template.getLocusCount(this.getSequence()) > 0) {
			var siteStartPosition = template.getFirstPosition(this.getSequence());
			return siteStartPosition + this.starPosition;
		} else {
			return -1;
		}
	}
	,getAfterCutSequence: function(template) {
		var cutPosition = this.getCutPosition(template);
		if(cutPosition == -1) {
			return "";
		} else {
			var seq = template.getSequence();
			return seq.substring(cutPosition,seq.length);
		}
	}
	,getBeforeCutSequence: function(template) {
		var cutPosition = this.getCutPosition(template);
		if(cutPosition == -1) {
			return "";
		} else {
			var seq = template.getSequence();
			return seq.substring(0,cutPosition);
		}
	}
	,getLastCutPosition: function(template) {
		if(template.getLocusCount(this.getSequence()) > 0) {
			var siteStartPosition = template.getLastPosition(this.getSequence());
			return siteStartPosition + this.starPosition;
		} else {
			return -1;
		}
	}
	,getLastBeforeCutSequence: function(template) {
		var cutPosition = this.getLastCutPosition(template);
		if(cutPosition == -1) {
			return "";
		} else {
			var seq = template.getSequence();
			return seq.substring(0,cutPosition);
		}
	}
	,getLastAfterCutSequence: function(template) {
		var cutPosition = this.getLastCutPosition(template);
		if(cutPosition == -1) {
			return "";
		} else {
			var seq = template.getSequence();
			return seq.substring(cutPosition,seq.length);
		}
	}
	,getCutProduct: function(template,direction) {
		if(direction == saturn.core.CutProductDirection.UPSTREAM) {
			return this.getBeforeCutSequence(template);
		} else if(direction == saturn.core.CutProductDirection.DOWNSTREAM) {
			return this.getAfterCutSequence(template);
		} else if(direction == saturn.core.CutProductDirection.UPDOWN) {
			var startPos = this.getCutPosition(template);
			var endPos = this.getLastCutPosition(template) - this.getLength();
			return template.getSequence().substring(startPos,endPos);
		} else {
			return null;
		}
	}
	,getFloatAttribute: function(attr) {
		return this._getFloatAttribute(Std.string(attr));
	}
	,_getFloatAttribute: function(attributeName) {
		if(this.floatAttributes.exists(attributeName)) {
			return this.floatAttributes.get(attributeName);
		}
		return null;
	}
	,setValue: function(value) {
		this.setSequence(value);
	}
	,_setFloatAttribute: function(attributeName,val) {
		this.floatAttributes.set(attributeName,val);
	}
	,setFloatAttribute: function(attr,val) {
		this._setFloatAttribute(Std.string(attr),val);
	}
	,getStringAttribute: function(attr) {
		return this._getStringAttribute(Std.string(attr));
	}
	,_getStringAttribute: function(attributeName) {
		if(this.stringAttributes.exists(attributeName)) {
			return this.stringAttributes.get(attributeName);
		}
		return null;
	}
	,_setStringAttribute: function(attributeName,val) {
		this.stringAttributes.set(attributeName,val);
	}
	,setStringAttribute: function(attr,val) {
		this._setStringAttribute(Std.string(attr),val);
		return;
	}
	,getMW: function() {
		return this.getFloatAttribute(saturn.core.molecule.MoleculeFloatAttribute.MW);
	}
	,findMatchingLocuses: function(locus,mode) {
		var collookup_single = new EReg("^(\\d+)$","");
		if(collookup_single.match(locus)) {
			var num = collookup_single.matched(1);
			var locusPosition = new saturn.core.LocusPosition();
			locusPosition.start = Std.parseInt(num) - 1;
			locusPosition.end = locusPosition.start;
			return [locusPosition];
		}
		var collookup_double = new EReg("^(\\d+)-(\\d+)$","");
		if(collookup_double.match(locus)) {
			var locusPosition1 = new saturn.core.LocusPosition();
			locusPosition1.start = Std.parseInt(collookup_double.matched(1)) - 1;
			locusPosition1.end = Std.parseInt(collookup_double.matched(2)) - 1;
			return [locusPosition1];
		}
		var collookup_toend = new EReg("^(\\d+)-$","");
		if(collookup_toend.match(locus)) {
			var locusPosition2 = new saturn.core.LocusPosition();
			locusPosition2.start = Std.parseInt(collookup_toend.matched(1)) - 1;
			locusPosition2.end = this.getLength() - 1;
			return [locusPosition2];
		}
		var re_missMatchTotal = new EReg("^(\\d+)(.+)","");
		if(mode == null) {
			mode = saturn.core.molecule.MoleculeAlignMode.REGEX;
			if(re_missMatchTotal.match(locus)) {
				mode = saturn.core.molecule.MoleculeAlignMode.SIMPLE;
			}
		}
		if(mode == saturn.core.molecule.MoleculeAlignMode.REGEX) {
			return this.findMatchingLocusesRegEx(locus);
		} else if(mode == saturn.core.molecule.MoleculeAlignMode.SIMPLE) {
			var missMatchesAllowed = 0;
			if(re_missMatchTotal.match(locus)) {
				missMatchesAllowed = Std.parseInt(re_missMatchTotal.matched(1));
				locus = re_missMatchTotal.matched(2);
			}
			return this.findMatchingLocusesSimple(locus,missMatchesAllowed);
		} else {
			return null;
		}
	}
	,findMatchingLocusesSimple: function(locus,missMatchesAllowed) {
		if(missMatchesAllowed == null) {
			missMatchesAllowed = 0;
		}
		var positions = [];
		if(locus == null || locus == "") {
			return positions;
		}
		var currentMissMatches = 0;
		var seqI = -1;
		var lI = -1;
		var startPos = 0;
		var missMatchLimit = missMatchesAllowed + 1;
		var missMatchPositions = [];
		while(true) {
			++lI;
			++seqI;
			if(seqI > this.sequence.length - 1) {
				break;
			}
			if(locus.charAt(lI) != this.sequence.charAt(seqI)) {
				++currentMissMatches;
				missMatchPositions.push(seqI);
			}
			if(lI == 0) {
				startPos = seqI;
			}
			if(currentMissMatches == missMatchLimit) {
				seqI = startPos;
				lI = -1;
				currentMissMatches = 0;
				missMatchPositions = [];
			} else if(lI == locus.length - 1) {
				var locusPosition = new saturn.core.LocusPosition();
				locusPosition.start = startPos;
				locusPosition.end = seqI;
				locusPosition.missMatchPositions = missMatchPositions;
				positions.push(locusPosition);
				lI = -1;
				currentMissMatches = 0;
				missMatchPositions = [];
			}
		}
		return positions;
	}
	,findMatchingLocusesRegEx: function(regex) {
		var r = new EReg(regex,"i");
		var positions = [];
		if(regex == null || regex == "") {
			return positions;
		}
		var offSet = 0;
		var matchAgainst = this.sequence;
		while(matchAgainst != null) if(r.match(matchAgainst)) {
			var locusPosition = new saturn.core.LocusPosition();
			var match = r.matchedPos();
			locusPosition.start = match.pos + offSet;
			locusPosition.end = match.pos + match.len - 1 + offSet;
			offSet = locusPosition.end + 1;
			matchAgainst = r.matchedRight();
			positions.push(locusPosition);
		} else {
			break;
		}
		return positions;
	}
	,updateAnnotations: function(annotationName,config,annotationManager,cb) {
		if(this.getAnnotationCRC(annotationName) == this.getCRC()) {
			var tmp = this.getAnnotations(annotationName);
			cb(null,tmp);
		} else {
			annotationManager.annotateMolecule(this,annotationName,config,function(err,res) {
				cb(err,res);
			});
		}
	}
	,getAtPosition: function(pos) {
		return this.sequence.charAt(pos);
	}
	,__class__: saturn.core.molecule.Molecule
};
saturn.core.DNA = $hxClasses["saturn.core.DNA"] = function(seq) {
	this.reg_tReplace = new EReg("T","g");
	this.proteins = new haxe.ds.StringMap();
	saturn.core.molecule.Molecule.call(this,seq);
};
saturn.core.DNA.__name__ = ["saturn","core","DNA"];
saturn.core.DNA.isDNA = function(sequence) {
	var seqLen = sequence.length;
	var _g = new haxe.ds.StringMap();
	_g.set("A",true);
	_g.set("T",true);
	_g.set("G",true);
	_g.set("C",true);
	_g.set("U",true);
	var valid_nucs = _g;
	var _g2 = 0;
	var _g1 = seqLen;
	while(_g2 < _g1) {
		var i = _g2++;
		var nuc = sequence.charAt(i).toUpperCase();
		if(!(valid_nucs.exists(nuc) && valid_nucs.get(nuc))) {
			return false;
		}
	}
	return true;
};
saturn.core.DNA.__super__ = saturn.core.molecule.Molecule;
saturn.core.DNA.prototype = $extend(saturn.core.molecule.Molecule.prototype,{
	protein: null
	,proteins: null
	,addProtein: function(name,protein) {
		if(protein != null) {
			this.proteins.set(name,protein);
		}
	}
	,removeProtein: function(name) {
		this.proteins.remove(name);
	}
	,getProtein: function(name) {
		return this.proteins.get(name);
	}
	,getProteinNames: function() {
		var names = [];
		var name = this.proteins.keys();
		while(name.hasNext()) {
			var name1 = name.next();
			names.push(name1);
		}
		return names;
	}
	,getGCFraction: function() {
		var dnaComposition = this.getComposition();
		return (dnaComposition.cCount + dnaComposition.gCount) / this.getLength();
	}
	,reg_tReplace: null
	,convertToRNA: function() {
		return this.reg_tReplace.replace(this.getSequence(),"U");
	}
	,getHydrogenBondCount: function() {
		var dnaComposition = this.getComposition();
		return (dnaComposition.gCount + dnaComposition.cCount) * 3 + (dnaComposition.aCount + dnaComposition.tCount) * 2;
	}
	,getMolecularWeight: function(phosphateAt5Prime) {
		var dnaComposition = this.getComposition();
		var seqMW = 0.0;
		seqMW += dnaComposition.aCount * saturn.core.molecule.MoleculeConstants.aChainMW;
		seqMW += dnaComposition.tCount * saturn.core.molecule.MoleculeConstants.tChainMW;
		seqMW += dnaComposition.gCount * saturn.core.molecule.MoleculeConstants.gChainMW;
		seqMW += dnaComposition.cCount * saturn.core.molecule.MoleculeConstants.cChainMW;
		if(phosphateAt5Prime == false) {
			seqMW -= saturn.core.molecule.MoleculeConstants.PO3;
		}
		seqMW += saturn.core.molecule.MoleculeConstants.OH;
		return seqMW;
	}
	,setSequence: function(sequence) {
		saturn.core.molecule.Molecule.prototype.setSequence.call(this,sequence);
		if(this.isChild()) {
			var p = this.getParent();
			p.dnaSequenceUpdated(this.sequence);
		}
	}
	,proteinSequenceUpdated: function(sequence) {
	}
	,getComposition: function() {
		var aCount = 0;
		var tCount = 0;
		var gCount = 0;
		var cCount = 0;
		var seqLen = this.sequence.length;
		var _g1 = 0;
		var _g = seqLen;
		while(_g1 < _g) {
			var i = _g1++;
			var nuc = this.sequence.charAt(i);
			switch(nuc) {
			case "A":
				++aCount;
				break;
			case "C":
				++cCount;
				break;
			case "G":
				++gCount;
				break;
			case "T":
				++tCount;
				break;
			case "U":
				++tCount;
				break;
			}
		}
		return new saturn.core.DNAComposition(aCount,tCount,gCount,cCount);
	}
	,getMeltingTemperature: function() {
		var saltConc = 50;
		var primerConc = 500;
		var testTmCalc = new saturn.core.TmCalc();
		return testTmCalc.tmCalculation(this,saltConc,primerConc);
	}
	,findPrimer: function(startPos,minLength,maxLength,minMelting,maxMelting,extensionSequence,minLengthExtended,minMeltingExtended,maxMeltingExtentded) {
		if(maxMeltingExtentded == null) {
			maxMeltingExtentded = -1;
		}
		if(minMeltingExtended == null) {
			minMeltingExtended = -1;
		}
		if(minLengthExtended == null) {
			minLengthExtended = -1;
		}
		var cCount;
		var gCount;
		var tCount;
		var aCount = 0;
		var seq = HxOverrides.substr(this.sequence,startPos - 1,minLength - 1);
		var comp = new saturn.core.DNA(seq).getComposition();
		cCount = comp.cCount;
		gCount = comp.gCount;
		tCount = comp.tCount;
		aCount = comp.aCount;
		var rangeStart = startPos - 1 + minLength - 1;
		var rangeStop = rangeStart + maxLength;
		var _g1 = rangeStart;
		var _g = rangeStop;
		while(_g1 < _g) {
			var i = _g1++;
			var $char = this.sequence.charAt(i);
			if($char == "C") {
				++cCount;
			} else if($char == "G") {
				++gCount;
			} else if($char == "A") {
				++aCount;
			} else if($char == "T") {
				++tCount;
			}
			seq += $char;
			var mt = new saturn.core.DNA(seq).getMeltingTemperature();
			if(mt > maxMelting) {
				throw new js._Boot.HaxeError(new saturn.util.HaxeException("Maximum melting temperature exceeded"));
			} else if(mt >= minMelting && mt <= maxMelting) {
				if(extensionSequence == null) {
					return seq;
				} else {
					var completeSequence = new saturn.core.DNA(extensionSequence + seq);
					var completeMT = completeSequence.getMeltingTemperature();
					if(completeMT >= minMeltingExtended && completeMT <= maxMeltingExtentded && completeSequence.getLength() >= minLengthExtended) {
						return seq;
					} else if(completeMT < minMeltingExtended) {
						continue;
					} else if(completeMT > maxMeltingExtentded) {
						throw new js._Boot.HaxeError(new saturn.util.HaxeException("Maximum melting temperature for extended primer sequence exceeded"));
					} else if(completeSequence.getLength() < minLengthExtended) {
						continue;
					}
				}
			}
		}
		throw new js._Boot.HaxeError(new saturn.util.HaxeException("Unable to find region with required parameters"));
	}
	,getNumGC: function() {
		var seqLen = this.sequence.length;
		var gcNum = 0;
		var _g1 = 0;
		var _g = seqLen;
		while(_g1 < _g) {
			var i = _g1++;
			var nuc = this.sequence.charAt(i);
			if(nuc == "G" || nuc == "C") {
				++gcNum;
			}
		}
		return gcNum;
	}
	,getInverse: function() {
		var newSequence = new StringBuf();
		var seqLen = this.sequence.length;
		var _g1 = 0;
		var _g = seqLen;
		while(_g1 < _g) {
			var i = _g1++;
			var j = seqLen - i - 1;
			var nuc = this.sequence.charAt(j);
			newSequence.add(nuc);
		}
		return newSequence.toString();
	}
	,getComplement: function() {
		var newSequence = new StringBuf();
		var seqLen = this.sequence.length;
		var _g1 = 0;
		var _g = seqLen;
		while(_g1 < _g) {
			var i = _g1++;
			var nuc = this.sequence.charAt(i);
			switch(nuc) {
			case "A":
				nuc = "T";
				break;
			case "C":
				nuc = "G";
				break;
			case "G":
				nuc = "C";
				break;
			case "T":
				nuc = "A";
				break;
			}
			newSequence.add(nuc);
		}
		return newSequence.toString();
	}
	,getInverseComplement: function() {
		var newSequence = new StringBuf();
		var seqLen = this.sequence.length;
		var _g1 = 0;
		var _g = seqLen;
		while(_g1 < _g) {
			var i = _g1++;
			var j = seqLen - i - 1;
			var nuc = this.sequence.charAt(j);
			switch(nuc) {
			case "A":
				nuc = "T";
				break;
			case "C":
				nuc = "G";
				break;
			case "G":
				nuc = "C";
				break;
			case "T":
				nuc = "A";
				break;
			}
			newSequence.add(nuc);
		}
		return newSequence.toString();
	}
	,getFirstStartCodonPosition: function(geneticCode) {
		var geneticCode1 = saturn.core.GeneticCodeRegistry.getRegistry().getGeneticCodeByEnum(geneticCode);
		var codons = geneticCode1.getStartCodons();
		var minStartPos = -1;
		var codon = codons.keys();
		while(codon.hasNext()) {
			var codon1 = codon.next();
			var index = this.sequence.indexOf(codon1);
			if(index > -1) {
				if(minStartPos == -1 || minStartPos > index) {
					minStartPos = index;
				}
			}
		}
		return minStartPos;
	}
	,getTranslation: function(geneticCode,offSetPosition,stopAtFirstStop) {
		if(offSetPosition == null) {
			offSetPosition = 0;
		}
		if(!this.canHaveCodons()) {
			throw new js._Boot.HaxeError(new saturn.util.HaxeException("Unable to translate a sequence with less than 3 nucleotides"));
		}
		var proteinSequenceBuffer = new StringBuf();
		var seqLength = this.sequence.length;
		var finalCodonPosition = seqLength - (seqLength - offSetPosition) % 3;
		var geneticCode1 = saturn.core.GeneticCodeRegistry.getRegistry().getGeneticCodeByEnum(geneticCode);
		var startIndex = offSetPosition;
		var stopCodons = geneticCode1.getStopCodons();
		while(startIndex < finalCodonPosition) {
			var endIndex = startIndex + 3;
			var codon = this.sequence.substring(startIndex,endIndex);
			var code = geneticCode1.lookupCodon(codon);
			if(stopAtFirstStop && code == "!") {
				break;
			}
			proteinSequenceBuffer.add(code);
			startIndex = endIndex;
		}
		return proteinSequenceBuffer.toString();
	}
	,getFrameTranslation: function(geneticCode,frame) {
		if(this.sequence == null) {
			return null;
		}
		var offSetPos = 0;
		if(frame == saturn.core.Frame.TWO) {
			offSetPos = 1;
		} else if(frame == saturn.core.Frame.THREE) {
			offSetPos = 2;
		}
		return this.getTranslation(geneticCode,offSetPos,true);
	}
	,getThreeFrameTranslation: function(geneticCode) {
		var threeFrameTranslations = new haxe.ds.StringMap();
		threeFrameTranslations.set(Std.string(saturn.core.Frame.ONE),this.getFrameTranslation(geneticCode,saturn.core.Frame.ONE));
		threeFrameTranslations.set(Std.string(saturn.core.Frame.TWO),this.getFrameTranslation(geneticCode,saturn.core.Frame.TWO));
		threeFrameTranslations.set(Std.string(saturn.core.Frame.THREE),this.getFrameTranslation(geneticCode,saturn.core.Frame.THREE));
		return threeFrameTranslations;
	}
	,getSixFrameTranslation: function(geneticCode) {
		var forwardFrames = this.getThreeFrameTranslation(geneticCode);
		var dnaSeq = this.getInverseComplement();
		var inverseComplementDNAObj = new saturn.core.DNA(dnaSeq);
		var reverseFrames = inverseComplementDNAObj.getThreeFrameTranslation(geneticCode);
		forwardFrames.set("ONE_IC",reverseFrames.get("ONE"));
		forwardFrames.set("TWO_IC",reverseFrames.get("TWO"));
		forwardFrames.set("THREE_IC",reverseFrames.get("THREE"));
		return forwardFrames;
	}
	,getFirstStartCodonPositionByFrame: function(geneticCode,frame) {
		var startCodons = this.getStartCodonPositions(geneticCode,frame,true);
		if(startCodons.length == 0) {
			return -1;
		} else {
			return startCodons[0];
		}
	}
	,getStartCodonPositions: function(geneticCode,frame,stopAtFirst) {
		var offSet = 0;
		if(frame == saturn.core.Frame.TWO) {
			offSet = 1;
		} else if(frame == saturn.core.Frame.THREE) {
			offSet = 2;
		}
		var seqLength = this.sequence.length;
		var startingIndex = offSet;
		if(seqLength < startingIndex + 3) {
			throw new js._Boot.HaxeError(new saturn.util.HaxeException("Insufficient DNA length to find codon start position for frame " + Std.string(frame)));
		}
		var startCodonPositions = [];
		var finalCodonPosition = seqLength - (seqLength - offSet) % 3;
		var geneticCode1 = saturn.core.GeneticCodeRegistry.getRegistry().getGeneticCodeByEnum(geneticCode);
		var startIndex = startingIndex;
		while(startIndex < finalCodonPosition) {
			var endIndex = startIndex + 3;
			var codon = this.sequence.substring(startIndex,endIndex);
			if(geneticCode1.isStartCodon(codon)) {
				startCodonPositions.push(startIndex);
				if(stopAtFirst) {
					break;
				}
			}
			startIndex = endIndex;
		}
		return startCodonPositions;
	}
	,getFirstStopCodonPosition: function(geneticCode,frame) {
		var startCodons = this.getStopCodonPositions(geneticCode,frame,true);
		if(startCodons.isEmpty()) {
			return -1;
		} else {
			return startCodons.first();
		}
	}
	,getStopCodonPositions: function(geneticCode,frame,stopAtFirst) {
		var offSet = 0;
		if(frame == saturn.core.Frame.TWO) {
			offSet = 1;
		} else if(frame == saturn.core.Frame.THREE) {
			offSet = 2;
		}
		var seqLength = this.sequence.length;
		var startingIndex = offSet;
		if(seqLength < startingIndex + 3) {
			throw new js._Boot.HaxeError(new saturn.util.HaxeException("Insufficient DNA length to find codon start position for frame " + Std.string(frame)));
		}
		var startCodonPositions = new List();
		var finalCodonPosition = seqLength - (seqLength - offSet) % 3;
		var geneticCode1 = saturn.core.GeneticCodeRegistry.getRegistry().getGeneticCodeByEnum(geneticCode);
		var startIndex = startingIndex;
		while(startIndex < finalCodonPosition) {
			var endIndex = startIndex + 3;
			var codon = this.sequence.substring(startIndex,endIndex);
			if(geneticCode1.isStopCodon(codon)) {
				startCodonPositions.add(startIndex);
				if(stopAtFirst) {
					break;
				}
			}
			startIndex = endIndex;
		}
		return startCodonPositions;
	}
	,canHaveCodons: function() {
		if(this.sequence.length >= 3) {
			return true;
		} else {
			return false;
		}
	}
	,getFrameRegion: function(frame,start,stop) {
		var dnaStart;
		var dnaStop;
		if(frame == saturn.core.Frame.ONE) {
			dnaStart = start * 3 - 2;
			dnaStop = stop * 3;
		} else if(frame == saturn.core.Frame.TWO) {
			dnaStart = start * 3 - 1;
			dnaStop = stop * 3 + 1;
		} else if(frame == saturn.core.Frame.THREE) {
			dnaStart = start * 3;
			dnaStop = stop * 3 + 2;
		} else {
			return null;
		}
		return this.sequence.substring(dnaStart - 1,dnaStop);
	}
	,mutateResidue: function(frame,geneticCode,pos,mutAA) {
		var nucPos = this.getCodonStartPosition(frame,pos);
		if(nucPos >= this.sequence.length) {
			throw new js._Boot.HaxeError(new saturn.util.HaxeException("Sequence not long enough for requested frame and position"));
		}
		var geneticCode1 = saturn.core.GeneticCodeRegistry.getRegistry().getGeneticCodeByEnum(geneticCode);
		var codon = geneticCode1.getFirstCodon(mutAA);
		return this.sequence.substring(0,nucPos - 1) + codon + this.sequence.substring(nucPos + 2,this.sequence.length);
	}
	,getCodonStartPosition: function(frame,start) {
		var dnaStart;
		if(frame == saturn.core.Frame.ONE) {
			dnaStart = start * 3 - 2;
		} else if(frame == saturn.core.Frame.TWO) {
			dnaStart = start * 3 - 1;
		} else if(frame == saturn.core.Frame.THREE) {
			dnaStart = start * 3;
		} else {
			return null;
		}
		return dnaStart;
	}
	,getCodonStopPosition: function(frame,stop) {
		var dnaStop;
		if(frame == saturn.core.Frame.ONE) {
			dnaStop = stop * 3;
		} else if(frame == saturn.core.Frame.TWO) {
			dnaStop = stop * 3 + 1;
		} else if(frame == saturn.core.Frame.THREE) {
			dnaStop = stop * 3 + 2;
		} else {
			return null;
		}
		return dnaStop;
	}
	,getRegion: function(start,stop) {
		return HxOverrides.substr(this.sequence,start - 1,stop - start + 1);
	}
	,getFrom: function(start,len) {
		return HxOverrides.substr(this.sequence,start - 1,len);
	}
	,findMatchingLocuses: function(regex,mode) {
		var direction = saturn.core.Direction.Forward;
		if(StringTools.startsWith(regex,"r")) {
			var templateIC = new saturn.core.DNA(this.getInverseComplement());
			var regexIC = regex.substring(1,regex.length);
			var positions = templateIC.findMatchingLocuses(regexIC,mode);
			var length = this.getLength();
			var _g = 0;
			while(_g < positions.length) {
				var position = positions[_g];
				++_g;
				var originalStart = position.start;
				position.start = length - 1 - position.end;
				position.end = length - 1 - originalStart;
				if(position.missMatchPositions != null) {
					var fPositions = [];
					var _g1 = 0;
					var _g2 = position.missMatchPositions;
					while(_g1 < _g2.length) {
						var position1 = _g2[_g1];
						++_g1;
						fPositions.push(length - 1 - position1);
					}
					position.missMatchPositions = fPositions;
				}
			}
			return positions;
		} else {
			return saturn.core.molecule.Molecule.prototype.findMatchingLocuses.call(this,regex);
		}
	}
	,__class__: saturn.core.DNA
});
saturn.core.PCRProduct = $hxClasses["saturn.core.PCRProduct"] = function(srcDNA,fPrimer,rPrimer) {
	saturn.core.DNA.call(this,"");
	this.theSrcDNA = srcDNA;
	this.theReversePrimer = rPrimer;
	this.theForwardPrimer = fPrimer;
	if(srcDNA != null) {
		this.calculateProduct();
	}
};
saturn.core.PCRProduct.__name__ = ["saturn","core","PCRProduct"];
saturn.core.PCRProduct.__super__ = saturn.core.DNA;
saturn.core.PCRProduct.prototype = $extend(saturn.core.DNA.prototype,{
	theSequenceMinusExtensions: null
	,theForwardPrimer: null
	,theReversePrimer: null
	,theSrcDNA: null
	,setForwardPrimer: function(fPrimer) {
		this.theForwardPrimer = fPrimer;
	}
	,setReversePrimer: function(rPrimer) {
		this.theReversePrimer = rPrimer;
	}
	,setTemplate: function(template) {
		this.theSrcDNA = template;
	}
	,calculateProduct: function() {
		var fPrimerSequence = this.theForwardPrimer.getPrimerSequence(false);
		var fLocusCount = this.theSrcDNA.getLocusCount(fPrimerSequence);
		if(fLocusCount > 1) {
			throw new js._Boot.HaxeError(new saturn.core.exceptions.MultiLocusPrimerException("The forward primer sequence " + fPrimerSequence + " is present " + fLocusCount + " in the source DNA sequence",this.theForwardPrimer));
		}
		var startPosition = this.theSrcDNA.getFirstPosition(this.theForwardPrimer.getPrimerSequence(false));
		if(startPosition == -1) {
			throw new js._Boot.HaxeError(new saturn.core.exceptions.LocusPrimerMissingException("The forward primer sequence " + fPrimerSequence + " is not present in the source DNA sequence",this.theForwardPrimer));
		}
		var icSrcDNA = new saturn.core.DNA(this.theSrcDNA.getInverseComplement());
		var rPrimerSequence = this.theReversePrimer.getPrimerSequence(false);
		var rLocusCount = icSrcDNA.getLocusCount(rPrimerSequence);
		if(rLocusCount > 1) {
			throw new js._Boot.HaxeError(new saturn.core.exceptions.MultiLocusPrimerException("The reverse primer sequence " + rPrimerSequence + " is present " + rLocusCount + " in the source DNA sequence",this.theReversePrimer));
		}
		var endPosition = icSrcDNA.getFirstPosition(this.theReversePrimer.getPrimerSequence(false));
		if(endPosition > -1) {
			endPosition = this.theSrcDNA.getLength() - endPosition;
		} else {
			throw new js._Boot.HaxeError(new saturn.core.exceptions.LocusPrimerMissingException("The reverse primer sequence " + rPrimerSequence + " is not present in the source DNA sequence",this.theReversePrimer));
		}
		var fExtension = this.theForwardPrimer.get5PrimeExtensionSequence();
		var rExtension = new saturn.core.DNA(this.theReversePrimer.get5PrimeExtensionSequence()).getInverseComplement();
		this.theSequenceMinusExtensions = this.theSrcDNA.getSequence().substring(startPosition,endPosition);
		this.setSequence(fExtension + this.theSequenceMinusExtensions + rExtension);
	}
	,getPCRProduct: function(includePrimerExtensions) {
		if(includePrimerExtensions) {
			return this.getSequence();
		} else {
			return this.theSequenceMinusExtensions;
		}
	}
	,getForwardPrimer: function() {
		return this.theForwardPrimer;
	}
	,getReversePrimer: function() {
		return this.theReversePrimer;
	}
	,__class__: saturn.core.PCRProduct
});
saturn.core.Allele = $hxClasses["saturn.core.Allele"] = function(srcDNA,fPrimer,rPrimer) {
	saturn.core.PCRProduct.call(this,srcDNA,fPrimer,rPrimer);
};
saturn.core.Allele.__name__ = ["saturn","core","Allele"];
saturn.core.Allele.__super__ = saturn.core.PCRProduct;
saturn.core.Allele.prototype = $extend(saturn.core.PCRProduct.prototype,{
	__class__: saturn.core.Allele
});
saturn.core.BasePrimer = $hxClasses["saturn.core.BasePrimer"] = { __ename__ : ["saturn","core","BasePrimer"], __constructs__ : ["LIC_FORWARD","LIC_REVERSE","ATT_B1","ATT_B2"] };
saturn.core.BasePrimer.LIC_FORWARD = ["LIC_FORWARD",0];
saturn.core.BasePrimer.LIC_FORWARD.toString = $estr;
saturn.core.BasePrimer.LIC_FORWARD.__enum__ = saturn.core.BasePrimer;
saturn.core.BasePrimer.LIC_REVERSE = ["LIC_REVERSE",1];
saturn.core.BasePrimer.LIC_REVERSE.toString = $estr;
saturn.core.BasePrimer.LIC_REVERSE.__enum__ = saturn.core.BasePrimer;
saturn.core.BasePrimer.ATT_B1 = ["ATT_B1",2];
saturn.core.BasePrimer.ATT_B1.toString = $estr;
saturn.core.BasePrimer.ATT_B1.__enum__ = saturn.core.BasePrimer;
saturn.core.BasePrimer.ATT_B2 = ["ATT_B2",3];
saturn.core.BasePrimer.ATT_B2.toString = $estr;
saturn.core.BasePrimer.ATT_B2.__enum__ = saturn.core.BasePrimer;
saturn.core.BlastDatabase = $hxClasses["saturn.core.BlastDatabase"] = { __ename__ : ["saturn","core","BlastDatabase"], __constructs__ : ["Constructs_DNA","Constructs_Protein"] };
saturn.core.BlastDatabase.Constructs_DNA = ["Constructs_DNA",0];
saturn.core.BlastDatabase.Constructs_DNA.toString = $estr;
saturn.core.BlastDatabase.Constructs_DNA.__enum__ = saturn.core.BlastDatabase;
saturn.core.BlastDatabase.Constructs_Protein = ["Constructs_Protein",1];
saturn.core.BlastDatabase.Constructs_Protein.toString = $estr;
saturn.core.BlastDatabase.Constructs_Protein.__enum__ = saturn.core.BlastDatabase;
saturn.core.Protein = $hxClasses["saturn.core.Protein"] = function(seq) {
	this.max_pH = 13;
	this.min_pH = 3;
	this.threshold = 0.1;
	var _g = new haxe.ds.StringMap();
	_g.set("Y",1490);
	_g.set("W",5500);
	_g.set("C",125);
	this.lu_extinction = _g;
	var _g1 = new haxe.ds.StringMap();
	_g1.set("D",-1);
	_g1.set("E",-1);
	_g1.set("H",1);
	_g1.set("Y",-1);
	_g1.set("K",1);
	_g1.set("R",1);
	_g1.set("C",-1);
	_g1.set("N-Term",1);
	_g1.set("C-Term",-1);
	this.lu_charge = _g1;
	var _g2 = new haxe.ds.StringMap();
	_g2.set("D",4.05);
	_g2.set("E",4.45);
	_g2.set("H",5.98);
	_g2.set("Y",10);
	_g2.set("K",10.4);
	_g2.set("R",12.5);
	_g2.set("C",9);
	_g2.set("N-Term",8);
	_g2.set("C-Term",3.55);
	this.lu_pKa = _g2;
	var _g3 = new haxe.ds.StringMap();
	_g3.set("A",1.8);
	_g3.set("G",-0.4);
	_g3.set("M",1.9);
	_g3.set("S",-0.8);
	_g3.set("C",2.5);
	_g3.set("H",-3.2);
	_g3.set("N",-3.5);
	_g3.set("T",-0.7);
	_g3.set("D",-3.5);
	_g3.set("I",4.5);
	_g3.set("P",-1.6);
	_g3.set("V",4.2);
	_g3.set("E",-3.5);
	_g3.set("K",-3.9);
	_g3.set("Q",-3.5);
	_g3.set("W",-0.9);
	_g3.set("F",2.8);
	_g3.set("L",3.8);
	_g3.set("R",-4.5);
	_g3.set("Y",-1.3);
	this.hydrophobicityLookUp = _g3;
	saturn.core.molecule.Molecule.call(this,seq);
};
saturn.core.Protein.__name__ = ["saturn","core","Protein"];
saturn.core.Protein._insertGene = function(geneId,source,cb) {
	var provider = saturn.core.Util.getProvider();
	provider.getById(geneId,saturn.core.domain.Entity,function(obj,err) {
		if(err != null) {
			cb(err);
		} else if(obj != null) {
			cb(null);
		} else {
			var gene = new saturn.core.domain.Entity();
			gene.entityId = geneId;
			gene.source = new saturn.core.domain.DataSource();
			gene.source.name = source;
			gene.entityType = new saturn.core.EntityType();
			gene.entityType.name = "DNA";
			saturn.core.EUtils.getGeneInfo(Std.parseInt(geneId),function(err1,info) {
				gene.altName = info.symbol;
				gene.description = info.description;
				provider.insertObjects([gene],function(err2) {
					cb(err2);
				});
			});
		}
	});
};
saturn.core.Protein.insertTranslation = function(dnaId,dnaAltName,dnaSeq,dnaSource,protId,protAltName,protSeq,protSource,geneId,geneSource,cb) {
	var provider = saturn.core.Util.getProvider();
	saturn.core.Protein._insertGene(geneId,geneSource,function(err) {
		if(err != null) {
			cb(err);
		} else {
			var dna = new saturn.core.domain.Entity();
			dna.entityId = dnaId;
			dna.altName = dnaAltName;
			dna.source = new saturn.core.domain.DataSource();
			dna.source.name = dnaSource;
			dna.entityType = new saturn.core.EntityType();
			dna.entityType.name = "DNA";
			var dna_mol = new saturn.core.domain.Molecule();
			dna_mol.entity = dna;
			dna_mol.sequence = dnaSeq;
			var annotation = new saturn.core.domain.MoleculeAnnotation();
			annotation.entity = dna;
			annotation.referent = new saturn.core.domain.Entity();
			annotation.referent.entityId = geneId;
			annotation.referent.source = new saturn.core.domain.DataSource();
			annotation.referent.source.name = "GENE";
			var prot = new saturn.core.domain.Entity();
			prot.entityId = protId;
			prot.altName = protAltName;
			prot.source = new saturn.core.domain.DataSource();
			prot.source.name = protSource;
			prot.entityType = new saturn.core.EntityType();
			prot.entityType.name = "PROTEIN";
			var prot_mol = new saturn.core.domain.Molecule();
			prot_mol.entity = prot;
			prot_mol.sequence = protSeq;
			var reaction = new saturn.core.Reaction();
			reaction.name = dnaId + "-TRANS";
			reaction.reactionType = new saturn.core.ReactionType();
			reaction.reactionType.name = "TRANSLATION";
			prot.reaction = reaction;
			var reactionComp = new saturn.core.ReactionComponent();
			reactionComp.entity = dna;
			reactionComp.reactionRole = new saturn.core.ReactionRole();
			reactionComp.reactionRole.name = "TEMPLATE";
			reactionComp.reaction = reaction;
			reactionComp.position = 1;
			provider.insertObjects([dna],function(err1) {
				if(err1 != null) {
					cb(err1);
				} else {
					provider.insertObjects([dna_mol],function(err2) {
						if(err2 != null) {
							cb(err2);
						} else {
							provider.insertObjects([reaction],function(err3) {
								if(err3 != null) {
									cb(err3);
								} else {
									provider.insertObjects([reactionComp],function(err4) {
										if(err4 != null) {
											cb(err4);
										} else {
											provider.insertObjects([prot],function(err5) {
												if(err5 != null) {
													cb(err5);
												} else {
													provider.insertObjects([prot_mol],function(err6) {
														if(err6 != null) {
															cb(err6);
														} else {
															provider.insertObjects([annotation],function(err7) {
																if(err7 != null) {
																	saturn.core.Util.debug(err7);
																}
																cb(err7);
															});
														}
													});
												}
											});
										}
									});
								}
							});
						}
					});
				}
			});
		}
	});
};
saturn.core.Protein.isProtein = function(sequence) {
	var seqLen = sequence.length;
	var valid_res = saturn.core.GeneticCodeRegistry.getDefault().getAAToCodonTable();
	var _g1 = 0;
	var _g = seqLen;
	while(_g1 < _g) {
		var i = _g1++;
		var res = sequence.charAt(i).toUpperCase();
		if(!valid_res.exists(res)) {
			return false;
		}
	}
	return true;
};
saturn.core.Protein.__super__ = saturn.core.molecule.Molecule;
saturn.core.Protein.prototype = $extend(saturn.core.molecule.Molecule.prototype,{
	dna: null
	,coordinates: null
	,hydrophobicityLookUp: null
	,lu_pKa: null
	,lu_charge: null
	,lu_extinction: null
	,threshold: null
	,min_pH: null
	,max_pH: null
	,setSequence: function(sequence) {
		saturn.core.molecule.Molecule.prototype.setSequence.call(this,sequence);
		if(sequence != null) {
			var mSet = saturn.core.molecule.MoleculeSetRegistry.getStandardMoleculeSet();
			var mw = mSet.getMolecule("H2O").getFloatAttribute(saturn.core.molecule.MoleculeFloatAttribute.MW);
			var _g1 = 0;
			var _g = this.sequence.length;
			while(_g1 < _g) {
				var i = _g1++;
				var molecule = mSet.getMolecule(this.sequence.charAt(i));
				if(molecule != null) {
					mw += molecule.getFloatAttribute(saturn.core.molecule.MoleculeFloatAttribute.MW_CONDESATION);
				} else {
					mw = -1;
					break;
				}
			}
			this.setFloatAttribute(saturn.core.molecule.MoleculeFloatAttribute.MW,mw);
		}
		if(this.isLinked()) {
			var d = this.getParent();
			if(d != null) {
				d.proteinSequenceUpdated(this.sequence);
			}
		}
	}
	,getHydrophobicity: function() {
		var proteinSequence = this.sequence;
		var seqLength = this.sequence.length;
		var totalGravy = 0.0;
		var averageGravy = 0.0;
		var _g1 = 0;
		var _g = seqLength;
		while(_g1 < _g) {
			var i = _g1++;
			var aminoAcid = HxOverrides.substr(proteinSequence,i,1);
			var hydroValue = this.hydrophobicityLookUp.get(aminoAcid);
			totalGravy += hydroValue;
		}
		averageGravy = totalGravy / seqLength;
		return averageGravy;
	}
	,setDNA: function(dna) {
		this.dna = dna;
	}
	,dnaSequenceUpdated: function(sequence) {
	}
	,getDNA: function() {
		return this.dna;
	}
	,setReferenceCoordinates: function(coordinates) {
		this.coordinates = coordinates;
	}
	,getReferenceCoordinates: function() {
		return this.coordinates;
	}
	,getAminoAcidCharge: function(aa,mid_pH) {
		var aminoAcid = aa;
		var pH = mid_pH;
		var ratio = 1 / (1 + Math.pow(10,pH - this.lu_pKa.get(aminoAcid)));
		if(this.lu_charge.get(aminoAcid) == 1) {
			return ratio;
		} else {
			return ratio - 1;
		}
	}
	,getProteinCharge: function(mid_pH) {
		var seqLength = this.sequence.length;
		var proteinSequence = this.sequence;
		var aa = "N-Term";
		var proteinCharge = this.getAminoAcidCharge(aa,mid_pH);
		aa = "C-Term";
		proteinCharge += this.getAminoAcidCharge(aa,mid_pH);
		var _g1 = 0;
		var _g = seqLength;
		while(_g1 < _g) {
			var i = _g1++;
			aa = HxOverrides.substr(proteinSequence,i,1);
			if(this.lu_pKa.exists(aa)) {
				proteinCharge += this.getAminoAcidCharge(aa,mid_pH);
			}
		}
		return proteinCharge;
	}
	,getpI: function() {
		var proteinSequence = this.sequence;
		while(true) {
			var mid_pH = 0.5 * (this.max_pH + this.min_pH);
			var proteinCharge = this.getProteinCharge(mid_pH);
			if(proteinCharge > this.threshold) {
				this.min_pH = mid_pH;
			} else if(proteinCharge < -this.threshold) {
				this.max_pH = mid_pH;
			} else {
				return mid_pH;
			}
		}
	}
	,getExtinctionNonReduced: function() {
		var proteinSequence = this.sequence;
		var seqLength = this.sequence.length;
		var aa;
		var extinctionNonReduced = 0.0;
		var numberCysteines = 0.0;
		var pairsCysteins = 0.0;
		var _g1 = 0;
		var _g = seqLength;
		while(_g1 < _g) {
			var i = _g1++;
			aa = HxOverrides.substr(proteinSequence,i,1);
			if(this.lu_extinction.exists(aa) && aa != "C") {
				extinctionNonReduced += this.lu_extinction.get(aa);
			}
			if(aa == "C") {
				++numberCysteines;
			}
		}
		if(numberCysteines % 2 == 0) {
			pairsCysteins = numberCysteines / 2;
		} else {
			pairsCysteins = numberCysteines / 2 - 0.5;
		}
		extinctionNonReduced += pairsCysteins * this.lu_extinction.get("C");
		return extinctionNonReduced;
	}
	,getExtinctionReduced: function() {
		var proteinSequence = this.sequence;
		var seqLength = this.sequence.length;
		var aa;
		var extinctionReduced = 0.0;
		var _g1 = 0;
		var _g = seqLength;
		while(_g1 < _g) {
			var i = _g1++;
			aa = HxOverrides.substr(proteinSequence,i,1);
			if(this.lu_extinction.exists(aa) && aa != "C") {
				extinctionReduced += this.lu_extinction.get(aa);
			}
		}
		return extinctionReduced;
	}
	,__class__: saturn.core.Protein
});
saturn.core.CleavageSite = $hxClasses["saturn.core.CleavageSite"] = function(seq) {
	saturn.core.Protein.call(this,seq);
};
saturn.core.CleavageSite.__name__ = ["saturn","core","CleavageSite"];
saturn.core.CleavageSite.__super__ = saturn.core.Protein;
saturn.core.CleavageSite.prototype = $extend(saturn.core.Protein.prototype,{
	__class__: saturn.core.CleavageSite
});
saturn.core.ClustalOmegaParser = $hxClasses["saturn.core.ClustalOmegaParser"] = function() { };
saturn.core.ClustalOmegaParser.__name__ = ["saturn","core","ClustalOmegaParser"];
saturn.core.ClustalOmegaParser.read = function(content) {
	var msaMap = new haxe.ds.StringMap();
	var wr = new EReg("\\s+","g");
	if(content != null) {
		var lines = content.split("\n");
		var seqOrder = [];
		var s = -1;
		var _g1 = 3;
		var _g = lines.length;
		while(_g1 < _g) {
			var i = _g1++;
			var line = lines[i];
			line = StringTools.replace(line,"\n","");
			line = StringTools.replace(line,"\r","");
			if(line != "") {
				var cols = wr.split(line);
				if(cols.length <= 1) {
					continue;
				} else if(cols[0] == "") {
					cols[0] = " ";
				}
				if(s == -1) {
					s = line.length - cols[1].length;
				}
				if(!msaMap.exists(cols[0])) {
					var value = HxOverrides.substr(line,s,line.length);
					msaMap.set(cols[0],value);
					seqOrder.push(cols[0]);
				} else {
					var value1 = msaMap.get(cols[0]) + HxOverrides.substr(line,s,line.length);
					msaMap.set(cols[0],value1);
				}
			}
		}
		return new saturn.core.MSA(msaMap,seqOrder);
	} else {
		return new saturn.core.MSA();
	}
};
saturn.core.ClustalOmegaParser.readStartStop = function(content,consreuctIdLength) {
	var alignmentSymbols = "";
	var startEndPos = [];
	var lengthOfLeadingChars = 0;
	var alignmentConstruct = "";
	var alignmentTarget = "";
	var alignmentSymbols1 = "";
	var targetOffset = 0;
	var lines = content.split("\n");
	var firstConstructLine = lines[3];
	var _g1 = consreuctIdLength;
	var _g = firstConstructLine.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(firstConstructLine.charAt(i) != " ") {
			lengthOfLeadingChars = i;
			break;
		}
	}
	var lineNumber = 4;
	while(lineNumber < lines.length) {
		var line = lines[lineNumber];
		line = StringTools.replace(line,"\n","");
		line = StringTools.replace(line,"\r","");
		line = line.substring(lengthOfLeadingChars);
		alignmentTarget += line;
		lineNumber += 4;
	}
	var lineNumber1 = 5;
	while(lineNumber1 < lines.length) {
		var line1 = lines[lineNumber1];
		line1 = StringTools.replace(line1,"\n","");
		line1 = StringTools.replace(line1,"\r","");
		line1 = line1.substring(lengthOfLeadingChars);
		alignmentSymbols1 += line1;
		lineNumber1 += 4;
	}
	var lineNumber2 = 3;
	while(lineNumber2 < lines.length) {
		var line2 = lines[lineNumber2];
		line2 = StringTools.replace(line2,"\n","");
		line2 = StringTools.replace(line2,"\r","");
		line2 = line2.substring(lengthOfLeadingChars);
		alignmentConstruct += line2;
		lineNumber2 += 4;
	}
	var _g11 = 0;
	var _g2 = alignmentTarget.length;
	while(_g11 < _g2) {
		var i1 = _g11++;
		if(alignmentTarget.charAt(i1) != "-") {
			targetOffset = i1;
			break;
		}
	}
	var startPos = alignmentSymbols1.indexOf("*") - targetOffset;
	var endPos = alignmentSymbols1.lastIndexOf("*") - targetOffset;
	var alignmentTargetSub = alignmentTarget.substring(startPos + targetOffset,endPos + targetOffset + 1);
	var numberOfGaps = 0;
	var _g12 = 0;
	var _g3 = alignmentTargetSub.length;
	while(_g12 < _g3) {
		var i2 = _g12++;
		if(alignmentTargetSub.charAt(i2) == "-") {
			++numberOfGaps;
		}
	}
	startEndPos.push(startPos);
	startEndPos.push(endPos);
	startEndPos.push(numberOfGaps);
	return startEndPos;
};
saturn.core.Table = $hxClasses["saturn.core.Table"] = function() {
};
saturn.core.Table.__name__ = ["saturn","core","Table"];
saturn.core.Table.prototype = {
	tableDefinition: null
	,errorColumns: null
	,fixedRowHeight: null
	,name: null
	,setName: function(name) {
		this.name = name;
		if(this.tableDefinition != null) {
			this.tableDefinition.title = name;
		}
	}
	,getName: function() {
		return this.name;
	}
	,setErrorColumns: function(columns) {
		this.errorColumns = columns;
	}
	,getErrorColumns: function() {
		return this.errorColumns;
	}
	,setFixedRowHeight: function(height) {
		this.fixedRowHeight = height;
	}
	,getFixedRowHeight: function() {
		return this.fixedRowHeight;
	}
	,setTitle: function(title) {
		this.tableDefinition.title = title;
	}
	,setData: function(data,fieldConfig) {
		var obj = data[0];
		var columnDefs = [];
		var _g = 0;
		var _g1 = Reflect.fields(obj);
		while(_g < _g1.length) {
			var field = _g1[_g];
			++_g;
			var filterType = "string";
			var _g3 = 0;
			var _g2 = data.length;
			while(_g3 < _g2) {
				var i = _g3++;
				var obj1 = data[i];
				var value = Reflect.field(obj,field);
				if(value != null) {
					if(Std["is"](value,Date)) {
						filterType = "date";
					} else if(saturn.core.Table.r_d.match(value)) {
						filterType = "numeric";
					}
					break;
				}
			}
			var config = { text : field, dataIndex : field, editor : null, filter : { type : filterType}};
			if(fieldConfig != null && Reflect.hasField(fieldConfig,field)) {
				if(Reflect.hasField(Reflect.field(fieldConfig,field),"renderer")) {
					Reflect.setField(config,"renderer",Reflect.field(Reflect.field(fieldConfig,field),"renderer"));
				}
				if(Reflect.hasField(Reflect.field(fieldConfig,field),"editor")) {
					Reflect.setField(config,"editor",Reflect.field(Reflect.field(fieldConfig,field),"editor"));
				}
				if(Reflect.hasField(Reflect.field(fieldConfig,field),"xtype")) {
					Reflect.setField(config,"xtype",Reflect.field(Reflect.field(fieldConfig,field),"xtype"));
				}
				if(Reflect.hasField(Reflect.field(fieldConfig,field),"dataindex")) {
					Reflect.setField(config,"dataindex",Reflect.field(Reflect.field(fieldConfig,field),"dataindex"));
				}
				if(Reflect.hasField(Reflect.field(fieldConfig,field),"text")) {
					Reflect.setField(config,"text",Reflect.field(Reflect.field(fieldConfig,field),"text"));
				}
				if(Reflect.hasField(Reflect.field(fieldConfig,field),"default")) {
					Reflect.setField(config,"defaultValue",Reflect.field(Reflect.field(fieldConfig,field),"default"));
				}
			}
			columnDefs.push(config);
		}
		this.tableDefinition = { columnDefs : columnDefs, title : "Assay Results", data : data, raw : null};
	}
	,getData: function() {
		return this.tableDefinition.data;
	}
	,updateData: function(data) {
		this.tableDefinition.data = data;
	}
	,__class__: saturn.core.Table
};
saturn.core.ComplexPlan = $hxClasses["saturn.core.ComplexPlan"] = function(useExample) {
	if(useExample == null) {
		useExample = false;
	}
	saturn.core.Table.call(this);
	this.setErrorColumns([]);
	var exampleData = null;
	if(useExample) {
		exampleData = [{ "Select" : true, "Construct ID 1" : "XXXXXX-c265", "Construct ID 2" : "XXXXXX-c009", "Construct ID 3" : "", "Construct ID 4" : "", "ELN ID" : "", "Plate Name" : "MultiBac-Plate-3", "Plate Well" : "H05", "Target ID" : "", "Entry Clone ID" : "", "Allele ID" : "", "Construct ID" : ""}];
	} else {
		exampleData = [{ "Select" : true, "Construct ID 1" : "", "Construct ID 2" : "", "Construct ID 3" : "", "Construct ID 4" : "", "ELN ID" : "", "Target ID" : "", "Entry Clone ID" : "", "Allele ID" : "", "Construct ID" : "", "Plate Name" : "", "Plate Well" : ""}];
	}
	this.setData(exampleData,{ "Select" : { "xtype" : "checkcolumn", "name" : "checkbox_name", "dataindex" : "Select"}, "Construct ID 1" : { "editor" : "textfield"}, "Construct ID 2" : { "editor" : "textfield"}, "Construct ID 3" : { "editor" : "textfield"}, "Construct ID 4" : { "editor" : "textfield"}, "Target ID" : { "editor" : "textfield"}, "Entry Clone ID" : { "editor" : "textfield"}, "Allele ID" : { "editor" : "textfield"}, "Construct ID" : { "editor" : "textfield"}, "ELN ID" : { "editor" : "textfield"}, "Plate Name" : { "editor" : "textfield"}, "Plate Well" : { "editor" : "textfield"}});
	this.setName("Complex Plan");
};
saturn.core.ComplexPlan.__name__ = ["saturn","core","ComplexPlan"];
saturn.core.ComplexPlan.__super__ = saturn.core.Table;
saturn.core.ComplexPlan.prototype = $extend(saturn.core.Table.prototype,{
	provider: null
	,getProvider: function() {
		if(this.provider != null) {
			return this.provider;
		} else {
			return saturn.client.WorkspaceApplication.getApplication().getProvider();
		}
	}
	,save: function(cb) {
		var data = this.getData();
		var targetSet = new haxe.ds.StringMap();
		var _g = 0;
		while(_g < data.length) {
			var row = data[_g];
			++_g;
			var targetId = Reflect.field(row,"Construct ID 1").split("-")[0];
			targetSet.set(targetId,null);
		}
		var targetIds = [];
		var targetId1 = targetSet.keys();
		while(targetId1.hasNext()) {
			var targetId2 = targetId1.next();
			targetIds.push(targetId2);
		}
		var provider = this.getProvider();
		provider.getByIds(targetIds,saturn.core.domain.SgcTarget,function(targets,err) {
			if(err != null) {
				cb(err);
			} else {
				var targetIdToTarget = new haxe.ds.StringMap();
				var _g1 = 0;
				while(_g1 < targets.length) {
					var target = targets[_g1];
					++_g1;
					targetIdToTarget.set(target.targetId,target);
				}
				var complexTargets = [];
				var complexEntryClones = [];
				var complexAlleles = [];
				var complexConstructs = [];
				var defaultVector = new saturn.core.domain.SgcVector();
				defaultVector.vectorId = "Mock-receptable-vector";
				var _g2 = 0;
				while(_g2 < data.length) {
					var row1 = data[_g2];
					++_g2;
					var targetId3 = Reflect.field(row1,"Construct ID 1").split("-")[0];
					var eln = Reflect.field(row1,"ELN");
					var targetObj = targetIdToTarget.get(targetId3);
					var complexTargetId = Reflect.field(row1,"Target ID");
					var complexTargetObj = new saturn.core.domain.SgcTarget();
					complexTargetObj.targetId = complexTargetId;
					complexTargetObj.pi = targetObj.pi;
					complexTargetObj.geneId = targetObj.geneId;
					complexTargetObj.activeStatus = "10: Complex";
					complexTargetObj.complexOverride = "20f99f97-6e0d-46ba-8010-e4bd7880d591";
					var complexComponents = [];
					var maxComponents = 4;
					var _g11 = 1;
					while(_g11 < 4) {
						var i = _g11++;
						complexComponents.push(Reflect.field(row1,"Construct ID " + (i == null ? "null" : "" + i)));
					}
					complexTargetObj.complexComments = complexComponents.join(",");
					complexTargetObj.complex = "Yes";
					complexTargetObj.eln = eln;
					var complexEntryClone = new saturn.core.domain.SgcEntryClone();
					complexEntryClone.target = complexTargetObj;
					complexEntryClone.entryCloneId = Reflect.field(row1,"Entry Clone ID");
					complexEntryClone.elnId = eln;
					complexEntryClone.complex = "Yes";
					complexEntryClone.seqSource = "NA";
					complexEntryClone.sequenceConfirmed = "NA";
					var complexAllele = new saturn.core.domain.SgcAllele();
					complexAllele.elnId = eln;
					complexAllele.alleleId = Reflect.field(row1,"Allele ID");
					complexAllele.status = "NA";
					complexAllele.complex = "Yes";
					complexAllele.entryClone = complexEntryClone;
					var allelePlate = new saturn.core.domain.SgcAllelePlate();
					allelePlate.plateName = Reflect.field(row1,"Plate Name");
					complexAllele.plate = allelePlate;
					complexAllele.plateWell = Reflect.field(row1,"Plate Well");
					var complexConstruct = new saturn.core.domain.SgcConstruct();
					complexConstruct.allele = complexAllele;
					complexConstruct.constructId = Reflect.field(row1,"Construct ID");
					complexConstruct.elnId = eln;
					complexConstruct.complex = "Yes";
					complexConstruct.vector = defaultVector;
					var constructPlate = new saturn.core.domain.SgcConstructPlate();
					constructPlate.plateName = allelePlate.plateName;
					complexConstruct.constructPlate = constructPlate;
					complexConstruct.wellId = complexAllele.plateWell;
					complexTargets.push(complexTargetObj);
					complexEntryClones.push(complexEntryClone);
					complexAlleles.push(complexAllele);
					complexConstructs.push(complexConstruct);
				}
				provider.insertOrUpdate(complexTargets,function(err1) {
					if(err1 == null) {
						provider.insertOrUpdate(complexEntryClones,function(err2) {
							if(err2 == null) {
								provider.insertOrUpdate(complexAlleles,function(err3) {
									if(err3 == null) {
										provider.insertOrUpdate(complexConstructs,function(err4) {
											cb(err4);
										},true);
									} else {
										cb(err3);
									}
								},true);
							} else {
								cb(err2);
							}
						},true);
					} else {
						cb(err1);
					}
				},true);
			}
		});
	}
	,generateIds: function(cb) {
		var _gthis = this;
		var data = this.getData();
		var targetToNextId = new haxe.ds.StringMap();
		var _g = 0;
		while(_g < data.length) {
			var row = data[_g];
			++_g;
			var constructId = Reflect.field(row,"Construct ID 1");
			var targetId = constructId.split("-")[0];
			targetToNextId.set(targetId,0);
		}
		var targetList = [];
		var targetId1 = targetToNextId.keys();
		while(targetId1.hasNext()) {
			var targetId2 = targetId1.next();
			targetList.push(targetId2);
		}
		var next = null;
		next = function() {
			if(targetList.length == 0) {
				var _g1 = 0;
				while(_g1 < data.length) {
					var row1 = data[_g1];
					++_g1;
					var constructId1 = Reflect.field(row1,"Construct ID 1");
					var targetId3 = constructId1.split("-")[0];
					var nextId = targetToNextId.get(targetId3);
					var complexTargetId = "XX" + StringTools.lpad(nextId == null ? "null" : "" + nextId,"0",2) + targetId3;
					Reflect.setField(row1,"Target ID",complexTargetId);
					Reflect.setField(row1,"Entry Clone ID",complexTargetId + "-s001");
					Reflect.setField(row1,"Allele ID",complexTargetId + "-a001");
					Reflect.setField(row1,"Construct ID",complexTargetId + "-c001");
					targetToNextId.set(targetId3,++nextId);
				}
				cb(null);
				return;
			}
			var targetId4 = targetList.pop();
			var clazz = Type.resolveClass("saturn.core.domain.SgcTarget");
			var query = new saturn.db.query_lang.Query(_gthis.getProvider());
			query.fetchRawResults();
			query.getSelect().add(new saturn.db.query_lang.Field(clazz,"targetId")["as"]("targetId"));
			query.getWhere().add(new saturn.db.query_lang.Field(clazz,"targetId").like(new saturn.db.query_lang.Value("%").concat(targetId4)));
			query.run(function(targets,err) {
				if(err != null) {
					cb(err);
				} else {
					var regex = new EReg("XX(\\d\\d)" + targetId4,"");
					var leadingZeroRegEx = new EReg("^0+","");
					var maxValue = 0;
					var _g2 = 0;
					while(_g2 < targets.length) {
						var target = targets[_g2];
						++_g2;
						if(regex.match(target.targetId)) {
							var digit = regex.matched(1);
							var digitInt = Std.parseInt(leadingZeroRegEx.replace(digit,""));
							if(digitInt > maxValue) {
								maxValue = digitInt;
							}
						}
					}
					targetToNextId.set(targetId4,++maxValue);
					next();
				}
			});
		};
		next();
	}
	,__class__: saturn.core.ComplexPlan
});
saturn.core.ConstructDesignTable = $hxClasses["saturn.core.ConstructDesignTable"] = function(useExample) {
	this.minLengthExtended = 32;
	this.maxTMExtended = 75;
	this.minTMExtended = 60;
	this.maxLength = 50;
	this.minLength = 18;
	this.maxTM = 75;
	this.minTM = 45;
	saturn.core.Table.call(this);
	this.setErrorColumns(["Forward Error","Reverse Error","PCR Error","Construct Error"]);
	var exampleData = null;
	if(useExample) {
		exampleData = [{ "Select" : true, "Plate Name" : "BioTech15", "Allele ID" : "BRD1A-a001", "Allele Well" : "A01", "Construct ID" : "BRD1A-c001", "Construct Well" : "A01", "Vector Name" : "pNIC28-Bsa4", "Entry Clone" : "BRD1A-s001", "Restriction Site 1" : "Lic5", "Restriction Site 2" : "Lic3", "Start position" : 10, "Stop position" : 60, "ELN ID" : "PAGE15-00001", "Forward Primer" : "BRD1A-f001", "Reverse Primer" : "BRD1A-r001", "Forward Seq" : "", "Forward Error" : "", "Reverse Seq" : "", "Reverse Error" : "", "Allele DNA Sequence" : "", "Allele Protein Sequence" : "", "PCR Error" : "", "Construct Error" : "", "Construct DNA" : "", "Construct Protein" : "", "Construct Protein (no tag)" : "", "Construct Mass" : "", "Construct Mass (no tag)" : "", "Mutations" : "S11A:A12S", "Mutation Forward Primer" : "", "Mutation Reverse Primer" : ""}];
	} else {
		exampleData = [{ "Select" : true, "Plate Name" : "", "Allele ID" : "", "Allele Well" : "", "Construct ID" : "", "Construct Well" : "", "Vector Name" : "", "Entry Clone" : "", "Restriction Site 1" : "", "Restriction Site 2" : "", "Start position" : 0, "Stop position" : 0, "ELN ID" : "", "Forward Primer" : "", "Reverse Primer" : "", "Forward Seq" : "", "Forward Error" : "", "Reverse Seq" : "", "Reverse Error" : "", "Allele DNA Sequence" : "", "Allele Protein Sequence" : "", "PCR Error" : "", "Construct Error" : "", "Construct DNA" : "", "Construct Protein" : "", "Construct Protein (no tag)" : "", "Construct Mass" : "", "Construct Mass (no tag)" : "", "Mutations" : "", "Mutation Forward Primer" : "", "Mutation Reverse Primer" : ""}];
	}
	this.setData(exampleData,{ "Select" : { "xtype" : "checkcolumn", "name" : "checkbox_name", "dataindex" : "Select"}, "Plate Name" : { "editor" : "textfield"}, "Allele ID" : { "editor" : "textfield"}, "Allele Well" : { "editor" : "textfield"}, "Construct ID" : { "editor" : "textfield"}, "Construct Well" : { "editor" : "textfield"}, "Vector Name" : { "editor" : "textfield"}, "Entry Clone" : { "editor" : "textfield"}, "Start position" : { "editor" : "textfield"}, "Stop position" : { "editor" : "textfield"}, "ELN ID" : { "editor" : "textfield"}, "Forward Primer" : { "editor" : "textfield"}, "Reverse Primer" : { "editor" : "textfield"}, "Forward Seq" : { "editor" : "textfield"}, "Reverse Seq" : { "editor" : "textfield"}, "Forward Error" : { "editor" : "textfield"}, "Reverse Error" : { "editor" : "textfield"}, "Allele DNA Sequence" : { "editor" : "textfield"}, "Allele Protein Sequence" : { "editor" : "textfield"}, "PCR Error" : { "editor" : "textfield"}, "Restriction Site 1" : { "editor" : "textfield"}, "Restriction Site 2" : { "editor" : "textfield"}, "Construct DNA" : { "editor" : "textfield"}, "Construct Protein" : { "editor" : "textfield"}, "Construct Protein (no tag)" : { "editor" : "textfield"}, "Construct Mass" : { "editor" : "textfield"}, "Construct Mass (no tag)" : { "editor" : "textfield"}, "Mutations" : { "editor" : "textfield"}, "Mutation Forward Primer" : { "editor" : "textfield"}, "Mutation Reverse Primer" : { "editor" : "textfield"}});
	this.setName("Construct Plan");
};
saturn.core.ConstructDesignTable.__name__ = ["saturn","core","ConstructDesignTable"];
saturn.core.ConstructDesignTable.getPcrKey = function(row) {
	var entryClone = Reflect.field(row,"Entry Clone");
	var startPos = Reflect.field(row,"Start position");
	var stopPos = Reflect.field(row,"Stop position");
	return entryClone + "-" + startPos + "-" + stopPos;
};
saturn.core.ConstructDesignTable.__super__ = saturn.core.Table;
saturn.core.ConstructDesignTable.prototype = $extend(saturn.core.Table.prototype,{
	minTM: null
	,maxTM: null
	,minLength: null
	,maxLength: null
	,minTMExtended: null
	,maxTMExtended: null
	,minLengthExtended: null
	,provider: null
	,getProvider: function() {
		if(this.provider != null) {
			return this.provider;
		} else {
			return saturn.client.WorkspaceApplication.getApplication().getProvider();
		}
	}
	,getMinTM: function() {
		return this.minTM;
	}
	,getMaxTM: function() {
		return this.maxTM;
	}
	,getMinLength: function() {
		return this.minLength;
	}
	,getMaxLength: function() {
		return this.maxLength;
	}
	,generateids: function(cb) {
		var _gthis = this;
		var data = this.getData();
		var targetSet = new haxe.ds.StringMap();
		var _g = 0;
		while(_g < data.length) {
			var row = data[_g];
			++_g;
			var entryClone = Reflect.field(row,"Entry Clone");
			var targetId = entryClone.split("-")[0];
			targetSet.set(targetId,"");
		}
		var _g1 = [];
		var targetId1 = targetSet.keys();
		while(targetId1.hasNext()) {
			var targetId2 = targetId1.next();
			_g1.push(targetId2);
		}
		var targets = _g1;
		saturn.core.domain.SgcUtil.generateNextID(this.getProvider(),targets,saturn.core.domain.SgcAllele,function(alleleMap,err) {
			if(err == null) {
				saturn.core.domain.SgcUtil.generateNextID(_gthis.getProvider(),targets,saturn.core.domain.SgcForwardPrimer,function(fPrimers,err1) {
					if(err1 == null) {
						saturn.core.domain.SgcUtil.generateNextID(_gthis.getProvider(),targets,saturn.core.domain.SgcReversePrimer,function(rPrimers,err2) {
							if(err2 == null) {
								saturn.core.domain.SgcUtil.generateNextID(_gthis.getProvider(),targets,saturn.core.domain.SgcConstruct,function(constructs,err3) {
									if(err3 == null) {
										var forwardMap = new haxe.ds.StringMap();
										var reverseMap = new haxe.ds.StringMap();
										var pcrMap = new haxe.ds.StringMap();
										var _g11 = 0;
										while(_g11 < data.length) {
											var row1 = data[_g11];
											++_g11;
											var entryClone1 = Reflect.field(row1,"Entry Clone");
											var targetId3 = entryClone1.split("-")[0];
											var pcrKey = saturn.core.ConstructDesignTable.getPcrKey(row1);
											if(!pcrMap.exists(pcrKey)) {
												var alleleId = targetId3 + "-a" + StringTools.lpad(Std.string(alleleMap.get(targetId3)),"0",3);
												var value = alleleMap.get(targetId3) + 1;
												alleleMap.set(targetId3,value);
												pcrMap.set(pcrKey,alleleId);
											}
											Reflect.setField(row1,"Allele ID",pcrMap.get(pcrKey));
											var forwardSeq = Reflect.field(row1,"Forward Seq");
											if(forwardMap.exists(forwardSeq)) {
												Reflect.setField(row1,"Forward Primer",forwardMap.get(forwardSeq));
											} else {
												Reflect.setField(row1,"Forward Primer",targetId3 + "-f" + StringTools.lpad(Std.string(fPrimers.get(targetId3)),"0",3));
												var value1 = fPrimers.get(targetId3) + 1;
												fPrimers.set(targetId3,value1);
												forwardMap.set(forwardSeq,Reflect.field(row1,"Forward Primer"));
											}
											var reverseSeq = Reflect.field(row1,"Reverse Seq");
											if(reverseMap.exists(reverseSeq)) {
												Reflect.setField(row1,"Reverse Primer",reverseMap.get(reverseSeq));
											} else {
												Reflect.setField(row1,"Reverse Primer",targetId3 + "-r" + StringTools.lpad(Std.string(rPrimers.get(targetId3)),"0",3));
												var value2 = rPrimers.get(targetId3) + 1;
												rPrimers.set(targetId3,value2);
											}
											Reflect.setField(row1,"Construct ID",targetId3 + "-c" + StringTools.lpad(Std.string(constructs.get(targetId3)),"0",3));
											constructs.set(targetId3,constructs.get(targetId3) + 1);
										}
										cb(null);
									} else {
										cb(err3);
									}
								});
							} else {
								cb(err2);
							}
						});
					} else {
						cb(err1);
					}
				});
			} else {
				cb(err);
			}
		});
	}
	,_fetchAll: function(cb) {
		var bFetch = new saturn.db.BatchFetch(function(obj,err) {
			saturn.client.WorkspaceApplication.getApplication().showMessage("Batch fetch failure",err);
		});
		var entryCloneSet = new haxe.ds.StringMap();
		var vectorSet = new haxe.ds.StringMap();
		var restrictionSet = new haxe.ds.StringMap();
		var constructSet = new haxe.ds.StringMap();
		var alleleSet = new haxe.ds.StringMap();
		var forwardPrimerSet = new haxe.ds.StringMap();
		var reversePrimerSet = new haxe.ds.StringMap();
		var data = this.getData();
		var _g = 0;
		while(_g < data.length) {
			var row = data[_g];
			++_g;
			var entryClone = Reflect.field(row,"Entry Clone");
			var vector = Reflect.field(row,"Vector Name");
			var allele = Reflect.field(row,"Allele ID");
			var construct = Reflect.field(row,"Construct ID");
			var forwardPrimer = Reflect.field(row,"Forward Primer");
			var reversePrimer = Reflect.field(row,"Reverse Primer");
			restrictionSet.set(Reflect.field(row,"Restriction Site 1"),"");
			restrictionSet.set(Reflect.field(row,"Restriction Site 2"),"");
			entryCloneSet.set(entryClone,"");
			vectorSet.set(vector,"");
			alleleSet.set(allele,"");
			constructSet.set(construct,"");
			forwardPrimerSet.set(forwardPrimer,"");
			reversePrimerSet.set(reversePrimer,"");
		}
		var entryClones = [];
		var vectors = [];
		var sites = [];
		var alleles = [];
		var constructs = [];
		var forwardPrimers = [];
		var reversePrimers = [];
		var entryClone1 = entryCloneSet.keys();
		while(entryClone1.hasNext()) {
			var entryClone2 = entryClone1.next();
			entryClones.push(entryClone2);
		}
		var vector1 = vectorSet.keys();
		while(vector1.hasNext()) {
			var vector2 = vector1.next();
			vectors.push(vector2);
		}
		var site = restrictionSet.keys();
		while(site.hasNext()) {
			var site1 = site.next();
			sites.push(site1);
		}
		var allele1 = alleleSet.keys();
		while(allele1.hasNext()) {
			var allele2 = allele1.next();
			alleles.push(allele2);
		}
		var construct1 = constructSet.keys();
		while(construct1.hasNext()) {
			var construct2 = construct1.next();
			constructs.push(construct2);
		}
		var forwardPrimer1 = forwardPrimerSet.keys();
		while(forwardPrimer1.hasNext()) {
			var forwardPrimer2 = forwardPrimer1.next();
			forwardPrimers.push(forwardPrimer2);
		}
		var reversePrimer1 = reversePrimerSet.keys();
		while(reversePrimer1.hasNext()) {
			var reversePrimer2 = reversePrimer1.next();
			reversePrimers.push(reversePrimer2);
		}
		bFetch.getByIds(vectors,saturn.core.domain.SgcVector,"__IGNORE_ME__",null);
		bFetch.getByIds(sites,saturn.core.domain.SgcRestrictionSite,"__IGNORE_ME__",null);
		bFetch.getByIds(entryClones,saturn.core.domain.SgcEntryClone,"__IGNORE_ME__",null);
		bFetch.getByIds(alleles,saturn.core.domain.SgcAllele,"__IGNORE_ME__",null);
		bFetch.getByIds(constructs,saturn.core.domain.SgcConstruct,"__IGNORE_ME__",null);
		bFetch.getByIds(forwardPrimers,saturn.core.domain.SgcForwardPrimer,"__IGNORE_ME__",null);
		bFetch.getByIds(reversePrimers,saturn.core.domain.SgcReversePrimer,"__IGNORE_ME__",null);
		bFetch.onComplete = cb;
		bFetch.execute();
	}
	,calculate: function(cb) {
		var _gthis = this;
		this._fetchAll(function() {
			_gthis._calculateFromCache(cb);
		});
	}
	,saveNew: function(cb) {
		this._saveNew(cb);
	}
	,_saveNew: function(cb) {
		var p = this.getProvider();
		var data = this.getData();
		var forwardPrimerSet = new haxe.ds.StringMap();
		var reversePrimerSet = new haxe.ds.StringMap();
		var allelePlates = [];
		var constructPlates = [];
		var alleleSet = new haxe.ds.StringMap();
		var constructs = [];
		var _g = 0;
		while(_g < data.length) {
			var row = data[_g];
			++_g;
			var pcrKey = saturn.core.ConstructDesignTable.getPcrKey(row);
			var allelePlate = new saturn.core.domain.SgcAllelePlate();
			var constructPlate = new saturn.core.domain.SgcConstructPlate();
			var construct = new saturn.core.domain.SgcConstruct();
			var forwardPrimer = null;
			var forwardPrimerId = Reflect.field(row,"Forward Primer");
			if(forwardPrimerSet.exists(forwardPrimerId)) {
				forwardPrimer = forwardPrimerSet.get(forwardPrimerId);
			} else {
				forwardPrimer = new saturn.core.domain.SgcForwardPrimer();
				forwardPrimer.setSequence(Reflect.field(row,"Forward Seq"));
				forwardPrimer.primerId = forwardPrimerId;
				forwardPrimerSet.set(forwardPrimerId,forwardPrimer);
			}
			var reversePrimer = null;
			var reversePrimerId = Reflect.field(row,"Reverse Primer");
			if(reversePrimerSet.exists(reversePrimerId)) {
				reversePrimer = reversePrimerSet.get(reversePrimerId);
			} else {
				reversePrimer = new saturn.core.domain.SgcReversePrimer();
				reversePrimer.setSequence(Reflect.field(row,"Reverse Seq"));
				reversePrimer.primerId = reversePrimerId;
				reversePrimerSet.set(reversePrimerId,reversePrimer);
			}
			allelePlate.plateName = Reflect.field(row,"Plate Name");
			constructPlate.plateName = Reflect.field(row,"Plate Name");
			var allele = null;
			if(alleleSet.exists(pcrKey)) {
				allele = alleleSet.get(pcrKey);
			} else {
				allele = new saturn.core.domain.SgcAllele();
				allele.entryClone = new saturn.core.domain.SgcEntryClone();
				allele.entryClone.entryCloneId = Reflect.field(row,"Entry Clone");
				allele.plateWell = Reflect.field(row,"Allele Well");
				allele.alleleId = Reflect.field(row,"Allele ID");
				allele.dnaSeq = Reflect.field(row,"Allele DNA Sequence");
				allele.proteinSeq = Reflect.field(row,"Allele Protein Sequence");
				allele.forwardPrimer = forwardPrimer;
				allele.reversePrimer = reversePrimer;
				allele.plate = allelePlate;
				alleleSet.set(pcrKey,allele);
			}
			construct.constructId = Reflect.field(row,"Construct ID");
			construct.wellId = Reflect.field(row,"Construct Well");
			construct.vector = new saturn.core.domain.SgcVector();
			construct.vector.vectorId = Reflect.field(row,"Vector Name");
			construct.dnaSeq = Reflect.field(row,"Construct DNA");
			construct.proteinSeq = Reflect.field(row,"Construct Protein");
			construct.proteinSeqNoTag = Reflect.field(row,"Construct Protein (no tag)");
			construct.expectedMass = Reflect.field(row,"Construct Mass");
			construct.expectedMassNoTag = Reflect.field(row,"Construct Mass (no tag)");
			construct.res1 = new saturn.core.domain.SgcRestrictionSite();
			construct.res1.enzymeName = Reflect.field(row,"Restriction Site 1");
			construct.res2 = new saturn.core.domain.SgcRestrictionSite();
			construct.res2.enzymeName = Reflect.field(row,"Restriction Site 2");
			construct.allele = allele;
			construct.constructPlate = constructPlate;
			construct.constructStart = Reflect.field(row,"Start position");
			construct.constructStop = Reflect.field(row,"Stop position");
			allelePlates.push(allelePlate);
			constructPlates.push(constructPlate);
			constructs.push(construct);
		}
		var alleles = [];
		var pcrKey1 = alleleSet.keys();
		while(pcrKey1.hasNext()) {
			var pcrKey2 = pcrKey1.next();
			alleles.push(alleleSet.get(pcrKey2));
		}
		var forwardPrimers = [];
		var forwardPrimerId1 = forwardPrimerSet.keys();
		while(forwardPrimerId1.hasNext()) {
			var forwardPrimerId2 = forwardPrimerId1.next();
			forwardPrimers.push(forwardPrimerSet.get(forwardPrimerId2));
		}
		var reversePrimers = [];
		var reversePrimerId1 = reversePrimerSet.keys();
		while(reversePrimerId1.hasNext()) {
			var reversePrimerId2 = reversePrimerId1.next();
			reversePrimers.push(reversePrimerSet.get(reversePrimerId2));
		}
		p.insertOrUpdate(forwardPrimers,function(err) {
			if(err != null) {
				cb(err);
				return;
			}
			p.insertOrUpdate(reversePrimers,function(err1) {
				if(err1 != null) {
					cb(err1);
					return;
				}
				p.insertOrUpdate(allelePlates,function(err2) {
					if(err2 != null) {
						cb(err2);
						return;
					}
					p.insertOrUpdate(constructPlates,function(err3) {
						if(err3 != null) {
							cb(err3);
							return;
						}
						p.insertOrUpdate(alleles,function(err4) {
							if(err4 != null) {
								cb(err4);
								return;
							}
							p.insertOrUpdate(constructs,function(err5) {
								if(err5 != null) {
									cb(err5);
									return;
								} else {
									cb(null);
								}
							},true);
						},true);
					},true);
				},true);
			},true);
		},true);
	}
	,fetchall: function(cb) {
		var _gthis = this;
		this._fetchAll(function() {
			var p = _gthis.getProvider();
			var data = _gthis.getData();
			var _g = 0;
			while(_g < data.length) {
				var row = data[_g];
				++_g;
				var entryCloneId = Reflect.field(row,"Entry Clone");
				var vectorId = Reflect.field(row,"Vector Name");
				var res1Id = Reflect.field(row,"Restriction Site 1");
				var res2Id = Reflect.field(row,"Restriction Site 2");
				var forwardPrimerId = Reflect.field(row,"Forward Primer");
				var reversePrimerId = Reflect.field(row,"Reverse Primer");
				var alleleId = Reflect.field(row,"Allele ID");
				var constructId = Reflect.field(row,"Construct ID");
				var entryClone = p.getObjectFromCache(saturn.core.domain.SgcEntryClone,"entryCloneId",entryCloneId);
				var vector = p.getObjectFromCache(saturn.core.domain.SgcVector,"vectorId",vectorId);
				var allele = p.getObjectFromCache(saturn.core.domain.SgcAllele,"alleleId",alleleId);
				var construct = p.getObjectFromCache(saturn.core.domain.SgcConstruct,"constructId",constructId);
				var forwardPrimer = p.getObjectFromCache(saturn.core.domain.SgcForwardPrimer,"primerId",forwardPrimerId);
				var reversePrimer = p.getObjectFromCache(saturn.core.domain.SgcReversePrimer,"primerId",reversePrimerId);
				if(allele != null) {
					Reflect.setField(row,"Allele Well",allele.plateWell);
					if(allele.plate != null) {
						Reflect.setField(row,"Plate Name",allele.plate.plateName);
					}
					Reflect.setField(row,"Allele Well",allele.plateWell);
					if(allele.entryClone != null) {
						Reflect.setField(row,"Entry Clone",allele.entryClone.entryCloneId);
					}
					Reflect.setField(row,"Allele DNA Sequence",allele.dnaSeq);
					Reflect.setField(row,"Allele Protein Sequence",allele.proteinSeq);
					if(allele.forwardPrimer != null) {
						Reflect.setField(row,"Forward Primer",allele.forwardPrimer.primerId);
						Reflect.setField(row,"Forward Seq",allele.forwardPrimer.dnaSequence);
					}
					if(allele.reversePrimer != null) {
						Reflect.setField(row,"Reverse Primer",allele.reversePrimer.primerId);
						Reflect.setField(row,"Reverse Seq",allele.reversePrimer.dnaSequence);
					}
				}
				if(construct != null) {
					Reflect.setField(row,"Construct Well",construct.wellId);
					if(construct.vector != null) {
						Reflect.setField(row,"Vector Name",construct.vector.vectorId);
					}
					if(construct.res1 != null) {
						Reflect.setField(row,"Restriction Site 1",construct.res1.enzymeName);
					}
					if(construct.res2 != null) {
						Reflect.setField(row,"Restriction Site 2",construct.res2.enzymeName);
					}
					Reflect.setField(row,"Construct DNA",construct.dnaSeq);
					Reflect.setField(row,"Construct Protein",construct.proteinSeq);
					Reflect.setField(row,"Construct Protein (no tag)",construct.proteinSeqNoTag);
					Reflect.setField(row,"Construct Mass",construct.expectedMass);
					Reflect.setField(row,"Construct Mass (no tag)",construct.expectedMassNoTag);
				}
				cb();
			}
		});
	}
	,_calculateFromCache: function(cb) {
		var p = this.getProvider();
		var data = this.getData();
		var primerReg = saturn.core.PrimerRegistry.getDefaultInstance();
		var _g = 0;
		while(_g < data.length) {
			var row = data[_g];
			++_g;
			var entryCloneId = Reflect.field(row,"Entry Clone");
			var vectorId = Reflect.field(row,"Vector Name");
			var startPosition = Reflect.field(row,"Start position");
			var stopPosition = Reflect.field(row,"Stop position");
			var res1Id = Reflect.field(row,"Restriction Site 1");
			var res2Id = Reflect.field(row,"Restriction Site 2");
			var entryClone = p.getObjectFromCache(saturn.core.domain.SgcEntryClone,"entryCloneId",entryCloneId);
			var vector = p.getObjectFromCache(saturn.core.domain.SgcVector,"vectorId",vectorId);
			var pcrErrors = [];
			if(entryClone == null) {
				pcrErrors.push(entryCloneId + " invalid");
			}
			var res1 = null;
			var res2 = null;
			if(vector == null) {
				if(vectorId == null || vectorId == "") {
					pcrErrors.push("Missing vector");
				} else {
					pcrErrors.push(vectorId + " invalid");
				}
			} else {
				if(res1Id == null || res1Id == "") {
					res1 = vector.res1;
				}
				if(res2Id == null || res2Id == "") {
					res2 = vector.res2;
				}
			}
			if(res1 == null && res1Id != null) {
				res1 = p.getObjectFromCache(saturn.core.domain.SgcRestrictionSite,"enzymeName",res1Id);
			}
			if(res2 == null && res2Id != null) {
				res2 = p.getObjectFromCache(saturn.core.domain.SgcRestrictionSite,"enzymeName",res2Id);
			}
			if(res1 == null) {
				if(res1Id == null || res1Id == "") {
					pcrErrors.push("5` restriction site missing");
				} else {
					pcrErrors.push(res1Id + " invalid");
				}
			}
			if(res2 == null) {
				if(res2Id == null || res2Id == "") {
					pcrErrors.push("3` restriction site missing");
				} else {
					pcrErrors.push(res2Id + " invalid");
				}
			}
			if(pcrErrors.length > 0) {
				Reflect.setField(row,"PCR Error",pcrErrors.join(" / "));
				continue;
			}
			Reflect.setField(row,"Forward Seq","");
			Reflect.setField(row,"Reverse Seq","");
			Reflect.setField(row,"Forward Error","");
			Reflect.setField(row,"Reverse Error","");
			Reflect.setField(row,"PCR Error","");
			Reflect.setField(row,"Allele DNA Sequence","");
			Reflect.setField(row,"Allele Protein Sequence","");
			Reflect.setField(row,"Construct Protein","");
			Reflect.setField(row,"Construct Protein (no tag)","");
			Reflect.setField(row,"Construct DNA","");
			Reflect.setField(row,"Construct Mass","");
			Reflect.setField(row,"Construct Mass (no tag)","");
			Reflect.setField(row,"Construct Error","");
			var forwardExtensionLength = 0;
			var reverseExtensionLength = 0;
			var registry = saturn.core.GeneticCodeRegistry.getRegistry();
			var geneticCode = registry.getGeneticCodeByEnum(saturn.core.GeneticCodes.STANDARD);
			var template = new saturn.core.DNA(entryClone.dnaSeq);
			var mutant_template = new saturn.core.DNA(entryClone.dnaSeq);
			var translation = new saturn.core.Protein(mutant_template.getTranslation(saturn.core.GeneticCodes.STANDARD,0,true));
			try {
				var nucPosition = template.getCodonStartPosition(saturn.core.Frame.ONE,startPosition);
				var forwardSeq = template.getRegion(nucPosition,template.getLength());
				var forwardObj = new saturn.core.DNA(forwardSeq);
				var extensionSeq = "";
				if(vector.requiredForwardExtension != null) {
					extensionSeq = vector.requiredForwardExtension;
					if(HxOverrides.substr(forwardSeq,0,3) == "ATG") {
						if(HxOverrides.substr(extensionSeq,extensionSeq.length - 3,3) == "ATG") {
							extensionSeq = HxOverrides.substr(extensionSeq,0,extensionSeq.length - 3);
						}
					} else if(HxOverrides.substr(extensionSeq,extensionSeq.length - 3,3) != "ATG") {
						extensionSeq += "ATG";
						forwardExtensionLength += 3;
					}
					forwardExtensionLength += extensionSeq.length;
				}
				Reflect.setField(row,"Forward Seq",extensionSeq + forwardObj.findPrimer(1,this.minLength,this.maxLength,this.minTM,this.maxTM,extensionSeq,this.minLengthExtended,this.minTMExtended,this.maxTMExtended));
			} catch( ex ) {
				if (ex instanceof js._Boot.HaxeError) ex = ex.val;
				if( js.Boot.__instanceof(ex,saturn.util.HaxeException) ) {
					Reflect.setField(row,"Forward Error",ex);
					continue;
				} else throw(ex);
			}
			try {
				var nucPosition1 = template.getCodonStopPosition(saturn.core.Frame.ONE,stopPosition);
				var reverseSeq = new saturn.core.DNA(template.getRegion(1,nucPosition1)).getInverseComplement();
				var icCut = new saturn.core.DNA(reverseSeq);
				var extensionSeq1 = "";
				if(vector.requiredReverseExtension != null) {
					extensionSeq1 = vector.requiredReverseExtension;
					reverseExtensionLength += extensionSeq1.length;
				}
				if(vector.addStopCodon == "yes") {
					extensionSeq1 += "TCA";
					reverseExtensionLength += 3;
				}
				Reflect.setField(row,"Reverse Seq",extensionSeq1 + icCut.findPrimer(1,this.minLength,this.maxLength,this.minTM,this.maxTM,extensionSeq1,this.minLengthExtended,this.minTMExtended,this.maxTMExtended));
			} catch( ex1 ) {
				if (ex1 instanceof js._Boot.HaxeError) ex1 = ex1.val;
				if( js.Boot.__instanceof(ex1,saturn.util.HaxeException) ) {
					Reflect.setField(row,"Reverse Error",ex1);
					continue;
				} else throw(ex1);
			}
			var mutationStr = Reflect.field(row,"Mutations");
			if(mutationStr != null && mutationStr != "") {
				var mut_pattern = new EReg("([A-Z]{1})(\\d+)([A-Z]{1})","");
				var mutations = mutationStr.split(":");
				var minPos = null;
				var maxPos = null;
				var continueFlag = false;
				var _g1 = 0;
				while(_g1 < mutations.length) {
					var mutation = mutations[_g1];
					++_g1;
					mutation = mutation.toUpperCase();
					if(mut_pattern.match(mutation)) {
						var aa = mut_pattern.matched(1);
						var pos = Std.parseInt(mut_pattern.matched(2));
						var toAA = mut_pattern.matched(3);
						if(pos > template.getLength()) {
							Reflect.setField(row,"Construct Error","Mutation pos " + pos + " is out of range");
							continueFlag = true;
							break;
						}
						if(!geneticCode.isAA(toAA)) {
							Reflect.setField(row,"Construct Error","Amino acid " + toAA + " is not valid");
							continueFlag = true;
							break;
						}
						if(translation.getAtPosition(pos - 1) != aa) {
							Reflect.setField(row,"Construct Error","Amino acid at position " + pos + " does not match amino acid " + aa);
							continueFlag = true;
							break;
						}
						mutant_template = new saturn.core.DNA(mutant_template.mutateResidue(saturn.core.Frame.ONE,saturn.core.GeneticCodes.STANDARD,pos,toAA));
						if(minPos == null || pos < minPos) {
							minPos = pos;
						}
						if(maxPos == null || pos > maxPos) {
							maxPos = pos;
						}
					} else {
						Reflect.setField(row,"Construct Error","Mutation definition -" + mutation + "- is not valid");
						continueFlag = true;
						break;
					}
				}
				if(continueFlag) {
					this.clearPrimers(row);
					continue;
				}
				if(maxPos != minPos && maxPos - minPos + 1 > 20) {
					Reflect.setField(row,"Construct Error","Mutations are greater than 20 residues apart from each other and so can not be included on the same primer");
					this.clearPrimers(row);
					continue;
				}
				if(minPos > 7 && maxPos < translation.getLength() - 7) {
					var mutantStartPosition = (minPos - 1) * 3 - 19;
					var mutantPrimerLength = (maxPos - minPos + 1) * 3 + 40;
					var forwardMutationPrimer = mutant_template.getRegion(mutantStartPosition,mutantStartPosition + mutantPrimerLength - 1);
					var reverseMutationPrimer = new saturn.core.DNA(forwardMutationPrimer).getInverseComplement();
					Reflect.setField(row,"Mutation Forward Primer",forwardMutationPrimer);
					Reflect.setField(row,"Mutation Reverse Primer",reverseMutationPrimer);
				}
				if(minPos <= 7) {
					var mutantStartPosition1 = 1;
					var mutantPrimerLength1 = maxPos * 3 + 20;
					var forwardMutationPrimer1 = mutant_template.getRegion(mutantStartPosition1,mutantStartPosition1 + mutantPrimerLength1 - 1);
					forwardMutationPrimer1 = vector.requiredForwardExtension + forwardMutationPrimer1;
					Reflect.setField(row,"Forward Seq",forwardMutationPrimer1);
					Reflect.setField(row,"Mutation Forward Primer",forwardMutationPrimer1);
					Reflect.setField(row,"Mutation Reverse Primer","");
				}
				if(maxPos >= translation.getLength() - 7) {
					var mutantPrimerLength2 = (translation.getLength() - minPos + 1) * 3 + 20;
					var mutantStartPosition2 = translation.getLength() * 3 - mutantPrimerLength2 + 1;
					var forwardMutationPrimer2 = mutant_template.getRegion(mutantStartPosition2,mutantStartPosition2 + mutantPrimerLength2 - 1);
					var reverseMutationPrimer1 = new saturn.core.DNA(forwardMutationPrimer2).getInverseComplement();
					reverseMutationPrimer1 = vector.requiredReverseExtension + reverseMutationPrimer1;
					Reflect.setField(row,"Mutation Forward Primer","");
					Reflect.setField(row,"Mutation Reverse Primer",reverseMutationPrimer1);
					Reflect.setField(row,"Reverse Seq",reverseMutationPrimer1);
				}
				template = mutant_template;
			}
			var forwardSeq1 = Reflect.field(row,"Forward Seq");
			var reverseSeq1 = Reflect.field(row,"Reverse Seq");
			if(forwardSeq1 != null && forwardSeq1 != "" && reverseSeq1 != null && reverseSeq1 != "") {
				try {
					var forwardPrimer = new saturn.core.Primer(forwardSeq1);
					forwardPrimer.set5PrimeExtensionLength(forwardExtensionLength);
					var reversePrimer = new saturn.core.Primer(reverseSeq1);
					reversePrimer.set5PrimeExtensionLength(reverseExtensionLength);
					var pcr = new saturn.core.PCRProduct(template,forwardPrimer,reversePrimer);
					var product = new saturn.core.DNA(pcr.getPCRProduct(true));
					var pos1 = product.getFirstStartCodonPosition(saturn.core.GeneticCodes.STANDARD);
					Reflect.setField(row,"Allele DNA Sequence",product.getSequence());
					Reflect.setField(row,"Allele Protein Sequence",product.getTranslation(saturn.core.GeneticCodes.STANDARD,pos1,true));
				} catch( ex2 ) {
					if (ex2 instanceof js._Boot.HaxeError) ex2 = ex2.val;
					if( js.Boot.__instanceof(ex2,saturn.util.HaxeException) ) {
						Reflect.setField(row,"PCR Error",ex2);
						continue;
					} else throw(ex2);
				}
				try {
					var alleleSequence = new saturn.core.DNA(Reflect.field(row,"Allele DNA Sequence"));
					var res1Seq = new saturn.core.RestrictionSite(res1.cutSequence);
					var res2Seq = new saturn.core.RestrictionSite(res2.cutSequence);
					var v_res1Seq = new saturn.core.RestrictionSite(vector.res1.cutSequence);
					var v_res2Seq = new saturn.core.RestrictionSite(vector.res2.cutSequence);
					var vectorSequence = new saturn.core.DNA(vector.getSequence());
					var proteaseCutSeq = new saturn.core.CleavageSite(vector.proteaseCutSequence);
					var proteaseProduct = vector.proteaseProduct;
					var direction;
					if(proteaseProduct == "UPSTREAM") {
						direction = saturn.core.CutProductDirection.UPSTREAM;
					} else if(proteaseProduct == "DOWNSTREAM") {
						direction = saturn.core.CutProductDirection.DOWNSTREAM;
					} else {
						Reflect.setField(row,"Construct Error","Invalid value for Vector field protease product direction should be either UPSTREAM or DOWNSTREAM");
						this.clearPrimers(row);
						continue;
					}
					var alleleDigest = new saturn.core.DoubleDigest(alleleSequence,res1Seq,res2Seq);
					var vectorDigest = new saturn.core.DoubleDigest(vectorSequence,v_res1Seq,v_res2Seq);
					var ligation = new saturn.core.Ligation(vectorDigest,alleleDigest);
					ligation.calculateProduct();
					var startCodonPosition = ligation.getFirstStartCodonPosition(saturn.core.GeneticCodes.STANDARD);
					if(startCodonPosition == -1) {
						Reflect.setField(row,"Construct Error","Ligation product is missing a start codon");
						this.clearPrimers(row);
						continue;
					}
					var uncutSequence = new saturn.core.Protein(ligation.getTranslation(saturn.core.GeneticCodes.STANDARD,startCodonPosition,true));
					var cutSequence = proteaseCutSeq.getCutProduct(uncutSequence,direction);
					Reflect.setField(row,"Construct Mass",saturn.util.MathUtils.sigFigs(uncutSequence.getMW(),4));
					Reflect.setField(row,"Construct Mass (no tag)",saturn.util.MathUtils.sigFigs(new saturn.core.Protein(cutSequence).getMW(),4));
					Reflect.setField(row,"Construct DNA",ligation.getSequence());
					Reflect.setField(row,"Construct Protein",uncutSequence.getSequence());
					Reflect.setField(row,"Construct Protein (no tag)",cutSequence);
				} catch( $e0 ) {
					if ($e0 instanceof js._Boot.HaxeError) $e0 = $e0.val;
					if( js.Boot.__instanceof($e0,saturn.util.HaxeException) ) {
						var ex3 = $e0;
						Reflect.setField(row,"Construct Error",ex3);
					} else {
					var e = $e0;
					Reflect.setField(row,"Construct Error",e);
					}
				}
			}
		}
		cb();
	}
	,clearPrimers: function(row) {
		Reflect.setField(row,"Mutation Forward Primer","");
		Reflect.setField(row,"Mutation Reverse Primer","");
		Reflect.setField(row,"Forward Seq","");
		Reflect.setField(row,"Reverse Seq","");
	}
	,duplicateAndChangeVector: function(newVectorName,cb) {
		var data = this.getData();
		var _g = 0;
		while(_g < data.length) {
			var row = data[_g];
			++_g;
			var selected = Reflect.field(row,"Select");
			if(selected) {
				var newRow = saturn.core.Util.clone(row);
				Reflect.setField(newRow,"Vector Name",newVectorName);
				Reflect.setField(newRow,"Select",false);
				data.push(newRow);
			}
		}
		cb();
	}
	,assignWells: function(cb) {
		var data = this.getData();
		var pcrKeyToAlleleWell = new haxe.ds.StringMap();
		var ai = 65;
		var aj = 1;
		var ci = 65;
		var cj = 1;
		var _g = 0;
		while(_g < data.length) {
			var row = data[_g];
			++_g;
			var pcrKey = saturn.core.ConstructDesignTable.getPcrKey(row);
			if(!pcrKeyToAlleleWell.exists(pcrKey)) {
				var alleleWell = String.fromCharCode(ai) + StringTools.lpad(aj == null ? "null" : "" + aj,"0",2);
				++aj;
				if(aj > 12) {
					++ai;
					aj = 1;
				}
				pcrKeyToAlleleWell.set(pcrKey,alleleWell);
			}
			var constructWell = String.fromCharCode(ci) + StringTools.lpad(cj == null ? "null" : "" + cj,"0",2);
			++cj;
			if(cj > 12) {
				++ci;
				cj = 1;
			}
			Reflect.setField(row,"Allele Well",pcrKeyToAlleleWell.get(pcrKey));
			Reflect.setField(row,"Construct Well",constructWell);
		}
		cb(null);
	}
	,prepare: function(cb) {
		var _gthis = this;
		this.calculate(function() {
			_gthis.generateids(function(err) {
				if(err != null) {
					cb(err);
				} else {
					_gthis.assignWells(cb);
				}
			});
		});
	}
	,__class__: saturn.core.ConstructDesignTable
});
saturn.core.ConstructPlan = $hxClasses["saturn.core.ConstructPlan"] = function() {
};
saturn.core.ConstructPlan.__name__ = ["saturn","core","ConstructPlan"];
saturn.core.ConstructPlan.prototype = {
	__class__: saturn.core.ConstructPlan
};
saturn.core.ConstructSet = $hxClasses["saturn.core.ConstructSet"] = function(constructs) {
	this.setConstructs(constructs);
};
saturn.core.ConstructSet.__name__ = ["saturn","core","ConstructSet"];
saturn.core.ConstructSet.prototype = {
	constructs: null
	,setConstructs: function(constructs) {
		this.constructs = constructs;
	}
	,getForwardPrimers: function() {
		var primers = new haxe.ds.StringMap();
		var _g = 0;
		var _g1 = this.constructs;
		while(_g < _g1.length) {
			var construct = _g1[_g];
			++_g;
			if(construct.allele != null && construct.allele.forwardPrimer != null) {
				var primer = construct.allele.forwardPrimer;
				if(!primers.exists(primer.primerId)) {
					primers.set(primer.primerId,primer);
				}
			}
		}
		return primers;
	}
	,getReversePrimers: function() {
		var primers = new haxe.ds.StringMap();
		var _g = 0;
		var _g1 = this.constructs;
		while(_g < _g1.length) {
			var construct = _g1[_g];
			++_g;
			if(construct.allele != null && construct.allele.reversePrimer != null) {
				var primer = construct.allele.reversePrimer;
				if(!primers.exists(primer.primerId)) {
					primers.set(primer.primerId,primer);
				}
			}
		}
		return primers;
	}
	,generatePrimerReport: function() {
		var forwardPrimers = this.getForwardPrimers();
		var reversePrimers = this.getReversePrimers();
		var primers = [];
		var id = forwardPrimers.keys();
		while(id.hasNext()) {
			var id1 = id.next();
			primers.push(forwardPrimers.get(id1));
		}
		var id2 = reversePrimers.keys();
		while(id2.hasNext()) {
			var id3 = id2.next();
			primers.push(reversePrimers.get(id3));
		}
		primers.sort(function(p1,p2) {
			var a = p1.primerId.toLowerCase();
			var b = p2.primerId.toLowerCase();
			if(a.indexOf("-f") != -1) {
				if(b.indexOf("-r") != -1) {
					return -1;
				}
			} else if(a.indexOf("-r") != -1) {
				if(b.indexOf("-f") != -1) {
					return 1;
				}
			}
			if(a < b) {
				return -1;
			}
			if(a > b) {
				return 1;
			}
			return 0;
		});
		var row = "A";
		var col = 1;
		var buf = new StringBuf();
		var _g = 0;
		while(_g < primers.length) {
			var primer = primers[_g];
			++_g;
			var well = row + col;
			buf.add(well + "," + Std.string(primer.primerId) + "," + Std.string(primer.dnaSequence) + "\n");
			if(col == 12) {
				col = 1;
				row = String.fromCharCode(HxOverrides.cca(row,0) + 1);
			} else {
				++col;
			}
		}
		return buf.toString();
	}
	,__class__: saturn.core.ConstructSet
};
saturn.core.CrystalHelperData = $hxClasses["saturn.core.CrystalHelperData"] = function() {
};
saturn.core.CrystalHelperData.__name__ = ["saturn","core","CrystalHelperData"];
saturn.core.CrystalHelperData.prototype = {
	data: null
	,setData: function(obj) {
		this.data = obj;
	}
	,getData: function(obj) {
		return this.data;
	}
	,__class__: saturn.core.CrystalHelperData
};
saturn.core.CutProductDirection = $hxClasses["saturn.core.CutProductDirection"] = { __ename__ : ["saturn","core","CutProductDirection"], __constructs__ : ["UPSTREAM","DOWNSTREAM","UPDOWN"] };
saturn.core.CutProductDirection.UPSTREAM = ["UPSTREAM",0];
saturn.core.CutProductDirection.UPSTREAM.toString = $estr;
saturn.core.CutProductDirection.UPSTREAM.__enum__ = saturn.core.CutProductDirection;
saturn.core.CutProductDirection.DOWNSTREAM = ["DOWNSTREAM",1];
saturn.core.CutProductDirection.DOWNSTREAM.toString = $estr;
saturn.core.CutProductDirection.DOWNSTREAM.__enum__ = saturn.core.CutProductDirection;
saturn.core.CutProductDirection.UPDOWN = ["UPDOWN",2];
saturn.core.CutProductDirection.UPDOWN.toString = $estr;
saturn.core.CutProductDirection.UPDOWN.__enum__ = saturn.core.CutProductDirection;
saturn.core.Frame = $hxClasses["saturn.core.Frame"] = { __ename__ : ["saturn","core","Frame"], __constructs__ : ["ONE","TWO","THREE"] };
saturn.core.Frame.ONE = ["ONE",0];
saturn.core.Frame.ONE.toString = $estr;
saturn.core.Frame.ONE.__enum__ = saturn.core.Frame;
saturn.core.Frame.TWO = ["TWO",1];
saturn.core.Frame.TWO.toString = $estr;
saturn.core.Frame.TWO.__enum__ = saturn.core.Frame;
saturn.core.Frame.THREE = ["THREE",2];
saturn.core.Frame.THREE.toString = $estr;
saturn.core.Frame.THREE.__enum__ = saturn.core.Frame;
saturn.core.Frames = $hxClasses["saturn.core.Frames"] = function() { };
saturn.core.Frames.__name__ = ["saturn","core","Frames"];
saturn.core.Frames.toInt = function(frame) {
	switch(Type.enumIndex(frame)) {
	case 0:
		return 0;
	case 1:
		return 1;
	case 2:
		return 2;
	}
};
saturn.core.Direction = $hxClasses["saturn.core.Direction"] = { __ename__ : ["saturn","core","Direction"], __constructs__ : ["Forward","Reverse"] };
saturn.core.Direction.Forward = ["Forward",0];
saturn.core.Direction.Forward.toString = $estr;
saturn.core.Direction.Forward.__enum__ = saturn.core.Direction;
saturn.core.Direction.Reverse = ["Reverse",1];
saturn.core.Direction.Reverse.toString = $estr;
saturn.core.Direction.Reverse.__enum__ = saturn.core.Direction;
saturn.core.DNAComposition = $hxClasses["saturn.core.DNAComposition"] = function(aCount,tCount,gCount,cCount) {
	this.aCount = aCount;
	this.tCount = tCount;
	this.gCount = gCount;
	this.cCount = cCount;
};
saturn.core.DNAComposition.__name__ = ["saturn","core","DNAComposition"];
saturn.core.DNAComposition.prototype = {
	aCount: null
	,tCount: null
	,gCount: null
	,cCount: null
	,__class__: saturn.core.DNAComposition
};
saturn.core.GeneticCode = $hxClasses["saturn.core.GeneticCode"] = function() {
	this.codonLookupTable = new haxe.ds.StringMap();
	this.aaToCodonTable = new haxe.ds.StringMap();
	this.startCodons = new haxe.ds.StringMap();
	this.stopCodons = new haxe.ds.StringMap();
	this.populateTable();
};
saturn.core.GeneticCode.__name__ = ["saturn","core","GeneticCode"];
saturn.core.GeneticCode.prototype = {
	codonLookupTable: null
	,aaToCodonTable: null
	,startCodons: null
	,stopCodons: null
	,isAA: function(aa) {
		return this.aaToCodonTable.exists(aa);
	}
	,addStartCodon: function(codon) {
		this.startCodons.set(codon,"1");
	}
	,isStartCodon: function(codon) {
		return this.startCodons.exists(codon);
	}
	,addStopCodon: function(codon) {
		this.stopCodons.set(codon,"1");
	}
	,isStopCodon: function(codon) {
		return this.stopCodons.exists(codon);
	}
	,getStopCodons: function() {
		return this.stopCodons;
	}
	,getCodonCount: function() {
		return Lambda.count(this.codonLookupTable);
	}
	,getStartCodons: function() {
		var clone = new haxe.ds.StringMap();
		var key = this.startCodons.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			clone.set(key1,this.startCodons.get(key1));
		}
		return clone;
	}
	,populateTable: function() {
	}
	,lookupCodon: function(codon) {
		if(this.codonLookupTable.exists(codon)) {
			return this.codonLookupTable.get(codon);
		} else {
			return "?";
		}
	}
	,getCodonLookupTable: function() {
		return this.codonLookupTable;
	}
	,getAAToCodonTable: function() {
		return this.aaToCodonTable;
	}
	,getFirstCodon: function(aa) {
		if(this.aaToCodonTable.exists(aa)) {
			var codons = this.aaToCodonTable.get(aa);
			return codons.first();
		} else {
			return null;
		}
	}
	,__class__: saturn.core.GeneticCode
};
saturn.core.StandardGeneticCode = $hxClasses["saturn.core.StandardGeneticCode"] = function() {
	saturn.core.GeneticCode.call(this);
	saturn.core.GeneticCode.prototype.addStartCodon.call(this,"ATG");
	saturn.core.GeneticCode.prototype.addStopCodon.call(this,"TAA");
	saturn.core.GeneticCode.prototype.addStopCodon.call(this,"TGA");
	saturn.core.GeneticCode.prototype.addStopCodon.call(this,"TAG");
};
saturn.core.StandardGeneticCode.__name__ = ["saturn","core","StandardGeneticCode"];
saturn.core.StandardGeneticCode.getDefaultInstance = function() {
	return saturn.core.StandardGeneticCode.instance;
};
saturn.core.StandardGeneticCode.__super__ = saturn.core.GeneticCode;
saturn.core.StandardGeneticCode.prototype = $extend(saturn.core.GeneticCode.prototype,{
	populateTable: function() {
		this.codonLookupTable.set("TTT","F");
		this.codonLookupTable.set("TTC","F");
		this.codonLookupTable.set("TTA","L");
		this.codonLookupTable.set("TTG","L");
		this.codonLookupTable.set("TCT","S");
		this.codonLookupTable.set("TCC","S");
		this.codonLookupTable.set("TCA","S");
		this.codonLookupTable.set("TCG","S");
		this.codonLookupTable.set("TAT","Y");
		this.codonLookupTable.set("TAC","Y");
		this.codonLookupTable.set("TAA","!");
		this.codonLookupTable.set("TAG","!");
		this.codonLookupTable.set("TGT","C");
		this.codonLookupTable.set("TGC","C");
		this.codonLookupTable.set("TGA","!");
		this.codonLookupTable.set("TGG","W");
		this.codonLookupTable.set("CTT","L");
		this.codonLookupTable.set("CTC","L");
		this.codonLookupTable.set("CTA","L");
		this.codonLookupTable.set("CTG","L");
		this.codonLookupTable.set("CCT","P");
		this.codonLookupTable.set("CCC","P");
		this.codonLookupTable.set("CCA","P");
		this.codonLookupTable.set("CCG","P");
		this.codonLookupTable.set("CAT","H");
		this.codonLookupTable.set("CAC","H");
		this.codonLookupTable.set("CAA","Q");
		this.codonLookupTable.set("CAG","Q");
		this.codonLookupTable.set("CGT","R");
		this.codonLookupTable.set("CGC","R");
		this.codonLookupTable.set("CGA","R");
		this.codonLookupTable.set("CGG","R");
		this.codonLookupTable.set("ATT","I");
		this.codonLookupTable.set("ATC","I");
		this.codonLookupTable.set("ATA","I");
		this.codonLookupTable.set("ATG","M");
		this.codonLookupTable.set("ACT","T");
		this.codonLookupTable.set("ACC","T");
		this.codonLookupTable.set("ACA","T");
		this.codonLookupTable.set("ACG","T");
		this.codonLookupTable.set("AAT","N");
		this.codonLookupTable.set("AAC","N");
		this.codonLookupTable.set("AAA","K");
		this.codonLookupTable.set("AAG","K");
		this.codonLookupTable.set("AGT","S");
		this.codonLookupTable.set("AGC","S");
		this.codonLookupTable.set("AGA","R");
		this.codonLookupTable.set("AGG","R");
		this.codonLookupTable.set("GTT","V");
		this.codonLookupTable.set("GTC","V");
		this.codonLookupTable.set("GTA","V");
		this.codonLookupTable.set("GTG","V");
		this.codonLookupTable.set("GCT","A");
		this.codonLookupTable.set("GCC","A");
		this.codonLookupTable.set("GCA","A");
		this.codonLookupTable.set("GCG","A");
		this.codonLookupTable.set("GAT","D");
		this.codonLookupTable.set("GAC","D");
		this.codonLookupTable.set("GAA","E");
		this.codonLookupTable.set("GAG","E");
		this.codonLookupTable.set("GGT","G");
		this.codonLookupTable.set("GGC","G");
		this.codonLookupTable.set("GGA","G");
		this.codonLookupTable.set("GGG","G");
		var key = this.codonLookupTable.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			var aa = this.codonLookupTable.get(key1);
			if(!this.aaToCodonTable.exists(aa)) {
				this.aaToCodonTable.set(aa,new List());
			}
			this.aaToCodonTable.get(aa).add(key1);
		}
	}
	,__class__: saturn.core.StandardGeneticCode
});
saturn.core.GeneticCodes = $hxClasses["saturn.core.GeneticCodes"] = { __ename__ : ["saturn","core","GeneticCodes"], __constructs__ : ["STANDARD"] };
saturn.core.GeneticCodes.STANDARD = ["STANDARD",0];
saturn.core.GeneticCodes.STANDARD.toString = $estr;
saturn.core.GeneticCodes.STANDARD.__enum__ = saturn.core.GeneticCodes;
saturn.core.GeneticCodeRegistry = $hxClasses["saturn.core.GeneticCodeRegistry"] = function() {
	this.shortNameToCodeObj = new haxe.ds.StringMap();
	this.shortNameToCodeObj.set(Std.string(saturn.core.GeneticCodes.STANDARD),saturn.core.StandardGeneticCode.getDefaultInstance());
};
saturn.core.GeneticCodeRegistry.__name__ = ["saturn","core","GeneticCodeRegistry"];
saturn.core.GeneticCodeRegistry.getRegistry = function() {
	return saturn.core.GeneticCodeRegistry.CODE_REGISTRY;
};
saturn.core.GeneticCodeRegistry.getDefault = function() {
	return saturn.core.GeneticCodeRegistry.getRegistry().getGeneticCodeByEnum(saturn.core.GeneticCodes.STANDARD);
};
saturn.core.GeneticCodeRegistry.prototype = {
	shortNameToCodeObj: null
	,getGeneticCodeNames: function() {
		var nameList = new List();
		var key = this.shortNameToCodeObj.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			nameList.add(key1);
		}
		return nameList;
	}
	,getGeneticCodeByName: function(shortName) {
		if(!this.shortNameToCodeObj.exists(shortName)) {
			throw new js._Boot.HaxeError(new saturn.core.InvalidGeneticCodeException(shortName + " doesn't correspond to a genetic code in the main registry."));
		} else {
			return this.shortNameToCodeObj.get(shortName);
		}
	}
	,getGeneticCodeByEnum: function(code) {
		return this.getGeneticCodeByName(Std.string(code));
	}
	,__class__: saturn.core.GeneticCodeRegistry
};
saturn.core.InvalidGeneticCodeException = $hxClasses["saturn.core.InvalidGeneticCodeException"] = function(message) {
	saturn.util.HaxeException.call(this,message);
};
saturn.core.InvalidGeneticCodeException.__name__ = ["saturn","core","InvalidGeneticCodeException"];
saturn.core.InvalidGeneticCodeException.__super__ = saturn.util.HaxeException;
saturn.core.InvalidGeneticCodeException.prototype = $extend(saturn.util.HaxeException.prototype,{
	__class__: saturn.core.InvalidGeneticCodeException
});
saturn.core.InvalidCodonException = $hxClasses["saturn.core.InvalidCodonException"] = function(message) {
	saturn.util.HaxeException.call(this,message);
};
saturn.core.InvalidCodonException.__name__ = ["saturn","core","InvalidCodonException"];
saturn.core.InvalidCodonException.__super__ = saturn.util.HaxeException;
saturn.core.InvalidCodonException.prototype = $extend(saturn.util.HaxeException.prototype,{
	__class__: saturn.core.InvalidCodonException
});
saturn.core.DoubleDigest = $hxClasses["saturn.core.DoubleDigest"] = function(template,res1,res2) {
	this.theTemplate = template;
	this.theRes1 = res1;
	this.theRes2 = res2;
	if(template != null) {
		this.digest();
	}
	saturn.core.DNA.call(this,"");
};
saturn.core.DoubleDigest.__name__ = ["saturn","core","DoubleDigest"];
saturn.core.DoubleDigest.__super__ = saturn.core.DNA;
saturn.core.DoubleDigest.prototype = $extend(saturn.core.DNA.prototype,{
	theTemplate: null
	,theRes1: null
	,theRes2: null
	,leftProduct: null
	,centerProduct: null
	,rightProduct: null
	,setTemplate: function(template) {
		this.theTemplate = template;
	}
	,setRestrictionSite1: function(res1) {
		this.theRes1 = res1;
	}
	,setRestrictionSite2: function(res2) {
		this.theRes2 = res2;
	}
	,digest: function() {
		var cutSeq = this.theRes1.getAfterCutSequence(this.theTemplate);
		cutSeq = this.theRes2.getLastBeforeCutSequence(new saturn.core.DNA(cutSeq));
		this.centerProduct = new saturn.core.DNA(cutSeq);
		this.leftProduct = new saturn.core.DNA(this.theRes1.getBeforeCutSequence(this.theTemplate));
		this.rightProduct = new saturn.core.DNA(this.theRes2.getLastAfterCutSequence(this.theTemplate));
	}
	,getLeftProduct: function() {
		return this.leftProduct;
	}
	,getCenterProduct: function() {
		return this.centerProduct;
	}
	,getRightProduct: function() {
		return this.rightProduct;
	}
	,__class__: saturn.core.DoubleDigest
});
saturn.core.EUtils = $hxClasses["saturn.core.EUtils"] = function() {
};
saturn.core.EUtils.__name__ = ["saturn","core","EUtils"];
saturn.core.EUtils.getProteinsForGene = function(geneId,cb) {
	saturn.core.EUtils.getProteinGIsForGene(geneId,function(err,ids) {
		if(err != null) {
			cb(err,null);
		} else {
			saturn.core.EUtils.getProteinInfo(ids,true,function(err1,objs) {
				cb(err1,objs);
			});
		}
	});
};
saturn.core.EUtils.getProteinInfo = function(ids,lookupDNA,cb) {
	if(lookupDNA == null) {
		lookupDNA = false;
	}
	var c1 = saturn.core.EUtils.eutils.efetch({ db : "protein", id : ids, retmode : "xml"}).then(function(d) {
		if(!Reflect.hasField(d,"GBSet")) {
			var c11 = "Unable to retrieve proteins for  " + ids.toString();
			cb(c11,null);
			return;
		}
		var objs;
		if((d.GBSet.GBSeq instanceof Array) && d.GBSet.GBSeq.__enum__ == null) {
			objs = d.GBSet.GBSeq;
		} else {
			objs = [d.GBSet.GBSeq];
		}
		if(objs == null || objs.length == 0) {
			var c12 = "Unable to retrieve proteins for  " + ids.join(",");
			cb(c12,null);
			return;
		}
		var protObjs = [];
		var _g = 0;
		while(_g < objs.length) {
			var seqObj = objs[_g];
			++_g;
			var protein = new saturn.core.Protein(seqObj.GBSeq_sequence);
			protObjs.push(protein);
			protein.setMoleculeName(Reflect.field(seqObj,"GBSeq_accession-version"));
			if(Reflect.hasField(seqObj,"GBSeq_other-seqids")) {
				var seqIdElems = Reflect.field(Reflect.field(seqObj,"GBSeq_other-seqids"),"GBSeqid");
				var _g1 = 0;
				while(_g1 < seqIdElems.length) {
					var seqIdElem = seqIdElems[_g1];
					++_g1;
					var seqId = seqIdElem;
					if(seqId.indexOf("gi|") == 0) {
						protein.setAlternativeName(seqId);
						break;
					}
				}
			}
			if(Reflect.hasField(seqObj,"GBSeq_feature-table")) {
				var table = Reflect.field(seqObj,"GBSeq_feature-table");
				var features = table.GBFeature;
				var _g11 = 0;
				while(_g11 < features.length) {
					var feature = features[_g11];
					++_g11;
					if(feature.GBFeature_key == "CDS") {
						var feature_quals = feature.GBFeature_quals.GBQualifier;
						var _g2 = 0;
						while(_g2 < feature_quals.length) {
							var feature1 = feature_quals[_g2];
							++_g2;
							if(feature1.GBQualifier_name == "coded_by") {
								var acStr = feature1.GBQualifier_value;
								var parts = acStr.split(":");
								if(parts.length > 2) {
									var c13 = "Parts greater than two for  " + protein.getMoleculeName();
									cb(c13,null);
									return;
								} else {
									var dna = new saturn.core.DNA(null);
									var name = parts[0];
									dna.setMoleculeName(name);
									dna.addProtein("default",protein);
									protein.setReferenceCoordinates(parts[1]);
								}
							}
						}
					}
				}
			}
		}
		if(lookupDNA) {
			var dnaRefs = [];
			var _g3 = 0;
			while(_g3 < protObjs.length) {
				var protObj = protObjs[_g3];
				++_g3;
				dnaRefs.push(protObj.getDNA().getMoleculeName());
			}
			saturn.core.EUtils.getDNAForAccessions(dnaRefs,function(err,dnaObjs) {
				if(err != null) {
					cb(err,null);
				} else {
					var refMap = new haxe.ds.StringMap();
					var _g4 = 0;
					while(_g4 < dnaObjs.length) {
						var obj = dnaObjs[_g4];
						++_g4;
						refMap.set(obj.getMoleculeName(),obj);
					}
					var _g5 = 0;
					while(_g5 < protObjs.length) {
						var protObj1 = protObjs[_g5];
						++_g5;
						var dnaAccession = protObj1.getDNA().getMoleculeName();
						if(refMap.exists(dnaAccession)) {
							var dna1 = refMap.get(dnaAccession);
							protObj1.setDNA(dna1);
							var coords = protObj1.getReferenceCoordinates().split("..");
							if(coords.length > 2) {
								var c14 = "Invalid coordinate string for " + protObj1.getMoleculeName() + " " + protObj1.getReferenceCoordinates();
								cb(c14,null);
								return;
							}
							dna1.setSequence(dna1.getRegion(Std.parseInt(coords[0]),Std.parseInt(coords[1])));
							var protSeq = dna1.getFrameTranslation(saturn.core.GeneticCodes.STANDARD,saturn.core.Frame.ONE);
						} else {
							cb(dnaAccession + " not found",null);
							return;
						}
					}
					cb(null,protObjs);
				}
			});
		} else {
			cb(null,protObjs);
		}
	});
	c1.catch(function(d){cb(d)});
};
saturn.core.EUtils.getDNAForAccessions = function(accessions,cb) {
	var c1 = saturn.core.EUtils.eutils.efetch({ db : "nucleotide", id : accessions, retmode : "xml"}).then(function(d) {
		var objs;
		if((d.GBSet.GBSeq instanceof Array) && d.GBSet.GBSeq.__enum__ == null) {
			objs = d.GBSet.GBSeq;
		} else {
			objs = [d.GBSet.GBSeq];
		}
		if(objs == null || objs.length == 0) {
			var c11 = "Unable to retrieve proteins for  " + accessions.join(",");
			cb(c11,null);
			return;
		}
		var dnaObjs = [];
		var _g = 0;
		while(_g < objs.length) {
			var seqObj = objs[_g];
			++_g;
			var dna = new saturn.core.DNA(seqObj.GBSeq_sequence);
			dnaObjs.push(dna);
			dna.setMoleculeName(Reflect.field(seqObj,"GBSeq_accession-version"));
			if(Reflect.hasField(seqObj,"GBSeq_other-seqids")) {
				var seqIdElems = Reflect.field(Reflect.field(seqObj,"GBSeq_other-seqids"),"GBSeqid");
				var _g1 = 0;
				while(_g1 < seqIdElems.length) {
					var seqIdElem = seqIdElems[_g1];
					++_g1;
					var seqId = seqIdElem;
					if(seqId.indexOf("gi|") == 0) {
						dna.setAlternativeName(seqId);
						break;
					}
				}
			}
		}
		cb(null,dnaObjs);
	});
	c1.catch(function(d){cb(d)});
};
saturn.core.EUtils.getProteinGIsForGene = function(geneId,cb) {
	var c1 = saturn.core.EUtils.eutils.esearch({ db : "gene", term : geneId}).then(saturn.core.EUtils.eutils.elink({ dbto : "protein"})).then(function(d) {
		saturn.core.Util.debug("");
		var found = false;
		if(Reflect.hasField(d,"linksets")) {
			var linksets = d.linksets;
			if(linksets.length > 0) {
				if(Reflect.hasField(linksets[0],"linksetdbs")) {
					var linksetdbs = linksets[0].linksetdbs;
					if(linksetdbs.length > 0) {
						var _g = 0;
						while(_g < linksetdbs.length) {
							var set = linksetdbs[_g];
							++_g;
							if(set.linkname == "gene_protein_refseq") {
								var ids = set.links;
								cb(null,ids);
								found = true;
								break;
							}
						}
					}
				}
			}
		}
		if(!found) {
			cb("Unable to lookup gene entry " + geneId,null);
		}
	});
	c1.catch(function(d){cb(d)});
};
saturn.core.EUtils.insertProteins = function(objs,cb) {
	var run = null;
	run = function() {
		if(objs.length == 0) {
			return;
		}
		var protein = objs.pop();
		saturn.core.Util.debug("Inserting: " + protein.getMoleculeName());
		saturn.core.Protein.insertTranslation(protein.getDNA().getMoleculeName(),protein.getDNA().getAlternativeName(),protein.getDNA().getSequence(),"NUCLEOTIDE",protein.getMoleculeName(),protein.getAlternativeName(),protein.getSequence(),"PROTEIN","7158","GENE",function(err) {
			if(err != null) {
				saturn.core.Util.debug(err);
			} else {
				run();
			}
		});
	};
	run();
};
saturn.core.EUtils.getGeneInfo = function(geneId,cb) {
	saturn.core.Util.debug("Fetching gene record (tends to be very slow)");
	var c1 = saturn.core.EUtils.eutils.efetch({ db : "gene", id : geneId}).then(function(d) {
		var set1 = Reflect.field(d,"Entrezgene-Set");
		var set2 = Reflect.field(set1,"Entrezgene");
		var set3 = Reflect.field(set2,"Entrezgene_gene");
		var set4 = Reflect.field(set3,"Gene-ref");
		var c11 = Reflect.field(set4,"Gene-ref_locus");
		var c12 = Reflect.field(set4,"Gene-ref_desc");
		cb(null,{ symbol : c11, description : c12});
	});
	c1.catch(function(d){cb(d)});
};
saturn.core.EUtils.prototype = {
	__class__: saturn.core.EUtils
};
saturn.core.EntityType = $hxClasses["saturn.core.EntityType"] = function() {
};
saturn.core.EntityType.__name__ = ["saturn","core","EntityType"];
saturn.core.EntityType.prototype = {
	id: null
	,name: null
	,__class__: saturn.core.EntityType
};
saturn.core.FastaEntity = $hxClasses["saturn.core.FastaEntity"] = function(name,sequence) {
	this.theName = name;
	this.theSequence = sequence;
};
saturn.core.FastaEntity.__name__ = ["saturn","core","FastaEntity"];
saturn.core.FastaEntity.handleStrippedNewLines = function(line) {
	var blockSizeCounts = new haxe.ds.IntMap();
	var whiteBlocks = line.split(" ");
	var _g = 0;
	while(_g < whiteBlocks.length) {
		var whiteBlock = whiteBlocks[_g];
		++_g;
		if(!blockSizeCounts.exists(whiteBlock.length)) {
			blockSizeCounts.set(whiteBlock.length,0);
		}
		blockSizeCounts.set(whiteBlock.length,blockSizeCounts.get(whiteBlock.length) + 1);
	}
	var blockLen = 0;
	var blockSizeCountMax = -1;
	var len = blockSizeCounts.keys();
	while(len.hasNext()) {
		var len1 = len.next();
		var blockSizeCount = blockSizeCounts.get(len1);
		if(blockSizeCountMax < blockSizeCount) {
			blockSizeCountMax = blockSizeCount;
			blockLen = len1;
		}
	}
	var lines = [];
	whiteBlocks.reverse();
	lines.unshift(whiteBlocks.shift());
	var header = "";
	var _g1 = 0;
	while(_g1 < whiteBlocks.length) {
		var whiteBlock1 = whiteBlocks[_g1];
		++_g1;
		if(whiteBlock1.length == blockLen) {
			lines.unshift(whiteBlock1);
		} else {
			header = whiteBlock1 + " " + header;
		}
	}
	lines.unshift(header);
	return lines;
};
saturn.core.FastaEntity.parseFasta = function(contents) {
	var seqObjs = [];
	var currentName = null;
	var currentSeqBuf = new StringBuf();
	var lines = contents.split("\n");
	if(lines.length == 1) {
		lines = saturn.core.FastaEntity.handleStrippedNewLines(lines[0]);
	}
	var numLines = lines.length;
	var _g1 = 0;
	var _g = numLines;
	while(_g1 < _g) {
		var i = _g1++;
		var seqLine = true;
		var line = lines[i];
		if(line.indexOf(">") > -1) {
			seqLine = false;
		}
		if(seqLine == true) {
			currentSeqBuf.add(line);
		}
		if(seqLine == false || i == numLines - 1) {
			if(currentName != null) {
				var currentSeq = currentSeqBuf.toString();
				if(currentSeq.length > 0) {
					seqObjs.push(new saturn.core.FastaEntity(HxOverrides.substr(currentName,1,currentName.length),currentSeq));
					currentSeqBuf = new StringBuf();
				}
			}
			if(seqLine == false) {
				currentName = line;
			}
		}
	}
	return seqObjs;
};
saturn.core.FastaEntity.formatFastaFile = function(header,sequence) {
	var buf = new StringBuf();
	buf.add(">" + header + "\n");
	var sequenceLength = sequence.length - 1;
	var i = 0;
	while(true) {
		var j = i + 50;
		if(j > sequenceLength) {
			j = sequenceLength + 1;
		}
		js.Browser.get_window().console.log("Hello" + i + "/" + j);
		buf.add(sequence.substring(i,j) + "\n");
		i = j;
		if(i >= sequenceLength + 1) {
			break;
		}
	}
	return buf.toString();
};
saturn.core.FastaEntity.prototype = {
	theName: null
	,theSequence: null
	,getName: function() {
		return this.theName;
	}
	,getSequence: function() {
		return this.theSequence;
	}
	,append: function(sequence) {
		this.theSequence += sequence;
	}
	,guessType: function() {
		var c = 0;
		var l = 1;
		var sLen = this.theSequence.length;
		var pos = 0;
		while(sLen > pos) {
			var res = this.theSequence.charAt(pos);
			if(!saturn.core.FastaEntity.DNA_CHARS.exists(res)) {
				++c;
				if(c > l) {
					return saturn.core.FastaEntryType.PROTEIN;
				}
			}
			++pos;
		}
		return saturn.core.FastaEntryType.DNA;
	}
	,__class__: saturn.core.FastaEntity
};
saturn.core.FastaEntryType = $hxClasses["saturn.core.FastaEntryType"] = { __ename__ : ["saturn","core","FastaEntryType"], __constructs__ : ["DNA","PROTEIN"] };
saturn.core.FastaEntryType.DNA = ["DNA",0];
saturn.core.FastaEntryType.DNA.toString = $estr;
saturn.core.FastaEntryType.DNA.__enum__ = saturn.core.FastaEntryType;
saturn.core.FastaEntryType.PROTEIN = ["PROTEIN",1];
saturn.core.FastaEntryType.PROTEIN.toString = $estr;
saturn.core.FastaEntryType.PROTEIN.__enum__ = saturn.core.FastaEntryType;
saturn.core.FileShim = $hxClasses["saturn.core.FileShim"] = function(name,base64) {
	this.name = name;
	this.base64 = base64;
};
saturn.core.FileShim.__name__ = ["saturn","core","FileShim"];
saturn.core.FileShim.prototype = {
	name: null
	,base64: null
	,getAsText: function() {
		return js.Browser.get_window().atob(this.base64);
	}
	,getAsArrayBuffer: function() {
		var bstr = js.Browser.get_window().atob(this.base64);
		var buffer = new Uint8Array(bstr.length);
		var _g1 = 0;
		var _g = bstr.length;
		while(_g1 < _g) {
			var i = _g1++;
			buffer[i] = HxOverrides.cca(bstr,i);
		}
		return buffer;
	}
	,__class__: saturn.core.FileShim
};
saturn.core.Generator = $hxClasses["saturn.core.Generator"] = function(limit) {
	this.limit = limit;
	this.processed = 0;
	this.done = false;
	this.items = [];
	this.maxAtOnce = 1;
};
saturn.core.Generator.__name__ = ["saturn","core","Generator"];
saturn.core.Generator.prototype = {
	limit: null
	,processed: null
	,done: null
	,cb: null
	,endCb: null
	,maxAtOnce: null
	,items: null
	,push: function(item) {
		this.items.push(item);
	}
	,pop: function(item) {
		return this.items.pop();
	}
	,die: function(err) {
		saturn.core.Util.debug(err);
		this.stop(err);
	}
	,stop: function(err) {
		this.finished();
		this.endCb(err);
	}
	,next: function() {
		var _gthis = this;
		if(this.done && this.items.length == 0 || this.limit != -1 && this.processed == this.limit) {
			this.endCb(null);
			return;
		} else if(this.items.length > 0) {
			if(this.maxAtOnce != 1) {
				var list = [];
				var added = 0;
				while(this.items.length > 0) {
					var item = this.items.pop();
					list.push(item);
					this.processed++;
					++added;
					if(added == this.maxAtOnce) {
						break;
					}
				}
				this.cb(list,function() {
					haxe.Timer.delay($bind(_gthis,_gthis.next),1);
				},this);
			} else {
				var item1 = this.items.pop();
				this.processed++;
				this.cb(item1,function() {
					haxe.Timer.delay($bind(_gthis,_gthis.next),1);
				},this);
			}
		} else {
			saturn.core.Util.debug("waiting");
			haxe.Timer.delay($bind(this,this.next),100);
		}
	}
	,count: function() {
		return this.processed;
	}
	,setMaxAtOnce: function(maxAtOnce) {
		this.maxAtOnce = maxAtOnce;
	}
	,setLimit: function(limit) {
		this.limit = limit;
	}
	,onEnd: function(cb) {
		this.endCb = cb;
	}
	,onNext: function(cb) {
		this.cb = cb;
		this.next();
	}
	,finished: function() {
		this.done = true;
	}
	,__class__: saturn.core.Generator
};
saturn.core.GridVar = $hxClasses["saturn.core.GridVar"] = function() {
	this.configCollapse = false;
	this.fit = true;
	this.padding = true;
	this.xCellSize = 10;
	this.showXLabels = true;
	this.styleTableDefinition = { columnDefs : [{ text : "Annotation Group", dataIndex : "data_type", editor : "textfield"},{ text : "Annotation Label", dataIndex : "label", editor : "textfield"},{ text : "Apply to rows", dataIndex : "columns", editor : "textfield"},{ text : "Mapping Value", dataIndex : "mapping", editor : "textfield"},{ text : "Color", dataIndex : "color", editor : "textfield"},{ text : "Style", dataIndex : "style", editor : "textfield"}], title : "Styles", data : [], raw : null};
	this.dataTableDefinition = { title : "Raw Data", data : [], columnDefs : [{ text : "Position", dataIndex : "position", editor : "textfield"},{ text : "Domain", dataIndex : "Domain", editor : "textfield"}], raw : null};
	this.annotationTableDefinition = { columnDefs : [{ text : "Start", dataIndex : "start", editor : "textfield"},{ text : "Stop", dataIndex : "stop", editor : "textfield"},{ text : "Value", dataIndex : "value", editor : "textfield"},{ text : "Row", dataIndex : "column", editor : "textfield"}], title : "Annotations", data : [], raw : null};
};
saturn.core.GridVar.__name__ = ["saturn","core","GridVar"];
saturn.core.GridVar.prototype = {
	dataTableDefinition: null
	,styleTableDefinition: null
	,annotationTableDefinition: null
	,fileContent: null
	,showXLabels: null
	,xCellSize: null
	,padding: null
	,fit: null
	,configCollapse: null
	,lines: null
	,setShowXLabels: function(show) {
		this.showXLabels = show;
	}
	,setFit: function(fit) {
		this.fit = fit;
	}
	,addStyle: function(label,group,styleCode,styleShape,styleColour,columns) {
		if(columns == null) {
			columns = "*";
		}
		this.styleTableDefinition.data.push({ data_type : group, mapping : styleCode, style : styleShape, color : styleColour, label : label, columns : columns});
	}
	,setLength: function(length) {
		this.dataTableDefinition.data = [];
		if(this.dataTableDefinition.columnDefs.length == 0) {
			this.dataTableDefinition.columnDefs.push({ dataIndex : "position", editor : "textfield", text : "Position"});
		}
		var _g1 = 0;
		var _g = length;
		while(_g1 < _g) {
			var i = _g1++;
			var obj = { };
			var j = 0;
			var _g2 = 0;
			var _g3 = this.dataTableDefinition.columnDefs;
			while(_g2 < _g3.length) {
				var columnDef = _g3[_g2];
				++_g2;
				if(j == 0) {
					Reflect.setField(obj,columnDef.dataIndex,i);
				} else {
					Reflect.setField(obj,columnDef.dataIndex,null);
				}
				++j;
			}
			this.dataTableDefinition.data.push(obj);
		}
	}
	,setSequence: function(sequence) {
		this.dataTableDefinition.data = [];
		if(this.dataTableDefinition.columnDefs.length == 0) {
			this.dataTableDefinition.columnDefs.push({ dataIndex : "position", editor : "textfield", text : "Position"});
		}
		var _g1 = 0;
		var _g = sequence.length;
		while(_g1 < _g) {
			var i = _g1++;
			var obj = { };
			var j = 0;
			var _g2 = 0;
			var _g3 = this.dataTableDefinition.columnDefs;
			while(_g2 < _g3.length) {
				var columnDef = _g3[_g2];
				++_g2;
				if(j == 0) {
					Reflect.setField(obj,columnDef.dataIndex,sequence.charAt(i));
				} else {
					Reflect.setField(obj,columnDef.dataIndex,null);
				}
				++j;
			}
			this.dataTableDefinition.data.push(obj);
		}
	}
	,addAnnotation: function(type,start,stop,styleCode) {
		if(stop > this.dataTableDefinition.data.length) {
			throw new js._Boot.HaxeError(new saturn.util.HaxeException("Annotation stop coordinate is larger than the table dimension"));
		}
		var _g1 = start;
		var _g = stop;
		while(_g1 < _g) {
			var i = _g1++;
			Reflect.setField(this.dataTableDefinition.data[i],type,styleCode);
		}
		var match = false;
		var _g2 = 0;
		var _g11 = this.dataTableDefinition.columnDefs;
		while(_g2 < _g11.length) {
			var columnDef = _g11[_g2];
			++_g2;
			if(Reflect.field(columnDef,"dataIndex") == type) {
				match = true;
				break;
			}
		}
		this.annotationTableDefinition.data.push({ start : start, stop : stop, value : styleCode, column : type});
		if(!match) {
			this.dataTableDefinition.columnDefs.push({ dataIndex : type, editor : "textfield", text : type});
		}
	}
	,setStyle: function(annotationKey,colour,value,styleName,styleGroup) {
		var _g1 = 0;
		var _g = this.dataTableDefinition.data.length;
		while(_g1 < _g) {
			var j = _g1++;
			if(Reflect.field(this.dataTableDefinition.data[j],annotationKey) == 1) {
				Reflect.setField(this.dataTableDefinition.data[j],annotationKey,value);
			}
		}
		this.addStyle(styleName,styleGroup,value,"rec",colour,"*");
	}
	,__class__: saturn.core.GridVar
};
saturn.core.Home = $hxClasses["saturn.core.Home"] = function() {
};
saturn.core.Home.__name__ = ["saturn","core","Home"];
saturn.core.Home.prototype = {
	__class__: saturn.core.Home
};
saturn.core.Ligation = $hxClasses["saturn.core.Ligation"] = function(acceptor,donor) {
	this.theAcceptor = acceptor;
	this.theDonor = donor;
	saturn.core.DNA.call(this,"");
	this.calculateProduct();
};
saturn.core.Ligation.__name__ = ["saturn","core","Ligation"];
saturn.core.Ligation.__super__ = saturn.core.DNA;
saturn.core.Ligation.prototype = $extend(saturn.core.DNA.prototype,{
	theAcceptor: null
	,theDonor: null
	,setAcceptor: function(acceptor) {
		this.theAcceptor = acceptor;
	}
	,setDonor: function(donor) {
		this.theDonor = donor;
	}
	,calculateProduct: function() {
		if(this.theAcceptor != null && this.theDonor != null && this.theAcceptor.getLeftProduct() != null && this.theDonor.getCenterProduct() != null && this.theAcceptor.getRightProduct() != null) {
			this.setSequence(this.theAcceptor.getLeftProduct().getSequence() + this.theDonor.getCenterProduct().getSequence() + this.theAcceptor.getRightProduct().getSequence());
		}
	}
	,__class__: saturn.core.Ligation
});
saturn.core.LocusPosition = $hxClasses["saturn.core.LocusPosition"] = function() {
};
saturn.core.LocusPosition.__name__ = ["saturn","core","LocusPosition"];
saturn.core.LocusPosition.prototype = {
	start: null
	,end: null
	,missMatchPositions: null
	,__class__: saturn.core.LocusPosition
};
saturn.core.MSA = $hxClasses["saturn.core.MSA"] = function(msaMap,seqOrder) {
	this.blockSize = 60;
	if(msaMap == null) {
		this.idToAlnStr = new haxe.ds.StringMap();
	} else {
		this.idToAlnStr = msaMap;
	}
	if(seqOrder == null) {
		seqOrder = [];
	} else {
		this.seqOrder = seqOrder;
	}
	this.calculateStats();
};
saturn.core.MSA.__name__ = ["saturn","core","MSA"];
saturn.core.MSA.padString = function(text,padLen) {
	var buf = new StringBuf();
	buf.add(text);
	var _g1 = 0;
	var _g = padLen - text.length;
	while(_g1 < _g) {
		var i = _g1++;
		buf.add(" ");
	}
	return buf.toString();
};
saturn.core.MSA.prototype = {
	idToAlnStr: null
	,seqOrder: null
	,psi: null
	,blockSize: null
	,getAlignmentRegion: function() {
		var lines = [];
		var _g = 0;
		var _g1 = this.seqOrder;
		while(_g < _g1.length) {
			var id = _g1[_g];
			++_g;
			if(id != " ") {
				lines.push(this.idToAlnStr.get(id));
			}
		}
		return lines;
	}
	,fetchNucAlignmentToResidue: function(queryName,residueNumber,targetName) {
		if(!this.idToAlnStr.exists(queryName)) {
			throw new js._Boot.HaxeError(new saturn.util.HaxeException("Invalid sequence name"));
		}
		var alignmentString = this.idToAlnStr.get(queryName);
		var realPosition = -1;
		var _g1 = 0;
		var _g = alignmentString.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(alignmentString.charAt(i) != "-") {
				++realPosition;
				if(residueNumber < 0) {
					var j = i + residueNumber;
					if(j < 0) {
						throw new js._Boot.HaxeError(new saturn.util.HaxeException(residueNumber + "isn't within the alignment"));
					} else {
						return this.fetchNucAtAlignmentColumn(j,targetName);
					}
				} else if(realPosition == residueNumber) {
					return this.fetchNucAtAlignmentColumn(i,targetName);
				}
			}
		}
		throw new js._Boot.HaxeError(new saturn.util.HaxeException(residueNumber + " not found for " + queryName));
	}
	,fetchNucAtAlignmentColumn: function(column,name) {
		if(!this.idToAlnStr.exists(name)) {
			throw new js._Boot.HaxeError(new saturn.util.HaxeException("Invalid sequence name"));
		}
		var alignmentString = this.idToAlnStr.get(name);
		if(alignmentString.length < column) {
			throw new js._Boot.HaxeError(new saturn.util.HaxeException("" + column + " out of range 0..." + (alignmentString.length - 1)));
		}
		return alignmentString.charAt(column);
	}
	,calculateStats: function() {
		if(this.idToAlnStr.exists(" ")) {
			var idCount = 0;
			var idLine = this.idToAlnStr.get(" ");
			var _g1 = 0;
			var _g = idLine.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(idLine.charAt(i) == "*") {
					++idCount;
				}
			}
			this.psi = idCount / idLine.length;
		}
	}
	,getPSI: function() {
		return this.psi;
	}
	,inverseComplement: function() {
		var id = this.idToAlnStr.keys();
		while(id.hasNext()) {
			var id1 = id.next();
			var alnStr = this.idToAlnStr.get(id1);
			var i = alnStr.length;
			var ic = new StringBuf();
			while(i > -1) {
				var c = alnStr.charAt(i);
				if(c == "A") {
					c = "T";
				} else if(c == "T") {
					c = "A";
				} else if(c == "C") {
					c = "G";
				} else if(c == "G") {
					c = "C";
				}
				ic.add(c);
				--i;
			}
			this.idToAlnStr.set(id1,ic.toString());
		}
	}
	,getSequence: function(name) {
		if(this.idToAlnStr.exists(name)) {
			var sequence = this.idToAlnStr.get(name);
			sequence = StringTools.replace(sequence,"-","");
			return sequence;
		} else {
			return "";
		}
	}
	,getAlignment: function(name) {
		if(this.idToAlnStr.exists(name)) {
			var sequence = this.idToAlnStr.get(name);
			return sequence;
		} else {
			return "";
		}
	}
	,getFirstSequence: function() {
		return this.getSequence(this.seqOrder[0]);
	}
	,getFirstName: function() {
		return this.seqOrder[0];
	}
	,toString: function() {
		var maxIdLen = -1;
		var id = this.idToAlnStr.keys();
		while(id.hasNext()) {
			var id1 = id.next();
			if(id1.length > maxIdLen) {
				maxIdLen = id1.length;
			}
		}
		var idToPadId = new haxe.ds.StringMap();
		var id2 = this.idToAlnStr.keys();
		while(id2.hasNext()) {
			var id3 = id2.next();
			idToPadId.set(id3,saturn.core.MSA.padString(id3,maxIdLen));
		}
		var buf = new StringBuf();
		buf.add("CLUSTAL O(1.2.0) multiple sequence alignment\n\n\n");
		var i = 0;
		var l = this.idToAlnStr.get(this.seqOrder[0]).length;
		while(true) {
			var _g = 0;
			var _g1 = this.seqOrder;
			while(_g < _g1.length) {
				var id4 = _g1[_g];
				++_g;
				buf.add(idToPadId.get(id4) + "      " + HxOverrides.substr(this.idToAlnStr.get(id4),i,this.blockSize) + "\n");
			}
			i += this.blockSize;
			if(i > l - 1) {
				break;
			}
		}
		buf.add("\n\n");
		return buf.toString();
	}
	,toGrid: function() {
		var g = new saturn.core.GridVar();
		var baseItem = this.getFirstName();
		var baseSequence = this.getAlignment(baseItem);
		var overlaps = [];
		g.dataTableDefinition.raw = this;
		var alns = [];
		var columnOrder = [];
		var _g1 = 0;
		var _g = this.seqOrder.length - 1;
		while(_g1 < _g) {
			var i = _g1++;
			var column = this.seqOrder[i];
			if(column != baseItem) {
				columnOrder.push(column);
				alns.push(this.getAlignment(column));
				g.dataTableDefinition.columnDefs.unshift({ text : column, dataIndex : column, editor : "textfield"});
			}
		}
		g.addStyle("Aligned","Styles","1","rec","grey","*");
		g.dataTableDefinition.columnDefs.unshift({ text : baseItem, dataIndex : "residue", editor : "textfield"});
		var _g11 = 0;
		var _g2 = baseSequence.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var $char = baseSequence.charAt(i1);
			if($char != "-") {
				var row = { "residue" : $char};
				var _g3 = 0;
				var _g21 = columnOrder.length;
				while(_g3 < _g21) {
					var j = _g3++;
					if(alns[j].charAt(i1) != "-") {
						Reflect.setField(row,columnOrder[j],"1");
					}
				}
				g.dataTableDefinition.data.push(row);
			}
		}
		return g;
	}
	,__class__: saturn.core.MSA
};
saturn.core.TableHelperData = $hxClasses["saturn.core.TableHelperData"] = function(objs) {
	this.data = [];
	if(objs != null) {
		this.setObjects(objs);
	}
};
saturn.core.TableHelperData.__name__ = ["saturn","core","TableHelperData"];
saturn.core.TableHelperData.__interfaces__ = [saturn.client.programs.TableHelperModelData];
saturn.core.TableHelperData.prototype = {
	data: null
	,modelsToCopy: null
	,models: null
	,objs: null
	,getRawModels: function() {
		return null;
	}
	,setRawModels: function(models) {
		return;
	}
	,setData: function(obj) {
		this.data = obj;
	}
	,setModelsToCopy: function(models) {
		this.modelsToCopy = models;
	}
	,getModelsToCopy: function() {
		return this.modelsToCopy;
	}
	,setModels: function(models) {
		this.models = models;
	}
	,getModels: function() {
		return this.models;
	}
	,getData: function(obj) {
		return this.data;
	}
	,setObjects: function(objs) {
		this.objs = objs;
	}
	,getObjects: function() {
		return this.objs;
	}
	,__class__: saturn.core.TableHelperData
};
saturn.core.MultiAlleleHelperData = $hxClasses["saturn.core.MultiAlleleHelperData"] = function() {
	this.data = [];
	saturn.core.TableHelperData.call(this);
};
saturn.core.MultiAlleleHelperData.__name__ = ["saturn","core","MultiAlleleHelperData"];
saturn.core.MultiAlleleHelperData.__super__ = saturn.core.TableHelperData;
saturn.core.MultiAlleleHelperData.prototype = $extend(saturn.core.TableHelperData.prototype,{
	setPlateName: function(plateName) {
		this.data.plateName = plateName;
	}
	,getPlateName: function() {
		return this.data.plateName;
	}
	,__class__: saturn.core.MultiAlleleHelperData
});
saturn.core.MultiConstructHelperData = $hxClasses["saturn.core.MultiConstructHelperData"] = function() {
	this.data = [];
	saturn.core.TableHelperData.call(this);
};
saturn.core.MultiConstructHelperData.__name__ = ["saturn","core","MultiConstructHelperData"];
saturn.core.MultiConstructHelperData.__super__ = saturn.core.TableHelperData;
saturn.core.MultiConstructHelperData.prototype = $extend(saturn.core.TableHelperData.prototype,{
	plateName: null
	,rawModels: null
	,setPlateName: function(plateName) {
		this.plateName = plateName;
	}
	,getPlateName: function() {
		return this.plateName;
	}
	,getRawModels: function() {
		return this.rawModels;
	}
	,setRawModels: function(models) {
		this.rawModels = models;
	}
	,__class__: saturn.core.MultiConstructHelperData
});
saturn.core.PDBParser = $hxClasses["saturn.core.PDBParser"] = function() {
};
saturn.core.PDBParser.__name__ = ["saturn","core","PDBParser"];
saturn.core.PDBParser.extractPDBID = function(fileName) {
	return fileName;
};
saturn.core.PDBParser.getExpression = function(fileContent,pdbCode,outFd) {
	var lines = fileContent.split("\n");
	var molToChain = new haxe.ds.StringMap();
	var attributes = new haxe.ds.StringMap();
	var readingChains = false;
	attributes.set("SOURCE",new haxe.ds.StringMap());
	attributes.set("CHAINS",new haxe.ds.StringMap());
	attributes.set("PDB_CODE",pdbCode);
	var currentMolId = "-1";
	var srcMolId = "-1";
	var _g = 0;
	while(_g < lines.length) {
		var line = lines[_g];
		++_g;
		var type = HxOverrides.substr(line,0,6);
		type = saturn.core.PDBParser.whiteSpaceReg.replace(type,"");
		var desc = HxOverrides.substr(line,10,70);
		if(type == "SOURCE") {
			if(saturn.core.PDBParser.reg_mol_id.match(desc)) {
				srcMolId = saturn.core.PDBParser.reg_mol_id.matched(1);
				srcMolId = saturn.core.PDBParser.whiteSpaceReg.replace(srcMolId,"");
				attributes.get("SOURCE").set(srcMolId,new haxe.ds.StringMap());
				continue;
			}
		}
		if(type == "REVDAT") {
			var modType = HxOverrides.substr(line,31,1);
			if(modType == "0") {
				var relDate = line.substring(13,22);
				attributes.set("RELDATE",relDate);
			}
		}
		if(saturn.core.PDBParser.attribute_to_regex.exists(type)) {
			var attribute_name = saturn.core.PDBParser.attribute_to_regex.get(type).keys();
			while(attribute_name.hasNext()) {
				var attribute_name1 = attribute_name.next();
				var regex = saturn.core.PDBParser.attribute_to_regex.get(type).get(attribute_name1);
				if(type == "SOURCE") {
					if(regex.match(desc)) {
						var attribute_value = regex.matched(1);
						if(type == "SOURCE") {
							console.log(srcMolId);
							attributes.get("SOURCE").get(srcMolId).set(attribute_name1,attribute_value);
						}
					}
				} else if(regex.match(line)) {
					var attribute_value1 = regex.matched(1);
					if(attributes.exists(attribute_name1)) {
						attributes.set(attribute_name1,Std.string(attributes.get(attribute_name1)) + attribute_value1);
					} else {
						attributes.set(attribute_name1,attribute_value1);
					}
				}
			}
		} else if(saturn.core.PDBParser.attribute_to_range.exists(type)) {
			if(type == "REMARK") {
				var remark_id = HxOverrides.substr(line,7,9);
				remark_id = saturn.core.PDBParser.whiteSpaceReg.replace(remark_id,"");
				type = type + ":" + remark_id;
			}
			var attribute_name2 = saturn.core.PDBParser.attribute_to_range.get(type).keys();
			while(attribute_name2.hasNext()) {
				var attribute_name3 = attribute_name2.next();
				var regex1 = saturn.core.PDBParser.attribute_to_range.get(type).get(attribute_name3).get("REGEX");
				var tmp = regex1 != null;
				var start = saturn.core.PDBParser.attribute_to_range.get(type).get(attribute_name3).get("START");
				var stop = saturn.core.PDBParser.attribute_to_range.get(type).get(attribute_name3).get("STOP");
				var attribute_value2 = line.substring(start,stop);
				attribute_value2 = saturn.core.PDBParser.re_terminalWhiteSpace.replace(attribute_value2,"");
				if(attributes.exists(attribute_name3)) {
					attributes.set(attribute_name3,Std.string(attributes.get(attribute_name3)) + attribute_value2);
				} else {
					attributes.set(attribute_name3,attribute_value2);
				}
			}
		} else if(type == "COMPND") {
			var desc1 = HxOverrides.substr(line,10,70);
			if(saturn.core.PDBParser.reg_mol_id.match(desc1)) {
				var molId = saturn.core.PDBParser.reg_mol_id.matched(1);
				currentMolId = saturn.core.PDBParser.whiteSpaceReg.replace(molId,"");
				molToChain.set(currentMolId,[]);
				readingChains = false;
			} else {
				var chainStr = "";
				if(readingChains) {
					chainStr = line.substring(10,80);
				} else if(saturn.core.PDBParser.reg_mol_chains.match(desc1)) {
					chainStr = saturn.core.PDBParser.reg_mol_chains.matched(1);
				} else {
					continue;
				}
				readingChains = line.indexOf(";") == -1;
				var chainList = [];
				if(chainStr.indexOf(",") != -1) {
					chainList = chainStr.split(",");
					var _g2 = 0;
					var _g1 = chainList.length;
					while(_g2 < _g1) {
						var i = _g2++;
						chainList[i] = saturn.core.PDBParser.whiteSpaceReg.replace(chainList[i],"");
					}
				} else {
					chainList.push(saturn.core.PDBParser.whiteSpaceReg.replace(chainStr,""));
				}
				var _g21 = 0;
				var _g11 = chainList.length;
				while(_g21 < _g11) {
					var i1 = _g21++;
					molToChain.get(currentMolId).push(chainList[i1]);
					attributes.get("CHAINS").set(chainList[i1],currentMolId);
				}
			}
		} else if(type == "ATOM  " || type == "HETATM") {
			break;
		}
	}
	if(outFd != null) {
		var keyIt = attributes.get("CHAINS").keys();
		var chain = keyIt;
		while(chain.hasNext()) {
			var chain1 = chain.next();
			var molId1 = attributes.get("CHAINS").get(chain1);
			outFd.writeString(pdbCode + "~" + chain1 + "~" + molId1 + "~" + Std.string(attributes.get("DEPOSITION_DATE")) + "~" + Std.string(attributes.get("HIGH_RES")) + "~" + Std.string(attributes.get("EXP_TYPE")) + "~" + StringTools.replace(attributes.get("TITLE"),"~","-") + "~" + Std.string(attributes.get("AUTHOR")));
			if(attributes.get("SOURCE").exists(molId1)) {
				var source_def = attributes.get("SOURCE").get(molId1);
				var _g3 = 0;
				var _g12 = saturn.core.PDBParser.sourceOrder;
				while(_g3 < _g12.length) {
					var col = _g12[_g3];
					++_g3;
					if(source_def.exists(col)) {
						outFd.writeString("~" + source_def.get(col));
					} else {
						outFd.writeString("~-");
					}
				}
			} else {
				var _g4 = 0;
				var _g13 = saturn.core.PDBParser.sourceOrder;
				while(_g4 < _g13.length) {
					var col1 = _g13[_g4];
					++_g4;
					outFd.writeString("~-");
				}
			}
			outFd.writeString("~" + Std.string(attributes.get("RELDATE")));
			outFd.writeString("\n");
		}
	}
	return attributes;
};
saturn.core.PDBParser.getSequences = function(fileContent,pdbCode,fastaFd) {
	var lines = fileContent.split("\n");
	var lastResNum = "-1A";
	var lastChain = "0000000";
	var chainsSeen = new haxe.ds.StringMap();
	var seqResChains = new haxe.ds.StringMap();
	var skipping = false;
	var atomReached = false;
	var fastaObjs = [];
	var fastaEntity = null;
	var first = true;
	var _g = 0;
	while(_g < lines.length) {
		var line = lines[_g];
		++_g;
		var type = HxOverrides.substr(line,0,6);
		if(atomReached == false && type == "SEQRES") {
			var chain = HxOverrides.substr(line,11,1);
			if(chain != lastChain) {
				if(first) {
					first = false;
				} else if(fastaFd != null) {
					fastaFd.writeString("\n");
				}
				lastChain = chain;
				seqResChains.set(chain,"Y");
				if(fastaEntity != null) {
					fastaObjs.push(fastaEntity);
				}
				if(fastaFd == null) {
					fastaEntity = new saturn.core.FastaEntity(">" + pdbCode + "_S_" + chain + "\n","");
				} else {
					fastaFd.writeString(">" + pdbCode + "_S_" + chain + "\n");
				}
			}
			var resListStr = HxOverrides.substr(line,19,51);
			var resStrs = saturn.core.PDBParser.whiteSpaceReg.split(resListStr);
			var _g1 = 0;
			while(_g1 < resStrs.length) {
				var resName = resStrs[_g1];
				++_g1;
				if(resName == null || resName == "") {
					continue;
				}
				var singleResName = saturn.core.PDBParser.pdb3To1.get(resName);
				if(singleResName == null) {
					singleResName = "X";
				}
				if(fastaFd == null) {
					fastaEntity.append(singleResName);
				} else {
					fastaFd.writeString(singleResName);
				}
			}
		}
		if(type == "TER   ") {
			lastChain = "0000000";
		}
		if(type == "ATOM  " || type == "HETATM") {
			if(atomReached == false) {
				lastChain = "0000000";
				atomReached = true;
			}
			var resNum = HxOverrides.substr(line,22,4);
			if(lastResNum != resNum) {
				lastResNum = resNum;
			} else {
				continue;
			}
			var chain1 = HxOverrides.substr(line,21,1);
			if(lastChain != chain1) {
				lastChain = chain1;
				if(chainsSeen.exists(chain1) || !seqResChains.exists(chain1)) {
					skipping = true;
					continue;
				} else {
					skipping = false;
				}
				chainsSeen.set(chain1,"Y");
				var chain2 = saturn.core.PDBParser.whiteSpaceReg.replace(chain1,"");
				var resNum1 = saturn.core.PDBParser.whiteSpaceReg.replace(resNum,"");
				if(first) {
					first = false;
				} else if(fastaFd != null) {
					fastaFd.writeString("\n");
				}
				if(fastaFd != null) {
					fastaFd.writeString(">" + pdbCode + "_A_" + chain2 + "_" + resNum1 + "\n");
				} else {
					if(fastaEntity != null) {
						fastaObjs.push(fastaEntity);
					}
					fastaEntity = new saturn.core.FastaEntity(">" + pdbCode + "_A_" + chain2 + "_" + resNum1 + "\n","");
				}
			}
			if(skipping == false) {
				var resName1 = HxOverrides.substr(line,17,3);
				var singleResName1 = saturn.core.PDBParser.pdb3To1.get(resName1);
				if(singleResName1 == null) {
					singleResName1 = "X";
				}
				if(fastaFd != null) {
					fastaFd.writeString(singleResName1);
				} else {
					fastaEntity.append(singleResName1);
				}
			}
		}
	}
	if(fastaFd != null) {
		fastaFd.writeString("\n");
	}
	fastaObjs.push(fastaEntity);
	return fastaObjs;
};
saturn.core.PDBParser.prototype = {
	__class__: saturn.core.PDBParser
};
saturn.core.Primer = $hxClasses["saturn.core.Primer"] = function(nucSeq) {
	this.val_extInFrame = false;
	this.extLength = -1;
	saturn.core.DNA.call(this,nucSeq);
	this.setSequence(nucSeq);
};
saturn.core.Primer.__name__ = ["saturn","core","Primer"];
saturn.core.Primer.__super__ = saturn.core.DNA;
saturn.core.Primer.prototype = $extend(saturn.core.DNA.prototype,{
	extLength: null
	,val_extInFrame: null
	,theType: null
	,set5PrimeExtensionLength: function(length) {
		this.extLength = length;
	}
	,get5PrimeExtensionLength: function() {
		return this.extLength;
	}
	,set5PrimeExtension: function(extNucSeq) {
		var rawPrimer = this.getSequence();
		if(rawPrimer == null) {
			rawPrimer = "";
		}
		this.setSequence(extNucSeq + rawPrimer);
		this.set5PrimeExtensionLength(extNucSeq.length);
	}
	,has5PrimeExtension: function() {
		if(this.extLength > 0) {
			return true;
		} else {
			return false;
		}
	}
	,get5PrimeExtensionSequence: function() {
		if(this.extLength > -1) {
			return HxOverrides.substr(this.getSequence(),0,this.extLength);
		} else {
			return "";
		}
	}
	,extend3Prime: function(postSeq) {
		var primerExtensionSeq = this.get5PrimeExtensionSequence();
		this.setSequence(postSeq);
		this.set5PrimeExtension(primerExtensionSeq);
	}
	,is3PrimeExtended: function() {
		if(this.has5PrimeExtension()) {
			if(this.get5PrimeExtensionLength() < this.getLength()) {
				return true;
			}
		}
		return false;
	}
	,get3PrimeExtendedSequence: function() {
		if(this.has5PrimeExtension()) {
			if(this.get5PrimeExtensionLength() < this.getLength()) {
				return this.sequence.substring(this.get5PrimeExtensionLength(),this.getLength());
			}
		}
		return "";
	}
	,getPrimerSequence: function(includeExtensionRegion) {
		var rawPrimer = this.getSequence();
		if(this.extLength == -1 || includeExtensionRegion) {
			return rawPrimer;
		} else {
			return rawPrimer.substring(this.extLength,rawPrimer.length);
		}
	}
	,setValidate5PrimeExtensionInFrame: function(validate) {
		this.val_extInFrame = validate;
	}
	,isValid: function() {
		if(this.has5PrimeExtension()) {
			if(this.val_extInFrame) {
				if(this.is3PrimeExtended()) {
					var postSequence = this.get3PrimeExtendedSequence();
					if(postSequence.length < 3) {
						return false;
					} else {
						var frameCheck = new saturn.core.DNA(postSequence);
						var pos = frameCheck.getFirstStartCodonPositionByFrame(saturn.core.GeneticCodes.STANDARD,saturn.core.Frame.ONE);
						if(pos == -1) {
							return false;
						} else {
							return true;
						}
					}
				} else {
					return false;
				}
			}
		}
		return true;
	}
	,clonePrimer: function() {
		var newPrimer = new saturn.core.Primer(this.getPrimerSequence(true));
		newPrimer.set5PrimeExtensionLength(this.get5PrimeExtensionLength());
		newPrimer.val_extInFrame = this.val_extInFrame;
		return newPrimer;
	}
	,setType: function(type) {
		this.theType = type;
	}
	,getType: function() {
		return this.theType;
	}
	,__class__: saturn.core.Primer
});
saturn.core.PrimerRegistry = $hxClasses["saturn.core.PrimerRegistry"] = function() {
	this.primers = new haxe.ds.StringMap();
	this.registerDefaultPrimers();
};
saturn.core.PrimerRegistry.__name__ = ["saturn","core","PrimerRegistry"];
saturn.core.PrimerRegistry.getDefaultInstance = function() {
	return saturn.core.PrimerRegistry.defaultInstance;
};
saturn.core.PrimerRegistry.prototype = {
	primers: null
	,registerDefaultPrimers: function() {
		var attB1 = new saturn.core.Primer("");
		attB1.set5PrimeExtension("GGGGACAAGTTTGTACAAAAAAGCAGGCT");
		attB1.setValidate5PrimeExtensionInFrame(false);
		this.addPrimer(Std.string(saturn.core.BasePrimer.ATT_B1),attB1);
		var attB2 = new saturn.core.Primer("");
		attB2.set5PrimeExtension("GGGGACCACTTTGTACAAGAAAGCTGGGT");
		attB2.setValidate5PrimeExtensionInFrame(false);
		this.addPrimer(Std.string(saturn.core.BasePrimer.ATT_B2),attB2);
	}
	,getPrimerTypes: function() {
		var primerTypes = [];
		var primerType = this.primers.keys();
		while(primerType.hasNext()) {
			var primerType1 = primerType.next();
			primerTypes.push(primerType1);
		}
		return primerTypes;
	}
	,autoConfigurePrimer: function(primer) {
		var _g = 0;
		var _g1 = this.getPrimerTypes();
		while(_g < _g1.length) {
			var primerType = _g1[_g];
			++_g;
			var basePrimer = this.getPrimer(primerType);
			var primer5Ext = basePrimer.get5PrimeExtensionSequence();
			if(primer.getSequence().indexOf(primer5Ext) != -1) {
				primer.set5PrimeExtensionLength(primer5Ext.length);
				primer.setType(primerType);
			}
		}
	}
	,addPrimer: function(name,primer) {
		this.primers.set(name,primer);
	}
	,removePrimer: function(name) {
		this.primers.remove(name);
	}
	,getPrimer: function(name) {
		if(this.primers.exists(name)) {
			return this.primers.get(name).clonePrimer();
		} else {
			return null;
		}
	}
	,getBasePrimer: function(primer) {
		return this.getPrimer(Std.string(primer));
	}
	,__class__: saturn.core.PrimerRegistry
};
saturn.core.PurificationHelperTable = $hxClasses["saturn.core.PurificationHelperTable"] = function() {
	saturn.core.Table.call(this);
	this.setErrorColumns(["Error"]);
	this.setData([{ "Sample (1)" : "", "2nd Index (2)" : "", "3rd Index (3)" : "", "Construct (4)" : "", "Klone IDs (5)" : "", "Celline (6)" : "", "Construct IDs (7)" : "", "Expression IDs (8)" : "", "Break 1 (9)" : "", "Clone IDs (10)" : "", "Expression Scale (11)" : "", "Purification IDs (12)" : "", "Volume (13)" : "", "Expression IDs (14)" : "", "Yield (15)" : "", "Location (16)" : "", "Cleaved (17)" : "", "conc. (18)" : "", "concentrator (19)" : "", "Volume (20)" : "", "Aliquot size (21)" : "", "Buffer (22)" : "", "pH (23)" : "", "Break 2 (24)" : "", "Break 3 (25)" : "", "Column 1 (26)" : "", "2.0 (27)" : "", "3.0 (28)" : "", "4.0 (29)" : "", "Sample (30)" : "", "Construct (31)" : "", "Column (32)" : "", "Volume (33)" : "", "Abs (34)" : "", "Extcoeff uncut (35)" : "", "Weight uncut (36)" : "", "Gel location (37)" : "", "NanoSpectrum Location (38)" : "", "conc. (39)" : "", "Yield (40)" : "", "Column (41)" : "", "Volume (42)" : "", "Abs (43)" : "", "Extcoeff cut (44)" : "", "Weight cut (45)" : "", "Gel location (46)" : "", "NanoSpectrum Location (47)" : "", "conc. (48)" : "", "Yield (49)" : "", "Column (50)" : "", "Volume (51)" : "", "Abs (52)" : "", "Extcoeff cut (53)" : "", "Weight cut (54)" : "", "Gel location (55)" : "", "NanoSpectrum Location (56)" : "", "conc. (57)" : "", "Yield (58)" : "", "Chromatograph location (59)" : "", "MS result location (60)" : "", "MS Molecular weight (61)" : "", "Discrepancy (62)" : "", "Sample (63)" : "", "Construct (64)" : "", "MW kDa (65)" : "", "Yield (66)" : "", "Comments (67)" : "", "Break 4 (68)" : "", "Sample (69)" : "", "Construct (70)" : "", "MW kDa (71)" : "", "Yield (72)" : "", "Comments (73)" : ""}],{ "Sample (1)" : { "editor" : "textfield"}, "2nd Index (2)" : { "editor" : "textfield"}, "3rd Index (3)" : { "editor" : "textfield"}, "Construct (4)" : { "editor" : "textfield"}, "Klone IDs (5)" : { "editor" : "textfield"}, "Celline (6)" : { "editor" : "textfield"}, "Construct IDs (7)" : { "editor" : "textfield"}, "Expression IDs (8)" : { "editor" : "textfield"}, "Break 1 (9)" : { "editor" : "textfield"}, "Clone IDs (10)" : { "editor" : "textfield"}, "Expression Scale (11)" : { "editor" : "textfield"}, "Purification IDs (12)" : { "editor" : "textfield"}, "Volume (13)" : { "editor" : "textfield"}, "Expression IDs (14)" : { "editor" : "textfield"}, "Yield (15)" : { "editor" : "textfield"}, "Location (16)" : { "editor" : "textfield"}, "Cleaved (17)" : { "editor" : "textfield"}, "conc. (18)" : { "editor" : "textfield"}, "concentrator (19)" : { "editor" : "textfield"}, "Volume (20)" : { "editor" : "textfield"}, "Aliquot size (21)" : { "editor" : "textfield"}, "Buffer (22)" : { "editor" : "textfield"}, "pH (23)" : { "editor" : "textfield"}, "Break 2 (24)" : { "editor" : "textfield"}, "Break 3 (25)" : { "editor" : "textfield"}, "Column 1 (26)" : { "editor" : "textfield"}, "2.0 (27)" : { "editor" : "textfield"}, "3.0 (28)" : { "editor" : "textfield"}, "4.0 (29)" : { "editor" : "textfield"}, "Sample (30)" : { "editor" : "textfield"}, "Construct (31)" : { "editor" : "textfield"}, "Column (32)" : { "editor" : "textfield"}, "Volume (33)" : { "editor" : "textfield"}, "Abs (34)" : { "editor" : "textfield"}, "Extcoeff uncut (35)" : { "editor" : "textfield"}, "Weight uncut (36)" : { "editor" : "textfield"}, "Gel location (37)" : { "editor" : "textfield"}, "NanoSpectrum Location (38)" : { "editor" : "textfield"}, "conc. (39)" : { "editor" : "textfield"}, "Yield (40)" : { "editor" : "textfield"}, "Column (41)" : { "editor" : "textfield"}, "Volume (42)" : { "editor" : "textfield"}, "Abs (43)" : { "editor" : "textfield"}, "Extcoeff cut (44)" : { "editor" : "textfield"}, "Weight cut (45)" : { "editor" : "textfield"}, "Gel location (46)" : { "editor" : "textfield"}, "NanoSpectrum Location (47)" : { "editor" : "textfield"}, "conc. (48)" : { "editor" : "textfield"}, "Yield (49)" : { "editor" : "textfield"}, "Column (50)" : { "editor" : "textfield"}, "Volume (51)" : { "editor" : "textfield"}, "Abs (52)" : { "editor" : "textfield"}, "Extcoeff cut (53)" : { "editor" : "textfield"}, "Weight cut (54)" : { "editor" : "textfield"}, "Gel location (55)" : { "editor" : "textfield"}, "NanoSpectrum Location (56)" : { "editor" : "textfield"}, "conc. (57)" : { "editor" : "textfield"}, "Yield (58)" : { "editor" : "textfield"}, "Chromatograph location (59)" : { "editor" : "textfield"}, "MS result location (60)" : { "editor" : "textfield"}, "MS Molecular weight (61)" : { "editor" : "textfield"}, "Discrepancy (62)" : { "editor" : "textfield"}, "Sample (63)" : { "editor" : "textfield"}, "Construct (64)" : { "editor" : "textfield"}, "MW kDa (65)" : { "editor" : "textfield"}, "Yield (66)" : { "editor" : "textfield"}, "Comments (67)" : { "editor" : "textfield"}, "Break 4 (68)" : { "editor" : "textfield"}, "Sample (69)" : { "editor" : "textfield"}, "Construct (70)" : { "editor" : "textfield"}, "MW kDa (71)" : { "editor" : "textfield"}, "Yield (72)" : { "editor" : "textfield"}, "Comments (73)" : { "editor" : "textfield"}});
	this.setName("PrepX");
};
saturn.core.PurificationHelperTable.__name__ = ["saturn","core","PurificationHelperTable"];
saturn.core.PurificationHelperTable.__super__ = saturn.core.Table;
saturn.core.PurificationHelperTable.prototype = $extend(saturn.core.Table.prototype,{
	provider: null
	,getProvider: function() {
		if(this.provider != null) {
			return this.provider;
		} else {
			return saturn.client.WorkspaceApplication.getApplication().getProvider();
		}
	}
	,generateids: function(cb) {
		var _gthis = this;
		var data = this.getData();
		var targetSet = new haxe.ds.StringMap();
		var _g = 0;
		while(_g < data.length) {
			var row = data[_g];
			++_g;
			var constructId = Reflect.field(row,"Construct (4)");
			var targetId = constructId.split("-")[0];
			targetSet.set(targetId,"");
		}
		var _g1 = [];
		var targetId1 = targetSet.keys();
		while(targetId1.hasNext()) {
			var targetId2 = targetId1.next();
			_g1.push(targetId2);
		}
		var targets = _g1;
		saturn.core.domain.SgcUtil.generateNextID(this.getProvider(),targets,saturn.core.domain.SgcClone,function(cloneMap,err) {
			if(err == null) {
				saturn.core.domain.SgcUtil.generateNextID(_gthis.getProvider(),targets,saturn.core.domain.SgcExpression,function(expressionMap,err1) {
					if(err1 == null) {
						saturn.core.domain.SgcUtil.generateNextID(_gthis.getProvider(),targets,saturn.core.domain.SgcPurification,function(purificationMap,err2) {
							if(err2 == null) {
								var _g11 = 0;
								while(_g11 < data.length) {
									var row1 = data[_g11];
									++_g11;
									var constructId1 = Reflect.field(row1,"Construct");
									var targetId3 = constructId1.split("-")[0];
									Reflect.setField(row1,"Clone ID",targetId3 + "-k" + StringTools.lpad(Std.string(cloneMap.get(targetId3)),"0",3));
									var value = cloneMap.get(targetId3) + 1;
									cloneMap.set(targetId3,value);
									Reflect.setField(row1,"Expression ID",targetId3 + "-e" + StringTools.lpad(Std.string(expressionMap.get(targetId3)),"0",3));
									var value1 = expressionMap.get(targetId3) + 1;
									expressionMap.set(targetId3,value1);
									Reflect.setField(row1,"Purification ID",targetId3 + "-p" + StringTools.lpad(Std.string(purificationMap.get(targetId3)),"0",3));
									purificationMap.set(targetId3,purificationMap.get(targetId3) + 1);
								}
								cb(null);
							} else {
								cb(err2);
							}
						});
					} else {
						cb(err1);
					}
				});
			} else {
				cb(err);
			}
		});
	}
	,saveNew: function(cb) {
		this._saveNew(cb);
	}
	,_saveNew: function(cb) {
		var p = this.getProvider();
		var data = this.getData();
		var clones = [];
		var expressions = [];
		var purifications = [];
		var _g = 0;
		while(_g < data.length) {
			var row = data[_g];
			++_g;
			var clone = new saturn.core.domain.SgcClone();
			clone.cloneId = Reflect.field(row,"Clone ID");
			clone.construct = new saturn.core.domain.SgcConstruct();
			clone.construct.constructId = Reflect.field(row,"Construct (4)");
			clone.elnId = Reflect.field(row,"ELN ID");
			var expression = new saturn.core.domain.SgcExpression();
			expression.expressionId = Reflect.field(row,"Expression ID");
			expression.clone = clone;
			expression.elnId = Reflect.field(row,"ELN ID");
			var purification = new saturn.core.domain.SgcPurification();
			purification.purificationId = Reflect.field(row,"Purification ID");
			purification.expression = expression;
			purification.column = Reflect.field(row,"Column");
			purification.elnId = Reflect.field(row,"ELN ID");
			clones.push(clone);
			expressions.push(expression);
			purifications.push(purification);
		}
		p.insertOrUpdate(clones,function(err) {
			if(err != null) {
				cb(err);
				return;
			}
			p.insertOrUpdate(expressions,function(err1) {
				if(err1 != null) {
					cb(err1);
					return;
				}
				p.insertOrUpdate(purifications,function(err2) {
					if(err2 != null) {
						cb(err2);
						return;
					} else {
						cb(null);
					}
				},true);
			},true);
		},true);
	}
	,fetchall: function(cb) {
		var p = this.getProvider();
		var data = this.getData();
		var ids = [];
		var constructIdToRow = new haxe.ds.StringMap();
		var _g = 0;
		while(_g < data.length) {
			var row = data[_g];
			++_g;
			var constructId = Reflect.field(row,"Construct (4)");
			ids.push(constructId);
			constructIdToRow.set(constructId,row);
		}
		p.getByIds(ids,saturn.core.domain.SgcConstruct,function(objs,err) {
			if(err == null) {
				var _g1 = 0;
				while(_g1 < objs.length) {
					var obj = objs[_g1];
					++_g1;
					var constructId1 = obj.constructId;
					var row1 = constructIdToRow.get(constructId1);
				}
				cb(null);
			} else {
				cb(err);
			}
		});
	}
	,runStage0: function(prepXRun,cb) {
		var _gthis = this;
		this.runStage(prepXRun,"0",function(err) {
			if(err != null) {
				cb(err);
			} else {
				_gthis.fetchall(function(err1) {
					if(err1 != null) {
						cb(err1);
					} else {
						_gthis.runStage1(prepXRun,cb);
					}
				});
			}
		});
	}
	,runStage1: function(prepXRun,cb) {
		var _gthis = this;
		this.runStage(prepXRun,"1",function(err) {
			if(err != null) {
				cb(err);
			} else {
				saturn.core.Util.debug("Step 1 finished");
				_gthis.runStage2(prepXRun,cb);
			}
		});
	}
	,runStage2: function(prepXRun,cb) {
		var _gthis = this;
		this.runStage(prepXRun,"2",function(err) {
			if(err != null) {
				cb(err);
			} else {
				saturn.core.Util.debug("Step 2 finished");
				_gthis.runStage3(prepXRun,cb);
			}
		});
	}
	,runStage3: function(prepXRun,cb) {
		this.runStage(prepXRun,"3",function(err) {
			if(err != null) {
				cb(err);
			} else {
				cb(err);
				saturn.core.Util.debug("Step 3 finished");
			}
		});
	}
	,runStage: function(prepXRun,stage,cb) {
		var _gthis = this;
		this.getProvider().getByNamedQuery("saturn.server.plugins.informatics.PurificationHelperPlugin.runStage",[{ "runname" : prepXRun, "stage" : stage, "table" : this.getData()}],null,false,function(objs,err) {
			if(err != null) {
				cb(err);
			} else {
				_gthis.updateData(objs[0].table);
				cb(null);
			}
		});
	}
	,__class__: saturn.core.PurificationHelperTable
});
saturn.core.RNA = $hxClasses["saturn.core.RNA"] = function(seq) {
	this.reg_uReplace = new EReg("U","g");
	saturn.core.DNA.call(this,seq);
};
saturn.core.RNA.__name__ = ["saturn","core","RNA"];
saturn.core.RNA.__super__ = saturn.core.DNA;
saturn.core.RNA.prototype = $extend(saturn.core.DNA.prototype,{
	reg_uReplace: null
	,convertToDNA: function() {
		return this.reg_uReplace.replace(this.getSequence(),"T");
	}
	,__class__: saturn.core.RNA
});
saturn.core.Reaction = $hxClasses["saturn.core.Reaction"] = function() {
};
saturn.core.Reaction.__name__ = ["saturn","core","Reaction"];
saturn.core.Reaction.prototype = {
	id: null
	,name: null
	,reactionTypeId: null
	,reactionType: null
	,__class__: saturn.core.Reaction
};
saturn.core.ReactionComponent = $hxClasses["saturn.core.ReactionComponent"] = function() {
};
saturn.core.ReactionComponent.__name__ = ["saturn","core","ReactionComponent"];
saturn.core.ReactionComponent.prototype = {
	id: null
	,position: null
	,reactionRoleId: null
	,entityId: null
	,reactionId: null
	,reaction: null
	,reactionRole: null
	,entity: null
	,__class__: saturn.core.ReactionComponent
};
saturn.core.ReactionRole = $hxClasses["saturn.core.ReactionRole"] = function() {
};
saturn.core.ReactionRole.__name__ = ["saturn","core","ReactionRole"];
saturn.core.ReactionRole.prototype = {
	id: null
	,name: null
	,__class__: saturn.core.ReactionRole
};
saturn.core.ReactionType = $hxClasses["saturn.core.ReactionType"] = function() {
};
saturn.core.ReactionType.__name__ = ["saturn","core","ReactionType"];
saturn.core.ReactionType.prototype = {
	id: null
	,name: null
	,__class__: saturn.core.ReactionType
};
saturn.core.RestrictionSite = $hxClasses["saturn.core.RestrictionSite"] = function(seq) {
	saturn.core.DNA.call(this,seq);
};
saturn.core.RestrictionSite.__name__ = ["saturn","core","RestrictionSite"];
saturn.core.RestrictionSite.__super__ = saturn.core.DNA;
saturn.core.RestrictionSite.prototype = $extend(saturn.core.DNA.prototype,{
	__class__: saturn.core.RestrictionSite
});
saturn.core.SHRNADesignTable = $hxClasses["saturn.core.SHRNADesignTable"] = function(empty) {
	if(empty == null) {
		empty = true;
	}
	saturn.core.Table.call(this);
	this.setErrorColumns(["Errors"]);
	var data = [{ "sequence" : "", "linker" : "TAGTGAAGCCACAGATGTA", "oligo" : "", "target" : "", "rule_one" : "", "rule_two" : "", "rule_three" : "", "rule_four" : "", "rule_five" : "", "rule_six" : "", "rule_seven" : "", "errors" : ""}];
	if(!empty) {
		data = [{ "sequence" : "UUGUUGUGCAAACUGACUGCU", "linker" : "TAGTGAAGCCACAGATGTA", "oligo" : "", "target" : "TGCTGTTGACAGTGAGCGCAGCAGTCAGTTTGCACAACAATAGTGAAGCCACAGATGTATTGTTGTGCAAACTGACTGCTTTGCCTACTGCCTCGGA", "rule_one" : "", "rule_two" : "", "rule_three" : "", "rule_four" : "", "rule_five" : "", "rule_six" : "", "rule_seven" : "", "errors" : ""},{ "sequence" : "UUUCCUGAGGUGUAGGUCCCG", "linker" : "TAGTGAAGCCACAGATGTA", "oligo" : "", "target" : "TGCTGTTGACAGTGAGCGACGGGACCTACACCTCAGGAAATAGTGAAGCCACAGATGTATTTCCTGAGGTGTAGGTCCCGCTGCCTACTGCCTCGGA", "rule_one" : "", "rule_two" : "", "rule_three" : "", "rule_four" : "", "rule_five" : "", "rule_six" : "", "rule_seven" : "", "errors" : ""},{ "sequence" : "UCUUGUUGUGCAAACUGACUG", "linker" : "TAGTGAAGCCACAGATGTA", "oligo" : "", "target" : "TGCTGTTGACAGTGAGCGACAGTCAGTTTGCACAACAAGATAGTGAAGCCACAGATGTATCTTGTTGTGCAAACTGACTGCTGCCTACTGCCTCGGA", "rule_one" : "", "rule_two" : "", "rule_three" : "", "rule_four" : "", "rule_five" : "", "rule_six" : "", "rule_seven" : "", "errors" : ""},{ "sequence" : "UUGUCUCCUCGGUACACAGUG", "linker" : "TAGTGAAGCCACAGATGTA", "oligo" : "", "target" : "TGCTGTTGACAGTGAGCGACACTGTGTACCGAGGAGACAATAGTGAAGCCACAGATGTATTGTCTCCTCGGTACACAGTGCTGCCTACTGCCTCGGA", "rule_one" : "", "rule_two" : "", "rule_three" : "", "rule_four" : "", "rule_five" : "", "rule_six" : "", "rule_seven" : "", "errors" : ""},{ "sequence" : "UGCUGUUUAACAACCUUCCCU", "linker" : "TAGTGAAGCCACAGATGTA", "oligo" : "", "target" : "TGCTGTTGACAGTGAGCGAAGGGAAGGTTGTTAAACAGCATAGTGAAGCCACAGATGTATGCTGTTTAACAACCTTCCCTGTGCCTACTGCCTCGGA", "rule_one" : "", "rule_two" : "", "rule_three" : "", "rule_four" : "", "rule_five" : "", "rule_six" : "", "rule_seven" : "", "errors" : ""},{ "sequence" : "UCAGUGUCCAUACUUGAUCCG", "linker" : "TAGTGAAGCCACAGATGTA", "oligo" : "", "target" : "TGCTGTTGACAGTGAGCGACGGATCAAGTATGGACACTGATAGTGAAGCCACAGATGTATCAGTGTCCATACTTGATCCGCTGCCTACTGCCTCGGA", "rule_one" : "", "rule_two" : "", "rule_three" : "", "rule_four" : "", "rule_five" : "", "rule_six" : "", "rule_seven" : "", "errors" : ""},{ "sequence" : "UAGGUGACAUCAUCAAGCUGG", "linker" : "TAGTGAAGCCACAGATGTA", "oligo" : "", "target" : "TGCTGTTGACAGTGAGCGCCCAGCTTGATGATGTCACCTATAGTGAAGCCACAGATGTATAGGTGACATCATCAAGCTGGATGCCTACTGCCTCGGA", "rule_one" : "", "rule_two" : "", "rule_three" : "", "rule_four" : "", "rule_five" : "", "rule_six" : "", "rule_seven" : "", "errors" : ""},{ "sequence" : "UUUGGAACCCUUUCUGCGCUU", "linker" : "TAGTGAAGCCACAGATGTA", "oligo" : "", "target" : "TGCTGTTGACAGTGAGCGCAAGCGCAGAAAGGGTTCCAAATAGTGAAGCCACAGATGTATTTGGAACCCTTTCTGCGCTTTTGCCTACTGCCTCGGA", "rule_one" : "", "rule_two" : "", "rule_three" : "", "rule_four" : "", "rule_five" : "", "rule_six" : "", "rule_seven" : "", "errors" : ""},{ "sequence" : "UCUAGCUGGAAGUACUUGCGC", "linker" : "TAGTGAAGCCACAGATGTA", "oligo" : "", "target" : "TGCTGTTGACAGTGAGCGCGCGCAAGTACTTCCAGCTAGATAGTGAAGCCACAGATGTATCTAGCTGGAAGTACTTGCGCATGCCTACTGCCTCGGA", "rule_one" : "", "rule_two" : "", "rule_three" : "", "rule_four" : "", "rule_five" : "", "rule_six" : "", "rule_seven" : "", "errors" : ""},{ "sequence" : "AUAUGAGGACUCUCGUAGCUG", "linker" : "TAGTGAAGCCACAGATGTA", "oligo" : "", "target" : "TGCTGTTGACAGTGAGCGACAGCTACGAGAGTCCTCATATTAGTGAAGCCACAGATGTAATATGAGGACTCTCGTAGCTGCTGCCTACTGCCTCGGA", "rule_one" : "", "rule_two" : "", "rule_three" : "", "rule_four" : "", "rule_five" : "", "rule_six" : "", "rule_seven" : "", "errors" : ""},{ "sequence" : "UUCCUUCUUGUAAUAAAGGGA", "linker" : "TAGTGAAGCCACAGATGTA", "oligo" : "", "target" : "TGCTGTTGACAGTGAGCGCTCCCTTTATTACAAGAAGGAATAGTGAAGCCACAGATGTATTCCTTCTTGTAATAAAGGGAATGCCTACTGCCTCGGA", "rule_one" : "", "rule_two" : "", "rule_three" : "", "rule_four" : "", "rule_five" : "", "rule_six" : "", "rule_seven" : "", "errors" : ""},{ "sequence" : "UUCACUUAAUUCCUCCACCUC", "linker" : "TAGTGAAGCCACAGATGTA", "oligo" : "", "target" : "TGCTGTTGACAGTGAGCGAGAGGTGGAGGAATTAAGTGAATAGTGAAGCCACAGATGTATTCACTTAATTCCTCCACCTCCTGCCTACTGCCTCGGA", "rule_one" : "", "rule_two" : "", "rule_three" : "", "rule_four" : "", "rule_five" : "", "rule_six" : "", "rule_seven" : "", "errors" : ""},{ "sequence" : "UUGGAAGUGGGAGUCCACGGA", "linker" : "TAGTGAAGCCACAGATGTA", "oligo" : "", "target" : "TGCTGTTGACAGTGAGCGCTCCGTGGACTCCCACTTCCAATAGTGAAGCCACAGATGTATTGGAAGTGGGAGTCCACGGAATGCCTACTGCCTCGGA", "rule_one" : "", "rule_two" : "", "rule_three" : "", "rule_four" : "", "rule_five" : "", "rule_six" : "", "rule_seven" : "", "errors" : ""},{ "sequence" : "UGAGGACUCUCGUAGCUGCUG", "linker" : "TAGTGAAGCCACAGATGTA", "oligo" : "", "target" : "TGCTGTTGACAGTGAGCGACAGCAGCTACGAGAGTCCTCATAGTGAAGCCACAGATGTATGAGGACTCTCGTAGCTGCTGCTGCCTACTGCCTCGGA", "rule_one" : "", "rule_two" : "", "rule_three" : "", "rule_four" : "", "rule_five" : "", "rule_six" : "", "rule_seven" : "", "errors" : ""}];
	}
	this.setData(data,{ "sequence" : { "editor" : "textfield", "text" : "Sequence"}, "linker" : { "editor" : "textfield", "text" : "Linker", "default" : "TAGTGAAGCCACAGATGTA"}, "oligo" : { "editor" : "textfield", "text" : "Oligo"}, "rule_one" : { "editor" : "textfield", "text" : "A/U position 1"}, "rule_two" : { "editor" : "textfield", "text" : "A/U 40-80%"}, "rule_three" : { "editor" : "textfield", "text" : ">50 % A/U 1-14"}, "rule_four" : { "editor" : "textfield", "text" : "% A/U 1-14 / % A/U 15-21 > 1"}, "rule_five" : { "editor" : "textfield", "text" : "Positon 20 not A"}, "rule_six" : { "editor" : "textfield", "text" : "A/U @ 13 or U @ 14"}, "rule_seven" : { "editor" : "textfield", "text" : "no AAAAAA, UUUUU, GGGG, CCCC"}, "errors" : { "editor" : "textfield", "text" : "Errors"}});
	this.setName("shRNA Table");
};
saturn.core.SHRNADesignTable.__name__ = ["saturn","core","SHRNADesignTable"];
saturn.core.SHRNADesignTable.__super__ = saturn.core.Table;
saturn.core.SHRNADesignTable.prototype = $extend(saturn.core.Table.prototype,{
	targetSequence: null
	,setSequence: function(sequence) {
		this.targetSequence = sequence;
	}
	,calculateOligos: function(cb) {
		var _gthis = this;
		if(this.targetSequence == null || this.targetSequence.length == 0) {
			cb("Please set the target sequence first");
		}
		var _g = 0;
		var _g1 = this.getData();
		while(_g < _g1.length) {
			var row = [_g1[_g]];
			++_g;
			var rnaStr = row[0].sequence;
			var linker = [row[0].linker];
			var rna = [new saturn.core.RNA(rnaStr)];
			var dna = new saturn.core.DNA(rna[0].convertToDNA());
			var fivePrimeSeq = [dna.getInverseComplement()];
			var threePrimeSeq = [dna.getSequence()];
			var fasta = ">TARGET\n" + this.targetSequence;
			fasta += "\n>QUERY\n" + fivePrimeSeq[0];
			saturn.client.BioinformaticsServicesClient.getClient().getAlignment(fasta,(function(threePrimeSeq1,fivePrimeSeq1,rna1,linker1,row1) {
				return function(err,msa) {
					if(err == null) {
						try {
							var nuc5 = msa.fetchNucAlignmentToResidue("QUERY",-1,"TARGET");
							if(nuc5 == "A" || nuc5 == "T") {
								fivePrimeSeq1[0] = "C" + fivePrimeSeq1[0];
							} else {
								fivePrimeSeq1[0] = "A" + fivePrimeSeq1[0];
							}
							var tmp = threePrimeSeq1[0] + new saturn.core.DNA(nuc5).getInverseComplement();
							threePrimeSeq1[0] = tmp;
							var fivePrimeExtension = "TGCTGTTGACAGTGAGCG";
							var threePrimeExtension = "TGCCTACTGCCTCGGA";
							var oligo = fivePrimeExtension + fivePrimeSeq1[0] + linker1[0] + threePrimeSeq1[0] + threePrimeExtension;
							_gthis.updateRules(rna1[0],row1[0]);
							row1[0].oligo = oligo;
							if(row1[0].oligo == row1[0].target) {
								row1[0].errors = "No Errors";
							} else {
								row1[0].errors = "calculated oligo doesn't match target";
							}
							cb(null);
						} catch( ex ) {
							if (ex instanceof js._Boot.HaxeError) ex = ex.val;
							if( js.Boot.__instanceof(ex,saturn.util.HaxeException) ) {
								var tmp1 = ex.getMessage();
								cb(tmp1);
							} else throw(ex);
						}
					} else {
						cb(err);
					}
				};
			})(threePrimeSeq,fivePrimeSeq,rna,linker,row));
		}
	}
	,updateRules: function(rna,row) {
		this.updateRuleOne(rna,row);
		this.updateRuleTwo(rna,row);
		this.updateRuleThreeAndFour(rna,row);
		this.updateRuleFive(rna,row);
		this.updateRuleSix(rna,row);
		this.updateRuleSeven(rna,row);
	}
	,updateRuleOne: function(rna,row) {
		var c = rna.getSequence().charAt(0);
		if(c == "A" || c == "U") {
			row.rule_one = "yes";
		} else {
			row.rule_one = "no";
		}
	}
	,updateRuleTwo: function(rna,row) {
		var comp = rna.getComposition();
		var auFraction = (comp.aCount + comp.tCount) / rna.getLength();
		if(auFraction >= 0.4 && auFraction <= 0.8) {
			row.rule_two = "yes";
		} else {
			row.rule_two = "no - " + auFraction;
		}
	}
	,updateRuleThreeAndFour: function(rna,row) {
		var subRNA1 = new saturn.core.RNA(rna.getFrom(1,14));
		var comp = subRNA1.getComposition();
		var auFraction1 = (comp.aCount + comp.tCount) / subRNA1.getLength();
		if(auFraction1 >= 0.5) {
			row.rule_three = "yes";
		} else {
			row.rule_three = "no";
		}
		var subRNA2 = new saturn.core.RNA(rna.getFrom(15,21));
		var comp1 = subRNA2.getComposition();
		var auFraction2 = (comp1.aCount + comp1.tCount) / subRNA2.getLength();
		if(auFraction1 / auFraction2 >= 1) {
			row.rule_four = "yes";
		} else {
			row.rule_four = "no";
		}
	}
	,updateRuleFive: function(rna,row) {
		if(rna.getSequence().charAt(19) != "A") {
			row.rule_five = "yes";
		} else {
			row.rule_five = "no";
		}
	}
	,updateRuleSix: function(rna,row) {
		var pos13 = rna.getSequence().charAt(12);
		var pos14 = rna.getSequence().charAt(13);
		if(pos13 == "A" || pos13 == "U" || pos14 == "U") {
			row.rule_six = "yes";
		} else {
			row.rule_six = "no";
		}
	}
	,updateRuleSeven: function(rna,row) {
		if(rna.findMatchingLocusesSimple("AAAAAA").length > 0 || rna.findMatchingLocusesSimple("UUUUU").length > 0 || rna.findMatchingLocusesSimple("GGGG").length > 0 || rna.findMatchingLocusesSimple("CCCC").length > 0) {
			row.rule_seven = "no";
		} else {
			row.rule_seven = "yes";
		}
	}
	,__class__: saturn.core.SHRNADesignTable
});
saturn.core.molecule.MoleculeSet = $hxClasses["saturn.core.molecule.MoleculeSet"] = function() {
	this.moleculeSet = new haxe.ds.StringMap();
};
saturn.core.molecule.MoleculeSet.__name__ = ["saturn","core","molecule","MoleculeSet"];
saturn.core.molecule.MoleculeSet.prototype = {
	moleculeSet: null
	,setMolecule: function(name,molecule) {
		this.moleculeSet.set(name,molecule);
	}
	,getMolecule: function(name) {
		return this.moleculeSet.get(name);
	}
	,__class__: saturn.core.molecule.MoleculeSet
};
saturn.core.StandardMoleculeSet = $hxClasses["saturn.core.StandardMoleculeSet"] = function() {
	saturn.core.molecule.MoleculeSet.call(this);
	var mMap = [{ "NAME" : "A", "MW" : 71.0788},{ "NAME" : "R", "MW" : 156.1875},{ "NAME" : "N", "MW" : 114.1038},{ "NAME" : "D", "MW" : 115.0886},{ "NAME" : "C", "MW" : 103.1448},{ "NAME" : "E", "MW" : 129.1155},{ "NAME" : "Q", "MW" : 128.1308},{ "NAME" : "G", "MW" : 57.052},{ "NAME" : "H", "MW" : 137.1412},{ "NAME" : "I", "MW" : 113.1595},{ "NAME" : "L", "MW" : 113.1595},{ "NAME" : "K", "MW" : 128.1742},{ "NAME" : "M", "MW" : 131.1986},{ "NAME" : "F", "MW" : 147.1766},{ "NAME" : "P", "MW" : 97.1167},{ "NAME" : "S", "MW" : 87.0782},{ "NAME" : "T", "MW" : 101.1051},{ "NAME" : "W", "MW" : 186.2133},{ "NAME" : "Y", "MW" : 163.176},{ "NAME" : "V", "MW" : 99.1326}];
	var _g = 0;
	while(_g < mMap.length) {
		var mDef = mMap[_g];
		++_g;
		var m = new saturn.core.molecule.Molecule(mDef.NAME);
		m.setFloatAttribute(saturn.core.molecule.MoleculeFloatAttribute.MW_CONDESATION,mDef.MW);
		m.setStringAttribute(saturn.core.molecule.MoleculeStringAttribute.NAME,mDef.NAME);
		this.setMolecule(mDef.NAME,m);
	}
	mMap = [{ "NAME" : "H2O", "MW" : 18.02}];
	var _g1 = 0;
	while(_g1 < mMap.length) {
		var mDef1 = mMap[_g1];
		++_g1;
		var m1 = new saturn.core.molecule.Molecule(mDef1.NAME);
		m1.setFloatAttribute(saturn.core.molecule.MoleculeFloatAttribute.MW,mDef1.MW);
		m1.setStringAttribute(saturn.core.molecule.MoleculeStringAttribute.NAME,mDef1.NAME);
		this.setMolecule(mDef1.NAME,m1);
	}
};
saturn.core.StandardMoleculeSet.__name__ = ["saturn","core","StandardMoleculeSet"];
saturn.core.StandardMoleculeSet.__super__ = saturn.core.molecule.MoleculeSet;
saturn.core.StandardMoleculeSet.prototype = $extend(saturn.core.molecule.MoleculeSet.prototype,{
	__class__: saturn.core.StandardMoleculeSet
});
saturn.core.TmCalc = $hxClasses["saturn.core.TmCalc"] = function() {
	this.deltaHTable = new haxe.ds.StringMap();
	this.deltaSTable = new haxe.ds.StringMap();
	this.endHTable = new haxe.ds.StringMap();
	this.endSTable = new haxe.ds.StringMap();
	this.populateDeltaHTable();
	this.populateDeltaSTable();
	this.populateEndHTable();
	this.populateEndSTable();
};
saturn.core.TmCalc.__name__ = ["saturn","core","TmCalc"];
saturn.core.TmCalc.prototype = {
	deltaHTable: null
	,deltaSTable: null
	,endHTable: null
	,endSTable: null
	,populateDeltaHTable: function() {
		this.deltaHTable.set("AA",-7900);
		this.deltaHTable.set("TT",-7900);
		this.deltaHTable.set("AT",-7200);
		this.deltaHTable.set("TA",-7200);
		this.deltaHTable.set("CA",-8500);
		this.deltaHTable.set("TG",-8500);
		this.deltaHTable.set("GT",-8400);
		this.deltaHTable.set("AC",-8400);
		this.deltaHTable.set("CT",-7800);
		this.deltaHTable.set("AG",-7800);
		this.deltaHTable.set("GA",-8200);
		this.deltaHTable.set("TC",-8200);
		this.deltaHTable.set("CG",-10600);
		this.deltaHTable.set("GC",-9800);
		this.deltaHTable.set("GG",-8000);
		this.deltaHTable.set("CC",-8000);
	}
	,populateDeltaSTable: function() {
		this.deltaSTable.set("AA",-22.2);
		this.deltaSTable.set("TT",-22.2);
		this.deltaSTable.set("AT",-20.4);
		this.deltaSTable.set("TA",-21.3);
		this.deltaSTable.set("CA",-22.7);
		this.deltaSTable.set("TG",-22.7);
		this.deltaSTable.set("GT",-22.4);
		this.deltaSTable.set("AC",-22.4);
		this.deltaSTable.set("CT",-21.0);
		this.deltaSTable.set("AG",-21.0);
		this.deltaSTable.set("GA",-22.2);
		this.deltaSTable.set("TC",-22.2);
		this.deltaSTable.set("CG",-27.2);
		this.deltaSTable.set("GC",-24.4);
		this.deltaSTable.set("GG",-19.9);
		this.deltaSTable.set("CC",-19.9);
	}
	,populateEndHTable: function() {
		this.endHTable.set("A",2300);
		this.endHTable.set("T",2300);
		this.endHTable.set("G",100);
		this.endHTable.set("C",100);
	}
	,populateEndSTable: function() {
		this.endSTable.set("A",4.1);
		this.endSTable.set("T",4.1);
		this.endSTable.set("G",-2.8);
		this.endSTable.set("C",-2.8);
	}
	,getDeltaH: function(primerSeq) {
		var dnaSeq = primerSeq.getSequence();
		var seqLen = dnaSeq.length;
		var startNuc = dnaSeq.charAt(0);
		var endNuc = dnaSeq.charAt(seqLen - 1);
		var startH = this.endHTable.get(startNuc);
		var endH = this.endHTable.get(endNuc);
		var deltaH = startH + endH;
		var _g1 = 1;
		var _g = seqLen;
		while(_g1 < _g) {
			var i = _g1++;
			var currNuc = dnaSeq.charAt(i);
			var currH = this.deltaHTable.get(startNuc + currNuc);
			startNuc = currNuc;
			deltaH += currH;
		}
		return deltaH;
	}
	,getDeltaS: function(primerSeq) {
		var dnaSeq = primerSeq.getSequence();
		var seqLen = dnaSeq.length;
		var startNuc = dnaSeq.charAt(0);
		var endNuc = dnaSeq.charAt(seqLen - 1);
		var startS = this.endSTable.get(startNuc);
		var endS = this.endSTable.get(endNuc);
		var deltaS = startS + endS;
		var _g1 = 1;
		var _g = seqLen;
		while(_g1 < _g) {
			var i = _g1++;
			var currNuc = dnaSeq.charAt(i);
			var currS = this.deltaSTable.get(startNuc + currNuc);
			startNuc = currNuc;
			deltaS += currS;
		}
		return deltaS;
	}
	,saltCorrection: function(primerSeq,saltConc) {
		var saltPenalty = 0.368;
		var dnaSeq = primerSeq.getSequence();
		var seqLen = dnaSeq.length;
		saltConc /= 1000.0;
		var lnSalt = Math.log(saltConc);
		var deltaS = this.getDeltaS(primerSeq);
		var saltCorrDeltaS = deltaS + saltPenalty * (seqLen - 1) * lnSalt;
		return saltCorrDeltaS;
	}
	,tmCalculation: function(primerSeq,saltConc,primerConc) {
		var deltaH = this.getDeltaH(primerSeq);
		var saltCorrDeltaS = this.saltCorrection(primerSeq,saltConc);
		var gasConst = 1.987;
		var lnPrimerConc = Math.log(primerConc / 1000000000 / 2);
		var tmKelvin = deltaH / (saltCorrDeltaS + gasConst * lnPrimerConc);
		var tmCelcius = tmKelvin - 273.15;
		if(tmCelcius > 75) {
			return 75;
		} else {
			return tmCelcius;
		}
	}
	,__class__: saturn.core.TmCalc
};
saturn.core.User = $hxClasses["saturn.core.User"] = function() {
};
saturn.core.User.__name__ = ["saturn","core","User"];
saturn.core.User.prototype = {
	id: null
	,username: null
	,password: null
	,firstname: null
	,lastname: null
	,email: null
	,fullname: null
	,uuid: null
	,token: null
	,projects: null
	,__class__: saturn.core.User
};
saturn.core.Util = $hxClasses["saturn.core.Util"] = function() {
};
saturn.core.Util.__name__ = ["saturn","core","Util"];
saturn.core.Util.debug = function(msg) {
	saturn.client.core.ClientCore.getClientCore().debug(msg);
};
saturn.core.Util.inspect = function(obj) {
};
saturn.core.Util.print = function(msg) {
	saturn.client.WorkspaceApplication.getApplication().debug(msg);
};
saturn.core.Util.openw = function(path) {
	return null;
};
saturn.core.Util.opentemp = function(prefix,cb) {
};
saturn.core.Util.isHostEnvironmentAvailable = function() {
	return saturn.client.WorkspaceApplication.getApplication().isHostEnvironmentAvailable();
};
saturn.core.Util.exec = function(program,args,cb) {
	saturn.core.Util.getNewExternalProcess(function(process) {
		process.start(program,args);
		process.waitForClose(function(state) {
			if(state == "") {
				cb(0);
			} else {
				cb(-1);
			}
		});
	});
};
saturn.core.Util.getNewExternalProcess = function(cb) {
	saturn.client.WorkspaceApplication.getApplication().getNewQtProcess(cb);
};
saturn.core.Util.getNewFileDialog = function(cb) {
	saturn.client.WorkspaceApplication.getApplication().getNewFileDialog(cb);
};
saturn.core.Util.saveFileAsDialog = function(contents,cb) {
	saturn.core.Util.getNewFileDialog(function(err,dialog) {
		dialog.setSelectExisting(false);
		dialog.fileSelected.connect(function(fileName) {
			js.Browser.alert(fileName);
			saturn.core.Util.debug("Hello, saving " + fileName);
			saturn.core.Util.saveFile(fileName,contents,function(err1) {
				cb(err1,fileName);
			});
		});
		dialog.open();
	});
};
saturn.core.Util.saveFile = function(fileName,contents,cb) {
	saturn.core.Util.getNewExternalProcess(function(process) {
		process.writeFile(fileName,contents,function(err) {
			cb(err);
		});
	});
};
saturn.core.Util.jsImports = function(paths,cb) {
	var errs = new haxe.ds.StringMap();
	var next = null;
	next = function() {
		if(paths.length == 0) {
			cb(errs);
		} else {
			var path = paths.pop();
			saturn.core.Util.jsImport(path,function(err) {
				errs.set(path,err);
				next();
			});
		}
	};
	next();
};
saturn.core.Util.jsImport = function(path,cb) {
	saturn.core.Util.readFile(path,function(err,content) {
		if(err == null) {
			if(content != null) {
				saturn.core.Util.print(content);
				saturn.core.Util.print("Content");
				js.Lib.eval(content);
			} else {
				err = "Empty import";
			}
		}
		cb(err);
	});
};
saturn.core.Util.openFileAsDialog = function(cb) {
	saturn.core.Util.getNewFileDialog(function(err,dialog) {
		dialog.setSelectExisting(true);
		dialog.fileSelected.connect(function(fileName) {
			saturn.core.Util.readFile(fileName,function(err1,contents) {
				cb(err1,fileName,contents);
			});
		});
		dialog.open();
	});
};
saturn.core.Util.readFile = function(fileName,cb) {
	saturn.core.Util.getNewExternalProcess(function(process) {
		process.readFile(fileName,function(contents) {
			if(contents != null) {
				cb(null,contents);
			} else {
				cb("Unable to read file",null);
			}
		});
	});
};
saturn.core.Util.open = function(path,cb) {
	saturn.core.Util.getNewExternalProcess(function(process) {
		process.readFile(function(contents) {
			if(contents == null) {
				cb("Unable to read file",null);
			} else {
				cb(null,contents);
			}
		});
	});
};
saturn.core.Util.getProvider = function() {
	return saturn.client.core.CommonCore.getDefaultProvider();
};
saturn.core.Util.string = function(a) {
	return Std.string(a);
};
saturn.core.Util.clone = function(obj) {
	var ser = haxe.Serializer.run(obj);
	return haxe.Unserializer.run(ser);
};
saturn.core.Util.prototype = {
	__class__: saturn.core.Util
};
saturn.core.Stream = $hxClasses["saturn.core.Stream"] = function(streamId) {
	this.streamId = streamId;
};
saturn.core.Stream.__name__ = ["saturn","core","Stream"];
saturn.core.Stream.prototype = {
	streamId: null
	,write: function(content) {
	}
	,end: function(cb) {
	}
	,__class__: saturn.core.Stream
};
saturn.core.WONKASession = $hxClasses["saturn.core.WONKASession"] = function() {
};
saturn.core.WONKASession.__name__ = ["saturn","core","WONKASession"];
saturn.core.WONKASession.prototype = {
	src: null
	,__class__: saturn.core.WONKASession
};
saturn.core.annotations.AnnotationSupplier = $hxClasses["saturn.core.annotations.AnnotationSupplier"] = function() {
};
saturn.core.annotations.AnnotationSupplier.__name__ = ["saturn","core","annotations","AnnotationSupplier"];
saturn.core.annotations.AnnotationSupplier.prototype = {
	annotate: function(sequence,name,annotationName,config,cb) {
		var m = new saturn.core.molecule.Molecule(sequence);
		m.setMoleculeName(name);
		this.annotateMolecule(m,annotationName,config,cb);
	}
	,annotateMolecule: function(molecule,annotationName,config,cb) {
		cb(null,null);
	}
	,__class__: saturn.core.annotations.AnnotationSupplier
};
saturn.core.annotations.PfamSupplier = $hxClasses["saturn.core.annotations.PfamSupplier"] = function() {
	saturn.core.annotations.AnnotationSupplier.call(this);
};
saturn.core.annotations.PfamSupplier.__name__ = ["saturn","core","annotations","PfamSupplier"];
saturn.core.annotations.PfamSupplier.__super__ = saturn.core.annotations.AnnotationSupplier;
saturn.core.annotations.PfamSupplier.prototype = $extend(saturn.core.annotations.AnnotationSupplier.prototype,{
	annotateMolecule: function(molecule,annotationName,annotationConfig,cb) {
		molecule.setAnnotations(null,annotationName);
		molecule.setRawAnnotationData(null,annotationName);
		var chain = new saturn.workflow.Chain();
		var config = new saturn.workflow.HMMerConfig(saturn.workflow.HMMerProgram.HMMSEARCH);
		var tmp = ">" + molecule.getMoleculeName() + "\n" + molecule.getSequence();
		config.setFastaContent(tmp);
		config.setHMMPath("databases/Pfam-A.hmm");
		chain.add("saturn.workflow.HMMer.query",config);
		chain.start(function(error) {
			if(error != null) {
				saturn.client.WorkspaceApplication.getApplication().showMessage("Error",error);
				return;
			}
			var outputFile = "../" + (js.Boot.__cast(config.getResponse() , saturn.workflow.HMMerResponse)).getTableOutputPath();
			saturn.client.core.CommonCore.getContent(outputFile,function(content) {
				var annotations = [];
				var p = new saturn.core.parsers.HmmerParser(null,function(objs,iter) {
					var _g = 0;
					while(_g < objs.length) {
						var obj = objs[_g];
						++_g;
						if(obj.evalue <= 0.001 && obj.altevalue <= 0.001) {
							var p1 = obj.referent.entityId.split(".");
							obj.referent.entityId = p1[0];
							annotations.push(obj);
						}
					}
					iter.next();
				},function(err) {
					if(annotationConfig.removeOverlaps) {
						var kept = [];
						var removed = [];
						var _g1 = 0;
						while(_g1 < annotations.length) {
							var obj1 = annotations[_g1];
							++_g1;
							var keep = true;
							var _g11 = 0;
							while(_g11 < annotations.length) {
								var obj2 = annotations[_g11];
								++_g11;
								if(Math.max(obj1.start,obj2.start) <= Math.min(obj1.stop,obj2.stop)) {
									if(obj1.evalue > obj2.evalue) {
										keep = false;
										break;
									} else if(obj1.evalue == obj2.evalue) {
										if(obj1.stop - obj1.start < obj2.stop - obj2.start) {
											keep = false;
											break;
										}
									}
								}
							}
							if(keep) {
								kept.push(obj1);
							} else {
								saturn.core.Util.debug("Removing " + obj1.referent.entityId);
							}
						}
						annotations = kept;
					}
					molecule.setAnnotations(annotations,annotationName);
					molecule.setRawAnnotationData(outputFile,annotationName);
					cb(err,annotations);
				});
				p.setContent(content);
			});
		});
	}
	,__class__: saturn.core.annotations.PfamSupplier
});
if(!saturn.core.domain) saturn.core.domain = {};
saturn.core.domain.ABITrace = $hxClasses["saturn.core.domain.ABITrace"] = function() {
	this.setup();
};
saturn.core.domain.ABITrace.__name__ = ["saturn","core","domain","ABITrace"];
saturn.core.domain.ABITrace.prototype = {
	id: null
	,name: null
	,CH1: null
	,CH2: null
	,CH3: null
	,CH4: null
	,LABELS: null
	,SEQ: null
	,ALN_LABELS: null
	,ANNOTATIONS: null
	,alignment: null
	,traceDataJson: null
	,setup: function() {
		this.CH1 = [];
		this.CH2 = [];
		this.CH3 = [];
		this.CH4 = [];
		this.LABELS = [];
		this.SEQ = [];
		this.ALN_LABELS = [];
		this.ANNOTATIONS = [];
		this.alignment = null;
		if(this.traceDataJson != null) {
			this.setData(JSON.parse(this.traceDataJson));
		}
	}
	,isEmpty: function() {
		if(this.CH1.length == 0 && this.CH2.length == 0 && this.CH3.length == 0) {
			return this.CH4.length == 0;
		} else {
			return false;
		}
	}
	,setData: function(traceData) {
		this.CH1 = traceData.CH1;
		this.CH2 = traceData.CH2;
		this.CH3 = traceData.CH3;
		this.CH4 = traceData.CH4;
		this.LABELS = traceData.LABELS;
		this.SEQ = traceData.SEQ;
		this.traceDataJson = JSON.stringify(traceData);
	}
	,getSequence: function() {
		var strBuf = new StringBuf();
		var _g = 0;
		var _g1 = this.SEQ;
		while(_g < _g1.length) {
			var $char = _g1[_g];
			++_g;
			strBuf.add($char);
		}
		return strBuf.toString();
	}
	,trim: function(start,stop) {
		var trimmedTraceData = new saturn.core.domain.ABITrace();
		trimmedTraceData.CH1 = [];
		trimmedTraceData.CH2 = [];
		trimmedTraceData.CH3 = [];
		trimmedTraceData.CH4 = [];
		trimmedTraceData.LABELS = [];
		trimmedTraceData.SEQ = [];
		var _g1 = start;
		var _g = stop;
		while(_g1 < _g) {
			var i = _g1++;
			trimmedTraceData.CH1.push(this.CH1[i]);
			trimmedTraceData.CH2.push(this.CH2[i]);
			trimmedTraceData.CH3.push(this.CH3[i]);
			trimmedTraceData.CH4.push(this.CH4[i]);
			trimmedTraceData.LABELS.push(this.LABELS[i]);
			if(trimmedTraceData.LABELS[i] != "") {
				trimmedTraceData.SEQ.push(trimmedTraceData.LABELS[i]);
			}
		}
		if(this.ALN_LABELS.length > 0) {
			var _g11 = start;
			var _g2 = stop;
			while(_g11 < _g2) {
				var i1 = _g11++;
				trimmedTraceData.ALN_LABELS.push(this.ALN_LABELS[i1]);
			}
		}
		return trimmedTraceData;
	}
	,align: function(aln,isForwards) {
		var alnStrs = aln.getAlignmentRegion();
		var template = alnStrs[0];
		var query = alnStrs[1];
		var newTrace = new saturn.core.domain.ABITrace();
		var seqPos = 0;
		var _g1 = 0;
		var _g = this.getReadingCount();
		while(_g1 < _g) {
			var i = _g1++;
			if(this.CH1[i] == -1) {
				continue;
			}
			var c = this.LABELS[i];
			if(c != "") {
				while(true) {
					var alnChar = template.charAt(seqPos);
					if(alnChar == "-") {
						var _g2 = 0;
						while(_g2 < 2) {
							var j = _g2++;
							newTrace.CH1.push(-1);
							newTrace.CH2.push(-1);
							newTrace.CH3.push(-1);
							newTrace.CH4.push(-1);
							newTrace.LABELS.push("");
							newTrace.ALN_LABELS.push("");
						}
						newTrace.CH1.push(-1);
						newTrace.CH2.push(-1);
						newTrace.CH3.push(-1);
						newTrace.CH4.push(-1);
						newTrace.LABELS.push("-");
						newTrace.ALN_LABELS.push(query.charAt(seqPos));
						var _g21 = 0;
						while(_g21 < 2) {
							var j1 = _g21++;
							newTrace.CH1.push(-1);
							newTrace.CH2.push(-1);
							newTrace.CH3.push(-1);
							newTrace.CH4.push(-1);
							newTrace.LABELS.push("");
							newTrace.ALN_LABELS.push("");
						}
						++seqPos;
					} else {
						newTrace.ALN_LABELS.push(query.charAt(seqPos++));
						break;
					}
				}
			} else {
				newTrace.ALN_LABELS.push("");
			}
			newTrace.CH1.push(this.CH1[i]);
			newTrace.CH2.push(this.CH2[i]);
			newTrace.CH3.push(this.CH3[i]);
			newTrace.CH4.push(this.CH4[i]);
			newTrace.LABELS.push(this.LABELS[i]);
			newTrace.SEQ.push(this.SEQ[i]);
		}
		newTrace.alignment = aln;
		return newTrace;
	}
	,getReadingCount: function() {
		return this.CH1.length;
	}
	,setName: function(name) {
		this.name = name;
	}
	,__class__: saturn.core.domain.ABITrace
};
saturn.core.domain.Alignment = $hxClasses["saturn.core.domain.Alignment"] = function() {
	this.emptyInit();
};
saturn.core.domain.Alignment.__name__ = ["saturn","core","domain","Alignment"];
saturn.core.domain.Alignment.prototype = {
	objectIds: null
	,alignmentURL: null
	,content: null
	,name: null
	,id: null
	,emptyInit: function() {
		this.objectIds = new haxe.ds.StringMap();
	}
	,addObject: function(objectId) {
		this.objectIds.set(objectId,true);
	}
	,removeObject: function(objectId) {
		this.objectIds.remove(objectId);
	}
	,getAlignmentObjectIds: function() {
		var newObjectIds = [];
		var objectId = this.objectIds.keys();
		while(objectId.hasNext()) {
			var objectId1 = objectId.next();
			newObjectIds.push(objectId1);
		}
		return newObjectIds;
	}
	,setAlignmentObjectIds: function(newObjectIds) {
		this.objectIds = new haxe.ds.StringMap();
		var _g = 0;
		while(_g < newObjectIds.length) {
			var objectId = newObjectIds[_g];
			++_g;
			this.objectIds.set(objectId,true);
		}
	}
	,objectExists: function(objectId) {
		return this.objectIds.exists(objectId);
	}
	,setAlignmentURL: function(alignmentURL) {
		this.alignmentURL = alignmentURL;
		this.content = null;
	}
	,getAlignmentURL: function() {
		return this.alignmentURL;
	}
	,setAlignmentContent: function(content) {
		this.content = content;
	}
	,getAlignmentContent: function() {
		return this.content;
	}
	,setName: function(name) {
		this.name = name;
	}
	,__class__: saturn.core.domain.Alignment
};
saturn.core.domain.Compound = $hxClasses["saturn.core.domain.Compound"] = function() {
	this.datestamp = new Date(1,2,3,4,5,6);
	this.compoundId = "Compound";
};
saturn.core.domain.Compound.__name__ = ["saturn","core","domain","Compound"];
saturn.core.domain.Compound.appendMolImage = function(objs,structureField,outputField,format) {
	var _g = 0;
	while(_g < objs.length) {
		var row = objs[_g];
		++_g;
		var value = Reflect.field(row,structureField);
		if(value == "" || value == null) {
			value = "";
		} else {
			var s = saturn.core.domain.Compound.getMolImage(value,format);
			value = s;
		}
		Reflect.setField(row,outputField,value);
	}
};
saturn.core.domain.Compound.getMolImage = function(value,format) {
	if(!saturn.core.domain.Compound.molCache.exists(format)) {
		saturn.core.domain.Compound.molCache.set(format,new haxe.ds.StringMap());
	}
	if(!saturn.core.domain.Compound.molCache.get(format).exists(value)) {
		try {
			var rdkit = RDKit;
			var mol = null;
			if(format == "SDF") {
				mol = rdkit.Molecule.MolBlockToMol(value);
			} else {
				mol = rdkit.Molecule.fromSmiles(value);
			}
			mol.Kekulize();
			var s = mol.Drawing2D();
			s = saturn.core.domain.Compound.r.replace(s,"");
			s = saturn.core.domain.Compound.rw.replace(s,"width=\"100%\"");
			s = saturn.core.domain.Compound.rh.replace(s,"height=\"100%\" viewBox=\"0 0 300 300\"");
			saturn.core.domain.Compound.molCache.get(format).set(value,s);
		} catch( err ) {
			saturn.core.domain.Compound.molCache.get(format).set(value,null);
		}
	}
	return saturn.core.domain.Compound.molCache.get(format).get(value);
};
saturn.core.domain.Compound.clearMolCache = function() {
	var format = saturn.core.domain.Compound.molCache.keys();
	while(format.hasNext()) {
		var format1 = format.next();
		var key = saturn.core.domain.Compound.molCache.get(format1).keys();
		while(key.hasNext()) {
			var key1 = key.next();
			saturn.core.domain.Compound.molCache.get(format1).remove(key1);
		}
	}
};
saturn.core.domain.Compound.prototype = {
	id: null
	,compoundId: null
	,supplierId: null
	,shortCompoundId: null
	,sdf: null
	,supplier: null
	,description: null
	,concentration: null
	,location: null
	,solute: null
	,comments: null
	,mw: null
	,confidential: null
	,datestamp: null
	,person: null
	,inchi: null
	,smiles: null
	,setup: function() {
	}
	,substructureSearch: function(cb) {
		js.Browser.alert("Hello World!!!!");
	}
	,assaySearch: function(cb) {
		var _gthis = this;
		saturn.client.WorkspaceApplication.getApplication().getProvider().getByNamedQuery("compound_assay_search",[this.compoundId],null,false,function(json,error) {
			var dwin = js.Browser.get_window();
			dwin.results = json;
			dwin.error = error;
			var r = new EReg("svg:","g");
			var rw = new EReg("width='300px'","g");
			var rh = new EReg("height='300px'","g");
			if(error == null) {
				var table = new saturn.core.Table();
				table.setFixedRowHeight(50);
				var d = json;
				table.setData(json,{ "SDF" : { "renderer" : function(value) {
					return "<div>" + saturn.core.domain.Compound.getMolImage(value,"SDF") + "</div>";
				}}});
				table.name = _gthis.compoundId + " (Assay Results)";
				saturn.client.WorkspaceApplication.getApplication().getWorkspace().addObject(table,true);
			}
		});
	}
	,test: function(cb) {
		var protein = new saturn.core.Protein("ATGC");
		protein.name = "Test Me";
		saturn.client.WorkspaceApplication.getApplication().getWorkspace().addObject(protein,true);
	}
	,__class__: saturn.core.domain.Compound
};
saturn.core.domain.DataSource = $hxClasses["saturn.core.domain.DataSource"] = function() {
};
saturn.core.domain.DataSource.__name__ = ["saturn","core","domain","DataSource"];
saturn.core.domain.DataSource.getEntities = function(source,cb) {
	var p = saturn.core.Util.getProvider();
	p.getById(source,saturn.core.domain.DataSource,function(obj,err) {
		if(err != null) {
			cb(err,null);
		} else if(obj == null) {
			cb("Data source not found " + source,null);
		} else {
			saturn.core.Util.debug("Retreiving records for source " + source);
			var tmp = saturn.core.Util.string(obj.id);
			p.getByValues([tmp],saturn.core.domain.Entity,"dataSourceId",function(objs,error) {
				saturn.core.Util.debug("Entities retrieved for source " + source);
				if(error != null) {
					cb("An error occurred retrieving data source " + source + " entities\n" + error,null);
				} else {
					cb(null,objs);
				}
			});
		}
	});
};
saturn.core.domain.DataSource.getSource = function(source,insert,cb) {
	var p = saturn.core.Util.getProvider();
	p.getById(source,saturn.core.domain.DataSource,function(obj,err) {
		if(err != null) {
			cb("An error occurred looking for source: " + source + "\n" + err,null);
		} else if(obj == null) {
			if(insert) {
				var obj1 = new saturn.core.domain.DataSource();
				obj1.name = source;
				p.insert(source,function(err1) {
					if(err1 != null) {
						cb("An error occurred inserting source: " + source + "\n" + err1,null);
					} else {
						p.getById(source,saturn.core.domain.DataSource,function(obj2,err2) {
							if(err2 != null) {
								cb("An error occurred looking for source: " + source + "\n" + err2,null);
							} else if(obj2 == null) {
								cb("Inserted source " + source + " could not be found",null);
							} else {
								cb(null,obj2);
							}
						});
					}
				});
			} else {
				cb(null,null);
			}
		} else {
			cb(null,obj);
		}
	});
};
saturn.core.domain.DataSource.prototype = {
	id: null
	,name: null
	,__class__: saturn.core.domain.DataSource
};
saturn.core.domain.Entity = $hxClasses["saturn.core.domain.Entity"] = function() {
};
saturn.core.domain.Entity.__name__ = ["saturn","core","domain","Entity"];
saturn.core.domain.Entity.insertList = function(ids,source,cb) {
	var uqx = new haxe.ds.StringMap();
	var _g = 0;
	while(_g < ids.length) {
		var id = ids[_g];
		++_g;
		uqx.set(id,id);
	}
	ids = [];
	var id1 = uqx.keys();
	while(id1.hasNext()) {
		var id2 = id1.next();
		ids.push(id2);
	}
	saturn.core.domain.DataSource.getSource(source,false,function(err,sourceObj) {
		if(err != null) {
			cb(err,null);
		} else if(sourceObj == null) {
			cb("Unable to find source " + source,null);
		} else {
			var objs = [];
			var _g1 = 0;
			while(_g1 < ids.length) {
				var id3 = ids[_g1];
				++_g1;
				var entity = new saturn.core.domain.Entity();
				entity.entityId = id3;
				entity.dataSourceId = sourceObj.id;
				objs.push(entity);
			}
			var p = saturn.core.Util.getProvider();
			p.insertObjects(objs,function(err1) {
				if(err1 != null) {
					cb("An error occurred inserting entities\n" + err1,null);
				} else {
					p.getByIds(ids,saturn.core.domain.Entity,function(objs1,err2) {
						if(err2 != null) {
							cb("An error occurred looking for inserted objects\n" + err2,null);
						} else {
							cb(null,objs1);
						}
					});
				}
			});
		}
	});
};
saturn.core.domain.Entity.getObjects = function(ids,cb) {
	var p = saturn.core.Util.getProvider();
	p.getByIds(ids,saturn.core.domain.Entity,function(objs,err) {
		if(err != null) {
			cb(err,null);
		} else {
			cb(null,objs);
		}
	});
};
saturn.core.domain.Entity.prototype = {
	id: null
	,entityId: null
	,dataSourceId: null
	,reactionId: null
	,entityTypeId: null
	,altName: null
	,description: null
	,source: null
	,reaction: null
	,entityType: null
	,__class__: saturn.core.domain.Entity
};
saturn.core.domain.FileProxy = $hxClasses["saturn.core.domain.FileProxy"] = function() {
};
saturn.core.domain.FileProxy.__name__ = ["saturn","core","domain","FileProxy"];
saturn.core.domain.FileProxy.prototype = {
	path: null
	,content: null
	,__class__: saturn.core.domain.FileProxy
};
saturn.core.domain.Glycan = $hxClasses["saturn.core.domain.Glycan"] = function() {
	this.glycanId = "Glycan";
};
saturn.core.domain.Glycan.__name__ = ["saturn","core","domain","Glycan"];
saturn.core.domain.Glycan.prototype = {
	id: null
	,glycanId: null
	,content: null
	,contentType: null
	,__class__: saturn.core.domain.Glycan
};
saturn.core.domain.Molecule = $hxClasses["saturn.core.domain.Molecule"] = function() {
};
saturn.core.domain.Molecule.__name__ = ["saturn","core","domain","Molecule"];
saturn.core.domain.Molecule.prototype = {
	id: null
	,name: null
	,sequence: null
	,entityId: null
	,entity: null
	,__class__: saturn.core.domain.Molecule
};
saturn.core.domain.MoleculeAnnotation = $hxClasses["saturn.core.domain.MoleculeAnnotation"] = function() {
};
saturn.core.domain.MoleculeAnnotation.__name__ = ["saturn","core","domain","MoleculeAnnotation"];
saturn.core.domain.MoleculeAnnotation.prototype = {
	id: null
	,entityId: null
	,labelId: null
	,start: null
	,stop: null
	,evalue: null
	,altevalue: null
	,entity: null
	,referent: null
	,__class__: saturn.core.domain.MoleculeAnnotation
};
saturn.core.domain.Uploader = $hxClasses["saturn.core.domain.Uploader"] = function(source,evalue) {
	this.initialised = false;
	this.source = source;
	this.cutoff = evalue;
};
saturn.core.domain.Uploader.__name__ = ["saturn","core","domain","Uploader"];
saturn.core.domain.Uploader.prototype = {
	referentMap: null
	,provider: null
	,generator: null
	,initialised: null
	,source: null
	,cutoff: null
	,next: function(items,generator) {
		var _gthis = this;
		this.generator = generator;
		if(this.initialised == false) {
			this.provider = saturn.core.Util.getProvider();
			this.setupReferentMap(function(err) {
				if(err != null) {
					generator.die(err);
				} else {
					_gthis.initialised = true;
					_gthis.next(items,generator);
				}
			});
		} else {
			if(items.length == 0) {
				return;
			}
			var ids = saturn.db.Model.generateUniqueListWithField(items,"entity.entityId");
			var acList = saturn.db.Model.generateUniqueListWithField(items,"referent.entityId");
			var newReferents = [];
			var _g = 0;
			while(_g < acList.length) {
				var id = acList[_g];
				++_g;
				if(!this.referentMap.exists(id)) {
					newReferents.push(id);
				}
			}
			var _g1 = 0;
			while(_g1 < items.length) {
				var item = items[_g1];
				++_g1;
				if(item.evalue > this.cutoff) {
					HxOverrides.remove(items,item);
				}
			}
			this.insertReferents(newReferents,function(err1) {
				if(err1 != null) {
					generator.die(err1);
				} else {
					_gthis.provider.insertObjects(items,function(err2) {
						if(err2 != null) {
							generator.die(err2);
						} else {
							generator.next();
						}
					});
				}
			});
		}
	}
	,setupReferentMap: function(cb) {
		var _gthis = this;
		saturn.core.domain.DataSource.getEntities(this.source,function(err,objs) {
			if(err != null) {
				cb(err);
			} else {
				_gthis.referentMap = saturn.db.Model.generateIDMap(objs);
				cb(null);
			}
		});
	}
	,insertReferents: function(accessions,cb) {
		var _gthis = this;
		if(accessions.length == 0) {
			cb(null);
		} else {
			saturn.core.domain.Entity.insertList(accessions,this.source,function(err,objs) {
				if(err == null) {
					var _g = 0;
					while(_g < objs.length) {
						var obj = objs[_g];
						++_g;
						_gthis.referentMap.set(obj.entityId,obj.id);
					}
				}
				cb(err);
			});
		}
	}
	,__class__: saturn.core.domain.Uploader
};
saturn.core.domain.SaturnSession = $hxClasses["saturn.core.domain.SaturnSession"] = function() {
};
saturn.core.domain.SaturnSession.__name__ = ["saturn","core","domain","SaturnSession"];
saturn.core.domain.SaturnSession.prototype = {
	id: null
	,userName: null
	,isPublic: null
	,sessionContent: null
	,sessionName: null
	,user: null
	,load: function(cb) {
		var rawSession = JSON.parse(this.sessionContent);
		saturn.client.WorkspaceApplication.getApplication().getWorkspace()._openWorkspace(rawSession);
	}
	,getShortDescription: function() {
		if(this.user != null) {
			return this.user.fullname + " - " + this.sessionName.split("-")[1];
		} else {
			return this.sessionName;
		}
	}
	,__class__: saturn.core.domain.SaturnSession
};
saturn.core.domain.SgcAllele = $hxClasses["saturn.core.domain.SgcAllele"] = $hx_exports["saturn"]["core"]["domain"]["SgcAllele"] = function() {
	saturn.core.DNA.call(this,null);
	this.setup();
};
saturn.core.domain.SgcAllele.__name__ = ["saturn","core","domain","SgcAllele"];
saturn.core.domain.SgcAllele.__super__ = saturn.core.DNA;
saturn.core.domain.SgcAllele.prototype = $extend(saturn.core.DNA.prototype,{
	alleleId: null
	,id: null
	,entryCloneId: null
	,forwardPrimerId: null
	,reversePrimerId: null
	,dnaSeq: null
	,proteinSeq: null
	,plateWell: null
	,plate: null
	,entryClone: null
	,elnId: null
	,status: null
	,complex: null
	,forwardPrimer: null
	,reversePrimer: null
	,proteinSequenceObj: null
	,setup: function() {
		this.setSequence(this.dnaSeq);
		this.sequenceField = "dnaSeq";
		if(this.proteinSequenceObj == null) {
			this.proteinSequenceObj = new saturn.core.Protein(null);
		}
		this.addProtein("Translation",this.proteinSequenceObj);
	}
	,getMoleculeName: function() {
		return this.alleleId;
	}
	,loadProtein: function(cb) {
		this.proteinSequenceObj.setName(this.alleleId + " (Protein)");
		this.proteinSequenceObj.setDNA(this);
		cb(this.proteinSequenceObj);
	}
	,setSequence: function(sequence) {
		saturn.core.DNA.prototype.setSequence.call(this,sequence);
		this.dnaSeq = sequence;
	}
	,__class__: saturn.core.domain.SgcAllele
});
saturn.core.domain.SgcAllelePlate = $hxClasses["saturn.core.domain.SgcAllelePlate"] = function() {
};
saturn.core.domain.SgcAllelePlate.__name__ = ["saturn","core","domain","SgcAllelePlate"];
saturn.core.domain.SgcAllelePlate.prototype = {
	plateName: null
	,id: null
	,elnRef: null
	,setup: function() {
	}
	,loadPlate: function(cb) {
		var platedata = new saturn.core.MultiAlleleHelperData();
		platedata.setPlateName(this.plateName);
		var platewo = new saturn.client.workspace.MultiAlleleHelperWO(platedata,this.plateName);
		cb(platewo);
	}
	,__class__: saturn.core.domain.SgcAllelePlate
};
saturn.core.domain.SgcClone = $hxClasses["saturn.core.domain.SgcClone"] = function() {
};
saturn.core.domain.SgcClone.__name__ = ["saturn","core","domain","SgcClone"];
saturn.core.domain.SgcClone.prototype = {
	id: null
	,cloneId: null
	,constructId: null
	,construct: null
	,elnId: null
	,comments: null
	,setup: function() {
	}
	,__class__: saturn.core.domain.SgcClone
};
saturn.core.domain.SgcConstruct = $hxClasses["saturn.core.domain.SgcConstruct"] = function() {
	saturn.core.DNA.call(this,null);
	this.setup();
};
saturn.core.domain.SgcConstruct.__name__ = ["saturn","core","domain","SgcConstruct"];
saturn.core.domain.SgcConstruct.getNewMenuText = function() {
	return "Construct";
};
saturn.core.domain.SgcConstruct.__super__ = saturn.core.DNA;
saturn.core.domain.SgcConstruct.prototype = $extend(saturn.core.DNA.prototype,{
	constructId: null
	,id: null
	,proteinSeq: null
	,proteinSeqNoTag: null
	,dnaSeq: null
	,docId: null
	,vectorId: null
	,alleleId: null
	,constructStart: null
	,constructStop: null
	,vector: null
	,person: null
	,status: null
	,allele: null
	,wellId: null
	,constructPlate: null
	,res1: null
	,res2: null
	,expectedMassNoTag: null
	,expectedMass: null
	,elnId: null
	,constructComments: null
	,proteinSequenceObj: null
	,proteinSequenceNoTagObj: null
	,complex: null
	,setup: function() {
		this.setSequence(this.dnaSeq);
		this.sequenceField = "dnaSeq";
		if(this.proteinSequenceObj == null) {
			this.proteinSequenceObj = new saturn.core.Protein(null);
		}
		if(this.proteinSequenceNoTagObj == null) {
			this.proteinSequenceNoTagObj = new saturn.core.Protein(null);
		}
		this.addProtein("Translation",this.proteinSequenceObj);
		this.addProtein("Translation No Tag",this.proteinSequenceNoTagObj);
	}
	,getMoleculeName: function() {
		return this.constructId;
	}
	,setSequence: function(sequence) {
		saturn.core.DNA.prototype.setSequence.call(this,sequence);
		this.dnaSeq = sequence;
	}
	,loadProtein: function(cb) {
		this.proteinSequenceObj.setName(this.constructId + " (Protein)");
		this.proteinSequenceObj.setDNA(this);
		cb(this.proteinSequenceObj);
	}
	,loadProteinNoTag: function(cb) {
		this.proteinSequenceNoTagObj.setName(this.constructId + " (Protein No Tag)");
		cb(this.proteinSequenceNoTagObj);
	}
	,__class__: saturn.core.domain.SgcConstruct
});
saturn.core.domain.SgcConstructPlate = $hxClasses["saturn.core.domain.SgcConstructPlate"] = function() {
};
saturn.core.domain.SgcConstructPlate.__name__ = ["saturn","core","domain","SgcConstructPlate"];
saturn.core.domain.SgcConstructPlate.prototype = {
	plateName: null
	,id: null
	,elnRef: null
	,setup: function() {
	}
	,loadPlate: function(cb) {
		var platedata = new saturn.core.MultiConstructHelperData();
		platedata.setPlateName(this.plateName);
		var platewo = new saturn.client.workspace.MultiConstructHelperWO(platedata,this.plateName);
		cb(platewo);
	}
	,__class__: saturn.core.domain.SgcConstructPlate
};
saturn.core.domain.SgcConstructStatus = $hxClasses["saturn.core.domain.SgcConstructStatus"] = function() { };
saturn.core.domain.SgcConstructStatus.__name__ = ["saturn","core","domain","SgcConstructStatus"];
saturn.core.domain.SgcConstructStatus.prototype = {
	constructPkey: null
	,status: null
	,setup: function() {
	}
	,__class__: saturn.core.domain.SgcConstructStatus
};
saturn.core.domain.SgcDomain = $hxClasses["saturn.core.domain.SgcDomain"] = function() {
};
saturn.core.domain.SgcDomain.__name__ = ["saturn","core","domain","SgcDomain"];
saturn.core.domain.SgcDomain.prototype = {
	id: null
	,accession: null
	,start: null
	,stop: null
	,targetId: null
	,setup: function() {
	}
	,__class__: saturn.core.domain.SgcDomain
};
saturn.core.domain.SgcEntryClone = $hxClasses["saturn.core.domain.SgcEntryClone"] = function() {
	saturn.core.DNA.call(this,null);
	this.setup();
};
saturn.core.domain.SgcEntryClone.__name__ = ["saturn","core","domain","SgcEntryClone"];
saturn.core.domain.SgcEntryClone.__super__ = saturn.core.DNA;
saturn.core.domain.SgcEntryClone.prototype = $extend(saturn.core.DNA.prototype,{
	entryCloneId: null
	,id: null
	,dnaSeq: null
	,target: null
	,seqSource: null
	,sourceId: null
	,sequenceConfirmed: null
	,elnId: null
	,complex: null
	,proteinSequenceObj: null
	,getMoleculeName: function() {
		return this.entryCloneId;
	}
	,setup: function() {
		this.setSequence(this.dnaSeq);
		if(this.dnaSeq != null && this.dnaSeq != "" && this.dnaSeq.length > 2) {
			this.proteinSequenceObj = new saturn.core.Protein(this.getFrameTranslation(saturn.core.GeneticCodes.STANDARD,saturn.core.Frame.ONE));
		} else {
			this.proteinSequenceObj = new saturn.core.Protein(null);
		}
		this.proteinSequenceObj.setDNA(this);
		this.addProtein("Translation",this.proteinSequenceObj);
	}
	,setSequence: function(sequence) {
		saturn.core.DNA.prototype.setSequence.call(this,sequence);
		this.dnaSeq = sequence;
		if(this.proteinSequenceObj != null && this.dnaSeq != null && this.dnaSeq != "" && this.dnaSeq.length > 2) {
			this.proteinSequenceObj.setSequence(this.getFrameTranslation(saturn.core.GeneticCodes.STANDARD,saturn.core.Frame.ONE));
		}
	}
	,loadTranslation: function(cb) {
		this.proteinSequenceObj.setName(this.entryCloneId + " (Protein)");
		cb(this.proteinSequenceObj);
	}
	,__class__: saturn.core.domain.SgcEntryClone
});
saturn.core.domain.SgcExpression = $hxClasses["saturn.core.domain.SgcExpression"] = function() {
};
saturn.core.domain.SgcExpression.__name__ = ["saturn","core","domain","SgcExpression"];
saturn.core.domain.SgcExpression.prototype = {
	id: null
	,expressionId: null
	,cloneId: null
	,clone: null
	,elnId: null
	,comments: null
	,setup: function() {
	}
	,__class__: saturn.core.domain.SgcExpression
};
saturn.core.domain.SgcForwardPrimer = $hxClasses["saturn.core.domain.SgcForwardPrimer"] = function() {
	saturn.core.DNA.call(this,null);
};
saturn.core.domain.SgcForwardPrimer.__name__ = ["saturn","core","domain","SgcForwardPrimer"];
saturn.core.domain.SgcForwardPrimer.__super__ = saturn.core.DNA;
saturn.core.domain.SgcForwardPrimer.prototype = $extend(saturn.core.DNA.prototype,{
	primerId: null
	,id: null
	,dnaSequence: null
	,targetId: null
	,setup: function() {
		this.setSequence(this.dnaSequence);
	}
	,getMoleculeName: function() {
		return this.primerId;
	}
	,setSequence: function(sequence) {
		saturn.core.DNA.prototype.setSequence.call(this,sequence);
		this.dnaSequence = sequence;
	}
	,__class__: saturn.core.domain.SgcForwardPrimer
});
saturn.core.domain.SgcPurification = $hxClasses["saturn.core.domain.SgcPurification"] = function() {
};
saturn.core.domain.SgcPurification.__name__ = ["saturn","core","domain","SgcPurification"];
saturn.core.domain.SgcPurification.prototype = {
	id: null
	,purificationId: null
	,expressionId: null
	,expression: null
	,column: null
	,elnId: null
	,comments: null
	,setup: function() {
	}
	,__class__: saturn.core.domain.SgcPurification
};
saturn.core.domain.SgcRestrictionSite = $hxClasses["saturn.core.domain.SgcRestrictionSite"] = function() {
	saturn.core.DNA.call(this,null);
	this.allowStar = true;
};
saturn.core.domain.SgcRestrictionSite.__name__ = ["saturn","core","domain","SgcRestrictionSite"];
saturn.core.domain.SgcRestrictionSite.__super__ = saturn.core.DNA;
saturn.core.domain.SgcRestrictionSite.prototype = $extend(saturn.core.DNA.prototype,{
	enzymeName: null
	,cutSequence: null
	,id: null
	,setup: function() {
		this.setSequence(this.cutSequence);
	}
	,setSequence: function(sequence) {
		saturn.core.DNA.prototype.setSequence.call(this,sequence);
		this.cutSequence = sequence;
	}
	,getSequence: function() {
		return this.cutSequence;
	}
	,__class__: saturn.core.domain.SgcRestrictionSite
});
saturn.core.domain.SgcReversePrimer = $hxClasses["saturn.core.domain.SgcReversePrimer"] = function() {
	saturn.core.DNA.call(this,null);
};
saturn.core.domain.SgcReversePrimer.__name__ = ["saturn","core","domain","SgcReversePrimer"];
saturn.core.domain.SgcReversePrimer.__super__ = saturn.core.DNA;
saturn.core.domain.SgcReversePrimer.prototype = $extend(saturn.core.DNA.prototype,{
	primerId: null
	,id: null
	,dnaSequence: null
	,targetId: null
	,setup: function() {
		this.setSequence(this.dnaSequence);
	}
	,getMoleculeName: function() {
		return this.primerId;
	}
	,setSequence: function(sequence) {
		saturn.core.DNA.prototype.setSequence.call(this,sequence);
		this.dnaSequence = sequence;
	}
	,__class__: saturn.core.domain.SgcReversePrimer
});
saturn.core.domain.SgcSeqData = $hxClasses["saturn.core.domain.SgcSeqData"] = function() {
};
saturn.core.domain.SgcSeqData.__name__ = ["saturn","core","domain","SgcSeqData"];
saturn.core.domain.SgcSeqData.prototype = {
	id: null
	,type: null
	,sequence: null
	,version: null
	,targetId: null
	,target: null
	,crc: null
	,setup: function() {
		if(this.sequence != null) {
			this.crc = haxe.crypto.Md5.encode(this.sequence);
		} else {
			this.crc = "";
		}
	}
	,__class__: saturn.core.domain.SgcSeqData
};
saturn.core.domain.SgcTarget = $hxClasses["saturn.core.domain.SgcTarget"] = function() {
	saturn.core.DNA.call(this,null);
	this.setup();
};
saturn.core.domain.SgcTarget.__name__ = ["saturn","core","domain","SgcTarget"];
saturn.core.domain.SgcTarget.__super__ = saturn.core.DNA;
saturn.core.domain.SgcTarget.prototype = $extend(saturn.core.DNA.prototype,{
	targetId: null
	,id: null
	,gi: null
	,dnaSeq: null
	,proteinSeq: null
	,geneId: null
	,activeStatus: null
	,pi: null
	,comments: null
	,proteinSequenceObj: null
	,complexComments: null
	,eln: null
	,complex: null
	,complexOverride: null
	,setup: function() {
		this.setSequence(this.dnaSeq);
		this.setName(this.targetId);
		this.sequenceField = "dnaSeq";
		if(this.proteinSequenceObj == null) {
			this.proteinSequenceObj = new saturn.core.Protein(null);
		}
		this.addProtein("Translation",this.proteinSequenceObj);
	}
	,proteinSequenceUpdated: function(sequence) {
		this.proteinSeq = sequence;
	}
	,setSequence: function(sequence) {
		saturn.core.DNA.prototype.setSequence.call(this,sequence);
		this.dnaSeq = sequence;
	}
	,loadWonka: function() {
		var so = new saturn.core.WONKASession();
		so.src = "/WONKA/" + this.targetId + "/Summarise";
		var wo = new saturn.client.workspace.WONKAWO(so,"WONKA " + this.targetId);
		saturn.client.WorkspaceApplication.getApplication().getWorkspace().addObject(wo,true);
	}
	,__class__: saturn.core.domain.SgcTarget
});
saturn.core.domain.SgcUtil = $hxClasses["saturn.core.domain.SgcUtil"] = function() {
};
saturn.core.domain.SgcUtil.__name__ = ["saturn","core","domain","SgcUtil"];
saturn.core.domain.SgcUtil.generateNextIDForClasses = function(provider,targets,clazzes,cb) {
	var classToIds = new haxe.ds.StringMap();
	var next = null;
	next = function() {
		var clazz = clazzes.pop();
		saturn.core.domain.SgcUtil.generateNextID(provider,targets,clazz,function(map,error) {
			if(error != null) {
				cb(null,error);
			} else {
				var key = Type.getClassName(clazz);
				classToIds.set(key,map);
				if(clazzes.length == 0) {
					cb(classToIds,null);
				} else {
					next();
				}
			}
		});
	};
	next();
};
saturn.core.domain.SgcUtil.generateNextID = function(provider,targets,clazz,cb) {
	var q = new saturn.db.query_lang.Query(provider);
	var s = q.getSelect();
	var model = provider.getModel(clazz);
	var idField = new saturn.db.query_lang.Field(clazz,model.getFirstKey());
	q.getSelect().add(idField.substr(1,idField.instr("-",1).minus(1))["as"]("target"));
	q.getSelect().add(idField.substr(idField.instr("-",1).plus(2),idField.length())["as"]("ID"));
	var _g1 = 0;
	var _g = targets.length;
	while(_g1 < _g) {
		var i = _g1++;
		var target = targets[i];
		q.getWhere().add(idField.like(new saturn.db.query_lang.Value(target).concat("%")));
		if(i < targets.length - 1) {
			q.getWhere().addToken(new saturn.db.query_lang.Or());
		}
	}
	var q2 = new saturn.db.query_lang.Query(provider);
	q2.fetchRawResults();
	q2.getSelect().add(new saturn.db.query_lang.Field(null,"target","a")["as"]("targetName"));
	q2.getSelect().add(new saturn.db.query_lang.Trim(new saturn.db.query_lang.Max(new saturn.db.query_lang.ToNumber(new saturn.db.query_lang.Field(null,"ID","a"))))["as"]("lastId"));
	q2.getFrom().add(q["as"]("a"));
	q2.getGroup().add(new saturn.db.query_lang.Field(null,"target","a"));
	q2.run(function(objs,err) {
		if(err != null) {
			cb(null,err);
		} else {
			var map = new haxe.ds.StringMap();
			var _g2 = 0;
			while(_g2 < objs.length) {
				var obj = objs[_g2];
				++_g2;
				var nextId = Std.parseInt(obj.lastId) + 1;
				if(isNaN(nextId) || nextId == null || nextId == "null") {
					nextId = 0;
				}
				Reflect.setField(obj,"lastId",nextId);
				saturn.core.Util.debug(obj.targetName);
				map.set(obj.targetName,obj.lastId);
			}
			var _g3 = 0;
			while(_g3 < targets.length) {
				var target1 = targets[_g3];
				++_g3;
				if(!map.exists(target1)) {
					map.set(target1,1);
				}
			}
			cb(map,null);
		}
	});
};
saturn.core.domain.SgcUtil.prototype = {
	__class__: saturn.core.domain.SgcUtil
};
saturn.core.domain.SgcVector = $hxClasses["saturn.core.domain.SgcVector"] = function() {
	this.addStopCodon = "no";
	saturn.core.DNA.call(this,null);
};
saturn.core.domain.SgcVector.__name__ = ["saturn","core","domain","SgcVector"];
saturn.core.domain.SgcVector.__super__ = saturn.core.DNA;
saturn.core.domain.SgcVector.prototype = $extend(saturn.core.DNA.prototype,{
	vectorId: null
	,id: null
	,vectorComments: null
	,proteaseName: null
	,proteaseCutSequence: null
	,proteaseProduct: null
	,antibiotic: null
	,organism: null
	,res1Id: null
	,res2Id: null
	,res1: null
	,res2: null
	,addStopCodon: null
	,requiredForwardExtension: null
	,requiredReverseExtension: null
	,setup: function() {
	}
	,__class__: saturn.core.domain.SgcVector
});
saturn.core.domain.SgcXtalDataSet = $hxClasses["saturn.core.domain.SgcXtalDataSet"] = function() {
};
saturn.core.domain.SgcXtalDataSet.__name__ = ["saturn","core","domain","SgcXtalDataSet"];
saturn.core.domain.SgcXtalDataSet.prototype = {
	id: null
	,xtalDataSetId: null
	,xtalMountId: null
	,estimatedResolution: null
	,scaledResolution: null
	,xtalMount: null
	,beamline: null
	,outcome: null
	,dsType: null
	,visit: null
	,spaceGroup: null
	,dateRecordCreated: null
	,setup: function() {
	}
	,__class__: saturn.core.domain.SgcXtalDataSet
};
saturn.core.domain.SgcXtalDeposition = $hxClasses["saturn.core.domain.SgcXtalDeposition"] = function() {
};
saturn.core.domain.SgcXtalDeposition.__name__ = ["saturn","core","domain","SgcXtalDeposition"];
saturn.core.domain.SgcXtalDeposition.prototype = {
	id: null
	,pdbId: null
	,xtalModelId: null
	,counted: null
	,site: null
	,followUp: null
	,dateDeposited: null
	,xtalModel: null
	,depType: null
	,setup: function() {
	}
	,__class__: saturn.core.domain.SgcXtalDeposition
};
saturn.core.domain.SgcXtalForm = $hxClasses["saturn.core.domain.SgcXtalForm"] = function() {
};
saturn.core.domain.SgcXtalForm.__name__ = ["saturn","core","domain","SgcXtalForm"];
saturn.core.domain.SgcXtalForm.prototype = {
	id: null
	,formId: null
	,phasingId: null
	,a: null
	,b: null
	,c: null
	,alpha: null
	,beta: null
	,gamma: null
	,spaceGroup: null
	,latticeSymbol: null
	,lattice: null
	,xtalPhasing: null
	,setup: function() {
	}
	,__class__: saturn.core.domain.SgcXtalForm
};
saturn.core.domain.SgcXtalModel = $hxClasses["saturn.core.domain.SgcXtalModel"] = function() {
};
saturn.core.domain.SgcXtalModel.__name__ = ["saturn","core","domain","SgcXtalModel"];
saturn.core.domain.SgcXtalModel.prototype = {
	id: null
	,xtalModelId: null
	,modelType: null
	,compound1Id: null
	,compound2Id: null
	,xtalDataSetId: null
	,status: null
	,pathToCrystallographicPDB: null
	,pathToChemistsPDB: null
	,pathToXDSLog: null
	,pathToMTZ: null
	,estimatedEffort: null
	,proofingEffort: null
	,spaceGroup: null
	,xtalDataDataSet: null
	,setup: function() {
	}
	,__class__: saturn.core.domain.SgcXtalModel
};
saturn.core.domain.SgcXtalMount = $hxClasses["saturn.core.domain.SgcXtalMount"] = function() {
};
saturn.core.domain.SgcXtalMount.__name__ = ["saturn","core","domain","SgcXtalMount"];
saturn.core.domain.SgcXtalMount.prototype = {
	id: null
	,xtalMountId: null
	,xtbmId: null
	,xtalProjectId: null
	,dropStatus: null
	,compoundId: null
	,pinId: null
	,xtalFormId: null
	,xtbm: null
	,xtalProject: null
	,compound: null
	,xtalForm: null
	,setup: function() {
	}
	,__class__: saturn.core.domain.SgcXtalMount
};
saturn.core.domain.SgcXtalPhasing = $hxClasses["saturn.core.domain.SgcXtalPhasing"] = function() {
};
saturn.core.domain.SgcXtalPhasing.__name__ = ["saturn","core","domain","SgcXtalPhasing"];
saturn.core.domain.SgcXtalPhasing.prototype = {
	id: null
	,phasingId: null
	,xtalDataSetId: null
	,phasingMethod: null
	,phasingConfidence: null
	,spaceGroup: null
	,xtalDataSet: null
	,setup: function() {
	}
	,__class__: saturn.core.domain.SgcXtalPhasing
};
saturn.core.domain.SgcXtalPlate = $hxClasses["saturn.core.domain.SgcXtalPlate"] = function() {
};
saturn.core.domain.SgcXtalPlate.__name__ = ["saturn","core","domain","SgcXtalPlate"];
saturn.core.domain.SgcXtalPlate.prototype = {
	id: null
	,barcode: null
	,purificationId: null
	,purification: null
	,setup: function() {
	}
	,__class__: saturn.core.domain.SgcXtalPlate
};
saturn.core.domain.SgcXtalProject = $hxClasses["saturn.core.domain.SgcXtalProject"] = function() {
};
saturn.core.domain.SgcXtalProject.__name__ = ["saturn","core","domain","SgcXtalProject"];
saturn.core.domain.SgcXtalProject.prototype = {
	id: null
	,xtalProjectId: null
	,dataPath: null
	,targetId: null
	,target: null
	,setup: function() {
	}
	,__class__: saturn.core.domain.SgcXtalProject
};
saturn.core.domain.SgcXtbm = $hxClasses["saturn.core.domain.SgcXtbm"] = function() {
};
saturn.core.domain.SgcXtbm.__name__ = ["saturn","core","domain","SgcXtbm"];
saturn.core.domain.SgcXtbm.prototype = {
	id: null
	,xtbmId: null
	,plateRow: null
	,plateColumn: null
	,subwell: null
	,xtalPlateId: null
	,barcode: null
	,xtalPlate: null
	,score: null
	,setup: function() {
	}
	,__class__: saturn.core.domain.SgcXtbm
};
saturn.core.domain.StructureModel = $hxClasses["saturn.core.domain.StructureModel"] = function() {
	this.ribbonOn = true;
	this.wireOn = false;
};
saturn.core.domain.StructureModel.__name__ = ["saturn","core","domain","StructureModel"];
saturn.core.domain.StructureModel.prototype = {
	id: null
	,modelId: null
	,contents: null
	,pdb: null
	,pathToPdb: null
	,ribbonOn: null
	,wireOn: null
	,labelsOn: null
	,renderer: null
	,icbURL: null
	,getContent: function() {
		if(this.contents != null) {
			return this.contents;
		} else if(this.pdb != null) {
			var array = new Uint8Array(this.pdb.content);
			var stringjs = String;
			var contents = "";
			var _g1 = 0;
			var _g = array.length;
			while(_g1 < _g) {
				var i = _g1++;
				contents += String.fromCharCode(array[i]);
			}
			return contents;
		} else {
			return null;
		}
	}
	,__class__: saturn.core.domain.StructureModel
};
saturn.core.domain.TextFile = $hxClasses["saturn.core.domain.TextFile"] = function() {
	this.autoRun = false;
	this.setup();
};
saturn.core.domain.TextFile.__name__ = ["saturn","core","domain","TextFile"];
saturn.core.domain.TextFile.prototype = {
	id: null
	,name: null
	,autoRun: null
	,value: null
	,setup: function() {
	}
	,getName: function() {
		return this.name;
	}
	,setText: function(content) {
		this.value = content;
	}
	,__class__: saturn.core.domain.TextFile
};
saturn.core.domain.TiddlyWiki = $hxClasses["saturn.core.domain.TiddlyWiki"] = function() {
};
saturn.core.domain.TiddlyWiki.__name__ = ["saturn","core","domain","TiddlyWiki"];
saturn.core.domain.TiddlyWiki.prototype = {
	id: null
	,pageId: null
	,content: null
	,setup: function() {
	}
	,__class__: saturn.core.domain.TiddlyWiki
};
if(!saturn.core.domain.chromohub) saturn.core.domain.chromohub = {};
saturn.core.domain.chromohub.Target = $hxClasses["saturn.core.domain.chromohub.Target"] = function() {
};
saturn.core.domain.chromohub.Target.__name__ = ["saturn","core","domain","chromohub","Target"];
saturn.core.domain.chromohub.Target.prototype = {
	id: null
	,targetId: null
	,symbol: null
	,geneid: null
	,uniprot: null
	,__class__: saturn.core.domain.chromohub.Target
};
if(!saturn.core.exceptions) saturn.core.exceptions = {};
saturn.core.exceptions.LocusPrimerMissingException = $hxClasses["saturn.core.exceptions.LocusPrimerMissingException"] = function(message,primer) {
	saturn.util.HaxeException.call(this,message);
	this.thePrimer = primer;
};
saturn.core.exceptions.LocusPrimerMissingException.__name__ = ["saturn","core","exceptions","LocusPrimerMissingException"];
saturn.core.exceptions.LocusPrimerMissingException.__super__ = saturn.util.HaxeException;
saturn.core.exceptions.LocusPrimerMissingException.prototype = $extend(saturn.util.HaxeException.prototype,{
	thePrimer: null
	,getPrimer: function() {
		return this.thePrimer;
	}
	,__class__: saturn.core.exceptions.LocusPrimerMissingException
});
saturn.core.exceptions.MultiLocusPrimerException = $hxClasses["saturn.core.exceptions.MultiLocusPrimerException"] = function(message,primer) {
	saturn.util.HaxeException.call(this,message);
	this.thePrimer = primer;
};
saturn.core.exceptions.MultiLocusPrimerException.__name__ = ["saturn","core","exceptions","MultiLocusPrimerException"];
saturn.core.exceptions.MultiLocusPrimerException.__super__ = saturn.util.HaxeException;
saturn.core.exceptions.MultiLocusPrimerException.prototype = $extend(saturn.util.HaxeException.prototype,{
	thePrimer: null
	,getPrimer: function() {
		return this.thePrimer;
	}
	,__class__: saturn.core.exceptions.MultiLocusPrimerException
});
saturn.core.molecule.MoleculeFloatAttribute = $hxClasses["saturn.core.molecule.MoleculeFloatAttribute"] = { __ename__ : ["saturn","core","molecule","MoleculeFloatAttribute"], __constructs__ : ["MW","MW_CONDESATION"] };
saturn.core.molecule.MoleculeFloatAttribute.MW = ["MW",0];
saturn.core.molecule.MoleculeFloatAttribute.MW.toString = $estr;
saturn.core.molecule.MoleculeFloatAttribute.MW.__enum__ = saturn.core.molecule.MoleculeFloatAttribute;
saturn.core.molecule.MoleculeFloatAttribute.MW_CONDESATION = ["MW_CONDESATION",1];
saturn.core.molecule.MoleculeFloatAttribute.MW_CONDESATION.toString = $estr;
saturn.core.molecule.MoleculeFloatAttribute.MW_CONDESATION.__enum__ = saturn.core.molecule.MoleculeFloatAttribute;
saturn.core.molecule.MoleculeStringAttribute = $hxClasses["saturn.core.molecule.MoleculeStringAttribute"] = { __ename__ : ["saturn","core","molecule","MoleculeStringAttribute"], __constructs__ : ["NAME"] };
saturn.core.molecule.MoleculeStringAttribute.NAME = ["NAME",0];
saturn.core.molecule.MoleculeStringAttribute.NAME.toString = $estr;
saturn.core.molecule.MoleculeStringAttribute.NAME.__enum__ = saturn.core.molecule.MoleculeStringAttribute;
saturn.core.molecule.MoleculeAlignMode = $hxClasses["saturn.core.molecule.MoleculeAlignMode"] = { __ename__ : ["saturn","core","molecule","MoleculeAlignMode"], __constructs__ : ["REGEX","SIMPLE"] };
saturn.core.molecule.MoleculeAlignMode.REGEX = ["REGEX",0];
saturn.core.molecule.MoleculeAlignMode.REGEX.toString = $estr;
saturn.core.molecule.MoleculeAlignMode.REGEX.__enum__ = saturn.core.molecule.MoleculeAlignMode;
saturn.core.molecule.MoleculeAlignMode.SIMPLE = ["SIMPLE",1];
saturn.core.molecule.MoleculeAlignMode.SIMPLE.toString = $estr;
saturn.core.molecule.MoleculeAlignMode.SIMPLE.__enum__ = saturn.core.molecule.MoleculeAlignMode;
saturn.core.molecule.MoleculeConstants = $hxClasses["saturn.core.molecule.MoleculeConstants"] = function() { };
saturn.core.molecule.MoleculeConstants.__name__ = ["saturn","core","molecule","MoleculeConstants"];
saturn.core.molecule.MoleculeSets = $hxClasses["saturn.core.molecule.MoleculeSets"] = { __ename__ : ["saturn","core","molecule","MoleculeSets"], __constructs__ : ["STANDARD"] };
saturn.core.molecule.MoleculeSets.STANDARD = ["STANDARD",0];
saturn.core.molecule.MoleculeSets.STANDARD.toString = $estr;
saturn.core.molecule.MoleculeSets.STANDARD.__enum__ = saturn.core.molecule.MoleculeSets;
saturn.core.molecule.MoleculeSetRegistry = $hxClasses["saturn.core.molecule.MoleculeSetRegistry"] = function() {
	this.moleculeSets = new haxe.ds.StringMap();
	this.register(saturn.core.molecule.MoleculeSets.STANDARD,new saturn.core.StandardMoleculeSet());
};
saturn.core.molecule.MoleculeSetRegistry.__name__ = ["saturn","core","molecule","MoleculeSetRegistry"];
saturn.core.molecule.MoleculeSetRegistry.getStandardMoleculeSet = function() {
	return saturn.core.molecule.MoleculeSetRegistry.defaultRegistry.get(saturn.core.molecule.MoleculeSets.STANDARD);
};
saturn.core.molecule.MoleculeSetRegistry.prototype = {
	moleculeSets: null
	,register: function(setType,set) {
		this.registerSet(Std.string(setType),set);
	}
	,get: function(setType) {
		return this.getSet(Std.string(setType));
	}
	,registerSet: function(name,set) {
		this.moleculeSets.set(name,set);
	}
	,getSet: function(name) {
		return this.moleculeSets.get(name);
	}
	,__class__: saturn.core.molecule.MoleculeSetRegistry
};
if(!saturn.core.parsers) saturn.core.parsers = {};
saturn.core.parsers.BaseParser = $hxClasses["saturn.core.parsers.BaseParser"] = function(path,handler,done) {
	this.lineCount = 0;
	var _gthis = this;
	saturn.core.Generator.call(this,-1);
	this.doneCB = done;
	this.path = path;
	this.setMaxAtOnce(200);
	this.onEnd(done);
	this.onNext(function(objs,next,c) {
		handler(objs,_gthis);
	});
	if(path != null) {
		this.read();
	}
};
saturn.core.parsers.BaseParser.__name__ = ["saturn","core","parsers","BaseParser"];
saturn.core.parsers.BaseParser.__super__ = saturn.core.Generator;
saturn.core.parsers.BaseParser.prototype = $extend(saturn.core.Generator.prototype,{
	doneCB: null
	,path: null
	,content: null
	,lineCount: null
	,setContent: function(content) {
		this.content = content;
		this.read();
	}
	,read: function() {
		var _gthis = this;
		if(this.path != null) {
			saturn.core.Util.open(this.path,function(err,line) {
				if(err != null) {
					_gthis.die("Error reading file");
				} else {
					_gthis.lineCount++;
					if(line == null) {
						saturn.core.Util.debug("Lines read: " + _gthis.lineCount);
						_gthis.finished();
					} else {
						var obj = _gthis.parseLine(line);
						if(obj != null) {
							_gthis.push(obj);
						}
					}
				}
			});
		} else if(this.content != null) {
			var lines = this.content.split("\n");
			var _g = 0;
			while(_g < lines.length) {
				var line1 = lines[_g];
				++_g;
				var obj1 = this.parseLine(line1);
				if(obj1 != null) {
					this.push(obj1);
				}
			}
			this.finished();
		}
	}
	,parseLine: function(line) {
		return null;
	}
	,__class__: saturn.core.parsers.BaseParser
});
saturn.core.parsers.HmmerParser = $hxClasses["saturn.core.parsers.HmmerParser"] = function(path,handler,done) {
	this.colSep = new EReg("\\s+","g");
	saturn.core.parsers.BaseParser.call(this,path,handler,done);
};
saturn.core.parsers.HmmerParser.__name__ = ["saturn","core","parsers","HmmerParser"];
saturn.core.parsers.HmmerParser.__super__ = saturn.core.parsers.BaseParser;
saturn.core.parsers.HmmerParser.prototype = $extend(saturn.core.parsers.BaseParser.prototype,{
	colSep: null
	,parseLine: function(line) {
		if(line.indexOf("#") == 0 || line == "") {
			return null;
		} else {
			var cols = this.colSep.split(line);
			var queryName = cols[0];
			var domainDescr = cols[3];
			var domainName = cols[4];
			var start = cols[19];
			var stop = cols[20];
			var evalue = Std.parseFloat(cols[6]);
			var cdevalue = Std.parseFloat(cols[11]);
			var entity = new saturn.core.domain.Entity();
			entity.entityId = queryName;
			var referent = new saturn.core.domain.Entity();
			referent.entityId = domainName;
			referent.altName = domainDescr;
			var annotation = new saturn.core.domain.MoleculeAnnotation();
			annotation.entity = entity;
			annotation.referent = referent;
			annotation.start = Std.parseInt(start);
			annotation.stop = Std.parseInt(stop);
			annotation.evalue = cdevalue;
			annotation.altevalue = evalue;
			return annotation;
		}
	}
	,__class__: saturn.core.parsers.HmmerParser
});
if(!saturn.core.scarab) saturn.core.scarab = {};
saturn.core.scarab.LabPage = $hxClasses["saturn.core.scarab.LabPage"] = function() {
};
saturn.core.scarab.LabPage.__name__ = ["saturn","core","scarab","LabPage"];
saturn.core.scarab.LabPage.findAll = function(phrase,cb) {
	saturn.core.Util.getProvider().getByNamedQuery("SCARAB_ELN_QUERY",[phrase,phrase,phrase,phrase],saturn.core.scarab.LabPage,false,function(objs,err) {
		cb(objs,err);
	});
};
saturn.core.scarab.LabPage.prototype = {
	id: null
	,experimentNo: null
	,dateStarted: null
	,title: null
	,userId: null
	,elnDocumentId: null
	,minEditableItem: null
	,lastEdited: null
	,user: null
	,sharingAllowed: null
	,personalTemplate: null
	,globalTemplate: null
	,dateExperimentStarted: null
	,userObj: null
	,items: null
	,relatedLabPages: null
	,sharedTo: null
	,tags: null
	,getShortDescription: function() {
		return this.title + " (" + this.experimentNo + ")";
	}
	,__class__: saturn.core.scarab.LabPage
};
saturn.core.scarab.LabPageItem = $hxClasses["saturn.core.scarab.LabPageItem"] = function() {
};
saturn.core.scarab.LabPageItem.__name__ = ["saturn","core","scarab","LabPageItem"];
saturn.core.scarab.LabPageItem.prototype = {
	id: null
	,itemOrder: null
	,caption: null
	,elnSectionId: null
	,__class__: saturn.core.scarab.LabPageItem
};
saturn.core.scarab.LabPageAttachments = $hxClasses["saturn.core.scarab.LabPageAttachments"] = function() {
	saturn.core.scarab.LabPageItem.call(this);
};
saturn.core.scarab.LabPageAttachments.__name__ = ["saturn","core","scarab","LabPageAttachments"];
saturn.core.scarab.LabPageAttachments.__super__ = saturn.core.scarab.LabPageItem;
saturn.core.scarab.LabPageAttachments.prototype = $extend(saturn.core.scarab.LabPageItem.prototype,{
	modifiedInICMdb: null
	,__class__: saturn.core.scarab.LabPageAttachments
});
saturn.core.scarab.LabPageExcel = $hxClasses["saturn.core.scarab.LabPageExcel"] = function() {
	saturn.core.scarab.LabPageItem.call(this);
};
saturn.core.scarab.LabPageExcel.__name__ = ["saturn","core","scarab","LabPageExcel"];
saturn.core.scarab.LabPageExcel.__super__ = saturn.core.scarab.LabPageItem;
saturn.core.scarab.LabPageExcel.prototype = $extend(saturn.core.scarab.LabPageItem.prototype,{
	excel: null
	,filename: null
	,html: null
	,htmlFolder: null
	,__class__: saturn.core.scarab.LabPageExcel
});
saturn.core.scarab.LabPageFileRefs = $hxClasses["saturn.core.scarab.LabPageFileRefs"] = function() {
	saturn.core.scarab.LabPageItem.call(this);
};
saturn.core.scarab.LabPageFileRefs.__name__ = ["saturn","core","scarab","LabPageFileRefs"];
saturn.core.scarab.LabPageFileRefs.__super__ = saturn.core.scarab.LabPageItem;
saturn.core.scarab.LabPageFileRefs.prototype = $extend(saturn.core.scarab.LabPageItem.prototype,{
	__class__: saturn.core.scarab.LabPageFileRefs
});
saturn.core.scarab.LabPageImage = $hxClasses["saturn.core.scarab.LabPageImage"] = function() {
	saturn.core.scarab.LabPageItem.call(this);
};
saturn.core.scarab.LabPageImage.__name__ = ["saturn","core","scarab","LabPageImage"];
saturn.core.scarab.LabPageImage.__super__ = saturn.core.scarab.LabPageItem;
saturn.core.scarab.LabPageImage.prototype = $extend(saturn.core.scarab.LabPageItem.prototype,{
	content: null
	,imageEdit: null
	,imageAnnot: null
	,vectorized: null
	,elnProperties: null
	,annotTexts: null
	,wmf: null
	,__class__: saturn.core.scarab.LabPageImage
});
saturn.core.scarab.LabPagePdf = $hxClasses["saturn.core.scarab.LabPagePdf"] = function() {
	saturn.core.scarab.LabPageItem.call(this);
};
saturn.core.scarab.LabPagePdf.__name__ = ["saturn","core","scarab","LabPagePdf"];
saturn.core.scarab.LabPagePdf.__super__ = saturn.core.scarab.LabPageItem;
saturn.core.scarab.LabPagePdf.prototype = $extend(saturn.core.scarab.LabPageItem.prototype,{
	pdf: null
	,image: null
	,__class__: saturn.core.scarab.LabPagePdf
});
saturn.core.scarab.LabPageTag = $hxClasses["saturn.core.scarab.LabPageTag"] = function() {
};
saturn.core.scarab.LabPageTag.__name__ = ["saturn","core","scarab","LabPageTag"];
saturn.core.scarab.LabPageTag.prototype = {
	id: null
	,tagName: null
	,__class__: saturn.core.scarab.LabPageTag
};
saturn.core.scarab.LabPageText = $hxClasses["saturn.core.scarab.LabPageText"] = function() {
	saturn.core.scarab.LabPageItem.call(this);
};
saturn.core.scarab.LabPageText.__name__ = ["saturn","core","scarab","LabPageText"];
saturn.core.scarab.LabPageText.__super__ = saturn.core.scarab.LabPageItem;
saturn.core.scarab.LabPageText.prototype = $extend(saturn.core.scarab.LabPageItem.prototype,{
	content: null
	,__class__: saturn.core.scarab.LabPageText
});
saturn.core.scarab.LabPageUser = $hxClasses["saturn.core.scarab.LabPageUser"] = function() {
};
saturn.core.scarab.LabPageUser.__name__ = ["saturn","core","scarab","LabPageUser"];
saturn.core.scarab.LabPageUser.prototype = {
	id: null
	,fullName: null
	,__class__: saturn.core.scarab.LabPageUser
};
saturn.core.scarab.ScarabProject = $hxClasses["saturn.core.scarab.ScarabProject"] = function() {
};
saturn.core.scarab.ScarabProject.__name__ = ["saturn","core","scarab","ScarabProject"];
saturn.core.scarab.ScarabProject.prototype = {
	id: null
	,projectName: null
	,projectOwner: null
	,projectAdmins: null
	,projectPages: null
	,__class__: saturn.core.scarab.ScarabProject
};
if(!saturn.db) saturn.db = {};
saturn.db.BatchFetch = $hxClasses["saturn.db.BatchFetch"] = function(onError) {
	this.items = new haxe.ds.StringMap();
	this.fetchList = [];
	this.retrieved = new haxe.ds.StringMap();
	this.position = 0;
	this.onError = onError;
};
saturn.db.BatchFetch.__name__ = ["saturn","db","BatchFetch"];
saturn.db.BatchFetch.prototype = {
	fetchList: null
	,userOnError: null
	,userOnComplete: null
	,position: null
	,retrieved: null
	,onComplete: null
	,onError: null
	,provider: null
	,items: null
	,onFinish: function(cb) {
		this.onComplete = cb;
	}
	,getById: function(objectId,clazz,key,callBack) {
		var list = [];
		list.push(objectId);
		return this.getByIds(list,clazz,key,callBack);
	}
	,getByIds: function(objectIds,clazz,key,callBack) {
		var work = new haxe.ds.StringMap();
		work.set("IDS",objectIds);
		work.set("CLASS",clazz);
		work.set("TYPE","getByIds");
		work.set("KEY",key);
		work.set("CALLBACK",callBack);
		this.fetchList.push(work);
		return this;
	}
	,getByValue: function(value,clazz,field,key,callBack) {
		var list = [];
		list.push(value);
		return this.getByValues(list,clazz,field,key,callBack);
	}
	,getByValues: function(values,clazz,field,key,callBack) {
		var work = new haxe.ds.StringMap();
		work.set("VALUES",values);
		work.set("CLASS",clazz);
		work.set("FIELD",field);
		work.set("TYPE","getByValues");
		work.set("KEY",key);
		work.set("CALLBACK",callBack);
		this.fetchList.push(work);
		return this;
	}
	,getByPkey: function(objectId,clazz,key,callBack) {
		var list = [];
		list.push(objectId);
		return this.getByPkeys(list,clazz,key,callBack);
	}
	,getByPkeys: function(objectIds,clazz,key,callBack) {
		var work = new haxe.ds.StringMap();
		work.set("IDS",objectIds);
		work.set("CLASS",clazz);
		work.set("TYPE","getByPkeys");
		work.set("KEY",key);
		work.set("CALLBACK",callBack);
		this.fetchList.push(work);
		return this;
	}
	,append: function(val,field,clazz,cb) {
		var key = Type.getClassName(clazz) + "." + field;
		if(!this.items.exists(key)) {
			this.items.set(key,[]);
		}
		this.items.get(key).push({ val : val, field : field, clazz : clazz, cb : cb});
	}
	,next: function() {
		this.execute();
	}
	,setProvider: function(provider) {
		this.provider = provider;
	}
	,execute: function(cb) {
		var _gthis = this;
		var provider = this.provider;
		if(provider == null) {
			provider = saturn.client.core.CommonCore.getDefaultProvider();
		}
		if(cb != null) {
			this.onFinish(cb);
		}
		var key = this.items.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			var units = this.items.get(key1);
			var work = new haxe.ds.StringMap();
			work.set("TYPE","FETCHITEM");
			work.set("FIELD",units[0].field);
			work.set("CLASS",units[0].clazz);
			work.set("ITEMS",units);
			this.items.remove(key1);
			this.fetchList.push(work);
		}
		if(this.position == this.fetchList.length) {
			this.onComplete();
			return;
		}
		var work1 = this.fetchList[this.position];
		var type = work1.get("TYPE");
		this.position++;
		if(type == "getByIds") {
			provider.getByIds(work1.get("IDS"),work1.get("CLASS"),function(objs,exception) {
				if(exception != null || objs == null) {
					_gthis.onError(objs,exception);
				} else {
					_gthis.retrieved.set(work1.get("KEY"),objs);
					var userCallBack = work1.get("CALLBACK");
					if(userCallBack != null) {
						userCallBack(objs,exception);
					} else if(_gthis.position == _gthis.fetchList.length) {
						_gthis.onComplete();
					} else {
						_gthis.execute();
					}
				}
			});
		} else if(type == "getByValues") {
			provider.getByValues(work1.get("VALUES"),work1.get("CLASS"),work1.get("FIELD"),function(objs1,exception1) {
				if(exception1 != null || objs1 == null) {
					_gthis.onError(objs1,exception1);
				} else {
					_gthis.retrieved.set(work1.get("KEY"),objs1);
					var userCallBack1 = work1.get("CALLBACK");
					if(userCallBack1 != null) {
						userCallBack1(objs1,exception1);
					} else if(_gthis.position == _gthis.fetchList.length) {
						_gthis.onComplete();
					} else {
						_gthis.execute();
					}
				}
			});
		} else if(type == "getByPkeys") {
			provider.getByPkeys(work1.get("IDS"),work1.get("CLASS"),function(obj,exception2) {
				if(exception2 != null || obj == null) {
					_gthis.onError(obj,exception2);
				} else {
					_gthis.retrieved.set(work1.get("KEY"),obj);
					var userCallBack2 = work1.get("CALLBACK");
					if(userCallBack2 != null) {
						userCallBack2(obj,exception2);
					} else if(_gthis.position == _gthis.fetchList.length) {
						_gthis.onComplete();
					} else {
						_gthis.execute();
					}
				}
			});
		} else if(type == "FETCHITEM") {
			var items = work1.get("ITEMS");
			var itemMap = new haxe.ds.StringMap();
			var _g = 0;
			while(_g < items.length) {
				var item = items[_g];
				++_g;
				if(!itemMap.exists(item.val)) {
					var key2 = item.val;
					var value = [];
					itemMap.set(key2,value);
				}
				itemMap.get(item.val).push(item.cb);
			}
			var values = [];
			var key3 = itemMap.keys();
			while(key3.hasNext()) {
				var key4 = key3.next();
				values.push(key4);
			}
			var field = work1.get("FIELD");
			provider.getByValues(values,work1.get("CLASS"),field,function(objs2,exception3) {
				if(exception3 != null || objs2 == null) {
					_gthis.onError(objs2,exception3);
				} else {
					var _g1 = 0;
					while(_g1 < objs2.length) {
						var obj1 = objs2[_g1];
						++_g1;
						var fieldValue = Reflect.field(obj1,field);
						if(itemMap.exists(fieldValue)) {
							var _g11 = 0;
							var _g2 = itemMap.get(fieldValue);
							while(_g11 < _g2.length) {
								var cb1 = _g2[_g11];
								++_g11;
								cb1(obj1);
							}
						}
					}
					if(_gthis.position == _gthis.fetchList.length) {
						_gthis.onComplete();
					} else {
						_gthis.execute();
					}
				}
			});
		}
	}
	,getObject: function(key) {
		return this.retrieved.get(key);
	}
	,__class__: saturn.db.BatchFetch
};
saturn.db.Connection = $hxClasses["saturn.db.Connection"] = function() { };
saturn.db.Connection.__name__ = ["saturn","db","Connection"];
saturn.db.Connection.prototype = {
	execute: null
	,close: null
	,commit: null
	,setAutoCommit: null
	,__class__: saturn.db.Connection
};
saturn.db.Provider = $hxClasses["saturn.db.Provider"] = function() { };
saturn.db.Provider.__name__ = ["saturn","db","Provider"];
saturn.db.Provider.prototype = {
	getById: null
	,getByIds: null
	,getByPkey: null
	,getByPkeys: null
	,getByIdStartsWith: null
	,update: null
	,insert: null
	,'delete': null
	,generateQualifiedName: null
	,updateObjects: null
	,insertObjects: null
	,insertOrUpdate: null
	,rollback: null
	,commit: null
	,isAttached: null
	,sql: null
	,getByNamedQuery: null
	,getObjectFromCache: null
	,activate: null
	,getModel: null
	,getObjectModel: null
	,save: null
	,modelToReal: null
	,attach: null
	,resetCache: null
	,evictNamedQuery: null
	,readModels: null
	,dataBinding: null
	,isDataBinding: null
	,setSelectClause: null
	,_update: null
	,_insert: null
	,_delete: null
	,getByValue: null
	,getByValues: null
	,getObjects: null
	,queryPath: null
	,getModels: null
	,getModelClasses: null
	,connectAsUser: null
	,setConnectAsUser: null
	,enableCache: null
	,generatedLinkedClone: null
	,setUser: null
	,getUser: null
	,closeConnection: null
	,_closeConnection: null
	,setAutoCommit: null
	,setName: null
	,getName: null
	,getConfig: null
	,setConfig: null
	,evictObject: null
	,getByExample: null
	,query: null
	,getQuery: null
	,getProviderType: null
	,getModelByStringName: null
	,getConnection: null
	,uploadFile: null
	,addHook: null
	,__class__: saturn.db.Provider
};
saturn.db.DefaultProvider = $hxClasses["saturn.db.DefaultProvider"] = function(binding_map,config,autoClose) {
	this.user = null;
	this.namedQueryHookConfigs = new haxe.ds.StringMap();
	this.namedQueryHooks = new haxe.ds.StringMap();
	this.connectWithUserCreds = false;
	this.enableBinding = true;
	this.useCache = true;
	this.setPlatform();
	if(binding_map != null) {
		this.setModels(binding_map);
	}
	this.config = config;
	this.autoClose = autoClose;
	this.namedQueryHooks = new haxe.ds.StringMap();
	if(config != null && Reflect.hasField(config,"named_query_hooks")) {
		this.addHooks(Reflect.field(config,"named_query_hooks"));
	}
	var hook = this.namedQueryHooks.keys();
	while(hook.hasNext()) {
		var hook1 = hook.next();
		saturn.core.Util.debug("Installed hook: " + hook1 + "/" + Std.string(this.namedQueryHooks.get(hook1)));
	}
};
saturn.db.DefaultProvider.__name__ = ["saturn","db","DefaultProvider"];
saturn.db.DefaultProvider.__interfaces__ = [saturn.db.Provider];
saturn.db.DefaultProvider.prototype = {
	theBindingMap: null
	,fieldIndexMap: null
	,objectCache: null
	,namedQueryCache: null
	,useCache: null
	,enableBinding: null
	,connectWithUserCreds: null
	,namedQueryHooks: null
	,namedQueryHookConfigs: null
	,modelClasses: null
	,user: null
	,autoClose: null
	,name: null
	,config: null
	,winConversions: null
	,linConversions: null
	,conversions: null
	,regexs: null
	,platform: null
	,setPlatform: function() {
		return;
	}
	,generateQualifiedName: function(schemaName,tableName) {
		return null;
	}
	,getConfig: function() {
		return this.config;
	}
	,setConfig: function(config) {
		this.config = config;
	}
	,setName: function(name) {
		this.name = name;
	}
	,getName: function() {
		return this.name;
	}
	,setUser: function(user) {
		this.user = user;
		this._closeConnection();
	}
	,getUser: function() {
		return this.user;
	}
	,closeConnection: function(connection) {
		if(this.autoClose) {
			this._closeConnection();
		}
	}
	,_closeConnection: function() {
	}
	,generatedLinkedClone: function() {
		var clazz = Type.getClass(this);
		var provider = Type.createEmptyInstance(clazz);
		provider.theBindingMap = this.theBindingMap;
		provider.fieldIndexMap = this.fieldIndexMap;
		provider.namedQueryCache = this.namedQueryCache;
		provider.useCache = this.useCache;
		provider.enableBinding = this.enableBinding;
		provider.connectWithUserCreds = this.connectWithUserCreds;
		provider.namedQueryHooks = this.namedQueryHooks;
		provider.modelClasses = this.modelClasses;
		provider.platform = this.platform;
		provider.linConversions = this.linConversions;
		provider.winConversions = this.winConversions;
		provider.conversions = this.conversions;
		provider.regexs = this.regexs;
		provider.namedQueryHookConfigs = this.namedQueryHookConfigs;
		provider.config = this.config;
		provider.objectCache = new haxe.ds.StringMap();
		return provider;
	}
	,enableCache: function(cached) {
		this.useCache = cached;
	}
	,connectAsUser: function() {
		return this.connectWithUserCreds;
	}
	,setConnectAsUser: function(asUser) {
		this.connectWithUserCreds = asUser;
	}
	,setModels: function(binding_map) {
		this.theBindingMap = binding_map;
		var clazz = binding_map.keys();
		while(clazz.hasNext()) {
			var clazz1 = clazz.next();
			if(binding_map.get(clazz1).exists("polymorphic")) {
				if(!binding_map.get(clazz1).exists("fields.synthetic")) {
					binding_map.get(clazz1).set("fields.synthetic",new haxe.ds.StringMap());
				}
				var d = binding_map.get(clazz1).get("fields.synthetic");
				d.set("polymorphic",binding_map.get(clazz1).get("polymorphic"));
			}
		}
		this.initModelClasses();
		this.resetCache();
	}
	,readModels: function(cb) {
	}
	,postConfigureModels: function() {
		var class_name = this.theBindingMap.keys();
		while(class_name.hasNext()) {
			var class_name1 = class_name.next();
			var d = this.theBindingMap.get(class_name1);
			d.set("provider_name",this.getName());
			saturn.core.Util.debug(class_name1 + " on " + this.getName());
		}
		if(this.isModel(saturn.core.domain.FileProxy)) {
			this.winConversions = this.getModel(saturn.core.domain.FileProxy).getOptions().get("windows_conversions");
			this.linConversions = this.getModel(saturn.core.domain.FileProxy).getOptions().get("linux_conversions");
			if(this.platform == "windows") {
				this.conversions = this.winConversions;
				this.regexs = this.getModel(saturn.core.domain.FileProxy).getOptions().get("windows_allowed_paths_regex");
			} else if(this.platform == "linux") {
				this.conversions = this.linConversions;
				this.regexs = this.getModel(saturn.core.domain.FileProxy).getOptions().get("linux_allowed_paths_regex");
			}
			if(this.regexs != null) {
				var key = this.regexs.keys();
				while(key.hasNext()) {
					var key1 = key.next();
					var s = js.Boot.__cast(this.regexs.get(key1) , String);
					this.regexs.set(key1,new EReg(s,""));
				}
			}
		}
	}
	,getModels: function() {
		return this.theBindingMap;
	}
	,resetCache: function() {
		this.objectCache = new haxe.ds.StringMap();
		if(this.theBindingMap != null) {
			var className = this.theBindingMap.keys();
			while(className.hasNext()) {
				var className1 = className.next();
				this.theBindingMap.get(className1).set("statements",new haxe.ds.StringMap());
				this.objectCache.set(className1,new haxe.ds.StringMap());
				if(this.theBindingMap.get(className1).exists("indexes")) {
					var field = this.theBindingMap.get(className1).get("indexes").keys();
					while(field.hasNext()) {
						var field1 = field.next();
						this.objectCache.get(className1).set(field1,new haxe.ds.StringMap());
					}
				}
			}
		}
		this.namedQueryCache = new haxe.ds.StringMap();
	}
	,getObjectFromCache: function(clazz,field,val) {
		var className = Type.getClassName(clazz);
		if(this.objectCache.exists(className)) {
			if(this.objectCache.get(className).exists(field)) {
				if(this.objectCache.get(className).get(field).exists(val)) {
					return this.objectCache.get(className).get(field).get(val);
				} else {
					return null;
				}
			} else {
				return null;
			}
		} else {
			return null;
		}
	}
	,initialiseObjects: function(idsToFetch,toBind,prefetched,exception,callBack,clazz,bindField,cache,allowAutoBind) {
		if(allowAutoBind == null) {
			allowAutoBind = true;
		}
		if(idsToFetch.length > 0 && toBind == null || clazz == null || toBind != null && toBind.length > 0 && clazz != null && Std["is"](toBind[0],clazz)) {
			callBack(toBind,exception);
		} else {
			var model = this.getModel(clazz);
			if(model == null) {
				var boundObjs = [];
				var _g = 0;
				while(_g < toBind.length) {
					var item = toBind[_g];
					++_g;
					var obj = Type.createInstance(clazz,[]);
					var _g1 = 0;
					var _g2 = Type.getInstanceFields(clazz);
					while(_g1 < _g2.length) {
						var field = _g2[_g1];
						++_g1;
						if(Reflect.hasField(item,field)) {
							Reflect.setField(obj,field,Reflect.field(item,field));
						}
					}
					boundObjs.push(obj);
				}
				callBack(boundObjs,exception);
				return;
			}
			var autoActivate = model.getAutoActivateLevel();
			var surpressSetup = false;
			if(autoActivate != -1 && this.enableBinding && allowAutoBind) {
				surpressSetup = true;
			}
			var boundObjs1 = [];
			if(toBind != null) {
				var _g3 = 0;
				while(_g3 < toBind.length) {
					var obj1 = toBind[_g3];
					++_g3;
					var tmp = this.bindObject(obj1,clazz,cache,bindField,surpressSetup);
					boundObjs1.push(tmp);
				}
			}
			if(autoActivate != -1 && this.enableBinding && allowAutoBind) {
				this.activate(boundObjs1,autoActivate,function(err) {
					if(err == null) {
						var _g4 = 0;
						while(_g4 < boundObjs1.length) {
							var boundObj = boundObjs1[_g4];
							++_g4;
							if(Reflect.isFunction(boundObj.setup)) {
								boundObj.setup();
							}
						}
						if(prefetched != null) {
							var _g5 = 0;
							while(_g5 < prefetched.length) {
								var obj2 = prefetched[_g5];
								++_g5;
								boundObjs1.push(obj2);
							}
						}
						callBack(boundObjs1,exception);
					} else {
						callBack(null,err);
					}
				});
			} else {
				if(prefetched != null) {
					var _g6 = 0;
					while(_g6 < prefetched.length) {
						var obj3 = prefetched[_g6];
						++_g6;
						boundObjs1.push(obj3);
					}
				}
				callBack(boundObjs1,exception);
			}
		}
	}
	,getById: function(id,clazz,callBack) {
		this.getByIds([id],clazz,function(objs,exception) {
			if(objs != null) {
				callBack(objs[0],exception);
			} else {
				callBack(null,exception);
			}
		});
	}
	,getByIds: function(ids,clazz,callBack) {
		var _gthis = this;
		var prefetched = null;
		var idsToFetch = null;
		if(this.useCache) {
			var model = this.getModel(clazz);
			if(model != null) {
				var firstKey = model.getFirstKey();
				prefetched = [];
				idsToFetch = [];
				var _g = 0;
				while(_g < ids.length) {
					var id = ids[_g];
					++_g;
					var cacheObject = this.getObjectFromCache(clazz,firstKey,id);
					if(cacheObject != null) {
						prefetched.push(cacheObject);
					} else {
						idsToFetch.push(id);
					}
				}
			} else {
				idsToFetch = ids;
			}
		} else {
			idsToFetch = ids;
		}
		if(idsToFetch.length > 0) {
			this._getByIds(idsToFetch,clazz,function(toBind,exception) {
				_gthis.initialiseObjects(idsToFetch,toBind,prefetched,exception,callBack,clazz,null,true);
			});
		} else {
			callBack(prefetched,null);
		}
	}
	,_getByIds: function(ids,clazz,callBack) {
	}
	,getByExample: function(obj,cb) {
		var q = this.getQuery();
		q.addExample(obj);
		q.run(cb);
		return q;
	}
	,query: function(query,cb) {
		var _gthis = this;
		this._query(query,function(objs,err) {
			if(_gthis.isDataBinding()) {
				if(err == null) {
					var clazzList = query.getSelectClassList();
					if(query.bindResults() && clazzList != null) {
						if(clazzList.length == 1) {
							var tmp = Type.resolveClass(clazzList[0]);
							_gthis.initialiseObjects([],objs,[],err,cb,tmp,null,true);
						}
					} else {
						cb(objs,err);
					}
				} else {
					cb(null,err);
				}
			} else {
				cb(objs,err);
			}
		});
	}
	,_query: function(query,cb) {
	}
	,getByValue: function(value,clazz,field,callBack) {
		this.getByValues([value],clazz,field,function(objs,exception) {
			if(objs != null) {
				callBack(objs[0],exception);
			} else {
				callBack(null,exception);
			}
		});
	}
	,getByValues: function(ids,clazz,field,callBack) {
		var _gthis = this;
		var prefetched = null;
		var idsToFetch = null;
		saturn.core.Util.debug("Using cache " + Std.string(this.useCache));
		if(this.useCache) {
			saturn.core.Util.debug("Using cache " + Std.string(this.useCache));
			var model = this.getModel(clazz);
			if(model != null) {
				prefetched = [];
				idsToFetch = [];
				var _g = 0;
				while(_g < ids.length) {
					var id = ids[_g];
					++_g;
					var cacheObject = this.getObjectFromCache(clazz,field,id);
					if(cacheObject != null) {
						if((cacheObject instanceof Array) && cacheObject.__enum__ == null) {
							var objArray = cacheObject;
							var _g1 = 0;
							while(_g1 < objArray.length) {
								var obj = objArray[_g1];
								++_g1;
								prefetched.push(obj);
							}
						} else {
							prefetched.push(cacheObject);
						}
					} else {
						idsToFetch.push(id);
					}
				}
			} else {
				idsToFetch = ids;
			}
		} else {
			idsToFetch = ids;
		}
		if(idsToFetch.length > 0) {
			this._getByValues(idsToFetch,clazz,field,function(toBind,exception) {
				_gthis.initialiseObjects(idsToFetch,toBind,prefetched,exception,callBack,clazz,field,true);
			});
		} else {
			callBack(prefetched,null);
		}
	}
	,_getByValues: function(values,clazz,field,callBack) {
	}
	,getObjects: function(clazz,callBack) {
		var _gthis = this;
		this._getObjects(clazz,function(toBind,exception) {
			if(exception != null) {
				callBack(null,exception);
			} else {
				_gthis.initialiseObjects([],toBind,[],exception,callBack,clazz,null,true);
			}
		});
	}
	,_getObjects: function(clazz,callBack) {
	}
	,getByPkey: function(id,clazz,callBack) {
		this.getByPkeys([id],clazz,function(objs,exception) {
			if(objs != null) {
				callBack(objs[0],exception);
			} else {
				callBack(null,exception);
			}
		});
	}
	,getByPkeys: function(ids,clazz,callBack) {
		var _gthis = this;
		var prefetched = null;
		var idsToFetch = null;
		if(this.useCache) {
			var model = this.getModel(clazz);
			if(model != null) {
				var priField = model.getPrimaryKey();
				prefetched = [];
				idsToFetch = [];
				var _g = 0;
				while(_g < ids.length) {
					var id = ids[_g];
					++_g;
					var cacheObject = this.getObjectFromCache(clazz,priField,id);
					if(cacheObject != null) {
						prefetched.push(cacheObject);
					} else {
						idsToFetch.push(id);
					}
				}
			} else {
				idsToFetch = ids;
			}
		} else {
			idsToFetch = ids;
		}
		if(idsToFetch.length > 0) {
			this._getByPkeys(idsToFetch,clazz,function(toBind,exception) {
				_gthis.initialiseObjects(idsToFetch,toBind,prefetched,exception,callBack,clazz,null,true);
			});
		} else {
			callBack(prefetched,null);
		}
	}
	,_getByPkeys: function(ids,clazz,callBack) {
	}
	,getConnection: function(config,cb) {
	}
	,sql: function(sql,parameters,cb) {
		this.getByNamedQuery("saturn.db.provider.hooks.RawSQLHook:SQL",[sql,parameters],null,false,cb);
	}
	,getByNamedQuery: function(queryId,parameters,clazz,cache,callBack) {
		var _gthis = this;
		saturn.core.Util.debug("In getByNamedQuery " + (cache == null ? "null" : "" + cache));
		try {
			if(cache) {
				saturn.core.Util.debug("Looking for cached result");
				var queries = this.namedQueryCache.get(queryId);
				var serialParamString = haxe.Serializer.run(parameters);
				var crc = haxe.crypto.Md5.encode(queryId + "/" + serialParamString);
				if(this.namedQueryCache.exists(crc)) {
					var qResults = this.namedQueryCache.get(crc).queryResults;
					saturn.core.Util.debug("Use cached result");
					callBack(qResults,null);
					return;
				}
			}
			var privateCB = function(toBind,exception) {
				if(toBind == null) {
					callBack(toBind,exception);
				} else {
					_gthis.initialiseObjects([],toBind,[],exception,function(objs,err) {
						if(_gthis.useCache) {
							saturn.core.Util.debug("Caching result");
							var namedQuery = new saturn.db.NamedQueryCache();
							namedQuery.queryName = queryId;
							namedQuery.queryParams = parameters;
							namedQuery.queryParamSerial = haxe.Serializer.run(parameters);
							namedQuery.queryResults = objs;
							var crc1 = haxe.crypto.Md5.encode(queryId + "/" + namedQuery.queryParamSerial);
							_gthis.namedQueryCache.set(crc1,namedQuery);
						}
						callBack(objs,err);
					},clazz,null,cache);
				}
			};
			if(queryId == "saturn.workflow") {
				var jobName = parameters[0];
				var config = parameters[1];
				saturn.core.Util.debug("Got workflow query " + jobName);
				saturn.core.Util.debug(Type.getClassName(Type.getClass(config)));
				if(this.namedQueryHooks.exists(jobName)) {
					this.namedQueryHooks.get(jobName)(config,function(object,error) {
						var tmp = object.getError();
						privateCB([object],tmp);
					});
				} else {
					saturn.core.Util.debug("Unknown workflow query");
					this._getByNamedQuery(queryId,parameters,clazz,privateCB);
				}
			} else if(this.namedQueryHooks.exists(queryId)) {
				saturn.core.Util.debug("Hook is known");
				var config1 = null;
				if(this.namedQueryHookConfigs.exists(queryId)) {
					config1 = this.namedQueryHookConfigs.get(queryId);
				}
				saturn.core.Util.debug("Calling hook");
				this.namedQueryHooks.get(queryId)(queryId,parameters,clazz,privateCB,config1);
			} else {
				saturn.core.Util.debug("Hook is not known");
				this._getByNamedQuery(queryId,parameters,clazz,privateCB);
			}
		} catch( ex ) {
			if (ex instanceof js._Boot.HaxeError) ex = ex.val;
			saturn.core.Util.debug(ex);
			callBack(null,"An unexpected exception has occurred");
		}
	}
	,addHooks: function(hooks) {
		var _g = 0;
		while(_g < hooks.length) {
			var hookdef = hooks[_g];
			++_g;
			var name = Reflect.field(hookdef,"name");
			var hook;
			if(Reflect.hasField(hookdef,"func")) {
				hook = Reflect.field(hookdef,"func");
			} else {
				var clazz = Reflect.field(hookdef,"class");
				var method = Reflect.field(hookdef,"method");
				hook = Reflect.field(Type.resolveClass(clazz),method);
			}
			this.namedQueryHooks.set(name,hook);
			this.namedQueryHookConfigs.set(name,hookdef);
		}
	}
	,addHook: function(hook,name) {
		this.namedQueryHooks.set(name,hook);
	}
	,_getByNamedQuery: function(queryId,parameters,clazz,callBack) {
	}
	,getByIdStartsWith: function(id,field,clazz,limit,callBack) {
		var _gthis = this;
		saturn.core.Util.debug("Starts with using cache " + Std.string(this.useCache));
		var queryId = "__STARTSWITH_" + Type.getClassName(clazz);
		var parameters = [];
		parameters.push(field);
		parameters.push(id);
		var crc = null;
		if(this.useCache) {
			var crc1 = haxe.crypto.Md5.encode(queryId + "/" + haxe.Serializer.run(parameters));
			if(this.namedQueryCache.exists(crc1)) {
				var tmp = this.namedQueryCache.get(crc1);
				callBack(tmp.queryResults,null);
				return;
			}
		}
		this._getByIdStartsWith(id,field,clazz,limit,function(toBind,exception) {
			if(toBind == null) {
				callBack(toBind,exception);
			} else {
				_gthis.initialiseObjects([],toBind,[],exception,function(objs,err) {
					if(_gthis.useCache) {
						var namedQuery = new saturn.db.NamedQueryCache();
						namedQuery.queryName = queryId;
						namedQuery.queryParams = parameters;
						namedQuery.queryResults = objs;
						_gthis.namedQueryCache.set(crc,namedQuery);
					}
					callBack(objs,err);
				},clazz,null,false,false);
			}
		});
	}
	,_getByIdStartsWith: function(id,field,clazz,limit,callBack) {
	}
	,update: function(object,callBack) {
		this.synchronizeInternalLinks([object]);
		var className = Type.getClassName(Type.getClass(object));
		this.evictObject(object);
		var attributeMaps = [];
		attributeMaps.push(this.unbindObject(object));
		this._update(attributeMaps,className,callBack);
	}
	,insert: function(obj,cb) {
		var _gthis = this;
		this.synchronizeInternalLinks([obj]);
		var className = Type.getClassName(Type.getClass(obj));
		this.evictObject(obj);
		var attributeMaps = [];
		attributeMaps.push(this.unbindObject(obj));
		this._insert(attributeMaps,className,function(err) {
			if(err == null) {
				_gthis.attach([obj],true,function(err1) {
					cb(err1);
				});
			} else {
				cb(err);
			}
		});
	}
	,'delete': function(obj,cb) {
		var _gthis = this;
		var className = Type.getClassName(Type.getClass(obj));
		var attributeMaps = [];
		attributeMaps.push(this.unbindObject(obj));
		this.evictObject(obj);
		this._delete(attributeMaps,className,function(err) {
			var model = Type.getClass(obj);
			var model1 = _gthis.getModel(model);
			var field = model1.getPrimaryKey();
			Reflect.setField(obj,field,null);
			cb(err);
		});
	}
	,evictObject: function(object) {
		var clazz = Type.getClass(object);
		var className = Type.getClassName(clazz);
		if(this.objectCache.exists(className)) {
			var indexField = this.objectCache.get(className).keys();
			while(indexField.hasNext()) {
				var indexField1 = indexField.next();
				var val = Reflect.field(object,indexField1);
				if(val != null && val != "") {
					if(this.objectCache.get(className).get(indexField1).exists(val)) {
						this.objectCache.get(className).get(indexField1).remove(val);
					}
				}
			}
		}
	}
	,evictNamedQuery: function(queryId,parameters) {
		var crc = haxe.crypto.Md5.encode(queryId + "/" + haxe.Serializer.run(parameters));
		if(this.namedQueryCache.exists(crc)) {
			this.namedQueryCache.remove(crc);
		}
	}
	,updateObjects: function(objs,callBack) {
		this.synchronizeInternalLinks(objs);
		var className = Type.getClassName(Type.getClass(objs[0]));
		var attributeMaps = [];
		var _g = 0;
		while(_g < objs.length) {
			var object = objs[_g];
			++_g;
			this.evictObject(object);
			attributeMaps.push(this.unbindObject(object));
		}
		this._update(attributeMaps,className,callBack);
	}
	,insertObjects: function(objs,cb) {
		var _gthis = this;
		if(objs.length == 0) {
			cb(null);
			return;
		}
		this.synchronizeInternalLinks(objs);
		this.attach(objs,false,function(err) {
			if(err != null) {
				cb(err);
			} else {
				var className = Type.getClassName(Type.getClass(objs[0]));
				var attributeMaps = [];
				var _g = 0;
				while(_g < objs.length) {
					var object = objs[_g];
					++_g;
					_gthis.evictObject(object);
					var a = _gthis.unbindObject(object);
					attributeMaps.push(a);
				}
				_gthis._insert(attributeMaps,className,function(err1) {
					cb(err1);
				});
			}
		});
	}
	,rollback: function(callBack) {
		this._rollback(callBack);
	}
	,commit: function(callBack) {
		this._commit(callBack);
	}
	,_update: function(attributeMaps,className,callBack) {
	}
	,_insert: function(attributeMaps,className,callBack) {
	}
	,_delete: function(attributeMaps,className,callBack) {
	}
	,_rollback: function(callBack) {
	}
	,_commit: function(cb) {
		cb("Commit not supported");
	}
	,bindObject: function(attributeMap,clazz,cache,indexField,suspendSetup) {
		if(suspendSetup == null) {
			suspendSetup = false;
		}
		if(clazz == null) {
			var _g = 0;
			var _g1 = Reflect.fields(attributeMap);
			while(_g < _g1.length) {
				var key = _g1[_g];
				++_g;
				var val = Reflect.field(attributeMap,key);
				if(saturn.db.DefaultProvider.r_date.match(val)) {
					Reflect.setField(attributeMap,key,new Date(Date.parse(val)));
				}
			}
			return attributeMap;
		}
		if(this.enableBinding) {
			var className = Type.getClassName(clazz);
			var parts = className.split(".");
			var shortName = parts.pop();
			var packageName = parts.join(".");
			var obj = Type.createInstance(clazz,[]);
			if(this.theBindingMap.exists(className)) {
				var map = this.theBindingMap.get(className).get("fields");
				var indexes = this.theBindingMap.get(className).get("indexes");
				var atPriIndex = null;
				var atIndexField = indexes.keys();
				while(atIndexField.hasNext()) {
					var atIndexField1 = atIndexField.next();
					if(indexes.get(atIndexField1) == 1) {
						atPriIndex = atIndexField1;
						break;
					}
				}
				var colPriIndex = null;
				if(atPriIndex != null) {
					colPriIndex = map.get(atPriIndex);
				}
				var priKeyValue = null;
				if(Reflect.hasField(attributeMap,colPriIndex)) {
					priKeyValue = Reflect.field(attributeMap,colPriIndex);
				} else if(Reflect.hasField(attributeMap,colPriIndex.toLowerCase())) {
					priKeyValue = Reflect.field(attributeMap,colPriIndex.toLowerCase());
				}
				var keys = [];
				var key1 = map.keys();
				while(key1.hasNext()) {
					var key2 = key1.next();
					keys.push(key2);
				}
				if(indexField != null && !map.exists(indexField)) {
					keys.push(indexField);
				}
				var _g2 = 0;
				while(_g2 < keys.length) {
					var key3 = keys[_g2];
					++_g2;
					if(!this.objectCache.get(className).exists(key3)) {
						this.objectCache.get(className).set(key3,new haxe.ds.StringMap());
					}
					var atKey = map.get(key3);
					var val1 = null;
					if(Reflect.hasField(attributeMap,atKey)) {
						val1 = Reflect.field(attributeMap,atKey);
					} else if(Reflect.hasField(attributeMap,atKey.toLowerCase())) {
						val1 = Reflect.field(attributeMap,atKey.toLowerCase());
					}
					if(saturn.db.DefaultProvider.r_date.match(val1)) {
						Reflect.setField(obj,key3,new Date(Date.parse(val)));
					} else {
						Reflect.setField(obj,key3,val1);
					}
					if(cache && indexes != null && (indexes.exists(key3) || key3 == indexField) && this.useCache) {
						if(priKeyValue != null) {
							if(this.objectCache.get(className).get(key3).exists(val1)) {
								var mappedObj = this.objectCache.get(className).get(key3).get(val1);
								var toCheck = mappedObj;
								var isArray = (mappedObj instanceof Array) && mappedObj.__enum__ == null;
								if(!isArray) {
									toCheck = [mappedObj];
								}
								var match = false;
								var _g21 = 0;
								var _g11 = toCheck.length;
								while(_g21 < _g11) {
									var i = _g21++;
									var eObj = toCheck[i];
									var priValue = Reflect.field(eObj,atPriIndex);
									if(priValue == priKeyValue) {
										toCheck[i] = obj;
										match = true;
										break;
									}
								}
								if(match == false) {
									toCheck.push(obj);
								}
								if(toCheck.length == 1) {
									this.objectCache.get(className).get(key3).set(val1,toCheck[0]);
								} else {
									this.objectCache.get(className).get(key3).set(val1,toCheck);
								}
								continue;
							}
						}
						this.objectCache.get(className).get(key3).set(val1,obj);
					}
				}
			}
			if(!suspendSetup && Reflect.isFunction(obj.setup)) {
				obj.setup();
			}
			return obj;
		} else {
			return attributeMap;
		}
	}
	,unbindObject: function(object) {
		if(this.enableBinding) {
			var className = Type.getClassName(Type.getClass(object));
			var attributeMap = new haxe.ds.StringMap();
			if(this.theBindingMap.exists(className)) {
				var map = this.theBindingMap.get(className).get("fields");
				var key = map.keys();
				while(key.hasNext()) {
					var key1 = key.next();
					var val = Reflect.field(object,key1);
					attributeMap.set(map.get(key1),val);
				}
				return attributeMap;
			} else {
				return null;
			}
		} else {
			return object;
		}
	}
	,activate: function(objects,depthLimit,callBack) {
		var _gthis = this;
		this._activate(objects,1,depthLimit,function(error) {
			if(error == null) {
				_gthis.merge(objects);
			}
			callBack(error);
		});
	}
	,_activate: function(objects,depth,depthLimit,callBack) {
		var _gthis = this;
		var objectsToFetch = 0;
		var batchQuery = new saturn.db.BatchFetch(function(obj,err) {
		});
		batchQuery.setProvider(this);
		var classToFetch = new haxe.ds.StringMap();
		var _g = 0;
		while(_g < objects.length) {
			var object = objects[_g];
			++_g;
			if(object == null || Std["is"](object,ArrayBuffer) || Std["is"](object,haxe.ds.StringMap)) {
				continue;
			}
			var clazz = Type.getClass(object);
			if(clazz == null) {
				continue;
			}
			var clazzName = Type.getClassName(clazz);
			if(this.theBindingMap.exists(clazzName)) {
				if(this.theBindingMap.get(clazzName).exists("fields.synthetic")) {
					var synthFields = this.theBindingMap.get(clazzName).get("fields.synthetic");
					var synthFieldName = synthFields.keys();
					while(synthFieldName.hasNext()) {
						var synthFieldName1 = synthFieldName.next();
						var synthInfo = synthFields.get(synthFieldName1);
						var fkField = synthInfo.get("fk_field");
						if(fkField == null) {
							Reflect.setField(object,synthFieldName1,Type.createInstance(Type.resolveClass(synthInfo.get("class")),[Reflect.field(object,synthInfo.get("field"))]));
							continue;
						}
						var synthVal = Reflect.field(object,synthFieldName1);
						if(synthVal != null) {
							continue;
						}
						var isPolymorphic = synthInfo.exists("selector_field");
						var synthClass;
						if(isPolymorphic) {
							var selectorField = synthInfo.get("selector_field");
							var objValue = Reflect.field(object,selectorField);
							if(synthInfo.get("selector_values").exists(objValue)) {
								synthClass = synthInfo.get("selector_values").get(objValue);
							} else {
								continue;
							}
							var selectorValue = synthInfo.get("selector_value");
							synthFieldName1 = "_MERGE";
						} else {
							synthClass = synthInfo.get("class");
						}
						var field = synthInfo.get("field");
						var val = Reflect.field(object,field);
						if(val == null || val == "" && !(typeof(val) == "number" && ((val | 0) === val))) {
							Reflect.setField(object,synthFieldName1,null);
						} else {
							var cacheObj = this.getObjectFromCache(Type.resolveClass(synthClass),fkField,val);
							if(cacheObj == null) {
								++objectsToFetch;
								if(!classToFetch.exists(synthClass)) {
									classToFetch.set(synthClass,new haxe.ds.StringMap());
								}
								if(!classToFetch.get(synthClass).exists(fkField)) {
									classToFetch.get(synthClass).set(fkField,new haxe.ds.StringMap());
								}
								classToFetch.get(synthClass).get(fkField).set(val,"");
							} else {
								Reflect.setField(object,synthFieldName1,cacheObj);
							}
						}
					}
				}
			}
		}
		var synthClass1 = classToFetch.keys();
		while(synthClass1.hasNext()) {
			var synthClass2 = synthClass1.next();
			var fkField1 = classToFetch.get(synthClass2).keys();
			while(fkField1.hasNext()) {
				var fkField2 = fkField1.next();
				var objList = [];
				var objId = classToFetch.get(synthClass2).get(fkField2).keys();
				while(objId.hasNext()) {
					var objId1 = objId.next();
					objList.push(objId1);
				}
				batchQuery.getByValues(objList,Type.resolveClass(synthClass2),fkField2,"__IGNORED__",null);
			}
		}
		batchQuery.onComplete = function() {
			var _g1 = 0;
			while(_g1 < objects.length) {
				var object1 = objects[_g1];
				++_g1;
				var clazz1 = Type.getClass(object1);
				if(object1 == null || Std["is"](object1,ArrayBuffer) || clazz1 == null) {
					continue;
				}
				var clazzName1 = Type.getClassName(clazz1);
				if(_gthis.theBindingMap.exists(clazzName1)) {
					if(_gthis.theBindingMap.get(clazzName1).exists("fields.synthetic")) {
						var synthFields1 = _gthis.theBindingMap.get(clazzName1).get("fields.synthetic");
						var synthFieldName2 = synthFields1.keys();
						while(synthFieldName2.hasNext()) {
							var synthFieldName3 = synthFieldName2.next();
							var synthVal1 = Reflect.field(object1,synthFieldName3);
							if(synthVal1 != null) {
								continue;
							}
							var synthInfo1 = synthFields1.get(synthFieldName3);
							var isPolymorphic1 = synthInfo1.exists("selector_field");
							var synthClass3;
							if(isPolymorphic1) {
								var selectorField1 = synthInfo1.get("selector_field");
								var objValue1 = Reflect.field(object1,selectorField1);
								if(synthInfo1.get("selector_values").exists(objValue1)) {
									synthClass3 = synthInfo1.get("selector_values").get(objValue1);
								} else {
									continue;
								}
								var selectorValue1 = synthInfo1.get("selector_value");
								synthFieldName3 = "_MERGE";
							} else {
								synthClass3 = synthInfo1.get("class");
							}
							var field1 = synthInfo1.get("field");
							var val1 = Reflect.field(object1,field1);
							if(val1 != null && val1 != "") {
								var fkField3 = synthInfo1.get("fk_field");
								if(synthInfo1.exists("selector_field")) {
									synthFieldName3 = "_MERGE";
								}
								var cacheObj1 = Type.resolveClass(synthClass3);
								var cacheObj2 = _gthis.getObjectFromCache(cacheObj1,fkField3,val1);
								if(cacheObj2 != null) {
									Reflect.setField(object1,synthFieldName3,cacheObj2);
								}
							}
						}
					}
				}
			}
			var newObjList = [];
			var _g2 = 0;
			while(_g2 < objects.length) {
				var object2 = objects[_g2];
				++_g2;
				var clazz2 = Type.getClass(object2);
				if(object2 == null || Std["is"](object2,ArrayBuffer) || clazz2 == null) {
					continue;
				}
				var model = _gthis.getModel(clazz2);
				if(model != null) {
					var _g11 = 0;
					var _g21 = Reflect.fields(object2);
					while(_g11 < _g21.length) {
						var field2 = _g21[_g11];
						++_g11;
						var val2 = Reflect.field(object2,field2);
						if(!model.isSyntheticallyBound(field2) || val2 == null) {
							continue;
						}
						var objs = Reflect.field(object2,field2);
						if(!((objs instanceof Array) && objs.__enum__ == null)) {
							objs = [objs];
						}
						var _g3 = 0;
						while(_g3 < objs.length) {
							var newObject = objs[_g3];
							++_g3;
							newObjList.push(newObject);
						}
					}
				}
			}
			if(newObjList.length > 0 && depthLimit > depth) {
				_gthis._activate(newObjList,depth + 1,depthLimit,callBack);
			} else {
				callBack(null);
			}
		};
		batchQuery.execute();
	}
	,merge: function(objects) {
		var toVisit = [];
		var _g1 = 0;
		var _g = objects.length;
		while(_g1 < _g) {
			var i = _g1++;
			toVisit.push({ "parent" : objects, "pos" : i, "value" : objects[i]});
		}
		this._merge(toVisit);
	}
	,_merge: function(toVisit) {
		while(toVisit.length != 0) {
			var item = toVisit.pop();
			var original = Reflect.field(item,"value");
			if(Reflect.hasField(original,"_MERGE")) {
				var obj = Reflect.field(original,"_MERGE");
				var _g = 0;
				var _g1 = Reflect.fields(original);
				while(_g < _g1.length) {
					var field = _g1[_g];
					++_g;
					if(field != "_MERGE") {
						Reflect.setField(obj,field,Reflect.field(original,field));
					}
				}
				var parent = Reflect.field(item,"parent");
				if(Reflect.hasField(item,"pos")) {
					parent[Reflect.field(item,"pos")] = obj;
				} else {
					Reflect.setField(parent,Reflect.field(item,"field"),obj);
				}
				original = obj;
			}
			var model = this.getModel(original);
			if(model == null) {
				continue;
			}
			var _g2 = 0;
			var _g11 = model.getFields();
			while(_g2 < _g11.length) {
				var field1 = _g11[_g2];
				++_g2;
				var value = Reflect.field(original,field1);
				var isObject = false;
				isObject = Std["is"](value,Object);
				if(isObject) {
					if((value instanceof Array) && value.__enum__ == null) {
						var _g3 = 0;
						var _g21 = value.length;
						while(_g3 < _g21) {
							var i = _g3++;
							toVisit.push({ "parent" : value, "pos" : i, "value" : value[i]});
						}
					} else {
						toVisit.push({ "parent" : original, "value" : value, "field" : field1});
					}
				}
			}
		}
	}
	,getModel: function(clazz) {
		if(clazz == null) {
			return null;
		} else {
			var t = Type.getClass(clazz);
			var className = Type.getClassName(clazz);
			return this.getModelByStringName(className);
		}
	}
	,getObjectModel: function(object) {
		if(object == null) {
			return null;
		} else {
			var clazz = Type.getClass(object);
			return this.getModel(clazz);
		}
	}
	,save: function(object,cb,autoAttach) {
		if(autoAttach == null) {
			autoAttach = false;
		}
		this.insertOrUpdate([object],cb,autoAttach);
	}
	,initModelClasses: function() {
		this.modelClasses = [];
		var classStr = this.theBindingMap.keys();
		while(classStr.hasNext()) {
			var classStr1 = classStr.next();
			saturn.core.Util.debug(classStr1);
			var clazz = Type.resolveClass(classStr1);
			if(clazz != null) {
				this.modelClasses.push(this.getModel(clazz));
			}
		}
	}
	,getModelClasses: function() {
		return this.modelClasses;
	}
	,getModelByStringName: function(className) {
		if(this.theBindingMap.exists(className)) {
			if(this.theBindingMap.get(className).exists("model")) {
				return new saturn.db.Model(this.theBindingMap.get(className),className);
			} else {
				return new saturn.db.Model(this.theBindingMap.get(className),className);
			}
		} else {
			return null;
		}
	}
	,isModel: function(clazz) {
		if(this.theBindingMap != null) {
			return this.theBindingMap.exists(Type.getClassName(clazz));
		} else {
			return false;
		}
	}
	,setSelectClause: function(className,selClause) {
		if(this.theBindingMap.exists(className)) {
			this.theBindingMap.get(className).get("statements").set("SELECT",selClause);
		}
	}
	,modelToReal: function(modelDef,models,cb) {
		var _gthis = this;
		var priKey = modelDef.getPrimaryKey();
		var fields = modelDef.getFields();
		var clazz = modelDef.getClass();
		var syntheticInstanceAttributes = modelDef.getSynthenticFields();
		var syntheticSet = null;
		if(syntheticInstanceAttributes != null) {
			syntheticSet = new haxe.ds.StringMap();
			var instanceName = syntheticInstanceAttributes.keys();
			while(instanceName.hasNext()) {
				var instanceName1 = instanceName.next();
				var fkRel = syntheticInstanceAttributes.get(instanceName1);
				var parentIdColumn = fkRel.get("fk_field");
				var childIdColumn = fkRel.get("field");
				var _g = new haxe.ds.StringMap();
				_g.set("childIdColumn",childIdColumn);
				_g.set("parentIdColumn",fkRel.get("fk_field"));
				_g.set("class",fkRel.get("class"));
				syntheticSet.set(instanceName1,_g);
			}
		}
		var clazzToFieldToIds = new haxe.ds.StringMap();
		var _g1 = 0;
		while(_g1 < models.length) {
			var model = models[_g1];
			++_g1;
			var _g11 = 0;
			var _g2 = modelDef.getFields();
			while(_g11 < _g2.length) {
				var field = _g2[_g11];
				++_g11;
				if(field.indexOf(".") > -1) {
					var parts = field.split(".");
					var instanceName2 = parts[0];
					if(syntheticSet != null && syntheticSet.exists(instanceName2)) {
						var lookupField = parts[parts.length - 1];
						var lookupClazz = syntheticSet.get(instanceName2).get("class");
						var val = Reflect.field(model,field);
						if(val == null || val == "" && !(typeof(val) == "number" && ((val | 0) === val))) {
							continue;
						}
						var clazz1 = Type.resolveClass(lookupClazz);
						var cachedObject = this.getObjectFromCache(clazz1,lookupField,val);
						if(cachedObject == null) {
							if(!clazzToFieldToIds.exists(lookupClazz)) {
								clazzToFieldToIds.set(lookupClazz,new haxe.ds.StringMap());
							}
							if(!clazzToFieldToIds.get(lookupClazz).exists(lookupField)) {
								clazzToFieldToIds.get(lookupClazz).set(lookupField,new haxe.ds.StringMap());
							}
							clazzToFieldToIds.get(lookupClazz).get(lookupField).set(val,"");
						}
					}
				}
			}
		}
		var batchFetch = new saturn.db.BatchFetch(function(obj,err) {
			cb(err,obj);
		});
		var clazzStr = clazzToFieldToIds.keys();
		while(clazzStr.hasNext()) {
			var clazzStr1 = clazzStr.next();
			var fieldStr = clazzToFieldToIds.get(clazzStr1).keys();
			while(fieldStr.hasNext()) {
				var fieldStr1 = fieldStr.next();
				var valList = [];
				var val1 = clazzToFieldToIds.get(clazzStr1).get(fieldStr1).keys();
				while(val1.hasNext()) {
					var val2 = val1.next();
					valList.push(val2);
				}
				batchFetch.getByIds(valList,Type.resolveClass(clazzStr1),"__IGNORE__",null);
			}
		}
		batchFetch.onComplete = function(err1,objs) {
			if(err1 != null) {
				cb(err1,null);
			} else {
				var mappedModels = [];
				var _g3 = 0;
				while(_g3 < models.length) {
					var model1 = models[_g3];
					++_g3;
					var mappedModel = Type.createEmptyInstance(clazz);
					var _g12 = 0;
					var _g21 = modelDef.getFields();
					while(_g12 < _g21.length) {
						var field1 = _g21[_g12];
						++_g12;
						if(field1.indexOf(".") > -1) {
							var parts1 = field1.split(".");
							var instanceName3 = parts1[0];
							if(syntheticSet.exists(instanceName3)) {
								var lookupField1 = parts1[parts1.length - 1];
								var lookupClazz1 = syntheticSet.get(instanceName3).get("class");
								var val3 = Reflect.field(model1,field1);
								if(val3 == null || val3 == "") {
									continue;
								}
								var clazz2 = Type.resolveClass(lookupClazz1);
								var cachedObject1 = _gthis.getObjectFromCache(clazz2,lookupField1,val3);
								if(cachedObject1 != null) {
									var idColumn = syntheticSet.get(instanceName3).get("parentIdColumn");
									var val4 = Reflect.field(cachedObject1,idColumn);
									if(val4 == null || val4 == "" && !(typeof(val4) == "number" && ((val4 | 0) === val4))) {
										cb("Unexpected mapping error",mappedModels);
										return;
									}
									var dstColumn = syntheticSet.get(instanceName3).get("childIdColumn");
									Reflect.setField(mappedModel,dstColumn,val4);
								} else {
									cb("Unable to find " + val3,mappedModels);
									return;
								}
							}
						} else {
							var val5 = Reflect.field(model1,field1);
							Reflect.setField(mappedModel,field1,val5);
						}
					}
					mappedModels.push(mappedModel);
				}
				cb(null,mappedModels);
			}
		};
		batchFetch.execute();
	}
	,dataBinding: function(enable) {
		this.enableBinding = enable;
	}
	,isDataBinding: function() {
		return this.enableBinding;
	}
	,queryPath: function(fromClazz,queryPath,fieldValue,functionName,cb) {
		var _gthis = this;
		var parts = queryPath.split(".");
		var fieldName = parts.pop();
		var synthField = parts.pop();
		var model = this.getModel(fromClazz);
		if(model.isSynthetic(synthField)) {
			var fieldDef = model.getSynthenticFields().get(synthField);
			var childClazz = Type.resolveClass(fieldDef.get("class"));
			Reflect.callMethod(this,Reflect.field(this,functionName),[[fieldValue],childClazz,fieldName,function(objs,err) {
				if(err == null) {
					var values = [];
					var _g = 0;
					while(_g < objs.length) {
						var obj = objs[_g];
						++_g;
						values.push(Reflect.field(obj,fieldDef.get("fk_field")));
					}
					var parentField = fieldDef.get("field");
					_gthis.getByValues(values,fromClazz,parentField,function(objs1,err1) {
						cb(err1,objs1);
					});
				} else {
					cb(err,null);
				}
			}]);
		}
	}
	,setAutoCommit: function(autoCommit,cb) {
		cb("Set auto commit mode ");
	}
	,attach: function(objs,refreshFields,cb) {
		var _gthis = this;
		var bf = new saturn.db.BatchFetch(function(obj,err) {
			cb(err);
		});
		bf.setProvider(this);
		this._attach(objs,refreshFields,bf);
		bf.onComplete = function() {
			_gthis.synchronizeInternalLinks(objs);
			cb(null);
		};
		bf.execute();
	}
	,synchronizeInternalLinks: function(objs) {
		if(!this.isDataBinding()) {
			return;
		}
		var _g = 0;
		while(_g < objs.length) {
			var obj = objs[_g];
			++_g;
			var clazz = Type.getClass(obj);
			var model = this.getModel(clazz);
			var synthFields = model.getSynthenticFields();
			if(synthFields != null) {
				var synthFieldName = synthFields.keys();
				while(synthFieldName.hasNext()) {
					var synthFieldName1 = synthFieldName.next();
					var synthField = synthFields.get(synthFieldName1);
					var synthObj = Reflect.field(obj,synthFieldName1);
					var field = synthField.get("field");
					var fkField = synthField.get("fk_field");
					if(synthObj != null) {
						if(fkField == null) {
							Reflect.setField(obj,field,synthObj.getValue());
						} else {
							Reflect.setField(obj,field,Reflect.field(synthObj,fkField));
							this.synchronizeInternalLinks([synthObj]);
						}
					}
				}
			}
		}
	}
	,_attach: function(objs,refreshFields,bf) {
		var _g = 0;
		while(_g < objs.length) {
			var obj = [objs[_g]];
			++_g;
			var clazz = Type.getClass(obj[0]);
			var model = this.getModel(clazz);
			var priField = [model.getPrimaryKey()];
			var secField = model.getFirstKey();
			if(Reflect.field(obj[0],priField[0]) == null || Reflect.field(obj[0],priField[0]) == "") {
				var fieldVal = Reflect.field(obj[0],secField);
				if(fieldVal != null) {
					bf.append(fieldVal,secField,clazz,(function(priField1,obj1) {
						return function(dbObj) {
							if(refreshFields) {
								var _g1 = 0;
								var _g2 = Reflect.fields(dbObj);
								while(_g1 < _g2.length) {
									var field = _g2[_g1];
									++_g1;
									Reflect.setField(obj1[0],field,Reflect.field(dbObj,field));
								}
							} else {
								Reflect.setField(obj1[0],priField1[0],Reflect.field(dbObj,priField1[0]));
							}
						};
					})(priField,obj));
				}
			}
			var synthFields = model.getSynthenticFields();
			if(synthFields != null) {
				var synthFieldName = synthFields.keys();
				while(synthFieldName.hasNext()) {
					var synthFieldName1 = synthFieldName.next();
					var synthField = synthFields.get(synthFieldName1);
					var synthObj = Reflect.field(obj[0],synthFieldName1);
					if(synthObj != null) {
						this._attach([synthObj],refreshFields,bf);
					}
				}
			}
		}
	}
	,getQuery: function() {
		var query = new saturn.db.query_lang.Query(this);
		return query;
	}
	,getProviderType: function() {
		return "NONE";
	}
	,isAttached: function(obj) {
		var model = this.getModel(Type.getClass(obj));
		var priField = model.getPrimaryKey();
		var val = Reflect.field(obj,priField);
		if(val == null || val == "") {
			return false;
		} else {
			return true;
		}
	}
	,insertOrUpdate: function(objs,cb,autoAttach) {
		if(autoAttach == null) {
			autoAttach = false;
		}
		var _gthis = this;
		var run = function() {
			var insertList = [];
			var updateList = [];
			var _g = 0;
			while(_g < objs.length) {
				var obj = objs[_g];
				++_g;
				if(!_gthis.isAttached(obj)) {
					insertList.push(obj);
				} else {
					updateList.push(obj);
				}
			}
			if(insertList.length > 0) {
				_gthis.insertObjects(insertList,function(err) {
					if(err == null && updateList.length > 0) {
						_gthis.updateObjects(updateList,cb);
					} else {
						cb(err);
					}
				});
			} else if(updateList.length > 0) {
				_gthis.updateObjects(updateList,cb);
			}
		};
		if(autoAttach) {
			this.attach(objs,false,function(err1) {
				if(err1 == null) {
					run();
				} else {
					cb(err1);
				}
			});
		} else {
			run();
		}
	}
	,uploadFile: function(contents,file_identifier,cb) {
		return null;
	}
	,__class__: saturn.db.DefaultProvider
};
saturn.db.NamedQueryCache = $hxClasses["saturn.db.NamedQueryCache"] = function() {
};
saturn.db.NamedQueryCache.__name__ = ["saturn","db","NamedQueryCache"];
saturn.db.NamedQueryCache.prototype = {
	queryName: null
	,queryParamSerial: null
	,queryParams: null
	,queryResults: null
	,__class__: saturn.db.NamedQueryCache
};
saturn.db.Model = $hxClasses["saturn.db.Model"] = function(model,name) {
	this.customSearchFunctionPath = null;
	this.theModel = model;
	this.theName = name;
	this.alias = "";
	this.actionMap = new haxe.ds.StringMap();
	if(this.theModel.exists("indexes")) {
		var i = 0;
		var keyName = this.theModel.get("indexes").keys();
		while(keyName.hasNext()) {
			var keyName1 = keyName.next();
			if(i == 0) {
				this.busSingleColKey = keyName1;
			}
			if(this.theModel.get("indexes").get(keyName1)) {
				this.priColKey = keyName1;
			}
			++i;
		}
	}
	if(this.theModel.exists("provider_name")) {
		var name1 = js.Boot.__cast(this.theModel.get("provider_name") , String);
		this.setProviderName(name1);
	}
	if(this.theModel.exists("programs")) {
		this.programs = [];
		var program = this.theModel.get("programs").keys();
		while(program.hasNext()) {
			var program1 = program.next();
			this.programs.push(program1);
		}
	}
	this.stripIdPrefix = false;
	this.autoActivate = -1;
	if(this.theModel.exists("options")) {
		var options = this.theModel.get("options");
		if(options.exists("id_pattern")) {
			this.setIdRegEx(options.get("id_pattern"));
		}
		if(options.exists("custom_search_function")) {
			this.customSearchFunctionPath = options.get("custom_search_function");
		}
		if(options.exists("constraints")) {
			if(options.get("constraints").exists("user_constraint_field")) {
				this.userConstraintField = options.get("constraints").get("user_constraint_field");
			}
			if(options.get("constraints").exists("public_constraint_field")) {
				this.publicConstraintField = options.get("constraints").get("public_constraint_field");
			}
		}
		if(options.get("windows_allowed_paths")) {
			options.set("windows_allowed_paths_regex",this.compileRegEx(options.get("windows_allowed_paths")));
		}
		if(options.get("linux_allowed_paths")) {
			options.set("linux_allowed_paths_regex",this.compileRegEx(options.get("linux_allowed_paths")));
		}
		if(options.exists("strip_id_prefix")) {
			this.stripIdPrefix = options.get("strip_id_prefix");
		}
		if(options.exists("alias")) {
			this.alias = options.get("alias");
		}
		if(options.exists("flags")) {
			this.flags = options.get("flags");
		} else {
			this.flags = new haxe.ds.StringMap();
		}
		if(options.exists("file.new.label")) {
			this.file_new_label = options.get("file.new.label");
		}
		if(options.exists("auto_activate")) {
			this.autoActivate = Std.parseInt(options.get("auto_activate"));
		}
		if(options.exists("actions")) {
			var actionTypeMap = options.get("actions");
			var actionType = actionTypeMap.keys();
			while(actionType.hasNext()) {
				var actionType1 = actionType.next();
				var actions = actionTypeMap.get(actionType1);
				this.actionMap.set(actionType1,new haxe.ds.StringMap());
				var actionName = actions.keys();
				while(actionName.hasNext()) {
					var actionName1 = actionName.next();
					var actionDef = actions.get(actionName1);
					if(!actionDef.exists("user_suffix")) {
						throw new js._Boot.HaxeError(new saturn.util.HaxeException(actionName1 + " action definition for " + this.getName() + " is missing user_suffix option"));
					}
					if(!actionDef.exists("function")) {
						throw new js._Boot.HaxeError(new saturn.util.HaxeException(actionName1 + " action definition for " + this.getName() + " is missing function option"));
					}
					var action = new saturn.db.ModelAction(actionName1,actionDef.get("user_suffix"),actionDef.get("function"),actionDef.get("icon"));
					if(actionType1 == "search_bar") {
						var clazz = Type.resolveClass(action.className);
						if(clazz == null) {
							throw new js._Boot.HaxeError(new saturn.util.HaxeException(action.className + " does not exist for action " + actionName1));
						}
						var instanceFields = Type.getInstanceFields(clazz);
						var match = false;
						var _g = 0;
						while(_g < instanceFields.length) {
							var field = instanceFields[_g];
							++_g;
							if(field == action.functionName) {
								match = true;
								break;
							}
						}
						if(!match) {
							throw new js._Boot.HaxeError(new saturn.util.HaxeException(action.className + " does not have function " + action.functionName + " for action " + actionName1));
						}
					}
					this.actionMap.get(actionType1).set(actionName1,action);
				}
			}
		}
	} else {
		this.flags = new haxe.ds.StringMap();
		this.actionMap.set("searchBar",new haxe.ds.StringMap());
	}
	if(this.theModel.exists("search")) {
		var fts = this.theModel.get("search");
		this.ftsColumns = new haxe.ds.StringMap();
		var key = fts.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			var searchDef = fts.get(key1);
			var searchObj = new saturn.db.SearchDef();
			if(searchDef != null) {
				if(typeof(searchDef) == "boolean" && searchDef) {
					this.ftsColumns.set(key1,searchObj);
				} else if(typeof(searchDef) == "string") {
					searchObj.regex = new EReg(searchDef,"");
				} else {
					if(searchDef.exists("search_when")) {
						var regexStr = searchDef.get("search_when");
						if(regexStr != null && regexStr != "") {
							searchObj.regex = new EReg(regexStr,"");
						}
					}
					if(searchDef.exists("replace_with")) {
						searchObj.replaceWith = searchDef.get("replace_with");
					}
				}
			}
			this.ftsColumns.set(key1,searchObj);
		}
	}
	if(this.alias == null || this.alias == "") {
		this.alias = this.theName;
	}
};
saturn.db.Model.__name__ = ["saturn","db","Model"];
saturn.db.Model.generateIDMap = function(objs) {
	if(objs == null || objs.length == 0) {
		return null;
	} else {
		var map = new haxe.ds.StringMap();
		var model = saturn.core.Util.getProvider().getModel(Type.getClass(objs[0]));
		var firstKey = model.getFirstKey();
		var priKey = model.getPrimaryKey();
		var _g = 0;
		while(_g < objs.length) {
			var obj = objs[_g];
			++_g;
			map.set(Reflect.field(obj,firstKey),Reflect.field(obj,priKey));
		}
		return map;
	}
};
saturn.db.Model.generateUniqueList = function(objs) {
	if(objs == null || objs.length == 0) {
		return null;
	} else {
		var model = saturn.core.Util.getProvider().getModel(Type.getClass(objs[0]));
		var firstKey = model.getFirstKey();
		return saturn.db.Model.generateUniqueListWithField(objs,firstKey);
	}
};
saturn.db.Model.generateUniqueListWithField = function(objs,field) {
	var set = new haxe.ds.StringMap();
	var _g = 0;
	while(_g < objs.length) {
		var obj = objs[_g];
		++_g;
		set.set(saturn.db.Model.extractField(obj,field),null);
	}
	var ids = [];
	var key = set.keys();
	while(key.hasNext()) {
		var key1 = key.next();
		ids.push(key1);
	}
	return ids;
};
saturn.db.Model.extractField = function(obj,field) {
	if(field.indexOf(".") < 0) {
		return Reflect.field(obj,field);
	} else {
		var a = field.indexOf(".") - 1;
		var nextField = field.substring(0,a + 1);
		var nextObj = Reflect.field(obj,nextField);
		var remaining = field.substring(a + 2,field.length);
		return saturn.db.Model.extractField(nextObj,remaining);
	}
};
saturn.db.Model.setField = function(obj,field,value,newTerminal) {
	if(newTerminal == null) {
		newTerminal = false;
	}
	if(field.indexOf(".") < 0) {
		Reflect.setField(obj,field,value);
	} else {
		var a = field.indexOf(".") - 1;
		var nextField = field.substring(0,a + 1);
		var nextObj = Reflect.field(obj,nextField);
		var remaining = field.substring(a + 2,field.length);
		if(nextObj == null || newTerminal && remaining.indexOf(".") < 0) {
			var clazz = Type.getClass(obj);
			if(clazz != null) {
				var model = saturn.core.Util.getProvider().getModel(clazz);
				var synthDef = model.getSynthenticFields().get(nextField);
				if(synthDef != null) {
					var clazzStr = synthDef.get("class");
					nextObj = Type.createInstance(Type.resolveClass(clazzStr),[]);
					Reflect.setField(obj,nextField,nextObj);
					Reflect.setField(obj,synthDef.field,null);
				}
			}
		}
		saturn.db.Model.setField(nextObj,remaining,value);
	}
};
saturn.db.Model.getModel = function(obj) {
	return saturn.core.Util.getProvider().getModel(Type.getClass(obj));
};
saturn.db.Model.generateMap = function(objs) {
	var model = saturn.db.Model.getModel(objs[0]);
	var firstKey = model.getFirstKey();
	return saturn.db.Model.generateMapWithField(objs,firstKey);
};
saturn.db.Model.generateMapWithField = function(objs,field) {
	var map = new haxe.ds.StringMap();
	var _g = 0;
	while(_g < objs.length) {
		var obj = objs[_g];
		++_g;
		map.set(saturn.db.Model.extractField(obj,field),obj);
	}
	return map;
};
saturn.db.Model.prototype = {
	theModel: null
	,theName: null
	,busSingleColKey: null
	,priColKey: null
	,idRegEx: null
	,stripIdPrefix: null
	,file_new_label: null
	,searchMap: null
	,ftsColumns: null
	,alias: null
	,programs: null
	,flags: null
	,autoActivate: null
	,actionMap: null
	,providerName: null
	,publicConstraintField: null
	,userConstraintField: null
	,customSearchFunctionPath: null
	,getFileNewLabel: function() {
		return this.file_new_label;
	}
	,isProgramSaveAs: function(clazzName) {
		if(this.theModel.exists("programs") && this.theModel.get("programs").get(clazzName)) {
			return true;
		} else if(this.theModel.get("options").exists("canSave")) {
			return this.theModel.get("options").get("canSave").get(clazzName);
		} else {
			return false;
		}
	}
	,getProviderName: function() {
		return this.providerName;
	}
	,setProviderName: function(name) {
		this.providerName = name;
	}
	,getActions: function(actionType) {
		if(this.actionMap.exists(actionType)) {
			return this.actionMap.get(actionType);
		} else {
			return new haxe.ds.StringMap();
		}
	}
	,getAutoActivateLevel: function() {
		return this.autoActivate;
	}
	,hasFlag: function(flag) {
		if(this.flags.exists(flag)) {
			return this.flags.get(flag);
		} else {
			return false;
		}
	}
	,getCustomSearchFunction: function() {
		return this.customSearchFunctionPath;
	}
	,getPrograms: function() {
		return this.programs;
	}
	,getAlias: function() {
		return this.alias;
	}
	,getFTSColumns: function() {
		if(this.ftsColumns != null) {
			return this.ftsColumns;
		} else {
			return null;
		}
	}
	,getSearchMap: function() {
		return this.searchMap;
	}
	,getOptions: function() {
		return this.theModel.get("options");
	}
	,compileRegEx: function(regexs) {
		var cregexs = new haxe.ds.StringMap();
		var key = regexs.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			var regex = regexs.get(key1);
			if(regex != "") {
				cregexs.set(key1,new EReg(regex,""));
			}
		}
		return cregexs;
	}
	,setIdRegEx: function(idRegExStr) {
		this.idRegEx = new EReg(idRegExStr,"");
	}
	,getIdRegEx: function() {
		return this.idRegEx;
	}
	,isValidId: function(id) {
		if(this.idRegEx != null) {
			return this.idRegEx.match(id);
		} else {
			return false;
		}
	}
	,stripPrefixes: function() {
		return this.stripIdPrefix;
	}
	,processId: function(id) {
		if(this.stripIdPrefix) {
			id = this.idRegEx.replace(id,"");
		}
		return id;
	}
	,getIndexes: function() {
		var indexFields = [];
		var keyName = this.theModel.get("indexes").keys();
		while(keyName.hasNext()) {
			var keyName1 = keyName.next();
			indexFields.push(keyName1);
		}
		return indexFields;
	}
	,getAutoFunctions: function() {
		if(this.theModel.exists("auto_functions")) {
			return this.theModel.get("auto_functions");
		} else {
			return null;
		}
	}
	,getFields: function() {
		var fields = [];
		var field = this.theModel.get("model").iterator();
		while(field.hasNext()) {
			var field1 = field.next();
			fields.push(field1);
		}
		return fields;
	}
	,getAttributes: function() {
		var fields = [];
		if(this.theModel.exists("fields")) {
			var field = this.theModel.get("fields").keys();
			while(field.hasNext()) {
				var field1 = field.next();
				fields.push(field1);
			}
		}
		return fields;
	}
	,isField: function(field) {
		return this.theModel.get("fields").exists(field);
	}
	,isRDBMSField: function(rdbmsField) {
		var fields = this.theModel.get("fields");
		var field = fields.keys();
		while(field.hasNext()) {
			var field1 = field.next();
			if(fields.get(field1) == rdbmsField) {
				return true;
			}
		}
		return false;
	}
	,modelAtrributeToRDBMS: function(field) {
		return this.theModel.get("fields").get(field);
	}
	,hasDefaults: function() {
		return this.theModel.exists("defaults");
	}
	,hasOptions: function() {
		return this.theModel.exists("options");
	}
	,getFieldDefault: function(field) {
		if(this.hasDefaults() && this.theModel.get("defaults").exists(field)) {
			return this.theModel.get("defaults").get(field);
		} else {
			return null;
		}
	}
	,hasRequired: function() {
		return this.theModel.exists("required");
	}
	,isRequired: function(field) {
		if(this.hasRequired()) {
			if(this.theModel.get("required").exists(field)) {
				return true;
			} else if(field.indexOf(".") > 0) {
				var cmps = field.split(".");
				var refField = this.getSyntheticallyBoundField(cmps[0]);
				return this.isRequired(refField);
			}
		}
		return false;
	}
	,getFieldDefs: function() {
		var fields = [];
		var defaults = null;
		if(this.theModel.exists("defaults")) {
			defaults = this.theModel.get("defaults");
		} else {
			return this.getFields();
		}
		var field = this.theModel.get("model").iterator();
		while(field.hasNext()) {
			var field1 = field.next();
			var val = null;
			if(defaults.exists(field1)) {
				val = this.theModel.get("defaults").get(field1);
			}
			fields.push({ name : field1, defaultValue : val});
		}
		return fields;
	}
	,getUserFieldDefinitions: function() {
		var fields = [];
		var defaults = null;
		if(this.theModel.exists("defaults")) {
			defaults = this.theModel.get("defaults");
		} else {
			defaults = new haxe.ds.StringMap();
		}
		var model = this.theModel.get("model");
		if(model == null) {
			return null;
		}
		var field = model.keys();
		while(field.hasNext()) {
			var field1 = field.next();
			var val = null;
			if(defaults.exists(field1)) {
				val = this.theModel.get("defaults").get(field1);
			}
			fields.push({ name : field1, defaultValue : val, field : this.theModel.get("model").get(field1)});
		}
		return fields;
	}
	,convertUserFieldName: function(userFieldName) {
		if(this.theModel.exists("model")) {
			if(this.theModel.get("model").exists(userFieldName)) {
				return this.theModel.get("model").get(userFieldName);
			} else {
				return null;
			}
		} else {
			return null;
		}
	}
	,getExtTableDefinition: function() {
		var tableDefinition = [];
		var name = this.theModel.get("model").keys();
		while(name.hasNext()) {
			var name1 = name.next();
			var field = this.theModel.get("model").get(name1);
			var def = { header : name1, dataIndex : field, editor : "textfield"};
			if(this.isRequired(field)) {
				def.tdCls = "required-column";
				def.allowBlank = false;
			}
			tableDefinition.push(def);
		}
		return tableDefinition;
	}
	,getSynthenticFields: function() {
		return this.theModel.get("fields.synthetic");
	}
	,isSyntheticallyBound: function(fieldName) {
		var synthFields = this.theModel.get("fields.synthetic");
		if(synthFields != null) {
			var syntheticFieldName = synthFields.keys();
			while(syntheticFieldName.hasNext()) {
				var syntheticFieldName1 = syntheticFieldName.next();
				if(synthFields.get(syntheticFieldName1).get("field") == fieldName) {
					return true;
				}
			}
		}
		return false;
	}
	,isSynthetic: function(fieldName) {
		if(this.theModel.exists("fields.synthetic")) {
			return this.theModel.get("fields.synthetic").exists(fieldName);
		} else {
			return false;
		}
	}
	,getPseudoSyntheticObjectName: function(fieldName) {
		if(this.theModel.exists("fields.synthetic")) {
			var objName = this.theModel.get("fields.synthetic").keys();
			while(objName.hasNext()) {
				var objName1 = objName.next();
				if(this.theModel.get("fields.synthetic").get(objName1).get("fk_field") == null) {
					var boundField = this.theModel.get("fields.synthetic").get(objName1).get("field");
					if(fieldName == boundField) {
						return objName1;
					}
				}
			}
		}
		return null;
	}
	,getSyntheticallyBoundField: function(syntheticFieldName) {
		if(this.theModel.exists("fields.synthetic")) {
			if(this.theModel.get("fields.synthetic").exists(syntheticFieldName)) {
				return this.theModel.get("fields.synthetic").get(syntheticFieldName).get("field");
			}
		}
		return null;
	}
	,getClass: function() {
		return Type.resolveClass(this.theName);
	}
	,getFirstKey: function() {
		return this.busSingleColKey;
	}
	,getIcon: function() {
		if(this.hasOptions()) {
			if(this.getOptions().exists("icon")) {
				return this.getOptions().get("icon");
			}
		}
		return "";
	}
	,getWorkspaceWrapper: function() {
		if(this.hasOptions()) {
			if(this.getOptions().exists("workspace_wrapper")) {
				return this.getOptions().get("workspace_wrapper");
			}
		}
		return "";
	}
	,getWorkspaceWrapperClass: function() {
		return Type.resolveClass(this.getWorkspaceWrapper());
	}
	,getPrimaryKey: function() {
		return this.priColKey;
	}
	,getName: function() {
		return this.theName;
	}
	,getExtModelName: function() {
		return this.theName + ".MODEL";
	}
	,getExtStoreName: function() {
		return this.theName + ".STORE";
	}
	,getFirstKey_rdbms: function() {
		return this.theModel.get("fields").get(this.getFirstKey());
	}
	,getSqlColumn: function(field) {
		return this.theModel.get("fields").get(field);
	}
	,unbindFieldName: function(field) {
		return this.getSqlColumn(field);
	}
	,getPrimaryKey_rdbms: function() {
		return this.theModel.get("fields").get(this.getPrimaryKey());
	}
	,getSchemaName: function() {
		return this.theModel.get("table_info").get("schema");
	}
	,getTableName: function() {
		return this.theModel.get("table_info").get("name");
	}
	,getQualifiedTableName: function() {
		var schemaName = this.getSchemaName();
		if(schemaName == null || schemaName == "") {
			return this.getTableName();
		} else {
			return this.getSchemaName() + "." + this.getTableName();
		}
	}
	,hasTableInfo: function() {
		return this.theModel.exists("table_info");
	}
	,getSelectClause: function() {
		return this.theModel.get("statements").get("SELECT");
	}
	,setInsertClause: function(insertClause) {
		this.theModel.get("statements").set("INSERT",insertClause);
	}
	,getInsertClause: function() {
		return this.theModel.get("statements").get("INSERT");
	}
	,setUpdateClause: function(updateClause) {
		this.theModel.get("statements").set("UPDATE",updateClause);
	}
	,getUpdateClause: function() {
		return this.theModel.get("statements").get("UPDATE");
	}
	,setDeleteClause: function(deleteClause) {
		this.theModel.get("statements").set("DELETE",deleteClause);
	}
	,getDeleteClause: function() {
		return this.theModel.get("statements").get("DELETE");
	}
	,setSelectKeyClause: function(selKeyClause) {
		this.theModel.get("statements").set("SELECT_KEY",selKeyClause);
	}
	,getSelectKeyClause: function() {
		return this.theModel.get("statements").get("SELECT_KEY");
	}
	,setColumns: function(columns) {
		this.theModel.get("statements").set("COLUMNS",columns);
		var colSet = new haxe.ds.StringMap();
		var _g = 0;
		while(_g < columns.length) {
			var column = columns[_g];
			++_g;
			colSet.set(column,"");
		}
		this.theModel.get("statements").set("COLUMNS_SET",colSet);
	}
	,getColumns: function() {
		return this.theModel.get("statements").get("COLUMNS");
	}
	,getColumnSet: function() {
		return this.theModel.get("statements").get("COLUMNS_SET");
	}
	,getSelectorField: function() {
		if(this.theModel.exists("selector")) {
			return this.theModel.get("selector").get("polymorph_key");
		} else {
			return null;
		}
	}
	,getSelectorValue: function() {
		return this.theModel.get("selector").get("value");
	}
	,isPolymorph: function() {
		return this.theModel.exists("selector");
	}
	,getUserConstraintField: function() {
		return this.userConstraintField;
	}
	,getPublicConstraintField: function() {
		return this.publicConstraintField;
	}
	,__class__: saturn.db.Model
};
saturn.db.SearchDef = $hxClasses["saturn.db.SearchDef"] = function() {
	this.replaceWith = null;
	this.regex = null;
};
saturn.db.SearchDef.__name__ = ["saturn","db","SearchDef"];
saturn.db.SearchDef.prototype = {
	regex: null
	,replaceWith: null
	,__class__: saturn.db.SearchDef
};
saturn.db.ModelAction = $hxClasses["saturn.db.ModelAction"] = function(name,userSuffix,qName,icon) {
	this.name = name;
	this.userSuffix = userSuffix;
	this.setQualifiedName(qName);
	this.icon = icon;
};
saturn.db.ModelAction.__name__ = ["saturn","db","ModelAction"];
saturn.db.ModelAction.prototype = {
	name: null
	,userSuffix: null
	,functionName: null
	,className: null
	,icon: null
	,setQualifiedName: function(qName) {
		var i = qName.lastIndexOf(".");
		this.functionName = qName.substring(i + 1,qName.length);
		this.className = qName.substring(0,i);
	}
	,run: function(obj,cb) {
		Reflect.callMethod(obj,Reflect.field(obj,this.functionName),[cb]);
	}
	,__class__: saturn.db.ModelAction
};
saturn.db.NodeProvider = $hxClasses["saturn.db.NodeProvider"] = function(models) {
	var _gthis = this;
	saturn.db.DefaultProvider.call(this,models,null,false);
	var app = saturn.client.WorkspaceApplication.getApplication();
	saturn.client.core.ClientCore.getClientCore().registerResponse("_data_receive_objects");
	saturn.client.core.ClientCore.getClientCore().registerResponse("_data_receive_objects_by_class");
	saturn.client.core.ClientCore.getClientCore().registerResponse("_data_receive_insert_response");
	saturn.client.core.ClientCore.getClientCore().registerResponse("_data_receive_update_response");
	saturn.client.core.ClientCore.getClientCore().registerResponse("_data_receive_delete_response");
	saturn.client.core.ClientCore.getClientCore().registerResponse("_data_commit_response");
	saturn.client.core.ClientCore.getClientCore().registerResponse("_error_receive");
	if(models == null) {
		this.requestModels(function(models1,err) {
			if(err != null) {
				saturn.core.Util.debug("Error retrieving model definitions from server");
			} else {
				saturn.core.Util.debug("Models retrieved");
				_gthis.setModels(models1);
				var models2 = _gthis.getModelClasses();
				saturn.core.Util.debug("Models configured: " + models2.length);
				if(app != null) {
					var _g = 0;
					while(_g < models2.length) {
						var model = models2[_g];
						++_g;
						var programs = model.getPrograms();
						if(programs != null) {
							var _g1 = 0;
							while(_g1 < programs.length) {
								var program = programs[_g1];
								++_g1;
								saturn.core.Util.debug("Registering " + program + "/" + model.getName());
								app.getProgramRegistry().openWith(Type.resolveClass(program),true,Type.resolveClass(model.getName()));
							}
						} else {
							saturn.core.Util.debug("No programs for " + model.getName());
						}
					}
					app.makeAliasesAvailable();
				}
				if(app != null) {
					var tmp = Type.getClass(app);
					if(_gthis.getModel(tmp).hasFlag("NO_LOGIN")) {
						var u = new saturn.core.User();
						u.fullname = "SQLite";
						saturn.core.Util.debug("NO_LOGIN flag found");
						saturn.client.core.ClientCore.getClientCore().disableLogout();
						saturn.client.core.ClientCore.getClientCore().setLoggedIn(u);
					}
				}
				_gthis.getByNamedQuery("saturn.server.plugins.core.ConfigurationPlugin:clientConfiguration",[],null,false,function(config,err1) {
					if(err1 == null) {
						if(Reflect.hasField(config,"connections")) {
							var connectionConfigs = Reflect.field(config,"connections");
							var _g2 = 0;
							while(_g2 < connectionConfigs.length) {
								var connectionConfig = connectionConfigs[_g2];
								++_g2;
								if(Reflect.hasField(connectionConfig,"name")) {
									var name = Reflect.field(connectionConfig,"name");
									if(name == "DEFAULT") {
										if(Reflect.hasField(connectionConfig,"named_query_hooks")) {
											var tmp1 = Reflect.field(connectionConfig,"named_query_hooks");
											_gthis.addHooks(tmp1);
										}
									}
								}
							}
						}
						saturn.client.core.ClientCore.getClientCore().providerUp();
					}
				});
			}
		});
	}
};
saturn.db.NodeProvider.__name__ = ["saturn","db","NodeProvider"];
saturn.db.NodeProvider.__super__ = saturn.db.DefaultProvider;
saturn.db.NodeProvider.prototype = $extend(saturn.db.DefaultProvider.prototype,{
	hxSerialize: function(s) {
	}
	,hxUnserialize: function(u) {
	}
	,requestModels: function(cb) {
		var app = saturn.client.WorkspaceApplication.getApplication();
		var d = { };
		saturn.client.core.ClientCore.getClientCore().sendRequest("_remote_provider_._request_models",d,function(data,err) {
			if(err != null) {
				cb(null,err);
			} else {
				var models = haxe.Unserializer.run(data.json.models);
				cb(models,null);
			}
		});
	}
	,_getByIds: function(ids,clazz,cb) {
		var _gthis = this;
		var app = saturn.client.WorkspaceApplication.getApplication();
		var d = { };
		d.class_name = Type.getClassName(clazz);
		d.ids = ids;
		saturn.client.core.ClientCore.getClientCore().sendRequest("_remote_provider_._data_request_objects_ids",d,function(data,err) {
			if(data.json != null) {
				var tmp = _gthis.parseObjects(data.json.objects);
				cb(tmp,err);
			} else {
				cb([],err);
			}
		});
	}
	,_getByValues: function(values,clazz,field,cb) {
		var _gthis = this;
		var app = saturn.client.WorkspaceApplication.getApplication();
		var d = { };
		d.class_name = Type.getClassName(clazz);
		d.values = values;
		d.field = field;
		saturn.client.core.ClientCore.getClientCore().sendRequest("_remote_provider_._data_request_objects_values",d,function(data,err) {
			if(data.json != null) {
				var tmp = _gthis.parseObjects(data.json.objects);
				cb(tmp,err);
			} else {
				cb([],err);
			}
		});
	}
	,_getByPkeys: function(ids,clazz,cb) {
		var _gthis = this;
		var app = saturn.client.WorkspaceApplication.getApplication();
		var d = { };
		d.class_name = Type.getClassName(clazz);
		d.ids = ids;
		saturn.client.core.ClientCore.getClientCore().sendRequest("_remote_provider_._data_request_objects_pkeys",d,function(data,err) {
			if(data.json != null) {
				var tmp = _gthis.parseObjects(data.json.objects);
				cb(tmp,err);
			} else {
				cb([],err);
			}
		});
	}
	,_getByIdStartsWith: function(id,field,clazz,limit,cb) {
		var _gthis = this;
		var app = saturn.client.WorkspaceApplication.getApplication();
		var d = { };
		d.class_name = Type.getClassName(clazz);
		d.id = id;
		d.limit = limit;
		if(field == null) {
			d.field = null;
		} else {
			var model = this.getModel(clazz);
			d.field = model.modelAtrributeToRDBMS(field);
		}
		saturn.client.core.ClientCore.getClientCore().sendRequest("_remote_provider_._data_request_objects_idstartswith",d,function(data,err) {
			if(data.json != null) {
				var tmp = _gthis.parseObjects(data.json.objects);
				cb(tmp,err);
			} else {
				cb([],err);
			}
		});
	}
	,_query: function(query,cb) {
		var _gthis = this;
		var app = saturn.client.WorkspaceApplication.getApplication();
		var d = { };
		d.queryStr = query.serialise();
		saturn.client.core.ClientCore.getClientCore().sendRequest("_remote_provider_._data_request_query",d,function(data,err) {
			if(data.json != null) {
				var tmp = _gthis.parseObjects(data.json.objects);
				cb(tmp,err);
			} else {
				cb([],err);
			}
		});
	}
	,_getByNamedQuery: function(queryId,parameters,clazz,cb) {
		var _gthis = this;
		var app = saturn.client.WorkspaceApplication.getApplication();
		var d = { };
		if(clazz != null) {
			d.class_name = Type.getClassName(clazz);
		}
		d.queryId = queryId;
		d.parameters = haxe.Serializer.run(parameters);
		saturn.client.core.ClientCore.getClientCore().sendRequest("_remote_provider_._data_request_objects_namedquery",d,function(data,err) {
			if(data.json != null) {
				var tmp = _gthis.parseObjects(data.json.objects);
				cb(tmp,err);
			} else {
				cb([],err);
			}
		});
	}
	,_getObjects: function(clazz,cb) {
		var _gthis = this;
		var app = saturn.client.WorkspaceApplication.getApplication();
		var d = { };
		d.class_name = Type.getClassName(clazz);
		saturn.client.core.ClientCore.getClientCore().sendRequest("_remote_provider_._data_request_objects_by_class",d,function(data,err) {
			if(data.json != null) {
				var tmp = _gthis.parseObjects(data.json.objects);
				cb(tmp,err);
			} else {
				cb([],err);
			}
		});
	}
	,_update: function(attributeMaps,className,cb) {
		this.updateOrInsert("_remote_provider_._data_update_request",attributeMaps,className,cb);
	}
	,_insert: function(attributeMaps,className,cb) {
		this.updateOrInsert("_remote_provider_._data_insert_request",attributeMaps,className,cb);
	}
	,updateOrInsert: function(msg,attributeMaps,className,cb) {
		var app = saturn.client.WorkspaceApplication.getApplication();
		var d = { };
		d.class_name = className;
		var objs = [];
		var _g = 0;
		while(_g < attributeMaps.length) {
			var atMap = attributeMaps[_g];
			++_g;
			var obj = { };
			var key = atMap.keys();
			while(key.hasNext()) {
				var key1 = key.next();
				Reflect.setField(obj,key1,atMap.get(key1));
			}
			objs.push(obj);
		}
		d.objs = JSON.stringify(objs);
		saturn.client.core.ClientCore.getClientCore().sendRequest(msg,d,function(data,err) {
			cb(err);
		});
	}
	,_delete: function(attributeMaps,className,cb) {
		var model = this.getModelByStringName(className);
		var objPkeys = [];
		var priField = model.getPrimaryKey_rdbms();
		var d = { };
		d.class_name = className;
		var objs = [];
		var _g = 0;
		while(_g < attributeMaps.length) {
			var atMap = attributeMaps[_g];
			++_g;
			var obj = { };
			Reflect.setField(obj,priField,atMap.get(priField));
			objs.push(obj);
		}
		d.objs = JSON.stringify(objs);
		var d2 = attributeMaps;
		js.Browser.get_window().console.log(d2);
		var app = saturn.client.WorkspaceApplication.getApplication();
		saturn.client.core.ClientCore.getClientCore().sendRequest("_remote_provider_._data_delete_request",d,function(data,err) {
			cb(err);
		});
	}
	,_rollback: function(cb) {
		cb("Updating not supported on server");
	}
	,_commit: function(cb) {
		var app = saturn.client.WorkspaceApplication.getApplication();
		var d = { };
		saturn.client.core.ClientCore.getClientCore().sendRequest("_remote_provider_._data_commit_request",d,function(data,err) {
			cb(err);
		});
	}
	,parseObjects: function(data) {
		if(data != null) {
			var _g = 0;
			while(_g < data.length) {
				var item = data[_g];
				++_g;
				this.bindObject(item,null,false);
			}
		}
		return data;
	}
	,uploadFile: function(contents,file_identifier,cb) {
		return saturn.client.core.ClientCore.getClientCore().sendRequest("_remote_provider_._data_request_upload_file",{ "contents" : contents, "file_identifier" : file_identifier},function(data,err) {
			if(data.json != null) {
				Reflect.setField(saturn.client.core.ClientCore.getClientCore().msgIdToJobInfo.get(data.msgId),"file_identifier",data.json.upload_id);
				cb(err,data.json.upload_id);
			} else {
				cb(err,null);
			}
		});
	}
	,__class__: saturn.db.NodeProvider
});
saturn.db.Pool = $hxClasses["saturn.db.Pool"] = function() { };
saturn.db.Pool.__name__ = ["saturn","db","Pool"];
saturn.db.Pool.prototype = {
	acquire: null
	,release: null
	,drain: null
	,destroyAllNow: null
	,__class__: saturn.db.Pool
};
if(!saturn.db.mapping) saturn.db.mapping = {};
saturn.db.mapping.SGC = $hxClasses["saturn.db.mapping.SGC"] = function() {
	this.buildModels();
};
saturn.db.mapping.SGC.__name__ = ["saturn","db","mapping","SGC"];
saturn.db.mapping.SGC.getNextAvailableId = function(clazz,value,db,cb) {
};
saturn.db.mapping.SGC.prototype = {
	models: null
	,buildModels: function() {
		var _g410 = new haxe.ds.StringMap();
		var _g22 = new haxe.ds.StringMap();
		var _g = new haxe.ds.StringMap();
		_g.set("constructId","CONSTRUCT_ID");
		_g.set("id","PKEY");
		_g.set("proteinSeq","CONSTRUCTPROTSEQ");
		_g.set("proteinSeqNoTag","CONSTRUCTPROTSEQNOTAG");
		_g.set("dnaSeq","CONSTRUCTDNASEQ");
		_g.set("docId","ELNEXP");
		_g.set("vectorId","SGCVECTOR_PKEY");
		_g.set("alleleId","SGCALLELE_PKEY");
		_g.set("res1Id","SGCRESTRICTENZ1_PKEY");
		_g.set("res2Id","SGCRESTRICTENZ2_PKEY");
		_g.set("constructPlateId","SGCCONSTRUCTPLATE_PKEY");
		_g.set("wellId","WELLID");
		_g.set("expectedMass","EXPECTEDMASS");
		_g.set("expectedMassNoTag","EXPETCEDMASSNOTAG");
		_g.set("status","STATUS");
		_g.set("location","SGCLOCATION");
		_g.set("elnId","ELNEXP");
		_g.set("constructComments","CONSTRUCTCOMMENTS");
		_g.set("person","PERSON");
		_g.set("constructStart","CONSTRUCTSTART");
		_g.set("constructStop","CONSTRUCTSTOP");
		_g.set("complex","COMPLEX");
		_g22.set("fields",_g);
		var _g1 = new haxe.ds.StringMap();
		_g1.set("status","In progress");
		_g22.set("defaults",_g1);
		var _g2 = new haxe.ds.StringMap();
		_g2.set("PERSON","insert.username");
		_g22.set("auto_functions",_g2);
		var _g3 = new haxe.ds.StringMap();
		_g3.set("wellId","1");
		_g3.set("constructPlateId","1");
		_g3.set("constructId","1");
		_g3.set("alleleId","1");
		_g3.set("vectorId","1");
		_g22.set("required",_g3);
		var _g4 = new haxe.ds.StringMap();
		_g4.set("constructId",false);
		_g4.set("id",true);
		_g22.set("indexes",_g4);
		var _g5 = new haxe.ds.StringMap();
		_g5.set("Construct ID","constructId");
		_g5.set("Construct Plate","constructPlate.plateName");
		_g5.set("Well ID","wellId");
		_g5.set("Vector ID","vector.vectorId");
		_g5.set("Allele ID","allele.alleleId");
		_g5.set("Status","status");
		_g5.set("Protein Sequence","proteinSeq");
		_g5.set("Expected Mass","expectedMass");
		_g5.set("Restriction Site 1","res1.enzymeName");
		_g5.set("Restriction Site 2","res2.enzymeName");
		_g5.set("Protein Sequence (No Tag)","proteinSeqNoTag");
		_g5.set("Expected Mass (No Tag)","expectedMassNoTag");
		_g5.set("Construct DNA Sequence","dnaSeq");
		_g5.set("Location","location");
		_g5.set("ELN ID","elnId");
		_g5.set("Construct Comments","constructComments");
		_g5.set("Creator","person");
		_g5.set("Construct Start","constructStart");
		_g5.set("Construct Stop","constructStop");
		_g5.set("__HIDDEN__PKEY__","id");
		_g22.set("model",_g5);
		var _g13 = new haxe.ds.StringMap();
		var _g6 = new haxe.ds.StringMap();
		_g6.set("field","alleleId");
		_g6.set("class","saturn.core.domain.SgcAllele");
		_g6.set("fk_field","id");
		_g13.set("allele",_g6);
		var _g7 = new haxe.ds.StringMap();
		_g7.set("field","vectorId");
		_g7.set("class","saturn.core.domain.SgcVector");
		_g7.set("fk_field","id");
		_g13.set("vector",_g7);
		var _g8 = new haxe.ds.StringMap();
		_g8.set("field","res1Id");
		_g8.set("class","saturn.core.domain.SgcRestrictionSite");
		_g8.set("fk_field","id");
		_g13.set("res1",_g8);
		var _g9 = new haxe.ds.StringMap();
		_g9.set("field","res2Id");
		_g9.set("class","saturn.core.domain.SgcRestrictionSite");
		_g9.set("fk_field","id");
		_g13.set("res2",_g9);
		var _g10 = new haxe.ds.StringMap();
		_g10.set("field","constructPlateId");
		_g10.set("class","saturn.core.domain.SgcConstructPlate");
		_g10.set("fk_field","id");
		_g13.set("constructPlate",_g10);
		var _g11 = new haxe.ds.StringMap();
		_g11.set("field","proteinSeq");
		_g11.set("class","saturn.core.Protein");
		_g11.set("fk_field",null);
		_g13.set("proteinSequenceObj",_g11);
		var _g12 = new haxe.ds.StringMap();
		_g12.set("field","proteinSeqNoTag");
		_g12.set("class","saturn.core.Protein");
		_g12.set("fk_field",null);
		_g13.set("proteinSequenceNoTagObj",_g12);
		_g22.set("fields.synthetic",_g13);
		var _g14 = new haxe.ds.StringMap();
		_g14.set("schema","SGC");
		_g14.set("name","CONSTRUCT");
		_g22.set("table_info",_g14);
		var _g15 = new haxe.ds.StringMap();
		_g15.set("saturn.client.programs.DNASequenceEditor",true);
		_g22.set("programs",_g15);
		var _g16 = new haxe.ds.StringMap();
		_g16.set("constructId",true);
		_g22.set("search",_g16);
		var _g21 = new haxe.ds.StringMap();
		_g21.set("id_pattern","-c");
		_g21.set("alias","Construct");
		_g21.set("file.new.label","Construct");
		_g21.set("icon","dna_conical_16.png");
		_g21.set("auto_activate","3");
		var _g20 = new haxe.ds.StringMap();
		var _g19 = new haxe.ds.StringMap();
		var _g17 = new haxe.ds.StringMap();
		_g17.set("user_suffix","Protein");
		_g17.set("function","saturn.core.domain.SgcConstruct.loadProtein");
		_g17.set("icon","structure_16.png");
		_g19.set("protein",_g17);
		var _g18 = new haxe.ds.StringMap();
		_g18.set("user_suffix","Protein No Tag");
		_g18.set("function","saturn.core.domain.SgcConstruct.loadProteinNoTag");
		_g18.set("icon","structure_16.png");
		_g19.set("proteinNoTag",_g18);
		_g20.set("search_bar",_g19);
		_g21.set("actions",_g20);
		_g22.set("options",_g21);
		_g410.set("saturn.core.domain.SgcConstruct",_g22);
		var _g26 = new haxe.ds.StringMap();
		var _g23 = new haxe.ds.StringMap();
		_g23.set("constructPkey","SGCCONSTRUCT_PKEY");
		_g23.set("status","STATUS");
		_g26.set("fields",_g23);
		var _g24 = new haxe.ds.StringMap();
		_g24.set("schema","SGC");
		_g24.set("name","CONSTR_STATUS_SNAPSHOT");
		_g26.set("table_info",_g24);
		var _g25 = new haxe.ds.StringMap();
		_g25.set("constructPkey",true);
		_g26.set("indexes",_g25);
		_g410.set("saturn.core.domain.SgcConstructStatus",_g26);
		var _g44 = new haxe.ds.StringMap();
		var _g27 = new haxe.ds.StringMap();
		_g27.set("alleleId","ALLELE_ID");
		_g27.set("allelePlateId","SGCPLATE_PKEY");
		_g27.set("id","PKEY");
		_g27.set("entryCloneId","SGCENTRYCLONE_PKEY");
		_g27.set("forwardPrimerId","SGCPRIMER5_PKEY");
		_g27.set("reversePrimerId","SGCPRIMER3_PKEY");
		_g27.set("dnaSeq","ALLELESEQUENCERAW");
		_g27.set("proteinSeq","ALLELEPROTSEQ");
		_g27.set("status","ALLELE_STATUS");
		_g27.set("location","SGCLOCATION");
		_g27.set("comments","ALLELECOMMENTS");
		_g27.set("elnId","ELNEXP");
		_g27.set("dateStamp","DATESTAMP");
		_g27.set("person","PERSON");
		_g27.set("plateWell","PLATEWELL");
		_g27.set("dnaSeqLen","ALLELESEQLENGTH");
		_g27.set("complex","COMPLEX");
		_g27.set("domainSummary","DOMAINSUMMARY");
		_g27.set("domainStartDelta","DOMAINSTARTDELTA");
		_g27.set("domainStopDelta","DOMAINSTOPDELTA");
		_g27.set("containsPharmaDomain","CONTAINSPHARMADOMAIN");
		_g27.set("domainSummaryLong","DOMAINSUMMARYLONG");
		_g27.set("impPI","IMPPI");
		_g44.set("fields",_g27);
		var _g28 = new haxe.ds.StringMap();
		_g28.set("status","In process");
		_g44.set("defaults",_g28);
		var _g29 = new haxe.ds.StringMap();
		_g29.set("Allele ID","alleleId");
		_g29.set("Plate","plate.plateName");
		_g29.set("Entry Clone ID","entryClone.entryCloneId");
		_g29.set("Forward Primer ID","forwardPrimer.primerId");
		_g29.set("Reverse Primer ID","reversePrimer.primerId");
		_g29.set("DNA Sequence","dnaSeq");
		_g29.set("Protein Sequence","proteinSeq");
		_g29.set("Status","status");
		_g29.set("Location","location");
		_g29.set("Comments","comments");
		_g29.set("ELN ID","elnId");
		_g29.set("Date Record","dateStamp");
		_g29.set("Person","person");
		_g29.set("Plate Well","plateWell");
		_g29.set("DNA Length","dnaSeqLen");
		_g29.set("Complex","complex");
		_g29.set("Domain Summary","domainSummary");
		_g29.set("Domain  Start Delta","domainStartDelta");
		_g29.set("Domain Stop Delta","domainStopDelta");
		_g29.set("Contains Pharma Domain","containsPharmaDomain");
		_g29.set("Domain Summary Long","domainSummaryLong");
		_g29.set("IMP PI","impPI");
		_g29.set("__HIDDEN__PKEY__","id");
		_g44.set("model",_g29);
		var _g30 = new haxe.ds.StringMap();
		_g30.set("alleleId",false);
		_g30.set("id",true);
		_g44.set("indexes",_g30);
		var _g36 = new haxe.ds.StringMap();
		var _g31 = new haxe.ds.StringMap();
		_g31.set("field","entryCloneId");
		_g31.set("class","saturn.core.domain.SgcEntryClone");
		_g31.set("fk_field","id");
		_g36.set("entryClone",_g31);
		var _g32 = new haxe.ds.StringMap();
		_g32.set("field","forwardPrimerId");
		_g32.set("class","saturn.core.domain.SgcForwardPrimer");
		_g32.set("fk_field","id");
		_g36.set("forwardPrimer",_g32);
		var _g33 = new haxe.ds.StringMap();
		_g33.set("field","reversePrimerId");
		_g33.set("class","saturn.core.domain.SgcReversePrimer");
		_g33.set("fk_field","id");
		_g36.set("reversePrimer",_g33);
		var _g34 = new haxe.ds.StringMap();
		_g34.set("field","allelePlateId");
		_g34.set("class","saturn.core.domain.SgcAllelePlate");
		_g34.set("fk_field","id");
		_g36.set("plate",_g34);
		var _g35 = new haxe.ds.StringMap();
		_g35.set("field","proteinSeq");
		_g35.set("class","saturn.core.Protein");
		_g35.set("fk_field",null);
		_g36.set("proteinSequenceObj",_g35);
		_g44.set("fields.synthetic",_g36);
		var _g37 = new haxe.ds.StringMap();
		_g37.set("schema","SGC");
		_g37.set("name","ALLELE");
		_g44.set("table_info",_g37);
		var _g38 = new haxe.ds.StringMap();
		_g38.set("saturn.client.programs.DNASequenceEditor",true);
		_g44.set("programs",_g38);
		var _g39 = new haxe.ds.StringMap();
		_g39.set("alleleId",true);
		_g44.set("search",_g39);
		var _g43 = new haxe.ds.StringMap();
		_g43.set("id_pattern","-a");
		_g43.set("alias","Allele");
		_g43.set("file.new.label","Allele");
		_g43.set("icon","dna_conical_16.png");
		_g43.set("auto_activate","3");
		var _g42 = new haxe.ds.StringMap();
		var _g41 = new haxe.ds.StringMap();
		var _g40 = new haxe.ds.StringMap();
		_g40.set("user_suffix","Protein");
		_g40.set("function","saturn.core.domain.SgcAllele.loadProtein");
		_g40.set("icon","structure_16.png");
		_g41.set("protein",_g40);
		_g42.set("search_bar",_g41);
		_g43.set("actions",_g42);
		_g44.set("options",_g43);
		_g410.set("saturn.core.domain.SgcAllele",_g44);
		var _g58 = new haxe.ds.StringMap();
		var _g45 = new haxe.ds.StringMap();
		_g45.set("entryCloneId","ENTRY_CLONE_ID");
		_g45.set("id","PKEY");
		_g45.set("dnaSeq","DNARAWSEQUENCE");
		_g45.set("targetId","SGCTARGET_PKEY");
		_g45.set("seqSource","SEQSOURCE");
		_g45.set("sourceId","SOURCEID");
		_g45.set("sequenceConfirmed","SEQUENCECONFIRMED");
		_g45.set("elnId","ELNEXPERIMENTID");
		_g45.set("complex","COMPLEX");
		_g58.set("fields",_g45);
		var _g46 = new haxe.ds.StringMap();
		_g46.set("entryCloneId",false);
		_g46.set("id",true);
		_g58.set("indexes",_g46);
		var _g47 = new haxe.ds.StringMap();
		_g47.set("saturn.client.programs.DNASequenceEditor",true);
		_g58.set("programs",_g47);
		var _g48 = new haxe.ds.StringMap();
		_g48.set("entryCloneId",true);
		_g58.set("search",_g48);
		var _g53 = new haxe.ds.StringMap();
		_g53.set("id_pattern","-s");
		var _g49 = new haxe.ds.StringMap();
		_g49.set("saturn.client.programs.DNASequenceEditor",true);
		_g49.set("saturn.client.programs.ProteinSequenceEditor",true);
		_g53.set("canSave",_g49);
		_g53.set("alias","Entry Clone");
		_g53.set("file.new.label","Entry Clone");
		_g53.set("icon","dna_conical_16.png");
		_g53.set("auto_activate","3");
		var _g52 = new haxe.ds.StringMap();
		var _g51 = new haxe.ds.StringMap();
		var _g50 = new haxe.ds.StringMap();
		_g50.set("user_suffix","Translation");
		_g50.set("function","saturn.core.domain.SgcEntryClone.loadTranslation");
		_g50.set("icon","structure_16.png");
		_g51.set("translation",_g50);
		_g52.set("search_bar",_g51);
		_g53.set("actions",_g52);
		_g58.set("options",_g53);
		var _g54 = new haxe.ds.StringMap();
		_g54.set("schema","SGC");
		_g54.set("name","ENTRY_CLONE");
		_g58.set("table_info",_g54);
		var _g55 = new haxe.ds.StringMap();
		_g55.set("Entry Clone ID","entryCloneId");
		_g55.set("Target ID","target.targetId");
		_g58.set("model",_g55);
		var _g57 = new haxe.ds.StringMap();
		var _g56 = new haxe.ds.StringMap();
		_g56.set("field","targetId");
		_g56.set("class","saturn.core.domain.SgcTarget");
		_g56.set("fk_field","id");
		_g57.set("target",_g56);
		_g58.set("fields.synthetic",_g57);
		_g410.set("saturn.core.domain.SgcEntryClone",_g58);
		var _g66 = new haxe.ds.StringMap();
		var _g59 = new haxe.ds.StringMap();
		_g59.set("enzymeName","RESTRICTION_ENZYME_NAME");
		_g59.set("cutSequence","RESTRICTION_ENZYME_SEQUENCERAW");
		_g59.set("id","PKEY");
		_g66.set("fields",_g59);
		var _g60 = new haxe.ds.StringMap();
		_g60.set("enzymeName",false);
		_g60.set("id",true);
		_g66.set("indexes",_g60);
		var _g61 = new haxe.ds.StringMap();
		_g61.set("schema","SGC");
		_g61.set("name","RESTRICTION_ENZYME");
		_g66.set("table_info",_g61);
		var _g62 = new haxe.ds.StringMap();
		_g62.set("saturn.client.programs.DNASequenceEditor",true);
		_g66.set("programs",_g62);
		var _g63 = new haxe.ds.StringMap();
		_g63.set("Enzyme Name","enzymeName");
		_g66.set("model",_g63);
		var _g64 = new haxe.ds.StringMap();
		_g64.set("alias","Restriction site");
		_g64.set("file.new.label","Restriction Site");
		_g66.set("options",_g64);
		var _g65 = new haxe.ds.StringMap();
		_g65.set("enzymeName",null);
		_g66.set("search",_g65);
		_g410.set("saturn.core.domain.SgcRestrictionSite",_g66);
		var _g77 = new haxe.ds.StringMap();
		var _g67 = new haxe.ds.StringMap();
		_g67.set("vectorId","VECTOR_NAME");
		_g67.set("id","PKEY");
		_g67.set("sequence","VECTORSEQUENCERAW");
		_g67.set("vectorComments","VECTORCOMMENTS");
		_g67.set("proteaseName","PROTEASE_NAME");
		_g67.set("proteaseCutSequence","PROTEASE_CUTSEQUENCE");
		_g67.set("proteaseProduct","PROTEASE_PRODUCT");
		_g67.set("antibiotic","ANTIBIOTIC");
		_g67.set("organism","ORGANISM");
		_g67.set("res1Id","SGCRESTRICTENZ1_PKEY");
		_g67.set("res2Id","SGCRESTRICTENZ2_PKEY");
		_g67.set("addStopCodon","REQUIRES_STOP_CODON");
		_g67.set("requiredForwardExtension","REQUIRED_EXTENSION_FORWARD");
		_g67.set("requiredReverseExtension","REQUIRED_EXTENSION_REVERSE");
		_g77.set("fields",_g67);
		var _g68 = new haxe.ds.StringMap();
		_g68.set("vectorId",null);
		_g77.set("search",_g68);
		var _g69 = new haxe.ds.StringMap();
		_g69.set("saturn.client.programs.DNASequenceEditor",true);
		_g77.set("programs",_g69);
		var _g70 = new haxe.ds.StringMap();
		_g70.set("vectorId",false);
		_g70.set("id",true);
		_g77.set("indexes",_g70);
		var _g73 = new haxe.ds.StringMap();
		var _g71 = new haxe.ds.StringMap();
		_g71.set("field","res1Id");
		_g71.set("class","saturn.core.domain.SgcRestrictionSite");
		_g71.set("fk_field","id");
		_g73.set("res1",_g71);
		var _g72 = new haxe.ds.StringMap();
		_g72.set("field","res2Id");
		_g72.set("class","saturn.core.domain.SgcRestrictionSite");
		_g72.set("fk_field","id");
		_g73.set("res2",_g72);
		_g77.set("fields.synthetic",_g73);
		var _g74 = new haxe.ds.StringMap();
		_g74.set("schema","SGC");
		_g74.set("name","VECTOR");
		_g77.set("table_info",_g74);
		var _g75 = new haxe.ds.StringMap();
		_g75.set("auto_activate","3");
		_g75.set("alias","Vector");
		_g75.set("file.new.label","Vector");
		_g77.set("options",_g75);
		var _g76 = new haxe.ds.StringMap();
		_g76.set("Name","vectorId");
		_g76.set("Comments","vectorComments");
		_g76.set("Protease","proteaseName");
		_g76.set("Protease cut sequence","proteaseCutSequence");
		_g76.set("Protease product","proteaseProduct");
		_g76.set("Forward extension","requiredForwardExtension");
		_g76.set("Reverse extension","requiredReverseExtension");
		_g76.set("Restriction site 1","res1.enzymeName");
		_g76.set("Restriction site 2","res2.enzymeName");
		_g76.set("Add Stop Codon","addStopCodon");
		_g77.set("model",_g76);
		_g410.set("saturn.core.domain.SgcVector",_g77);
		var _g85 = new haxe.ds.StringMap();
		var _g78 = new haxe.ds.StringMap();
		_g78.set("primerId","PRIMERNAME");
		_g78.set("id","PKEY");
		_g78.set("dnaSequence","PRIMERRAWSEQUENCE");
		_g85.set("fields",_g78);
		var _g79 = new haxe.ds.StringMap();
		_g79.set("primerId",false);
		_g79.set("id",true);
		_g85.set("indexes",_g79);
		var _g80 = new haxe.ds.StringMap();
		_g80.set("schema","SGC");
		_g80.set("name","PRIMER");
		_g85.set("table_info",_g80);
		var _g81 = new haxe.ds.StringMap();
		_g81.set("saturn.client.programs.DNASequenceEditor",true);
		_g85.set("programs",_g81);
		var _g82 = new haxe.ds.StringMap();
		_g82.set("primerId",true);
		_g85.set("search",_g82);
		var _g83 = new haxe.ds.StringMap();
		_g83.set("alias","Forward Primer");
		_g83.set("file.new.label","Forward Primer");
		_g83.set("icon","dna_conical_16.png");
		_g85.set("options",_g83);
		var _g84 = new haxe.ds.StringMap();
		_g84.set("Primer ID","primerId");
		_g85.set("model",_g84);
		_g410.set("saturn.core.domain.SgcForwardPrimer",_g85);
		var _g93 = new haxe.ds.StringMap();
		var _g86 = new haxe.ds.StringMap();
		_g86.set("primerId","PRIMERNAME");
		_g86.set("id","PKEY");
		_g86.set("dnaSequence","PRIMERRAWSEQUENCE");
		_g93.set("fields",_g86);
		var _g87 = new haxe.ds.StringMap();
		_g87.set("primerId",false);
		_g87.set("id",true);
		_g93.set("indexes",_g87);
		var _g88 = new haxe.ds.StringMap();
		_g88.set("schema","SGC");
		_g88.set("name","PRIMERREV");
		_g93.set("table_info",_g88);
		var _g89 = new haxe.ds.StringMap();
		_g89.set("saturn.client.programs.DNASequenceEditor",true);
		_g93.set("programs",_g89);
		var _g90 = new haxe.ds.StringMap();
		_g90.set("primerId",true);
		_g93.set("search",_g90);
		var _g91 = new haxe.ds.StringMap();
		_g91.set("alias","Reverse Primer");
		_g91.set("file.new.label","Reverse Primer");
		_g91.set("icon","dna_conical_16.png");
		_g93.set("options",_g91);
		var _g92 = new haxe.ds.StringMap();
		_g92.set("Primer ID","primerId");
		_g93.set("model",_g92);
		_g410.set("saturn.core.domain.SgcReversePrimer",_g93);
		var _g102 = new haxe.ds.StringMap();
		var _g94 = new haxe.ds.StringMap();
		_g94.set("purificationId","PURIFICATIONID");
		_g94.set("id","PKEY");
		_g94.set("expressionId","EXPRESSION_PKEY");
		_g94.set("column","COLUMN1");
		_g94.set("elnId","ELNEXP");
		_g94.set("comments","COMMENTS");
		_g102.set("fields",_g94);
		var _g95 = new haxe.ds.StringMap();
		_g95.set("purificationId",false);
		_g95.set("id",true);
		_g102.set("indexes",_g95);
		var _g96 = new haxe.ds.StringMap();
		_g96.set("schema","SGC");
		_g96.set("name","PURIFICATION");
		_g102.set("table_info",_g96);
		var _g97 = new haxe.ds.StringMap();
		_g97.set("saturn.client.programs.EmptyViewer",true);
		_g102.set("programs",_g97);
		var _g99 = new haxe.ds.StringMap();
		var _g98 = new haxe.ds.StringMap();
		_g98.set("field","expressionId");
		_g98.set("class","saturn.core.domain.SgcExpression");
		_g98.set("fk_field","id");
		_g99.set("expression",_g98);
		_g102.set("fields.synthetic",_g99);
		var _g100 = new haxe.ds.StringMap();
		_g100.set("Purification ID","purificationId");
		_g100.set("Expression ID","expressionId");
		_g100.set("ELN ID","elnId");
		_g100.set("Comments","comments");
		_g102.set("model",_g100);
		var _g101 = new haxe.ds.StringMap();
		_g101.set("alias","Purifications");
		_g101.set("file.new.label","Purification");
		_g101.set("icon","dna_conical_16.png");
		_g101.set("auto_activate","3");
		_g102.set("options",_g101);
		_g410.set("saturn.core.domain.SgcPurification",_g102);
		var _g111 = new haxe.ds.StringMap();
		var _g103 = new haxe.ds.StringMap();
		_g103.set("cloneId","CLONE_ID");
		_g103.set("id","PKEY");
		_g103.set("constructId","SGCCONSTRUCT1_PKEY");
		_g103.set("elnId","ELNEXP");
		_g103.set("comments","COMMENTS");
		_g111.set("fields",_g103);
		var _g104 = new haxe.ds.StringMap();
		_g104.set("cloneId",false);
		_g104.set("id",true);
		_g111.set("indexes",_g104);
		var _g105 = new haxe.ds.StringMap();
		_g105.set("alias","Clones");
		_g105.set("file.new.label","Clone");
		_g105.set("icon","dna_conical_16.png");
		_g105.set("auto_activate","3");
		_g111.set("options",_g105);
		var _g106 = new haxe.ds.StringMap();
		_g106.set("schema","SGC");
		_g106.set("name","CLONE");
		_g111.set("table_info",_g106);
		var _g107 = new haxe.ds.StringMap();
		_g107.set("saturn.client.programs.EmptyViewer",true);
		_g111.set("programs",_g107);
		var _g109 = new haxe.ds.StringMap();
		var _g108 = new haxe.ds.StringMap();
		_g108.set("field","constructId");
		_g108.set("class","saturn.core.domain.SgcConstruct");
		_g108.set("fk_field","id");
		_g109.set("construct",_g108);
		_g111.set("fields.synthetic",_g109);
		var _g110 = new haxe.ds.StringMap();
		_g110.set("Clone ID","cloneId");
		_g110.set("Construct ID","construct.constructId");
		_g110.set("ELN ID","elnId");
		_g110.set("Comments","comments");
		_g111.set("model",_g110);
		_g410.set("saturn.core.domain.SgcClone",_g111);
		var _g120 = new haxe.ds.StringMap();
		var _g112 = new haxe.ds.StringMap();
		_g112.set("expressionId","EXPRESSION_ID");
		_g112.set("id","PKEY");
		_g112.set("cloneId","SGCCLONE_PKEY");
		_g112.set("elnId","ELNEXP");
		_g112.set("comments","COMMENTS");
		_g120.set("fields",_g112);
		var _g113 = new haxe.ds.StringMap();
		_g113.set("expressionId",false);
		_g113.set("id",true);
		_g120.set("indexes",_g113);
		var _g114 = new haxe.ds.StringMap();
		_g114.set("schema","SGC");
		_g114.set("name","EXPRESSION");
		_g120.set("table_info",_g114);
		var _g115 = new haxe.ds.StringMap();
		_g115.set("saturn.client.programs.EmptyViewer",true);
		_g120.set("programs",_g115);
		var _g117 = new haxe.ds.StringMap();
		var _g116 = new haxe.ds.StringMap();
		_g116.set("field","cloneId");
		_g116.set("class","saturn.core.domain.SgcClone");
		_g116.set("fk_field","id");
		_g117.set("clone",_g116);
		_g120.set("fields.synthetic",_g117);
		var _g118 = new haxe.ds.StringMap();
		_g118.set("alias","Expressions");
		_g118.set("file.new.label","Expression");
		_g118.set("icon","dna_conical_16.png");
		_g118.set("auto_activate","3");
		_g120.set("options",_g118);
		var _g119 = new haxe.ds.StringMap();
		_g119.set("Expression ID","expressionId");
		_g119.set("Clone ID","clone.cloneId");
		_g119.set("ELN ID","elnId");
		_g119.set("Comments","comments");
		_g120.set("model",_g119);
		_g410.set("saturn.core.domain.SgcExpression",_g120);
		var _g129 = new haxe.ds.StringMap();
		var _g121 = new haxe.ds.StringMap();
		_g121.set("targetId","TARGET_ID");
		_g121.set("id","PKEY");
		_g121.set("gi","GENBANK_ID");
		_g121.set("geneId","NCBIGENEID");
		_g121.set("proteinSeq","PROTEINSEQUENCE");
		_g121.set("dnaSeq","NUCLEOTIDESEQUENCE");
		_g121.set("activeStatus","ACTIVESTATUS");
		_g121.set("pi","PI");
		_g121.set("comments","COMMENTS");
		_g121.set("complexComments","COMPLEXCOMPONENTS");
		_g121.set("complex","COMPLEX");
		_g121.set("complexOverride","COMPLEXOVERRIDE");
		_g129.set("fields",_g121);
		var _g122 = new haxe.ds.StringMap();
		_g122.set("targetId",false);
		_g122.set("id",true);
		_g129.set("indexes",_g122);
		var _g123 = new haxe.ds.StringMap();
		_g123.set("schema","SGC");
		_g123.set("name","TARGET");
		_g123.set("human_name","Target");
		_g123.set("human_name_plural","Targets");
		_g129.set("table_info",_g123);
		var _g124 = new haxe.ds.StringMap();
		_g124.set("Target ID","targetId");
		_g124.set("Genbank ID","gi");
		_g124.set("DNA Sequence","dnaSeq");
		_g124.set("Protein Sequence","proteinSeq");
		_g124.set("__HIDDEN__PKEY__","id");
		_g129.set("model",_g124);
		var _g125 = new haxe.ds.StringMap();
		_g125.set("saturn.client.programs.DNASequenceEditor",true);
		_g129.set("programs",_g125);
		var _g127 = new haxe.ds.StringMap();
		var _g126 = new haxe.ds.StringMap();
		_g126.set("field","proteinSeq");
		_g126.set("class","saturn.core.Protein");
		_g126.set("fk_field",null);
		_g127.set("proteinSequenceObj",_g126);
		_g129.set("fields.synthetic",_g127);
		var _g128 = new haxe.ds.StringMap();
		_g128.set("id_pattern",".*");
		_g128.set("alias","Targets");
		_g128.set("file.new.label","Target");
		_g128.set("icon","protein_16.png");
		_g128.set("auto_activate","3");
		_g129.set("options",_g128);
		_g410.set("saturn.core.domain.SgcTarget",_g129);
		var _g134 = new haxe.ds.StringMap();
		var _g130 = new haxe.ds.StringMap();
		_g130.set("sequence","SEQ");
		_g130.set("id","PKEY");
		_g130.set("type","SEQTYPE");
		_g130.set("version","TARGETVERSION");
		_g130.set("targetId","SGCTARGET_PKEY");
		_g130.set("crc","CRC");
		_g130.set("target","TARGET_ID");
		_g134.set("fields",_g130);
		var _g131 = new haxe.ds.StringMap();
		_g131.set("id",true);
		_g134.set("indexes",_g131);
		var _g132 = new haxe.ds.StringMap();
		_g132.set("schema","");
		_g132.set("name","SEQDATA");
		_g134.set("table_info",_g132);
		var _g133 = new haxe.ds.StringMap();
		_g133.set("field","type");
		_g133.set("value","Nucleotide");
		_g134.set("selector",_g133);
		_g410.set("saturn.core.domain.SgcTargetDNA",_g134);
		var _g138 = new haxe.ds.StringMap();
		var _g135 = new haxe.ds.StringMap();
		_g135.set("sequence","SEQ");
		_g135.set("id","PKEY");
		_g135.set("type","SEQTYPE");
		_g135.set("version","TARGETVERSION");
		_g135.set("targetId","SGCTARGET_PKEY");
		_g135.set("crc","CRC");
		_g135.set("target","TARGET_ID");
		_g138.set("fields",_g135);
		var _g136 = new haxe.ds.StringMap();
		_g136.set("id",true);
		_g138.set("indexes",_g136);
		var _g137 = new haxe.ds.StringMap();
		_g137.set("schema","");
		_g137.set("name","SEQDATA");
		_g138.set("table_info",_g137);
		_g410.set("saturn.core.domain.SgcSeqData",_g138);
		var _g141 = new haxe.ds.StringMap();
		var _g139 = new haxe.ds.StringMap();
		_g139.set("id","PKEY");
		_g139.set("accession","IDENTIFIER");
		_g139.set("start","SEQSTART");
		_g139.set("stop","SEQSTOP");
		_g139.set("targetId","SGCTARGET_PKEY");
		_g141.set("fields",_g139);
		var _g140 = new haxe.ds.StringMap();
		_g140.set("accession",false);
		_g140.set("id",true);
		_g141.set("indexes",_g140);
		_g410.set("saturn.core.domain.SgcDomain",_g141);
		var _g152 = new haxe.ds.StringMap();
		var _g142 = new haxe.ds.StringMap();
		_g142.set("id","PKEY");
		_g142.set("plateName","PLATENAME");
		_g142.set("elnRef","ELNREF");
		_g152.set("fields",_g142);
		var _g143 = new haxe.ds.StringMap();
		_g143.set("plateName",false);
		_g143.set("id",true);
		_g152.set("indexes",_g143);
		var _g144 = new haxe.ds.StringMap();
		_g144.set("schema","SGC");
		_g144.set("name","CONSTRUCTPLATE");
		_g152.set("table_info",_g144);
		var _g148 = new haxe.ds.StringMap();
		_g148.set("icon","dna_conical_16.png");
		_g148.set("alias","Construct Plate");
		_g148.set("file.new.label","Construct Plate");
		_g148.set("id_pattern","cp-");
		_g148.set("strip_id_prefix",true);
		var _g147 = new haxe.ds.StringMap();
		var _g146 = new haxe.ds.StringMap();
		var _g145 = new haxe.ds.StringMap();
		_g145.set("user_suffix","A");
		_g145.set("function","saturn.core.domain.SgcConstructPlate.loadPlate");
		_g146.set("DEFAULT",_g145);
		_g147.set("search_bar",_g146);
		_g148.set("actions",_g147);
		_g152.set("options",_g148);
		var _g149 = new haxe.ds.StringMap();
		_g149.set("saturn.client.programs.EmptyViewer",true);
		_g152.set("programs",_g149);
		var _g150 = new haxe.ds.StringMap();
		_g150.set("plateName",true);
		_g152.set("search",_g150);
		var _g151 = new haxe.ds.StringMap();
		_g151.set("Plate Name","plateName");
		_g152.set("model",_g151);
		_g410.set("saturn.core.domain.SgcConstructPlate",_g152);
		var _g163 = new haxe.ds.StringMap();
		var _g153 = new haxe.ds.StringMap();
		_g153.set("id","PKEY");
		_g153.set("plateName","PLATENAME");
		_g153.set("elnRef","ELNREF");
		_g163.set("fields",_g153);
		var _g154 = new haxe.ds.StringMap();
		_g154.set("plateName",false);
		_g154.set("id",true);
		_g163.set("indexes",_g154);
		var _g155 = new haxe.ds.StringMap();
		_g155.set("schema","SGC");
		_g155.set("name","PLATE");
		_g163.set("table_info",_g155);
		var _g159 = new haxe.ds.StringMap();
		_g159.set("icon","dna_conical_16.png");
		_g159.set("alias","Allele Plate");
		_g159.set("file.new.label","Allele Plate");
		_g159.set("id_pattern","ap-");
		_g159.set("strip_id_prefix",true);
		var _g158 = new haxe.ds.StringMap();
		var _g157 = new haxe.ds.StringMap();
		var _g156 = new haxe.ds.StringMap();
		_g156.set("user_suffix","A");
		_g156.set("function","saturn.core.domain.SgcAllelePlate.loadPlate");
		_g157.set("DEFAULT",_g156);
		_g158.set("search_bar",_g157);
		_g159.set("actions",_g158);
		_g159.set("auto_activate","3");
		_g163.set("options",_g159);
		var _g160 = new haxe.ds.StringMap();
		_g160.set("plateName",true);
		_g163.set("search",_g160);
		var _g161 = new haxe.ds.StringMap();
		_g161.set("Plate Name","plateName");
		_g163.set("model",_g161);
		var _g162 = new haxe.ds.StringMap();
		_g162.set("saturn.client.programs.EmptyViewer",true);
		_g163.set("programs",_g162);
		_g410.set("saturn.core.domain.SgcAllelePlate",_g163);
		var _g167 = new haxe.ds.StringMap();
		var _g164 = new haxe.ds.StringMap();
		_g164.set("dnaId","DNA_ID");
		_g164.set("id","PKEY");
		_g164.set("dnaSeq","DNASEQUENCE");
		_g167.set("fields",_g164);
		var _g165 = new haxe.ds.StringMap();
		_g165.set("dnaId",false);
		_g165.set("id",true);
		_g167.set("indexes",_g165);
		var _g166 = new haxe.ds.StringMap();
		_g166.set("schema","SGC");
		_g166.set("name","DNA");
		_g167.set("table_info",_g166);
		_g410.set("saturn.core.domain.SgcDNA",_g167);
		var _g174 = new haxe.ds.StringMap();
		var _g168 = new haxe.ds.StringMap();
		_g168.set("pageId","PAGEID");
		_g168.set("id","PKEY");
		_g168.set("content","CONTENT");
		_g174.set("fields",_g168);
		var _g169 = new haxe.ds.StringMap();
		_g169.set("pageId",false);
		_g169.set("id",true);
		_g174.set("indexes",_g169);
		var _g170 = new haxe.ds.StringMap();
		_g170.set("schema","SGC");
		_g170.set("name","TIDDLY_WIKI");
		_g174.set("table_info",_g170);
		var _g171 = new haxe.ds.StringMap();
		_g171.set("icon","eln_16.png");
		_g171.set("alias","ELN Pages");
		_g171.set("file.new.label","ELN Page");
		_g171.set("id_pattern","wiki-");
		_g171.set("strip_id_prefix",true);
		_g174.set("options",_g171);
		var _g172 = new haxe.ds.StringMap();
		_g172.set("pageId",true);
		_g174.set("search",_g172);
		var _g173 = new haxe.ds.StringMap();
		_g173.set("saturn.client.programs.TiddlyWikiViewer",true);
		_g174.set("programs",_g173);
		_g410.set("saturn.core.domain.TiddlyWiki",_g174);
		var _g182 = new haxe.ds.StringMap();
		var _g175 = new haxe.ds.StringMap();
		_g175.set("id","PKEY");
		_g175.set("entityId","ID");
		_g175.set("dataSourceId","SOURCE_PKEY");
		_g175.set("reactionId","SGCREACTION_PKEY");
		_g175.set("entityTypeId","SGCENTITY_TYPE");
		_g175.set("altName","ALTNAME");
		_g175.set("description","DESCRIPTION");
		_g182.set("fields",_g175);
		var _g176 = new haxe.ds.StringMap();
		_g176.set("entityId",false);
		_g176.set("id",true);
		_g182.set("indexes",_g176);
		var _g177 = new haxe.ds.StringMap();
		_g177.set("schema","SGC");
		_g177.set("name","Z_ENTITY");
		_g182.set("table_info",_g177);
		var _g181 = new haxe.ds.StringMap();
		var _g178 = new haxe.ds.StringMap();
		_g178.set("field","dataSourceId");
		_g178.set("class","saturn.core.domain.DataSource");
		_g178.set("fk_field","id");
		_g181.set("source",_g178);
		var _g179 = new haxe.ds.StringMap();
		_g179.set("field","reactionId");
		_g179.set("class","saturn.core.Reaction");
		_g179.set("fk_field","id");
		_g181.set("reaction",_g179);
		var _g180 = new haxe.ds.StringMap();
		_g180.set("field","entityTypeId");
		_g180.set("class","saturn.core.EntityType");
		_g180.set("fk_field","id");
		_g181.set("entityType",_g180);
		_g182.set("fields.synthetic",_g181);
		_g410.set("saturn.core.domain.Entity",_g182);
		var _g188 = new haxe.ds.StringMap();
		var _g183 = new haxe.ds.StringMap();
		_g183.set("id","PKEY");
		_g183.set("name","ID");
		_g183.set("sequence","LINEAR_SEQUENCE");
		_g183.set("entityId","SGCENTITY_PKEY");
		_g188.set("fields",_g183);
		var _g184 = new haxe.ds.StringMap();
		_g184.set("name",false);
		_g184.set("id",true);
		_g188.set("indexes",_g184);
		var _g185 = new haxe.ds.StringMap();
		_g185.set("schema","SGC");
		_g185.set("name","Z_MOLECULE");
		_g188.set("table_info",_g185);
		var _g187 = new haxe.ds.StringMap();
		var _g186 = new haxe.ds.StringMap();
		_g186.set("field","entityId");
		_g186.set("class","saturn.core.Entity");
		_g186.set("fk_field","id");
		_g187.set("entity",_g186);
		_g188.set("fields.synthetic",_g187);
		_g410.set("saturn.core.domain.Molecule",_g188);
		var _g192 = new haxe.ds.StringMap();
		var _g189 = new haxe.ds.StringMap();
		_g189.set("id","PKEY");
		_g189.set("name","NAME");
		_g192.set("fields",_g189);
		var _g190 = new haxe.ds.StringMap();
		_g190.set("name",false);
		_g190.set("id",true);
		_g192.set("indexes",_g190);
		var _g191 = new haxe.ds.StringMap();
		_g191.set("schema","SGC");
		_g191.set("name","Z_REACTION_TYPE");
		_g192.set("table_info",_g191);
		_g410.set("saturn.core.ReactionType",_g192);
		var _g196 = new haxe.ds.StringMap();
		var _g193 = new haxe.ds.StringMap();
		_g193.set("id","PKEY");
		_g193.set("name","NAME");
		_g196.set("fields",_g193);
		var _g194 = new haxe.ds.StringMap();
		_g194.set("name",false);
		_g194.set("id",true);
		_g196.set("indexes",_g194);
		var _g195 = new haxe.ds.StringMap();
		_g195.set("schema","SGC");
		_g195.set("name","Z_ENTITY_TYPE");
		_g196.set("table_info",_g195);
		_g410.set("saturn.core.EntityType",_g196);
		var _g200 = new haxe.ds.StringMap();
		var _g197 = new haxe.ds.StringMap();
		_g197.set("id","PKEY");
		_g197.set("name","NAME");
		_g200.set("fields",_g197);
		var _g198 = new haxe.ds.StringMap();
		_g198.set("name",false);
		_g198.set("id",true);
		_g200.set("indexes",_g198);
		var _g199 = new haxe.ds.StringMap();
		_g199.set("schema","SGC");
		_g199.set("name","Z_REACTION_ROLE");
		_g200.set("table_info",_g199);
		_g410.set("saturn.core.ReactionRole",_g200);
		var _g206 = new haxe.ds.StringMap();
		var _g201 = new haxe.ds.StringMap();
		_g201.set("id","PKEY");
		_g201.set("name","NAME");
		_g201.set("reactionTypeId","SGCREACTION_TYPE");
		_g206.set("fields",_g201);
		var _g202 = new haxe.ds.StringMap();
		_g202.set("name",false);
		_g202.set("id",true);
		_g206.set("indexes",_g202);
		var _g203 = new haxe.ds.StringMap();
		_g203.set("schema","SGC");
		_g203.set("name","Z_REACTION");
		_g206.set("table_info",_g203);
		var _g205 = new haxe.ds.StringMap();
		var _g204 = new haxe.ds.StringMap();
		_g204.set("field","reactionTypeId");
		_g204.set("class","saturn.core.ReactionType");
		_g204.set("fk_field","id");
		_g205.set("reactionType",_g204);
		_g206.set("fields.synthetic",_g205);
		_g410.set("saturn.core.Reaction",_g206);
		var _g214 = new haxe.ds.StringMap();
		var _g207 = new haxe.ds.StringMap();
		_g207.set("id","PKEY");
		_g207.set("reactionRoleId","SGCROLE_PKEY");
		_g207.set("entityId","SGCENTITY_PKEY");
		_g207.set("reactionId","SGCREACTION_PKEY");
		_g207.set("position","POSITION");
		_g214.set("fields",_g207);
		var _g208 = new haxe.ds.StringMap();
		_g208.set("id",true);
		_g214.set("indexes",_g208);
		var _g209 = new haxe.ds.StringMap();
		_g209.set("schema","SGC");
		_g209.set("name","Z_REACTION_COMPONENT");
		_g214.set("table_info",_g209);
		var _g213 = new haxe.ds.StringMap();
		var _g210 = new haxe.ds.StringMap();
		_g210.set("field","reactionRoleId");
		_g210.set("class","saturn.core.ReactionRole");
		_g210.set("fk_field","id");
		_g213.set("reactionRole",_g210);
		var _g211 = new haxe.ds.StringMap();
		_g211.set("field","reactionId");
		_g211.set("class","saturn.core.Reaction");
		_g211.set("fk_field","id");
		_g213.set("reaction",_g211);
		var _g212 = new haxe.ds.StringMap();
		_g212.set("field","entityId");
		_g212.set("class","saturn.core.Entity");
		_g212.set("fk_field","id");
		_g213.set("entity",_g212);
		_g214.set("fields.synthetic",_g213);
		_g410.set("saturn.core.ReactionComponent",_g214);
		var _g218 = new haxe.ds.StringMap();
		var _g215 = new haxe.ds.StringMap();
		_g215.set("id","PKEY");
		_g215.set("name","NAME");
		_g218.set("fields",_g215);
		var _g216 = new haxe.ds.StringMap();
		_g216.set("name",false);
		_g216.set("id",true);
		_g218.set("indexes",_g216);
		var _g217 = new haxe.ds.StringMap();
		_g217.set("schema","SGC");
		_g217.set("name","Z_ENTITY_SOURCE");
		_g218.set("table_info",_g217);
		_g410.set("saturn.core.domain.DataSource",_g218);
		var _g225 = new haxe.ds.StringMap();
		var _g219 = new haxe.ds.StringMap();
		_g219.set("id","PKEY");
		_g219.set("entityId","SGCENTITY_PKEY");
		_g219.set("labelId","XREF_SGCENTITY_PKEY");
		_g219.set("start","STARTPOS");
		_g219.set("stop","STOPPOS");
		_g219.set("evalue","EVALUE");
		_g225.set("fields",_g219);
		var _g220 = new haxe.ds.StringMap();
		_g220.set("id",true);
		_g225.set("indexes",_g220);
		var _g221 = new haxe.ds.StringMap();
		_g221.set("schema","SGC");
		_g221.set("name","Z_ANNOTATION");
		_g225.set("table_info",_g221);
		var _g224 = new haxe.ds.StringMap();
		var _g222 = new haxe.ds.StringMap();
		_g222.set("field","entityId");
		_g222.set("class","saturn.core.domain.Entity");
		_g222.set("fk_field","id");
		_g224.set("entity",_g222);
		var _g223 = new haxe.ds.StringMap();
		_g223.set("field","labelId");
		_g223.set("class","saturn.core.domain.Entity");
		_g223.set("fk_field","id");
		_g224.set("referent",_g223);
		_g225.set("fields.synthetic",_g224);
		_g410.set("saturn.core.domain.MoleculeAnnotation",_g225);
		var _g235 = new haxe.ds.StringMap();
		var _g226 = new haxe.ds.StringMap();
		_g226.set("id","PKEY");
		_g226.set("barcode","BARCODE");
		_g226.set("purificationId","SGCPURIFICATION_PKEY");
		_g226.set("location","LOCATION");
		_g226.set("proteinState","PROTEINSTATE");
		_g226.set("plateStatus","PLATESTATUS");
		_g226.set("concentration","CONCENTRATION");
		_g226.set("dateCreated","DATESTAMP");
		_g226.set("person","PERSON");
		_g226.set("elnId","ELNREF");
		_g235.set("fields",_g226);
		var _g227 = new haxe.ds.StringMap();
		_g227.set("barcode",false);
		_g227.set("id",true);
		_g235.set("indexes",_g227);
		var _g228 = new haxe.ds.StringMap();
		_g228.set("schema","SGC");
		_g228.set("name","XTAL_PLATES");
		_g235.set("table_info",_g228);
		var _g230 = new haxe.ds.StringMap();
		var _g229 = new haxe.ds.StringMap();
		_g229.set("field","purificationId");
		_g229.set("class","saturn.core.domain.SgcPurification");
		_g229.set("fk_field","id");
		_g230.set("purification",_g229);
		_g235.set("fields.synthetic",_g230);
		var _g231 = new haxe.ds.StringMap();
		_g231.set("alias","Xtal Plates");
		_g231.set("auto_activate","3");
		_g235.set("options",_g231);
		var _g232 = new haxe.ds.StringMap();
		_g232.set("barcode",true);
		_g235.set("search",_g232);
		var _g233 = new haxe.ds.StringMap();
		_g233.set("Barcode","barcode");
		_g233.set("Purification ID","purification.purificationId");
		_g233.set("Location","location");
		_g233.set("Protein State","proteinState");
		_g233.set("Plate Status","plateStatus");
		_g233.set("Concentration","concentration");
		_g233.set("ELN ID","elnId");
		_g233.set("Date Created","dateCreated");
		_g233.set("Creator","person");
		_g235.set("model",_g233);
		var _g234 = new haxe.ds.StringMap();
		_g234.set("saturn.client.programs.EmptyViewer",true);
		_g235.set("programs",_g234);
		_g410.set("saturn.core.domain.SgcXtalPlate",_g235);
		var _g244 = new haxe.ds.StringMap();
		var _g236 = new haxe.ds.StringMap();
		_g236.set("id","PKEY");
		_g236.set("modelId","MODELID");
		_g236.set("pathToPdb","PATHTOPDB");
		_g244.set("fields",_g236);
		var _g237 = new haxe.ds.StringMap();
		_g237.set("modelId",false);
		_g237.set("id",true);
		_g244.set("indexes",_g237);
		var _g238 = new haxe.ds.StringMap();
		_g238.set("schema","SGC");
		_g238.set("name","MODEL");
		_g244.set("table_info",_g238);
		var _g240 = new haxe.ds.StringMap();
		var _g239 = new haxe.ds.StringMap();
		_g239.set("field","pathToPdb");
		_g239.set("class","saturn.core.domain.FileProxy");
		_g239.set("fk_field","path");
		_g240.set("pdb",_g239);
		_g244.set("fields.synthetic",_g240);
		var _g241 = new haxe.ds.StringMap();
		_g241.set("id_pattern","\\w+-m");
		_g241.set("workspace_wrapper","saturn.client.workspace.StructureModelWO");
		_g241.set("icon","structure_16.png");
		_g241.set("alias","Models");
		_g244.set("options",_g241);
		var _g242 = new haxe.ds.StringMap();
		_g242.set("modelId","\\w+-m");
		_g244.set("search",_g242);
		var _g243 = new haxe.ds.StringMap();
		_g243.set("Model ID","modelId");
		_g243.set("Path to PDB","pathToPdb");
		_g244.set("model",_g243);
		_g410.set("saturn.core.domain.StructureModel",_g244);
		var _g252 = new haxe.ds.StringMap();
		var _g245 = new haxe.ds.StringMap();
		_g245.set("path","PATH");
		_g245.set("content","CONTENT");
		_g252.set("fields",_g245);
		var _g246 = new haxe.ds.StringMap();
		_g246.set("path",true);
		_g252.set("indexes",_g246);
		var _g251 = new haxe.ds.StringMap();
		var _g247 = new haxe.ds.StringMap();
		_g247.set("/work","W:");
		_g247.set("/home/share","S:");
		_g251.set("windows_conversions",_g247);
		var _g248 = new haxe.ds.StringMap();
		_g248.set("WORK","^W");
		_g251.set("windows_allowed_paths_regex",_g248);
		var _g249 = new haxe.ds.StringMap();
		_g249.set("W:","/work");
		_g251.set("linux_conversions",_g249);
		var _g250 = new haxe.ds.StringMap();
		_g250.set("WORK","^/work");
		_g251.set("linux_allowed_paths_regex",_g250);
		_g252.set("options",_g251);
		_g410.set("saturn.core.domain.FileProxy",_g252);
		var _g257 = new haxe.ds.StringMap();
		var _g253 = new haxe.ds.StringMap();
		_g253.set("moleculeName","NAME");
		_g257.set("fields",_g253);
		var _g254 = new haxe.ds.StringMap();
		_g254.set("moleculeName",true);
		_g257.set("indexes",_g254);
		var _g255 = new haxe.ds.StringMap();
		_g255.set("saturn.client.programs.DNASequenceEditor",false);
		_g257.set("programs",_g255);
		var _g256 = new haxe.ds.StringMap();
		_g256.set("alias","DNA");
		_g256.set("icon","dna_conical_16.png");
		_g257.set("options",_g256);
		_g410.set("saturn.core.DNA",_g257);
		var _g262 = new haxe.ds.StringMap();
		var _g258 = new haxe.ds.StringMap();
		_g258.set("moleculeName","NAME");
		_g262.set("fields",_g258);
		var _g259 = new haxe.ds.StringMap();
		_g259.set("moleculeName",true);
		_g262.set("indexes",_g259);
		var _g260 = new haxe.ds.StringMap();
		_g260.set("saturn.client.programs.ProteinSequenceEditor",false);
		_g262.set("programs",_g260);
		var _g261 = new haxe.ds.StringMap();
		_g261.set("alias","Proteins");
		_g261.set("icon","structure_16.png");
		_g262.set("options",_g261);
		_g410.set("saturn.core.Protein",_g262);
		var _g269 = new haxe.ds.StringMap();
		var _g263 = new haxe.ds.StringMap();
		_g263.set("id","PKEY");
		_g263.set("name","NAME");
		_g263.set("value","VALUE");
		_g269.set("fields",_g263);
		var _g264 = new haxe.ds.StringMap();
		_g264.set("name",false);
		_g264.set("id",true);
		_g269.set("indexes",_g264);
		var _g265 = new haxe.ds.StringMap();
		_g265.set("saturn.client.programs.TextEditor",true);
		_g269.set("programs",_g265);
		var _g266 = new haxe.ds.StringMap();
		_g266.set("alias","Scripts");
		_g266.set("file.new.label","Script");
		_g266.set("icon","dna_conical_16.png");
		_g269.set("options",_g266);
		var _g267 = new haxe.ds.StringMap();
		_g267.set("schema","SGC");
		_g267.set("name","SCRIPTS");
		_g269.set("table_info",_g267);
		var _g268 = new haxe.ds.StringMap();
		_g268.set("name",true);
		_g269.set("search",_g268);
		_g410.set("saturn.core.domain.TextFile",_g269);
		var _g272 = new haxe.ds.StringMap();
		var _g270 = new haxe.ds.StringMap();
		_g270.set("saturn.client.programs.BasicTableViewer",true);
		_g272.set("programs",_g270);
		var _g271 = new haxe.ds.StringMap();
		_g271.set("alias","Results");
		_g272.set("options",_g271);
		_g410.set("saturn.core.BasicTable",_g272);
		var _g275 = new haxe.ds.StringMap();
		var _g273 = new haxe.ds.StringMap();
		_g273.set("saturn.client.programs.ConstructDesigner",false);
		_g275.set("programs",_g273);
		var _g274 = new haxe.ds.StringMap();
		_g274.set("alias","Construct Plan");
		_g274.set("icon","dna_conical_16.png");
		_g275.set("options",_g274);
		_g410.set("saturn.core.ConstructDesignTable",_g275);
		var _g278 = new haxe.ds.StringMap();
		var _g276 = new haxe.ds.StringMap();
		_g276.set("saturn.client.programs.ComplexHelper",false);
		_g278.set("programs",_g276);
		var _g277 = new haxe.ds.StringMap();
		_g277.set("alias","Complex Helper");
		_g277.set("icon","protein_conical_16.png");
		_g278.set("options",_g277);
		_g410.set("saturn.core.ComplexPlan",_g278);
		var _g281 = new haxe.ds.StringMap();
		var _g279 = new haxe.ds.StringMap();
		_g279.set("saturn.client.programs.PurificationHelper",false);
		_g281.set("programs",_g279);
		var _g280 = new haxe.ds.StringMap();
		_g280.set("alias","Purifiaction Helper");
		_g281.set("options",_g280);
		_g410.set("saturn.core.PurificationHelperTable",_g281);
		var _g284 = new haxe.ds.StringMap();
		var _g282 = new haxe.ds.StringMap();
		_g282.set("saturn.client.programs.SHRNADesigner",false);
		_g284.set("programs",_g282);
		var _g283 = new haxe.ds.StringMap();
		_g283.set("alias","shRNA Designer");
		_g283.set("icon","shrna_16.png");
		_g284.set("options",_g283);
		_g410.set("saturn.core.SHRNADesignTable",_g284);
		var _g287 = new haxe.ds.StringMap();
		var _g285 = new haxe.ds.StringMap();
		_g285.set("saturn.client.programs.BasicTableViewer",false);
		_g287.set("programs",_g285);
		var _g286 = new haxe.ds.StringMap();
		_g286.set("alias","Table");
		_g287.set("options",_g286);
		_g410.set("saturn.core.Table",_g287);
		var _g298 = new haxe.ds.StringMap();
		var _g288 = new haxe.ds.StringMap();
		_g288.set("id","PKEY");
		_g288.set("compoundId","SGCGLOBALID");
		_g288.set("shortCompoundId","COMPOUND_ID");
		_g288.set("supplierId","SUPPLIER_ID");
		_g288.set("sdf","SDF");
		_g288.set("supplier","SUPPLIER");
		_g288.set("description","DESCRIPTION");
		_g288.set("concentration","CONCENTRATION");
		_g288.set("location","LOCATION");
		_g288.set("comments","COMMENTS");
		_g288.set("solute","SOLUTE");
		_g288.set("mw","MW");
		_g288.set("confidential","CONFIDENTIAL");
		_g288.set("inchi","INCHI");
		_g288.set("smiles","SMILES");
		_g288.set("datestamp","DATESTAMP");
		_g288.set("person","PERSON");
		_g288.set("oldSGCGLobalId","OLD_SGCGLOBAL_ID");
		_g298.set("fields",_g288);
		var _g289 = new haxe.ds.StringMap();
		_g289.set("compoundId",false);
		_g289.set("id",true);
		_g298.set("indexes",_g289);
		var _g290 = new haxe.ds.StringMap();
		_g290.set("compoundId",null);
		_g290.set("shortCompoundId",null);
		_g290.set("supplierId",null);
		_g290.set("supplier",null);
		_g290.set("oldSGCGlobalId",null);
		_g298.set("search",_g290);
		var _g291 = new haxe.ds.StringMap();
		_g291.set("schema","SGC");
		_g291.set("name","SGCCOMPOUND");
		_g298.set("table_info",_g291);
		var _g295 = new haxe.ds.StringMap();
		_g295.set("workspace_wrapper","saturn.client.workspace.CompoundWO");
		_g295.set("icon","compound_16.png");
		_g295.set("alias","Compounds");
		var _g294 = new haxe.ds.StringMap();
		var _g293 = new haxe.ds.StringMap();
		var _g292 = new haxe.ds.StringMap();
		_g292.set("user_suffix","Assay Results");
		_g292.set("function","saturn.core.domain.Compound.assaySearch");
		_g293.set("assay_results",_g292);
		_g294.set("search_bar",_g293);
		_g295.set("actions",_g294);
		_g298.set("options",_g295);
		var _g296 = new haxe.ds.StringMap();
		_g296.set("Global ID","compoundId");
		_g296.set("Oxford ID","shortCompoundId");
		_g296.set("Supplier ID","supplierId");
		_g296.set("Supplier","supplier");
		_g296.set("Description","description");
		_g296.set("Concentration","concentration");
		_g296.set("Location","location");
		_g296.set("Solute","solute");
		_g296.set("Comments","comments");
		_g296.set("MW","mw");
		_g296.set("Confidential","CONFIDENTIAL");
		_g296.set("Date","datestamp");
		_g296.set("Person","person");
		_g296.set("InChi","inchi");
		_g296.set("smiles","smiles");
		_g298.set("model",_g296);
		var _g297 = new haxe.ds.StringMap();
		_g297.set("saturn.client.programs.CompoundViewer",true);
		_g298.set("programs",_g297);
		_g410.set("saturn.core.domain.Compound",_g298);
		var _g306 = new haxe.ds.StringMap();
		var _g299 = new haxe.ds.StringMap();
		_g299.set("id","PKEY");
		_g299.set("glycanId","GLYCANID");
		_g299.set("content","CONTENT");
		_g299.set("contentType","CONTENT_TYPE");
		_g299.set("description","DESCRIPTION");
		_g306.set("fields",_g299);
		var _g300 = new haxe.ds.StringMap();
		_g300.set("glycanId",false);
		_g300.set("id",true);
		_g306.set("indexes",_g300);
		var _g301 = new haxe.ds.StringMap();
		_g301.set("glycanId",null);
		_g306.set("search",_g301);
		var _g302 = new haxe.ds.StringMap();
		_g302.set("schema","SGC");
		_g302.set("name","GLYCAN");
		_g306.set("table_info",_g302);
		var _g303 = new haxe.ds.StringMap();
		_g303.set("workspace_wrapper","saturn.client.workspace.GlycanWO");
		_g303.set("icon","glycan_16.png");
		_g303.set("alias","Glycans");
		_g306.set("options",_g303);
		var _g304 = new haxe.ds.StringMap();
		_g304.set("Glycan ID","glycanId");
		_g304.set("Description","description");
		_g304.set("content","content");
		_g304.set("contentType","contentType");
		_g306.set("model",_g304);
		var _g305 = new haxe.ds.StringMap();
		_g305.set("saturn.client.programs.GlycanBuilder",true);
		_g306.set("programs",_g305);
		_g410.set("saturn.core.domain.Glycan",_g306);
		var _g309 = new haxe.ds.StringMap();
		var _g308 = new haxe.ds.StringMap();
		var _g307 = new haxe.ds.StringMap();
		_g307.set("SGC",true);
		_g308.set("flags",_g307);
		_g309.set("options",_g308);
		_g410.set("saturn.app.SaturnClient",_g309);
		var _g313 = new haxe.ds.StringMap();
		var _g310 = new haxe.ds.StringMap();
		_g310.set("id","PKEY");
		_g310.set("username","USERID");
		_g310.set("fullname","FULLNAME");
		_g313.set("fields",_g310);
		var _g311 = new haxe.ds.StringMap();
		_g311.set("id",true);
		_g311.set("username",false);
		_g313.set("indexes",_g311);
		var _g312 = new haxe.ds.StringMap();
		_g312.set("schema","HIVE");
		_g312.set("name","USER_DETAILS");
		_g313.set("table_info",_g312);
		_g410.set("saturn.core.User",_g313);
		var _g317 = new haxe.ds.StringMap();
		var _g314 = new haxe.ds.StringMap();
		_g314.set("id","PKEY");
		_g314.set("name","NAME");
		_g317.set("fields",_g314);
		var _g315 = new haxe.ds.StringMap();
		_g315.set("id",true);
		_g315.set("name",false);
		_g317.set("index",_g315);
		var _g316 = new haxe.ds.StringMap();
		_g316.set("schema","SGC");
		_g316.set("name","SATURNPERMISSION");
		_g317.set("table_info",_g316);
		_g410.set("saturn.core.Permission",_g317);
		var _g321 = new haxe.ds.StringMap();
		var _g318 = new haxe.ds.StringMap();
		_g318.set("id","PKEY");
		_g318.set("permissionId","PERMISSIONID");
		_g318.set("userId","USERID");
		_g321.set("fields",_g318);
		var _g319 = new haxe.ds.StringMap();
		_g319.set("id",true);
		_g321.set("index",_g319);
		var _g320 = new haxe.ds.StringMap();
		_g320.set("schema","SGC");
		_g320.set("name","SATURNUSER_TO_PERMISSION");
		_g321.set("table_info",_g320);
		_g410.set("saturn.core.UserToPermission",_g321);
		var _g334 = new haxe.ds.StringMap();
		var _g322 = new haxe.ds.StringMap();
		_g322.set("id","PKEY");
		_g322.set("userName","USERNAME");
		_g322.set("isPublic","ISPUBLIC");
		_g322.set("sessionContent","SESSIONCONTENTS");
		_g322.set("sessionName","SESSIONNAME");
		_g334.set("fields",_g322);
		var _g323 = new haxe.ds.StringMap();
		_g323.set("sessionName",false);
		_g323.set("id",true);
		_g334.set("indexes",_g323);
		var _g324 = new haxe.ds.StringMap();
		_g324.set("user.fullname",null);
		_g334.set("search",_g324);
		var _g325 = new haxe.ds.StringMap();
		_g325.set("schema","SGC");
		_g325.set("name","SATURNSESSION");
		_g334.set("table_info",_g325);
		var _g330 = new haxe.ds.StringMap();
		_g330.set("alias","Session");
		_g330.set("auto_activate","3");
		var _g326 = new haxe.ds.StringMap();
		_g326.set("user_constraint_field","userName");
		_g326.set("public_constraint_field","isPublic");
		_g330.set("constraints",_g326);
		var _g329 = new haxe.ds.StringMap();
		var _g328 = new haxe.ds.StringMap();
		var _g327 = new haxe.ds.StringMap();
		_g327.set("user_suffix","");
		_g327.set("function","saturn.core.domain.SaturnSession.load");
		_g328.set("DEFAULT",_g327);
		_g329.set("search_bar",_g328);
		_g330.set("actions",_g329);
		_g334.set("options",_g330);
		var _g331 = new haxe.ds.StringMap();
		_g331.set("USERNAME","insert.username");
		_g334.set("auto_functions",_g331);
		var _g333 = new haxe.ds.StringMap();
		var _g332 = new haxe.ds.StringMap();
		_g332.set("field","userName");
		_g332.set("class","saturn.core.User");
		_g332.set("fk_field","username");
		_g333.set("user",_g332);
		_g334.set("fields.synthetic",_g333);
		_g410.set("saturn.core.domain.SaturnSession",_g334);
		var _g341 = new haxe.ds.StringMap();
		var _g335 = new haxe.ds.StringMap();
		_g335.set("id","PKEY");
		_g335.set("name","NAME");
		_g335.set("traceDataJson","TRACE_JSON");
		_g341.set("fields",_g335);
		var _g336 = new haxe.ds.StringMap();
		_g336.set("name",false);
		_g336.set("id",true);
		_g341.set("indexes",_g336);
		var _g337 = new haxe.ds.StringMap();
		_g337.set("saturn.client.programs.ABITraceViewer",true);
		_g341.set("programs",_g337);
		var _g338 = new haxe.ds.StringMap();
		_g338.set("alias","Trace Data");
		_g338.set("icon","dna_conical_16.png");
		_g338.set("workspace_wrapper","saturn.client.workspace.ABITraceWO");
		_g341.set("options",_g338);
		var _g339 = new haxe.ds.StringMap();
		_g339.set("schema","SGC");
		_g339.set("name","TRACES");
		_g341.set("table_info",_g339);
		var _g340 = new haxe.ds.StringMap();
		_g340.set("name",true);
		_g341.set("search",_g340);
		_g410.set("saturn.core.domain.ABITrace",_g341);
		var _g348 = new haxe.ds.StringMap();
		var _g342 = new haxe.ds.StringMap();
		_g342.set("id","PKEY");
		_g342.set("name","NAME");
		_g342.set("content","CONTENT");
		_g342.set("url","URL");
		_g348.set("fields",_g342);
		var _g343 = new haxe.ds.StringMap();
		_g343.set("name",false);
		_g343.set("id",true);
		_g348.set("indexes",_g343);
		var _g344 = new haxe.ds.StringMap();
		_g344.set("saturn.client.programs.AlignmentViewer",true);
		_g348.set("programs",_g344);
		var _g345 = new haxe.ds.StringMap();
		_g345.set("alias","Alignments");
		_g345.set("icon","dna_conical_16.png");
		_g345.set("workspace_wrapper","saturn.client.workspace.AlignmentWorkspaceObject");
		_g348.set("options",_g345);
		var _g346 = new haxe.ds.StringMap();
		_g346.set("schema","SGC");
		_g346.set("name","ALIGNMENTS");
		_g348.set("table_info",_g346);
		var _g347 = new haxe.ds.StringMap();
		_g347.set("name",true);
		_g348.set("search",_g347);
		_g410.set("saturn.core.domain.Alignment",_g348);
		var _g356 = new haxe.ds.StringMap();
		var _g349 = new haxe.ds.StringMap();
		_g349.set("id","PKEY");
		_g349.set("xtbmId","XTBMID");
		_g349.set("plateRow","PLATEROW");
		_g349.set("plateColumn","PLATECOLUMN");
		_g349.set("subwell","SUBWELL");
		_g349.set("xtalPlateId","XTALPLATES_ID");
		_g349.set("score","CATEGORYSCORE");
		_g349.set("barcode","BARCODE");
		_g356.set("fields",_g349);
		var _g350 = new haxe.ds.StringMap();
		_g350.set("xtbmId",false);
		_g350.set("id",true);
		_g356.set("indexes",_g350);
		var _g351 = new haxe.ds.StringMap();
		_g351.set("schema","SGC");
		_g351.set("name","CRYSTALSTOBEMOUNTED");
		_g356.set("table_info",_g351);
		var _g353 = new haxe.ds.StringMap();
		var _g352 = new haxe.ds.StringMap();
		_g352.set("field","xtalPlateId");
		_g352.set("class","saturn.core.domain.SgcXtalPlate");
		_g352.set("fk_field","id");
		_g353.set("xtalPlate",_g352);
		_g356.set("fields.synthetic",_g353);
		var _g354 = new haxe.ds.StringMap();
		_g354.set("alias","XTBM");
		_g356.set("options",_g354);
		var _g355 = new haxe.ds.StringMap();
		_g355.set("XTBM ID","xtbmId");
		_g355.set("Plate ID","xtalPlateId");
		_g356.set("model",_g355);
		_g410.set("saturn.core.domain.SgcXtbm",_g356);
		var _g366 = new haxe.ds.StringMap();
		var _g357 = new haxe.ds.StringMap();
		_g357.set("id","PKEY");
		_g357.set("xtalMountId","XTAL_MOUNT_ID");
		_g357.set("xtbmId","SGCCRYSTALSTOBEMOUNTED_PKEY");
		_g357.set("xtalProjectId","SGCPROJECTS_PKEY");
		_g357.set("dropStatus","DROPSTATUS");
		_g357.set("compoundId","SGCCOMPOUND_PKEY");
		_g357.set("pinId","SGCPIN_PKEY");
		_g357.set("xtalFormId","SGCXTALFORM_PKEY");
		_g366.set("fields",_g357);
		var _g358 = new haxe.ds.StringMap();
		_g358.set("xtalMountId",false);
		_g358.set("id",true);
		_g366.set("indexes",_g358);
		var _g359 = new haxe.ds.StringMap();
		_g359.set("schema","SGC");
		_g359.set("name","XTAL_MOUNT");
		_g366.set("table_info",_g359);
		var _g364 = new haxe.ds.StringMap();
		var _g360 = new haxe.ds.StringMap();
		_g360.set("field","xtbmId");
		_g360.set("class","saturn.core.domain.SgcXtbm");
		_g360.set("fk_field","id");
		_g364.set("xtbm",_g360);
		var _g361 = new haxe.ds.StringMap();
		_g361.set("field","xtalProjectId");
		_g361.set("class","saturn.core.domain.SgcXtalProject");
		_g361.set("fk_field","id");
		_g364.set("xtalProject",_g361);
		var _g362 = new haxe.ds.StringMap();
		_g362.set("field","compoundId");
		_g362.set("class","saturn.core.domain.Compound");
		_g362.set("fk_field","id");
		_g364.set("compound",_g362);
		var _g363 = new haxe.ds.StringMap();
		_g363.set("field","xtalFormId");
		_g363.set("class","saturn.core.domain.SgcXtalForm");
		_g363.set("fk_field","id");
		_g364.set("xtalForm",_g363);
		_g366.set("fields.synthetic",_g364);
		var _g365 = new haxe.ds.StringMap();
		_g365.set("alias","Mounted Xtal");
		_g366.set("options",_g365);
		_g410.set("saturn.core.domain.SgcXtalMount",_g366);
		var _g374 = new haxe.ds.StringMap();
		var _g367 = new haxe.ds.StringMap();
		_g367.set("id","PKEY");
		_g367.set("xtalDataSetId","DATASETID");
		_g367.set("xtalMountId","SGCXTALMOUNT_PKEY");
		_g367.set("estimatedResolution","ESTRESOLUTION");
		_g367.set("scaledResolution","RESOLUTION");
		_g367.set("xtalProjectId","SGCPROJECTS_PKEY");
		_g367.set("beamline","BEAMLINE");
		_g367.set("outcome","OUTCOME");
		_g367.set("dsType","DSTYPE");
		_g367.set("visit","VISIT");
		_g367.set("spaceGroup","SPACEGROUP");
		_g367.set("dateRecordCreated","DATESTAMP");
		_g374.set("fields",_g367);
		var _g368 = new haxe.ds.StringMap();
		_g368.set("xtalDataSetId",false);
		_g368.set("id",true);
		_g374.set("indexes",_g368);
		var _g369 = new haxe.ds.StringMap();
		_g369.set("schema","SGC");
		_g369.set("name","XTAL_DATASET");
		_g374.set("table_info",_g369);
		var _g372 = new haxe.ds.StringMap();
		var _g370 = new haxe.ds.StringMap();
		_g370.set("field","xtalMountId");
		_g370.set("class","saturn.core.domain.SgcXtalMount");
		_g370.set("fk_field","id");
		_g372.set("xtalMount",_g370);
		var _g371 = new haxe.ds.StringMap();
		_g371.set("field","xtalProjectId");
		_g371.set("class","saturn.core.domain.SgcXtalProject");
		_g371.set("fk_field","id");
		_g372.set("xtalProject",_g371);
		_g374.set("fields.synthetic",_g372);
		var _g373 = new haxe.ds.StringMap();
		_g373.set("alias","Xtal DataSet");
		_g374.set("options",_g373);
		_g410.set("saturn.core.domain.SgcXtalDataSet",_g374);
		var _g381 = new haxe.ds.StringMap();
		var _g375 = new haxe.ds.StringMap();
		_g375.set("id","PKEY");
		_g375.set("xtalModelId","MODELID");
		_g375.set("modelType","MODELTYPE");
		_g375.set("compound1Id","SGCCOMPOUND1_PKEY");
		_g375.set("compound2Id","SGCCOMPOUND2_PKEY");
		_g375.set("xtalDataSetId","SGCXTALDATASET_PKEY");
		_g375.set("status","STATUS");
		_g375.set("pathToCrystallographicPDB","PATHTOPDB");
		_g375.set("pathToChemistsPDB","PATHTOBOUNDPDB");
		_g375.set("pathToMTZ","PATHTOMTZ");
		_g375.set("pathToXDSLog","PATHTOLOG");
		_g375.set("estimatedEffort","ESTEFFORT");
		_g375.set("proofingEffort","PROOFEFFORT");
		_g375.set("spaceGroup","SPACEGROUP");
		_g381.set("fields",_g375);
		var _g376 = new haxe.ds.StringMap();
		_g376.set("xtalModelId",false);
		_g376.set("id",true);
		_g381.set("indexes",_g376);
		var _g377 = new haxe.ds.StringMap();
		_g377.set("schema","SGC");
		_g377.set("name","MODEL");
		_g381.set("table_info",_g377);
		var _g379 = new haxe.ds.StringMap();
		var _g378 = new haxe.ds.StringMap();
		_g378.set("field","xtalDataSetId");
		_g378.set("class","saturn.core.domain.SgcXtalDataSet");
		_g378.set("fk_field","id");
		_g379.set("xtalDataSet",_g378);
		_g381.set("fields.synthetic",_g379);
		var _g380 = new haxe.ds.StringMap();
		_g380.set("alias","Xtal Model");
		_g381.set("options",_g380);
		_g410.set("saturn.core.domain.SgcXtalModel",_g381);
		var _g388 = new haxe.ds.StringMap();
		var _g382 = new haxe.ds.StringMap();
		_g382.set("id","PKEY");
		_g382.set("pdbId","PDBID");
		_g382.set("counted","COUNTED");
		_g382.set("site","SITE");
		_g382.set("followup","FOLLOWUP");
		_g382.set("xtalModelId","SGCMODEL_PKEY");
		_g382.set("dateDeposited","DATEDEPOSITED");
		_g382.set("depType","DEPTYPE");
		_g388.set("fields",_g382);
		var _g383 = new haxe.ds.StringMap();
		_g383.set("pdbId",false);
		_g383.set("id",true);
		_g388.set("indexes",_g383);
		var _g384 = new haxe.ds.StringMap();
		_g384.set("schema","SGC");
		_g384.set("name","DEPOSITION");
		_g388.set("table_info",_g384);
		var _g386 = new haxe.ds.StringMap();
		var _g385 = new haxe.ds.StringMap();
		_g385.set("field","xtalModelId");
		_g385.set("class","saturn.core.domain.SgcXtalModel");
		_g385.set("fk_field","id");
		_g386.set("xtalModel",_g385);
		_g388.set("fields.synthetic",_g386);
		var _g387 = new haxe.ds.StringMap();
		_g387.set("alias","Xtal Model");
		_g388.set("options",_g387);
		_g410.set("saturn.core.domain.SgcXtalDeposition",_g388);
		var _g395 = new haxe.ds.StringMap();
		var _g389 = new haxe.ds.StringMap();
		_g389.set("id","PKEY");
		_g389.set("xtalProjectId","PROJECTID");
		_g389.set("dataPath","DATA_PATH");
		_g389.set("targetId","SGCTARGET_PKEY");
		_g395.set("fields",_g389);
		var _g390 = new haxe.ds.StringMap();
		_g390.set("xtalProjectId",false);
		_g390.set("id",true);
		_g395.set("indexes",_g390);
		var _g391 = new haxe.ds.StringMap();
		_g391.set("schema","SGC");
		_g391.set("name","PROJECTS");
		_g395.set("table_info",_g391);
		var _g393 = new haxe.ds.StringMap();
		var _g392 = new haxe.ds.StringMap();
		_g392.set("field","targetId");
		_g392.set("class","saturn.core.domain.SgcTarget");
		_g392.set("fk_field","id");
		_g393.set("target",_g392);
		_g395.set("fields.synthetic",_g393);
		var _g394 = new haxe.ds.StringMap();
		_g394.set("alias","Xtal Model");
		_g394.set("auto_activate","3");
		_g395.set("options",_g394);
		_g410.set("saturn.core.domain.SgcXtalProject",_g395);
		var _g402 = new haxe.ds.StringMap();
		var _g396 = new haxe.ds.StringMap();
		_g396.set("id","PKEY");
		_g396.set("formId","FORMID");
		_g396.set("phasingId","SGCPHASING_PKEY");
		_g396.set("a","A");
		_g396.set("b","B");
		_g396.set("c","C");
		_g396.set("alpha","ALPHA");
		_g396.set("beta","BETA");
		_g396.set("gamma","GAMMA");
		_g396.set("lattice","LATTICE");
		_g396.set("latticeSymbol","LATTICESYMBOL");
		_g396.set("spaceGroup","SPACEGROUP");
		_g402.set("fields",_g396);
		var _g397 = new haxe.ds.StringMap();
		_g397.set("formId",false);
		_g397.set("id",true);
		_g402.set("indexes",_g397);
		var _g398 = new haxe.ds.StringMap();
		_g398.set("schema","SGC");
		_g398.set("name","XTAL_FORM");
		_g402.set("table_info",_g398);
		var _g400 = new haxe.ds.StringMap();
		var _g399 = new haxe.ds.StringMap();
		_g399.set("field","phasingId");
		_g399.set("class","saturn.core.domain.SgcXtalPhasing");
		_g399.set("fk_field","id");
		_g400.set("xtalPhasing",_g399);
		_g402.set("fields.synthetic",_g400);
		var _g401 = new haxe.ds.StringMap();
		_g401.set("alias","Xtal Form");
		_g402.set("options",_g401);
		_g410.set("saturn.core.domain.SgcXtalForm",_g402);
		var _g409 = new haxe.ds.StringMap();
		var _g403 = new haxe.ds.StringMap();
		_g403.set("id","PKEY");
		_g403.set("phasingId","PHASINGID");
		_g403.set("xtalDataSetId","SGCXTALDATASET_PKEY1");
		_g403.set("phasingMethod","PHASINGMETHOD");
		_g403.set("phasingConfidence","CONFIDENCE");
		_g403.set("spaceGroup","SPACEGROUP");
		_g409.set("fields",_g403);
		var _g404 = new haxe.ds.StringMap();
		_g404.set("phasingId",false);
		_g404.set("id",true);
		_g409.set("indexes",_g404);
		var _g405 = new haxe.ds.StringMap();
		_g405.set("schema","SGC");
		_g405.set("name","XTAL_PHASING");
		_g409.set("table_info",_g405);
		var _g407 = new haxe.ds.StringMap();
		var _g406 = new haxe.ds.StringMap();
		_g406.set("field","xtalDataSetId");
		_g406.set("class","saturn.core.domain.SgcXtalDataSet");
		_g406.set("fk_field","id");
		_g407.set("xtalDataSet",_g406);
		_g409.set("fields.synthetic",_g407);
		var _g408 = new haxe.ds.StringMap();
		_g408.set("alias","Xtal Phasing");
		_g409.set("options",_g408);
		_g410.set("saturn.core.domain.SgcXtalPhasing",_g409);
		this.models = _g410;
	}
	,__class__: saturn.db.mapping.SGC
};
saturn.db.mapping.SQLiteMapping = $hxClasses["saturn.db.mapping.SQLiteMapping"] = function() { };
saturn.db.mapping.SQLiteMapping.__name__ = ["saturn","db","mapping","SQLiteMapping"];
if(!saturn.db.provider) saturn.db.provider = {};
saturn.db.provider.GenericRDBMSProvider = $hxClasses["saturn.db.provider.GenericRDBMSProvider"] = function(models,config,autoClose) {
	this.modelsToProcess = 0;
	this.theConnection = null;
	this.debug = saturn.core.Util.debug;
	saturn.db.DefaultProvider.call(this,models,config,autoClose);
	this.config = config;
	this.user = new saturn.core.User();
	this.user.username = config.username;
	this.user.password = config.password;
	var hook = this.namedQueryHooks.keys();
	while(hook.hasNext()) {
		var hook1 = hook.next();
		this.debug("Installed hook: " + hook1 + "/" + Std.string(this.namedQueryHooks.get(hook1)));
	}
};
saturn.db.provider.GenericRDBMSProvider.__name__ = ["saturn","db","provider","GenericRDBMSProvider"];
saturn.db.provider.GenericRDBMSProvider.__super__ = saturn.db.DefaultProvider;
saturn.db.provider.GenericRDBMSProvider.prototype = $extend(saturn.db.DefaultProvider.prototype,{
	debug: null
	,theConnection: null
	,modelsToProcess: null
	,setPlatform: function() {
	}
	,setUser: function(user) {
		this.debug("User called");
		saturn.db.DefaultProvider.prototype.setUser.call(this,user);
	}
	,generatedLinkedClone: function() {
		var provider = saturn.db.DefaultProvider.prototype.generatedLinkedClone.call(this);
		provider.config = this.config;
		provider.debug = this.debug;
		provider.modelsToProcess = this.modelsToProcess;
		provider.theConnection = null;
		provider.user = this.user;
		return provider;
	}
	,readModels: function(cb) {
		var _gthis = this;
		var modelClazzes = [];
		var modelClazz = this.theBindingMap.keys();
		while(modelClazz.hasNext()) {
			var modelClazz1 = modelClazz.next();
			modelClazzes.push(modelClazz1);
		}
		this.modelsToProcess = modelClazzes.length;
		this.getConnection(this.config,function(err,conn) {
			if(err != null) {
				_gthis.debug("Error getting connection for reading models");
				_gthis.debug(err);
				cb(err);
			} else {
				_gthis.debug("Querying database for model information");
				_gthis._readModels(modelClazzes,_gthis,conn,cb);
			}
		});
	}
	,_readModels: function(modelClazzes,provider,connection,cb) {
		var _gthis = this;
		var modelClazz = modelClazzes.pop();
		this.debug("Processing model: " + modelClazz);
		var model = provider.getModelByStringName(modelClazz);
		var captured_super = $bind(this,this.postConfigureModels);
		if(model.hasTableInfo()) {
			var keyCol = model.getFirstKey_rdbms();
			var priCol = model.getPrimaryKey_rdbms();
			var tableName = model.getTableName();
			var schemaName = model.getSchemaName();
			var qName = this.generateQualifiedName(schemaName,tableName);
			var func = function(err,cols) {
				if(err != null) {
					cb(err);
				} else {
					var func1 = "SELECT DISTINCT " + cols.join(",") + " FROM " + qName;
					provider.setSelectClause(modelClazz,func1);
					model.setInsertClause("INSERT INTO " + qName);
					var func2 = "DELETE FROM " + qName + "WHERE " + priCol + " = " + _gthis.dbSpecificParamPlaceholder(1);
					model.setDeleteClause(func2);
					model.setUpdateClause("UPDATE " + qName);
					model.setSelectKeyClause("SELECT DISTINCT " + keyCol + ", " + priCol + " FROM " + qName + " ");
					model.setColumns(cols);
					_gthis.modelsToProcess--;
					_gthis.debug("Model processed: " + modelClazz);
					_gthis.debug(cols);
					if(_gthis.modelsToProcess == 0) {
						_gthis.postConfigureModels();
						_gthis.closeConnection(connection);
						if(cb != null) {
							_gthis.debug("All Models have been processed (handing back control to caller callback)");
							cb(null);
						}
					} else {
						_gthis._readModels(modelClazzes,provider,connection,cb);
					}
				}
			};
			this.getColumns(connection,schemaName,tableName,func);
		} else if(modelClazzes.length == 0 && this.modelsToProcess == 1) {
			this.postConfigureModels();
			this.closeConnection(connection);
			if(cb != null) {
				this.debug("All Models have been processed (handing back control to caller callback2)");
				cb(null);
			}
		} else {
			this.modelsToProcess--;
			this._readModels(modelClazzes,provider,connection,cb);
		}
	}
	,generateQualifiedName: function(schemaName,tableName) {
		return schemaName + "." + tableName;
	}
	,getColumns: function(connection,schemaName,tableName,cb) {
		connection.execute("select COLUMN_NAME from ALL_TAB_COLUMNS where OWNER=:1 AND TABLE_NAME=:2",[schemaName,tableName],function(err,results) {
			if(err == null) {
				var cols = [];
				var _g = 0;
				while(_g < results.length) {
					var row = results[_g];
					++_g;
					cols.push(Reflect.field(row,"COLUMN_NAME"));
				}
				cb(null,cols);
			} else {
				cb(err,null);
			}
		});
	}
	,_closeConnection: function() {
		this.debug("Closing connection!");
		if(this.theConnection != null) {
			this.theConnection.close();
			this.theConnection = null;
		}
	}
	,getConnection: function(config,cb) {
		var _gthis = this;
		if(!this.autoClose && this.theConnection != null) {
			this.debug("Using existing connection");
			cb(null,this.theConnection);
			return;
		}
		this._getConnection(function(err,conn) {
			_gthis.theConnection = conn;
			cb(err,conn);
		});
	}
	,_getConnection: function(cb) {
	}
	,_getByIds: function(ids,clazz,callBack) {
		var _gthis = this;
		if(clazz == saturn.core.domain.FileProxy) {
			this.handleFileRequests(ids,clazz,callBack);
			return;
		}
		var model = this.getModel(clazz);
		var selectClause = model.getSelectClause();
		var keyCol = model.getFirstKey_rdbms();
		var _g1 = 0;
		var _g = ids.length;
		while(_g1 < _g) {
			var i = _g1++;
			var tmp = ids[i].toUpperCase();
			ids[i] = tmp;
		}
		var selectorSQL = this.getSelectorFieldConstraintSQL(clazz);
		if(selectorSQL != "") {
			selectorSQL = " AND " + selectorSQL;
		}
		this.getConnection(this.config,function(err,connection) {
			if(err != null) {
				callBack(null,err);
			} else {
				var sql = selectClause + "  WHERE UPPER(" + _gthis.columnToStringCommand(keyCol) + ") " + _gthis.buildSqlInClause(ids.length,0,"upper") + " " + selectorSQL;
				var additionalSQL = _gthis.generateUserConstraintSQL(clazz);
				if(additionalSQL != null) {
					sql += " AND " + additionalSQL;
				}
				sql += " ORDER BY " + keyCol;
				_gthis.debug("SQL" + sql);
				try {
					connection.execute(sql,ids,function(err1,results) {
						if(err1 != null) {
							callBack(null,err1);
						} else {
							_gthis.debug("Sending results");
							callBack(results,null);
						}
						_gthis.closeConnection(connection);
					});
				} catch( e ) {
					if (e instanceof js._Boot.HaxeError) e = e.val;
					_gthis.closeConnection(connection);
					saturn.core.Util.debug(e);
					callBack(null,e);
				}
			}
		});
	}
	,_getObjects: function(clazz,callBack) {
		var _gthis = this;
		var model = this.getModel(clazz);
		var selectClause = model.getSelectClause();
		var selectorSQL = this.getSelectorFieldConstraintSQL(clazz);
		if(selectorSQL != "") {
			selectorSQL = " WHERE " + selectorSQL;
		}
		this.getConnection(this.config,function(err,connection) {
			if(err != null) {
				callBack(null,err);
			} else {
				var sql = selectClause + " " + selectorSQL;
				var additionalSQL = _gthis.generateUserConstraintSQL(clazz);
				if(additionalSQL != null) {
					sql += " AND " + additionalSQL;
				}
				sql += " ORDER BY " + model.getFirstKey_rdbms();
				_gthis.debug(sql);
				try {
					connection.execute(sql,[],function(err1,results) {
						if(err1 != null) {
							callBack(null,err1);
						} else {
							callBack(results,null);
						}
						_gthis.closeConnection(connection);
					});
				} catch( e ) {
					if (e instanceof js._Boot.HaxeError) e = e.val;
					_gthis.closeConnection(connection);
					saturn.core.Util.debug(e);
					callBack(null,e);
				}
			}
		});
	}
	,_getByValues: function(values,clazz,field,callBack) {
		var _gthis = this;
		if(clazz == saturn.core.domain.FileProxy) {
			this.handleFileRequests(values,clazz,callBack);
			return;
		}
		var model = this.getModel(clazz);
		var selectClause = model.getSelectClause();
		var sqlField = model.getSqlColumn(field);
		var selectorSQL = this.getSelectorFieldConstraintSQL(clazz);
		if(selectorSQL != "") {
			selectorSQL = " AND " + selectorSQL;
		}
		this.getConnection(this.config,function(err,connection) {
			if(err != null) {
				callBack(null,err);
			} else {
				var sql = selectClause + "  WHERE " + sqlField + " " + _gthis.buildSqlInClause(values.length) + " " + selectorSQL;
				var additionalSQL = _gthis.generateUserConstraintSQL(clazz);
				if(additionalSQL != null) {
					sql += " AND " + additionalSQL;
				}
				sql += " ORDER BY " + sqlField;
				_gthis.debug(sql);
				_gthis.debug(values);
				try {
					connection.execute(sql,values,function(err1,results) {
						if(err1 != null) {
							callBack(null,err1);
						} else {
							_gthis.debug("Result count: " + Std.string(results) + " " + Std.string(values));
							callBack(results,null);
						}
						_gthis.closeConnection(connection);
					});
				} catch( e ) {
					if (e instanceof js._Boot.HaxeError) e = e.val;
					_gthis.closeConnection(connection);
					saturn.core.Util.debug(e);
					callBack(null,e);
				}
			}
		});
	}
	,getSelectorFieldConstraintSQL: function(clazz) {
		var model = this.getModel(clazz);
		var selectorField = model.getSelectorField();
		if(selectorField != null) {
			var selectorValue = model.getSelectorValue();
			return selectorField + " = \"" + selectorValue + "\"";
		} else {
			return "";
		}
	}
	,buildSqlInClause: function(numIds,nextVal,func) {
		if(nextVal == null) {
			nextVal = 0;
		}
		var inClause = new StringBuf();
		inClause.add("IN(");
		var _g1 = 0;
		var _g = numIds;
		while(_g1 < _g) {
			var i = _g1++;
			var def = this.dbSpecificParamPlaceholder(i + 1 + nextVal);
			if(func != null) {
				def = func + "(" + def + ")";
			}
			inClause.add(def);
			if(i != numIds - 1) {
				inClause.add(",");
			}
		}
		inClause.add(")");
		return inClause.toString();
	}
	,_getByPkeys: function(ids,clazz,callBack) {
		var _gthis = this;
		if(clazz == saturn.core.domain.FileProxy) {
			this.handleFileRequests(ids,clazz,callBack);
			return;
		}
		var model = this.getModel(clazz);
		var selectClause = model.getSelectClause();
		var keyCol = model.getPrimaryKey_rdbms();
		var selectorSQL = this.getSelectorFieldConstraintSQL(clazz);
		if(selectorSQL != "") {
			selectorSQL = " AND " + selectorSQL;
		}
		this.getConnection(this.config,function(err,connection) {
			if(err != null) {
				callBack(null,err);
			} else {
				var sql = selectClause + "  WHERE " + keyCol + " " + _gthis.buildSqlInClause(ids.length) + selectorSQL;
				var additionalSQL = _gthis.generateUserConstraintSQL(clazz);
				if(additionalSQL != null) {
					sql += " AND " + additionalSQL;
				}
				sql += " " + " ORDER BY " + keyCol;
				_gthis.debug(sql);
				try {
					connection.execute(sql,ids,function(err1,results) {
						if(err1 != null) {
							callBack(null,err1);
						} else {
							callBack(results,null);
						}
						_gthis.closeConnection(connection);
					});
				} catch( e ) {
					if (e instanceof js._Boot.HaxeError) e = e.val;
					_gthis.closeConnection(connection);
					callBack(null,e);
				}
			}
		});
	}
	,_query: function(query,cb) {
		var _gthis = this;
		this.getConnection(this.config,function(err,connection) {
			if(err != null) {
				cb(null,err);
			} else {
				try {
					var visitor = new saturn.db.query_lang.SQLVisitor(_gthis);
					var sql = visitor.translate(query);
					_gthis.debug(sql);
					_gthis.debug(visitor.getValues());
					var tmp = visitor.getValues();
					connection.execute(sql,tmp,function(err1,results) {
						if(err1 != null) {
							cb(null,err1);
						} else {
							results = visitor.getProcessedResults(results);
							cb(results,null);
						}
						_gthis.closeConnection(connection);
					});
				} catch( e ) {
					if (e instanceof js._Boot.HaxeError) e = e.val;
					_gthis.closeConnection(connection);
					_gthis.debug("Error !!!!!!!!!!!!!" + Std.string(e.stack));
					cb(null,e);
				}
			}
		});
	}
	,_getByIdStartsWith: function(id,field,clazz,limit,callBack) {
		var _gthis = this;
		var model = this.getModel(clazz);
		this.debug("Provider class" + Type.getClassName(Type.getClass(this)));
		this.debug("Provider: " + model.getProviderName());
		var keyCol = null;
		if(field == null) {
			keyCol = model.getFirstKey_rdbms();
		} else if(model.isRDBMSField(field)) {
			keyCol = field;
		}
		var busKey = model.getFirstKey_rdbms();
		var priCol = model.getPrimaryKey_rdbms();
		var tableName = model.getTableName();
		var schemaName = model.getSchemaName();
		var qName = this.generateQualifiedName(schemaName,tableName);
		var selectClause = "SELECT DISTINCT " + busKey + ", " + priCol;
		if(keyCol != busKey && keyCol != priCol) {
			selectClause += ", " + keyCol;
		}
		selectClause += " FROM " + qName;
		id = id.toUpperCase();
		var selectorSQL = this.getSelectorFieldConstraintSQL(clazz);
		if(selectorSQL != "") {
			selectorSQL = " AND " + selectorSQL;
		}
		if(!this.limitAtEndPosition()) {
			if(limit != null && limit != 0 && limit != -1) {
				selectorSQL += this.generateLimitClause(limit);
			}
		}
		this.getConnection(this.config,function(err,connection) {
			if(err != null) {
				callBack(null,err);
			} else {
				var sql = selectClause + "  WHERE UPPER(" + _gthis.columnToStringCommand(keyCol) + ") like " + _gthis.dbSpecificParamPlaceholder(1) + " " + selectorSQL;
				var additionalSQL = _gthis.generateUserConstraintSQL(clazz);
				if(additionalSQL != null) {
					sql += " AND " + additionalSQL;
				}
				sql += " ORDER BY " + keyCol;
				if(_gthis.limitAtEndPosition()) {
					if(limit != null && limit != 0 && limit != -1) {
						sql += _gthis.generateLimitClause(limit);
					}
				}
				id = "%" + id + "%";
				_gthis.debug("startswith" + sql);
				try {
					connection.execute(sql,[id],function(err1,results) {
						if(err1 != null) {
							callBack(null,err1);
						} else {
							callBack(results,null);
						}
						_gthis.closeConnection(connection);
					});
				} catch( e ) {
					if (e instanceof js._Boot.HaxeError) e = e.val;
					saturn.core.Util.debug(e);
					_gthis.closeConnection(connection);
					callBack(null,e);
				}
			}
		});
	}
	,limitAtEndPosition: function() {
		return false;
	}
	,generateLimitClause: function(limit) {
		return " AND ROWNUM < " + Std["int"](limit);
	}
	,columnToStringCommand: function(columnName) {
		return columnName;
	}
	,convertComplexQuery: function(parameters) {
	}
	,_getByNamedQuery: function(queryId,parameters,clazz,cb) {
		var _gthis = this;
		if(!Reflect.hasField(this.config.named_queries,queryId)) {
			this.debug("Hook is missing");
			cb(null,"Query " + queryId + " not found ");
		} else {
			this.debug("Calling SQL query");
			var sql = Reflect.field(this.config.named_queries,queryId);
			var realParameters = [];
			if((parameters instanceof Array) && parameters.__enum__ == null) {
				this.debug("Named query passed an Array");
				var re = new EReg("(<IN>)","");
				if(re.match(sql)) {
					var sql1 = this.buildSqlInClause(parameters.length);
					sql = re.replace(sql,sql1);
				}
				realParameters = parameters;
			} else {
				this.debug("Named query with other object type");
				var dbPlaceHolderI = 0;
				var attributes = Reflect.fields(parameters);
				if(attributes.length == 0) {
					cb(null,"Unknown parameter collection type");
					return;
				} else {
					this.debug("Named query passed object");
					var re_in = new EReg("^IN:","");
					var re1 = new EReg("<:([^>]+)>","");
					var convertedSQL = "";
					var matchMe = sql;
					while(matchMe != null) {
						this.debug("Looping: " + matchMe);
						this.debug("SQL: " + convertedSQL);
						if(re1.matchSub(matchMe,0)) {
							var matchLeft = re1.matchedLeft();
							var tagName = re1.matched(1);
							this.debug("MatchLeft: " + matchLeft);
							this.debug("Tag:" + tagName);
							convertedSQL += matchLeft;
							if(re_in.matchSub(tagName,0)) {
								this.debug("Found IN");
								tagName = re_in.replace(tagName,"");
								this.debug("Real Tag Name" + tagName);
								if(Reflect.hasField(parameters,tagName)) {
									this.debug("Found array");
									var paramArray = Reflect.field(parameters,tagName);
									if((paramArray instanceof Array) && paramArray.__enum__ == null) {
										convertedSQL += this.buildSqlInClause(paramArray.length);
										var _g1 = 0;
										var _g = paramArray.length;
										while(_g1 < _g) {
											var i = _g1++;
											realParameters.push(paramArray[i]);
										}
									} else {
										cb(null,"Value to attribute " + tagName + " should be an Array");
										return;
									}
								} else {
									cb(null,"Missing attribute " + tagName);
									return;
								}
							} else {
								this.debug("Found non IN argument");
								if(Reflect.hasField(parameters,tagName)) {
									convertedSQL += this.dbSpecificParamPlaceholder(dbPlaceHolderI++);
									var value = Reflect.field(parameters,tagName);
									realParameters.push(value);
								} else {
									cb(null,"Missing attribute " + tagName);
									return;
								}
							}
							matchMe = re1.matchedRight();
							this.debug("Found right " + matchMe);
						} else {
							convertedSQL += matchMe;
							matchMe = null;
							this.debug("Terminating while");
						}
					}
					sql = convertedSQL;
				}
			}
			this.debug("SQL: " + sql);
			this.debug("Parameters: " + Std.string(realParameters));
			this.getConnection(this.config,function(err,connection) {
				if(err != null) {
					cb(null,err);
				} else {
					_gthis.debug(sql);
					try {
						connection.execute(sql,realParameters,function(err1,results) {
							_gthis.debug("Named query returning");
							if(err1 != null) {
								cb(null,err1);
							} else {
								cb(results,null);
							}
							_gthis.closeConnection(connection);
						});
					} catch( e ) {
						if (e instanceof js._Boot.HaxeError) e = e.val;
						_gthis.closeConnection(connection);
						cb(null,e);
					}
				}
			});
		}
	}
	,_update: function(attributeMaps,className,cb) {
		var _gthis = this;
		this.applyFunctions(attributeMaps,className);
		this.getConnection(this.config,function(err,connection) {
			if(err != null) {
				cb(err);
			} else {
				var clazz = Type.resolveClass(className);
				var model = _gthis.getModel(clazz);
				_gthis._updateRecursive(attributeMaps,model,cb,connection);
			}
		});
	}
	,_insert: function(attributeMaps,className,cb) {
		var _gthis = this;
		this.applyFunctions(attributeMaps,className);
		this.getConnection(this.config,function(err,connection) {
			if(err != null) {
				cb(err);
			} else {
				var clazz = Type.resolveClass(className);
				var model = _gthis.getModel(clazz);
				_gthis._insertRecursive(attributeMaps,model,cb,connection);
			}
		});
	}
	,cloneConfig: function() {
		var cloneData = haxe.Serializer.run(this.config);
		var unserObj = haxe.Unserializer.run(cloneData);
		return unserObj;
	}
	,_insertRecursive: function(attributeMaps,model,cb,connection) {
		var _gthis = this;
		this.debug("Inserting  " + Type.getClassName(model.getClass()));
		var insertClause = model.getInsertClause();
		var cols = model.getColumnSet();
		var attributeMap = attributeMaps.pop();
		var colStr = new StringBuf();
		var valList = [];
		var valStr = new StringBuf();
		var i = 0;
		var hasWork = false;
		var attribute = attributeMap.keys();
		while(attribute.hasNext()) {
			var attribute1 = attribute.next();
			if(cols != null && cols.exists(attribute1)) {
				if(i > 0) {
					colStr.add(",");
					valStr.add(",");
				}
				++i;
				colStr.add(attribute1);
				valStr.add(this.dbSpecificParamPlaceholder(i));
				var val = attributeMap.get(attribute1);
				if(val == "" && !(typeof(val) == "number" && ((val | 0) === val))) {
					val = null;
				}
				valList.push(val);
				hasWork = true;
			}
		}
		if(model.isPolymorph()) {
			++i;
			colStr.add("," + model.getSelectorField());
			valStr.add("," + this.dbSpecificParamPlaceholder(i));
			valList.push(model.getSelectorValue());
			hasWork = true;
		}
		if(!hasWork) {
			this.debug("No work - returning error");
			var tmp = "Insert failure: no mapped fields for " + Type.getClassName(model.getClass());
			cb(tmp);
			return;
		}
		var sql = insertClause + " (" + Std.string(colStr) + ") VALUES(" + Std.string(valStr) + ")";
		var keyCol = model.getFirstKey_rdbms();
		var keyVal = attributeMap.get(keyCol);
		this.debug("MAP:" + attributeMap.toString());
		this.debug("SQL" + sql);
		this.debug("Values" + Std.string(valList));
		try {
			connection.execute(sql,valList,function(err,results) {
				if(err != null) {
					var error = { message : StringTools.replace(err == null ? "null" : "" + err,"\n",""), source : keyVal};
					cb(error);
					_gthis.closeConnection(connection);
				} else if(attributeMaps.length == 0) {
					cb(null);
					_gthis.closeConnection(connection);
				} else {
					_gthis._insertRecursive(attributeMaps,model,cb,connection);
				}
			});
		} catch( e ) {
			if (e instanceof js._Boot.HaxeError) e = e.val;
			this.closeConnection(connection);
			var error1 = { message : StringTools.replace(Std.string(e),"\n",""), source : keyVal};
			cb(error1);
		}
	}
	,_updateRecursive: function(attributeMaps,model,cb,connection) {
		var _gthis = this;
		var updateClause = model.getUpdateClause();
		var cols = model.getColumnSet();
		var attributeMap = attributeMaps.pop();
		var valList = [];
		var updateStr = new StringBuf();
		var i = 0;
		var attribute = attributeMap.keys();
		while(attribute.hasNext()) {
			var attribute1 = attribute.next();
			if(cols.exists(attribute1) && attribute1 != model.getPrimaryKey_rdbms()) {
				if(attribute1 == "DATESTAMP") {
					continue;
				}
				if(i > 0) {
					updateStr.add(",");
				}
				++i;
				updateStr.add(attribute1 + " = " + this.dbSpecificParamPlaceholder(i));
				var val = attributeMap.get(attribute1);
				if(val == "") {
					val = null;
				}
				valList.push(val);
			}
		}
		++i;
		var keyCol = model.getPrimaryKey_rdbms();
		var sql = updateClause + " SET " + Std.string(updateStr) + " WHERE " + keyCol + " = " + this.dbSpecificParamPlaceholder(i);
		var additionalSQL = this.generateUserConstraintSQL(model.getClass());
		if(additionalSQL != null) {
			sql += " AND " + additionalSQL;
		}
		valList.push(attributeMap.get(keyCol));
		this.debug("SQL" + sql);
		this.debug("Values" + Std.string(valList));
		try {
			connection.execute(sql,valList,function(err,results) {
				if(err != null) {
					saturn.core.Util.debug("Error: " + err);
					cb(err);
					_gthis.closeConnection(connection);
				} else if(attributeMaps.length == 0) {
					cb(null);
					_gthis.closeConnection(connection);
				} else {
					_gthis._updateRecursive(attributeMaps,model,cb,connection);
				}
			});
		} catch( e ) {
			if (e instanceof js._Boot.HaxeError) e = e.val;
			this.closeConnection(connection);
			cb(e);
		}
	}
	,_delete: function(attributeMaps,className,cb) {
		var _gthis = this;
		var model = this.getModelByStringName(className);
		var priField = model.getPrimaryKey();
		var priFieldSql = model.getPrimaryKey_rdbms();
		var pkeys = [];
		var _g = 0;
		while(_g < attributeMaps.length) {
			var attributeMap = attributeMaps[_g];
			++_g;
			pkeys.push(attributeMap.get(priFieldSql));
		}
		var d = attributeMaps;
		var sql = "DELETE FROM " + this.generateQualifiedName(model.getSchemaName(),model.getTableName()) + " WHERE " + priFieldSql + " " + this.buildSqlInClause(pkeys.length);
		var additionalSQL = this.generateUserConstraintSQL(model.getClass());
		if(additionalSQL != null) {
			sql += " AND " + additionalSQL;
		}
		this.getConnection(this.config,function(err,connection) {
			if(err != null) {
				cb(err);
			} else {
				try {
					connection.execute(sql,pkeys,function(err1,results) {
						if(err1 != null) {
							saturn.core.Util.debug("Error: " + err1);
							cb(err1);
							_gthis.closeConnection(connection);
						} else {
							cb(null);
						}
					});
				} catch( e ) {
					if (e instanceof js._Boot.HaxeError) e = e.val;
					_gthis.closeConnection(connection);
					cb(e);
				}
			}
		});
	}
	,postConfigureModels: function() {
		saturn.db.DefaultProvider.prototype.postConfigureModels.call(this);
	}
	,parseObjectList: function(data) {
		return null;
	}
	,dbSpecificParamPlaceholder: function(i) {
		return ":" + i;
	}
	,getProviderType: function() {
		return "ORACLE";
	}
	,applyFunctions: function(attributeMaps,className) {
		var context = this.user;
		var model = this.getModelByStringName(className);
		var functions = model.getAutoFunctions();
		if(functions != null) {
			var field = functions.keys();
			while(field.hasNext()) {
				var field1 = field.next();
				var functionString = functions.get(field1);
				var func = null;
				if(functionString == "insert.username") {
					func = $bind(this,this.setUserName);
				} else {
					continue;
				}
				var _g = 0;
				while(_g < attributeMaps.length) {
					var attributeMap = attributeMaps[_g];
					++_g;
					if(attributeMap.exists(field1)) {
						attributeMap.set(field1,Reflect.callMethod(this,func,[attributeMap.get(field1),context]));
					}
				}
			}
		}
		return attributeMaps;
	}
	,setUserName: function(value,context) {
		if(context != null && context.username != null) {
			return context.username.toUpperCase();
		} else {
			return value;
		}
	}
	,handleFileRequests: function(values,clazz,callBack) {
	}
	,setConnection: function(conn) {
		this.theConnection = conn;
	}
	,_commit: function(cb) {
		this.getConnection(this.config,function(err,connection) {
			if(err != null) {
				cb(err);
			} else {
				connection.commit(cb);
			}
		});
	}
	,setAutoCommit: function(autoCommit,cb) {
		this.getConnection(this.config,function(err,conn) {
			if(err == null) {
				conn.setAutoCommit(autoCommit);
				cb(null);
			} else {
				cb(err);
			}
		});
	}
	,generateUserConstraintSQL: function(clazz) {
		var model = this.getModel(clazz);
		var publicConstraintField = model.getPublicConstraintField();
		var userConstraintField = model.getUserConstraintField();
		var sql = null;
		if(publicConstraintField != null) {
			var columnName = model.getSqlColumn(publicConstraintField);
			sql = " " + columnName + " = 'yes' ";
		}
		if(userConstraintField != null) {
			var inBlock = false;
			if(sql != null) {
				sql = "(" + sql + " OR ";
				inBlock = true;
			}
			var columnName1 = model.getSqlColumn(userConstraintField);
			sql = sql + columnName1 + " = '" + this.getUser().username.toUpperCase() + "'";
			if(inBlock) {
				sql += " ) ";
			}
		}
		return sql;
	}
	,__class__: saturn.db.provider.GenericRDBMSProvider
});
if(!saturn.db.provider.hooks) saturn.db.provider.hooks = {};
saturn.db.provider.hooks.ExternalJsonHook = $hxClasses["saturn.db.provider.hooks.ExternalJsonHook"] = function() { };
saturn.db.provider.hooks.ExternalJsonHook.__name__ = ["saturn","db","provider","hooks","ExternalJsonHook"];
saturn.db.provider.hooks.ExternalJsonHook.run = function(query,params,clazz,cb,hookConfig) {
	saturn.core.Util.debug("Running external command");
	if(hookConfig == null) {
		cb(null,"Hook configuration is missing");
		return;
	}
	var program = null;
	if(Reflect.hasField(hookConfig,"program")) {
		program = Reflect.field(hookConfig,"program");
	} else {
		cb(null,"Invalid configuration, program field missing");
		return;
	}
	var progArguments = [];
	if(Reflect.hasField(hookConfig,"arguments")) {
		var localprogArguments = Reflect.field(hookConfig,"arguments");
		var _g = 0;
		while(_g < localprogArguments.length) {
			var arg = localprogArguments[_g];
			++_g;
			progArguments.push(arg);
		}
	}
	var config = params[0];
	saturn.core.Util.getNewExternalProcess(function(process) {
		process.getTemporaryFileName(function(inputJsonFileName) {
			process.getTemporaryFileName(function(outputJsonFileName) {
				progArguments.push(inputJsonFileName);
				progArguments.push(outputJsonFileName);
				var inputJson = JSON.stringify(config);
				process.writeFile(inputJsonFileName,inputJson,function(err) {
					if(err == "") {
						process.start(program,progArguments);
						process.waitForClose(function(state) {
							if(state == "") {
								process.readFile(outputJsonFileName,function(contents) {
									if(contents != null) {
										var outputJson = JSON.parse(contents);
										cb(outputJson,null);
									} else {
										cb(null,"Unable to read output JSON file");
									}
								});
							} else {
								cb(null,"An error has occurred ");
							}
						});
					} else {
						cb(null,err);
					}
				});
			});
		});
	});
};
saturn.db.provider.hooks.RawSQLHook = $hxClasses["saturn.db.provider.hooks.RawSQLHook"] = function() { };
saturn.db.provider.hooks.RawSQLHook.__name__ = ["saturn","db","provider","hooks","RawSQLHook"];
saturn.db.provider.hooks.RawSQLHook.run = function(query,params,clazz,cb,hookConfig) {
	var sql = params[0];
	var args = params[1];
	saturn.core.Util.getProvider().getConnection(null,function(err,conn) {
		conn.execute(sql,args,function(err1,results) {
			cb(results,err1);
		});
	});
};
if(!saturn.db.query_lang) saturn.db.query_lang = {};
saturn.db.query_lang.Token = $hxClasses["saturn.db.query_lang.Token"] = function(tokens) {
	this.tokens = tokens;
	if(this.tokens != null) {
		var _g1 = 0;
		var _g = this.tokens.length;
		while(_g1 < _g) {
			var i = _g1++;
			var value = this.tokens[i];
			if(value != null) {
				if(!Std["is"](value,saturn.db.query_lang.Token)) {
					this.tokens[i] = new saturn.db.query_lang.Value(value);
				}
			}
		}
	}
};
saturn.db.query_lang.Token.__name__ = ["saturn","db","query_lang","Token"];
saturn.db.query_lang.Token.prototype = {
	tokens: null
	,name: null
	,'as': function(name) {
		this.name = name;
		return this;
	}
	,getTokens: function() {
		return this.tokens;
	}
	,setTokens: function(tokens) {
		this.tokens = tokens;
	}
	,addToken: function(token) {
		if(!Std["is"](token,saturn.db.query_lang.Token)) {
			token = new saturn.db.query_lang.Value(saturn.db.query_lang.Token);
		}
		if(this.tokens == null) {
			this.tokens = [];
		}
		this.tokens.push(token);
		return this;
	}
	,field: function(clazz,attributeName,clazzAlias) {
		var f = new saturn.db.query_lang.Field(clazz,attributeName,clazzAlias);
		this.add(f);
		return f;
	}
	,add: function(token) {
		if(Std["is"](token,saturn.db.query_lang.Operator)) {
			var n = new saturn.db.query_lang.Token();
			n.add(this);
			n.addToken(token);
			return n;
		} else {
			return this.addToken(token);
		}
	}
	,removeToken: function(token) {
		HxOverrides.remove(this.tokens,token);
	}
	,like: function(token) {
		var l = new saturn.db.query_lang.Like();
		if(token != null) {
			l.add(token);
		}
		return this.add(l);
	}
	,concat: function(token) {
		var c = new saturn.db.query_lang.Concat([this,token]);
		return c;
	}
	,substr: function(position,length) {
		return new saturn.db.query_lang.Substr(this,position,length);
	}
	,instr: function(substring,position,occurrence) {
		return new saturn.db.query_lang.Instr(this,substring,position,occurrence);
	}
	,max: function() {
		return new saturn.db.query_lang.Max(this);
	}
	,length: function() {
		return new saturn.db.query_lang.Length(this);
	}
	,plus: function(token) {
		var c = new saturn.db.query_lang.Plus(token);
		return this.add(c);
	}
	,minus: function(token) {
		var c = new saturn.db.query_lang.Minus(token);
		return this.add(c);
	}
	,getClassList: function() {
		var list = [];
		var tokens = this.getTokens();
		if(tokens != null && tokens.length > 0) {
			var _g = 0;
			while(_g < tokens.length) {
				var token = tokens[_g];
				++_g;
				if(Std["is"](token,saturn.db.query_lang.ClassToken)) {
					var cToken = js.Boot.__cast(token , saturn.db.query_lang.ClassToken);
					if(cToken.getClass() != null) {
						list.push(cToken.getClass());
					}
				} else {
					var list2 = token.getClassList();
					var _g1 = 0;
					while(_g1 < list2.length) {
						var item = list2[_g1];
						++_g1;
						list.push(item);
					}
				}
			}
		}
		return list;
	}
	,or: function() {
		this.add(new saturn.db.query_lang.Or());
	}
	,__class__: saturn.db.query_lang.Token
};
saturn.db.query_lang.Operator = $hxClasses["saturn.db.query_lang.Operator"] = function(token) {
	if(token != null) {
		saturn.db.query_lang.Token.call(this,[token]);
	} else {
		saturn.db.query_lang.Token.call(this,null);
	}
};
saturn.db.query_lang.Operator.__name__ = ["saturn","db","query_lang","Operator"];
saturn.db.query_lang.Operator.__super__ = saturn.db.query_lang.Token;
saturn.db.query_lang.Operator.prototype = $extend(saturn.db.query_lang.Token.prototype,{
	__class__: saturn.db.query_lang.Operator
});
saturn.db.query_lang.And = $hxClasses["saturn.db.query_lang.And"] = function() {
	saturn.db.query_lang.Operator.call(this,null);
};
saturn.db.query_lang.And.__name__ = ["saturn","db","query_lang","And"];
saturn.db.query_lang.And.__super__ = saturn.db.query_lang.Operator;
saturn.db.query_lang.And.prototype = $extend(saturn.db.query_lang.Operator.prototype,{
	__class__: saturn.db.query_lang.And
});
saturn.db.query_lang.Function = $hxClasses["saturn.db.query_lang.Function"] = function(tokens) {
	saturn.db.query_lang.Token.call(this,tokens);
};
saturn.db.query_lang.Function.__name__ = ["saturn","db","query_lang","Function"];
saturn.db.query_lang.Function.__super__ = saturn.db.query_lang.Token;
saturn.db.query_lang.Function.prototype = $extend(saturn.db.query_lang.Token.prototype,{
	__class__: saturn.db.query_lang.Function
});
saturn.db.query_lang.Cast = $hxClasses["saturn.db.query_lang.Cast"] = function(expression,type) {
	saturn.db.query_lang.Function.call(this,[expression,type]);
};
saturn.db.query_lang.Cast.__name__ = ["saturn","db","query_lang","Cast"];
saturn.db.query_lang.Cast.__super__ = saturn.db.query_lang.Function;
saturn.db.query_lang.Cast.prototype = $extend(saturn.db.query_lang.Function.prototype,{
	__class__: saturn.db.query_lang.Cast
});
saturn.db.query_lang.CastAsInt = $hxClasses["saturn.db.query_lang.CastAsInt"] = function(token) {
	saturn.db.query_lang.Function.call(this,[token]);
};
saturn.db.query_lang.CastAsInt.__name__ = ["saturn","db","query_lang","CastAsInt"];
saturn.db.query_lang.CastAsInt.__super__ = saturn.db.query_lang.Function;
saturn.db.query_lang.CastAsInt.prototype = $extend(saturn.db.query_lang.Function.prototype,{
	__class__: saturn.db.query_lang.CastAsInt
});
saturn.db.query_lang.ClassToken = $hxClasses["saturn.db.query_lang.ClassToken"] = function(clazz) {
	this.setClass(clazz);
	saturn.db.query_lang.Token.call(this,null);
};
saturn.db.query_lang.ClassToken.__name__ = ["saturn","db","query_lang","ClassToken"];
saturn.db.query_lang.ClassToken.__super__ = saturn.db.query_lang.Token;
saturn.db.query_lang.ClassToken.prototype = $extend(saturn.db.query_lang.Token.prototype,{
	clazz: null
	,getClass: function() {
		return this.clazz;
	}
	,setClass: function(clazz) {
		if(Std["is"](clazz,Class)) {
			var c = js.Boot.__cast(clazz , Class);
			this.clazz = Type.getClassName(c);
		} else {
			this.clazz = clazz;
		}
	}
	,__class__: saturn.db.query_lang.ClassToken
});
saturn.db.query_lang.Concat = $hxClasses["saturn.db.query_lang.Concat"] = function(tokens) {
	saturn.db.query_lang.Function.call(this,tokens);
};
saturn.db.query_lang.Concat.__name__ = ["saturn","db","query_lang","Concat"];
saturn.db.query_lang.Concat.__super__ = saturn.db.query_lang.Function;
saturn.db.query_lang.Concat.prototype = $extend(saturn.db.query_lang.Function.prototype,{
	__class__: saturn.db.query_lang.Concat
});
saturn.db.query_lang.ConcatOperator = $hxClasses["saturn.db.query_lang.ConcatOperator"] = function(token) {
	saturn.db.query_lang.Operator.call(this,token);
};
saturn.db.query_lang.ConcatOperator.__name__ = ["saturn","db","query_lang","ConcatOperator"];
saturn.db.query_lang.ConcatOperator.__super__ = saturn.db.query_lang.Operator;
saturn.db.query_lang.ConcatOperator.prototype = $extend(saturn.db.query_lang.Operator.prototype,{
	__class__: saturn.db.query_lang.ConcatOperator
});
saturn.db.query_lang.Count = $hxClasses["saturn.db.query_lang.Count"] = function(token) {
	saturn.db.query_lang.Function.call(this,[token]);
};
saturn.db.query_lang.Count.__name__ = ["saturn","db","query_lang","Count"];
saturn.db.query_lang.Count.__super__ = saturn.db.query_lang.Function;
saturn.db.query_lang.Count.prototype = $extend(saturn.db.query_lang.Function.prototype,{
	__class__: saturn.db.query_lang.Count
});
saturn.db.query_lang.EndBlock = $hxClasses["saturn.db.query_lang.EndBlock"] = function() {
	saturn.db.query_lang.Token.call(this,null);
};
saturn.db.query_lang.EndBlock.__name__ = ["saturn","db","query_lang","EndBlock"];
saturn.db.query_lang.EndBlock.__super__ = saturn.db.query_lang.Token;
saturn.db.query_lang.EndBlock.prototype = $extend(saturn.db.query_lang.Token.prototype,{
	__class__: saturn.db.query_lang.EndBlock
});
saturn.db.query_lang.Equals = $hxClasses["saturn.db.query_lang.Equals"] = function(token) {
	saturn.db.query_lang.Operator.call(this,token);
};
saturn.db.query_lang.Equals.__name__ = ["saturn","db","query_lang","Equals"];
saturn.db.query_lang.Equals.__super__ = saturn.db.query_lang.Operator;
saturn.db.query_lang.Equals.prototype = $extend(saturn.db.query_lang.Operator.prototype,{
	__class__: saturn.db.query_lang.Equals
});
saturn.db.query_lang.Field = $hxClasses["saturn.db.query_lang.Field"] = function(clazz,attributeName,clazzAlias) {
	this.setClass(clazz);
	this.attributeName = attributeName;
	this.clazzAlias = clazzAlias;
	saturn.db.query_lang.Token.call(this,null);
};
saturn.db.query_lang.Field.__name__ = ["saturn","db","query_lang","Field"];
saturn.db.query_lang.Field.__super__ = saturn.db.query_lang.Token;
saturn.db.query_lang.Field.prototype = $extend(saturn.db.query_lang.Token.prototype,{
	clazz: null
	,clazzAlias: null
	,attributeName: null
	,getClass: function() {
		return this.clazz;
	}
	,setClass: function(clazz) {
		if(Std["is"](clazz,Class)) {
			var c = js.Boot.__cast(clazz , Class);
			this.clazz = Type.getClassName(c);
		} else {
			this.clazz = clazz;
		}
	}
	,getAttributeName: function() {
		return this.attributeName;
	}
	,setAttributeName: function(name) {
		this.attributeName = name;
	}
	,__class__: saturn.db.query_lang.Field
});
saturn.db.query_lang.From = $hxClasses["saturn.db.query_lang.From"] = function() {
	saturn.db.query_lang.Token.call(this,null);
};
saturn.db.query_lang.From.__name__ = ["saturn","db","query_lang","From"];
saturn.db.query_lang.From.__super__ = saturn.db.query_lang.Token;
saturn.db.query_lang.From.prototype = $extend(saturn.db.query_lang.Token.prototype,{
	__class__: saturn.db.query_lang.From
});
saturn.db.query_lang.GreaterThan = $hxClasses["saturn.db.query_lang.GreaterThan"] = function(token) {
	saturn.db.query_lang.Operator.call(this,token);
};
saturn.db.query_lang.GreaterThan.__name__ = ["saturn","db","query_lang","GreaterThan"];
saturn.db.query_lang.GreaterThan.__super__ = saturn.db.query_lang.Operator;
saturn.db.query_lang.GreaterThan.prototype = $extend(saturn.db.query_lang.Operator.prototype,{
	__class__: saturn.db.query_lang.GreaterThan
});
saturn.db.query_lang.GreaterThanOrEqualTo = $hxClasses["saturn.db.query_lang.GreaterThanOrEqualTo"] = function(token) {
	saturn.db.query_lang.Operator.call(this,token);
};
saturn.db.query_lang.GreaterThanOrEqualTo.__name__ = ["saturn","db","query_lang","GreaterThanOrEqualTo"];
saturn.db.query_lang.GreaterThanOrEqualTo.__super__ = saturn.db.query_lang.Operator;
saturn.db.query_lang.GreaterThanOrEqualTo.prototype = $extend(saturn.db.query_lang.Operator.prototype,{
	__class__: saturn.db.query_lang.GreaterThanOrEqualTo
});
saturn.db.query_lang.Group = $hxClasses["saturn.db.query_lang.Group"] = function() {
	saturn.db.query_lang.Token.call(this,null);
};
saturn.db.query_lang.Group.__name__ = ["saturn","db","query_lang","Group"];
saturn.db.query_lang.Group.__super__ = saturn.db.query_lang.Token;
saturn.db.query_lang.Group.prototype = $extend(saturn.db.query_lang.Token.prototype,{
	__class__: saturn.db.query_lang.Group
});
saturn.db.query_lang.In = $hxClasses["saturn.db.query_lang.In"] = function(token) {
	saturn.db.query_lang.Operator.call(this,token);
};
saturn.db.query_lang.In.__name__ = ["saturn","db","query_lang","In"];
saturn.db.query_lang.In.__super__ = saturn.db.query_lang.Operator;
saturn.db.query_lang.In.prototype = $extend(saturn.db.query_lang.Operator.prototype,{
	__class__: saturn.db.query_lang.In
});
saturn.db.query_lang.Instr = $hxClasses["saturn.db.query_lang.Instr"] = function(value,substring,position,occurrence) {
	if(position == null) {
		position = new saturn.db.query_lang.Value(1);
	}
	if(occurrence == null) {
		occurrence = new saturn.db.query_lang.Value(1);
	}
	saturn.db.query_lang.Function.call(this,[value,substring,position,occurrence]);
};
saturn.db.query_lang.Instr.__name__ = ["saturn","db","query_lang","Instr"];
saturn.db.query_lang.Instr.__super__ = saturn.db.query_lang.Function;
saturn.db.query_lang.Instr.prototype = $extend(saturn.db.query_lang.Function.prototype,{
	__class__: saturn.db.query_lang.Instr
});
saturn.db.query_lang.IsNotNull = $hxClasses["saturn.db.query_lang.IsNotNull"] = function() {
	saturn.db.query_lang.Operator.call(this,null);
};
saturn.db.query_lang.IsNotNull.__name__ = ["saturn","db","query_lang","IsNotNull"];
saturn.db.query_lang.IsNotNull.__super__ = saturn.db.query_lang.Operator;
saturn.db.query_lang.IsNotNull.prototype = $extend(saturn.db.query_lang.Operator.prototype,{
	__class__: saturn.db.query_lang.IsNotNull
});
saturn.db.query_lang.IsNull = $hxClasses["saturn.db.query_lang.IsNull"] = function() {
	this.empty = "NULL";
	saturn.db.query_lang.Operator.call(this,null);
};
saturn.db.query_lang.IsNull.__name__ = ["saturn","db","query_lang","IsNull"];
saturn.db.query_lang.IsNull.__super__ = saturn.db.query_lang.Operator;
saturn.db.query_lang.IsNull.prototype = $extend(saturn.db.query_lang.Operator.prototype,{
	empty: null
	,__class__: saturn.db.query_lang.IsNull
});
saturn.db.query_lang.Length = $hxClasses["saturn.db.query_lang.Length"] = function(value) {
	saturn.db.query_lang.Function.call(this,[value]);
};
saturn.db.query_lang.Length.__name__ = ["saturn","db","query_lang","Length"];
saturn.db.query_lang.Length.__super__ = saturn.db.query_lang.Function;
saturn.db.query_lang.Length.prototype = $extend(saturn.db.query_lang.Function.prototype,{
	__class__: saturn.db.query_lang.Length
});
saturn.db.query_lang.LessThan = $hxClasses["saturn.db.query_lang.LessThan"] = function(token) {
	saturn.db.query_lang.Operator.call(this,token);
};
saturn.db.query_lang.LessThan.__name__ = ["saturn","db","query_lang","LessThan"];
saturn.db.query_lang.LessThan.__super__ = saturn.db.query_lang.Operator;
saturn.db.query_lang.LessThan.prototype = $extend(saturn.db.query_lang.Operator.prototype,{
	__class__: saturn.db.query_lang.LessThan
});
saturn.db.query_lang.LessThanOrEqualTo = $hxClasses["saturn.db.query_lang.LessThanOrEqualTo"] = function(token) {
	saturn.db.query_lang.Operator.call(this,token);
};
saturn.db.query_lang.LessThanOrEqualTo.__name__ = ["saturn","db","query_lang","LessThanOrEqualTo"];
saturn.db.query_lang.LessThanOrEqualTo.__super__ = saturn.db.query_lang.Operator;
saturn.db.query_lang.LessThanOrEqualTo.prototype = $extend(saturn.db.query_lang.Operator.prototype,{
	__class__: saturn.db.query_lang.LessThanOrEqualTo
});
saturn.db.query_lang.Like = $hxClasses["saturn.db.query_lang.Like"] = function() {
	saturn.db.query_lang.Operator.call(this,null);
};
saturn.db.query_lang.Like.__name__ = ["saturn","db","query_lang","Like"];
saturn.db.query_lang.Like.__super__ = saturn.db.query_lang.Operator;
saturn.db.query_lang.Like.prototype = $extend(saturn.db.query_lang.Operator.prototype,{
	__class__: saturn.db.query_lang.Like
});
saturn.db.query_lang.Limit = $hxClasses["saturn.db.query_lang.Limit"] = function(limit) {
	saturn.db.query_lang.Token.call(this,[limit]);
};
saturn.db.query_lang.Limit.__name__ = ["saturn","db","query_lang","Limit"];
saturn.db.query_lang.Limit.__super__ = saturn.db.query_lang.Token;
saturn.db.query_lang.Limit.prototype = $extend(saturn.db.query_lang.Token.prototype,{
	__class__: saturn.db.query_lang.Limit
});
saturn.db.query_lang.Max = $hxClasses["saturn.db.query_lang.Max"] = function(value) {
	saturn.db.query_lang.Function.call(this,[value]);
};
saturn.db.query_lang.Max.__name__ = ["saturn","db","query_lang","Max"];
saturn.db.query_lang.Max.__super__ = saturn.db.query_lang.Function;
saturn.db.query_lang.Max.prototype = $extend(saturn.db.query_lang.Function.prototype,{
	__class__: saturn.db.query_lang.Max
});
saturn.db.query_lang.Minus = $hxClasses["saturn.db.query_lang.Minus"] = function(value) {
	if(value == null) {
		saturn.db.query_lang.Operator.call(this,null);
	} else {
		saturn.db.query_lang.Operator.call(this,value);
	}
};
saturn.db.query_lang.Minus.__name__ = ["saturn","db","query_lang","Minus"];
saturn.db.query_lang.Minus.__super__ = saturn.db.query_lang.Operator;
saturn.db.query_lang.Minus.prototype = $extend(saturn.db.query_lang.Operator.prototype,{
	__class__: saturn.db.query_lang.Minus
});
saturn.db.query_lang.NotEquals = $hxClasses["saturn.db.query_lang.NotEquals"] = function(token) {
	saturn.db.query_lang.Operator.call(this,token);
};
saturn.db.query_lang.NotEquals.__name__ = ["saturn","db","query_lang","NotEquals"];
saturn.db.query_lang.NotEquals.__super__ = saturn.db.query_lang.Operator;
saturn.db.query_lang.NotEquals.prototype = $extend(saturn.db.query_lang.Operator.prototype,{
	__class__: saturn.db.query_lang.NotEquals
});
saturn.db.query_lang.Or = $hxClasses["saturn.db.query_lang.Or"] = function() {
	saturn.db.query_lang.Operator.call(this,null);
};
saturn.db.query_lang.Or.__name__ = ["saturn","db","query_lang","Or"];
saturn.db.query_lang.Or.__super__ = saturn.db.query_lang.Operator;
saturn.db.query_lang.Or.prototype = $extend(saturn.db.query_lang.Operator.prototype,{
	__class__: saturn.db.query_lang.Or
});
saturn.db.query_lang.OrderBy = $hxClasses["saturn.db.query_lang.OrderBy"] = function() {
	saturn.db.query_lang.Token.call(this,null);
};
saturn.db.query_lang.OrderBy.__name__ = ["saturn","db","query_lang","OrderBy"];
saturn.db.query_lang.OrderBy.__super__ = saturn.db.query_lang.Token;
saturn.db.query_lang.OrderBy.prototype = $extend(saturn.db.query_lang.Token.prototype,{
	__class__: saturn.db.query_lang.OrderBy
});
saturn.db.query_lang.OrderByItem = $hxClasses["saturn.db.query_lang.OrderByItem"] = function(token,descending) {
	if(descending == null) {
		descending = false;
	}
	this.descending = false;
	this.descending = descending;
	saturn.db.query_lang.Token.call(this,[token]);
};
saturn.db.query_lang.OrderByItem.__name__ = ["saturn","db","query_lang","OrderByItem"];
saturn.db.query_lang.OrderByItem.__super__ = saturn.db.query_lang.Token;
saturn.db.query_lang.OrderByItem.prototype = $extend(saturn.db.query_lang.Token.prototype,{
	descending: null
	,__class__: saturn.db.query_lang.OrderByItem
});
saturn.db.query_lang.Plus = $hxClasses["saturn.db.query_lang.Plus"] = function(value) {
	if(value == null) {
		saturn.db.query_lang.Operator.call(this,null);
	} else {
		saturn.db.query_lang.Operator.call(this,value);
	}
};
saturn.db.query_lang.Plus.__name__ = ["saturn","db","query_lang","Plus"];
saturn.db.query_lang.Plus.__super__ = saturn.db.query_lang.Operator;
saturn.db.query_lang.Plus.prototype = $extend(saturn.db.query_lang.Operator.prototype,{
	__class__: saturn.db.query_lang.Plus
});
saturn.db.query_lang.Query = $hxClasses["saturn.db.query_lang.Query"] = function(provider) {
	saturn.db.query_lang.Token.call(this,null);
	this.provider = provider;
	this.selectToken = new saturn.db.query_lang.Select();
	this.whereToken = new saturn.db.query_lang.Where();
	this.fromToken = new saturn.db.query_lang.From();
	this.groupToken = new saturn.db.query_lang.Group();
	this.orderToken = new saturn.db.query_lang.OrderBy();
};
saturn.db.query_lang.Query.__name__ = ["saturn","db","query_lang","Query"];
saturn.db.query_lang.Query.deserialise = function(querySer) {
	var clone = haxe.Unserializer.run(querySer);
	saturn.db.query_lang.Query.deserialiseToken(clone);
	return clone;
};
saturn.db.query_lang.Query.deserialiseToken = function(token) {
	if(token == null) {
		return;
	}
	if(token.getTokens() != null) {
		var _g = 0;
		var _g1 = token.getTokens();
		while(_g < _g1.length) {
			var token1 = _g1[_g];
			++_g;
			saturn.db.query_lang.Query.deserialiseToken(token1);
		}
	}
	if(Std["is"](token,saturn.db.query_lang.Query)) {
		var qToken = js.Boot.__cast(token , saturn.db.query_lang.Query);
		qToken.provider = null;
	}
};
saturn.db.query_lang.Query.startsWith = function(value) {
	var t = new saturn.db.query_lang.Like();
	t.add(new saturn.db.query_lang.Value(value).concat("%"));
	return t;
};
saturn.db.query_lang.Query.getByExample = function(provider,example,cb) {
	var q = new saturn.db.query_lang.Query(provider);
	q.addExample(example);
	q.run(cb);
	return q;
};
saturn.db.query_lang.Query.__super__ = saturn.db.query_lang.Token;
saturn.db.query_lang.Query.prototype = $extend(saturn.db.query_lang.Token.prototype,{
	selectToken: null
	,fromToken: null
	,whereToken: null
	,groupToken: null
	,orderToken: null
	,provider: null
	,rawResults: null
	,pageOn: null
	,pageSize: null
	,lastPagedRowValue: null
	,results: null
	,error: null
	,setPageOnToken: function(t) {
		this.pageOn = t;
	}
	,getPageOnToken: function() {
		return this.pageOn;
	}
	,setLastPagedRowValue: function(t) {
		this.lastPagedRowValue = t;
	}
	,getLastPagedRowValue: function() {
		return this.lastPagedRowValue;
	}
	,setPageSize: function(t) {
		this.pageSize = t;
	}
	,getPageSize: function() {
		return this.pageSize;
	}
	,isPaging: function() {
		if(this.pageOn != null) {
			return this.pageSize != null;
		} else {
			return false;
		}
	}
	,configurePaging: function(pageOn,pageSize) {
		this.pageOn = pageOn;
		this.pageSize = pageSize;
	}
	,fetchRawResults: function() {
		this.rawResults = true;
	}
	,bindResults: function() {
		return !this.rawResults;
	}
	,getTokens: function() {
		var tokens = [];
		var checkTokens = [this.selectToken,this.whereToken];
		var _g = 0;
		while(_g < checkTokens.length) {
			var token = checkTokens[_g];
			++_g;
			this.addClassToken(token);
		}
		if(this.fromToken.getTokens() != null) {
			var seen = new haxe.ds.StringMap();
			var tokens1 = [];
			var _g1 = 0;
			var _g11 = this.fromToken.getTokens();
			while(_g1 < _g11.length) {
				var token1 = _g11[_g1];
				++_g1;
				if(Std["is"](token1,saturn.db.query_lang.ClassToken)) {
					var cToken = js.Boot.__cast(token1 , saturn.db.query_lang.ClassToken);
					if(cToken.getClass() != null) {
						var clazzName = cToken.getClass();
						if(!seen.exists(clazzName)) {
							tokens1.push(cToken);
							seen.set(clazzName,"");
						}
					} else {
						tokens1.push(cToken);
					}
				} else {
					tokens1.push(token1);
				}
			}
			this.fromToken.setTokens(tokens1);
			saturn.core.Util.print("Num targets" + this.fromToken.getTokens().length);
		}
		tokens.push(this.selectToken);
		tokens.push(this.fromToken);
		if(this.whereToken.getTokens() != null && this.whereToken.getTokens().length > 0) {
			tokens.push(this.whereToken);
			if(this.isPaging() && this.lastPagedRowValue != null) {
				tokens.push(new saturn.db.query_lang.And());
				tokens.push(this.pageOn);
				tokens.push(new saturn.db.query_lang.GreaterThan());
				tokens.push(this.lastPagedRowValue);
			}
		}
		if(this.groupToken.getTokens() != null && this.groupToken.getTokens().length > 0) {
			tokens.push(this.groupToken);
		}
		if(this.orderToken.getTokens() != null && this.orderToken.getTokens().length > 0) {
			tokens.push(this.orderToken);
		}
		if(this.isPaging()) {
			tokens.push(new saturn.db.query_lang.OrderBy());
			tokens.push(new saturn.db.query_lang.OrderByItem(this.pageOn));
			tokens.push(new saturn.db.query_lang.Limit(this.pageSize));
		}
		if(this.tokens != null && this.tokens.length > 0) {
			var _g2 = 0;
			var _g12 = this.tokens;
			while(_g2 < _g12.length) {
				var token2 = _g12[_g2];
				++_g2;
				tokens.push(token2);
			}
		}
		return tokens;
	}
	,or: function() {
		this.getWhere().addToken(new saturn.db.query_lang.Or());
	}
	,and: function() {
		this.getWhere().addToken(new saturn.db.query_lang.And());
	}
	,equals: function(clazz,field,value) {
		this.getWhere().addToken(new saturn.db.query_lang.Field(clazz,field));
		this.getWhere().addToken(new saturn.db.query_lang.Equals());
		this.getWhere().addToken(new saturn.db.query_lang.Value(value));
	}
	,select: function(clazz,field) {
		this.getSelect().addToken(new saturn.db.query_lang.Field(clazz,field));
	}
	,getSelect: function() {
		return this.selectToken;
	}
	,getFrom: function() {
		return this.fromToken;
	}
	,getWhere: function() {
		return this.whereToken;
	}
	,getGroup: function() {
		return this.groupToken;
	}
	,clone: function() {
		var str = this.serialise();
		return saturn.db.query_lang.Query.deserialise(str);
	}
	,serialise: function() {
		var keepMe = this.provider;
		this.provider = null;
		var newMe = haxe.Serializer.run(this);
		this.provider = keepMe;
		return newMe;
	}
	,__getstate__: function() {
		var state = Syntax.pythonCode("dict(self.__dict__)");
		Syntax.pythonCode("del state['provider']");
		return state;
	}
	,run: function(cb) {
		var _gthis = this;
		var clone = this.clone();
		clone.provider = null;
		clone.getTokens();
		this.provider.query(clone,function(objs,err) {
			if(err == null && objs.length > 0 && _gthis.isPaging()) {
				var fieldName = null;
				if(_gthis.pageOn.name != null) {
					fieldName = _gthis.pageOn.name;
				} else if(Std["is"](_gthis.pageOn,saturn.db.query_lang.Field)) {
					var fToken = js.Boot.__cast(_gthis.pageOn , saturn.db.query_lang.Field);
					fieldName = fToken.getAttributeName();
				}
				if(fieldName == null) {
					err = "Unable to determine value of last paged row";
				} else {
					var tmp = Reflect.field(objs[objs.length - 1],fieldName);
					_gthis.setLastPagedRowValue(new saturn.db.query_lang.Value(tmp));
				}
			}
			_gthis.results = objs;
			_gthis.error = err;
			if(cb != null) {
				cb(objs,err);
			}
		});
	}
	,getSelectClassList: function() {
		var set = new haxe.ds.StringMap();
		var _g = 0;
		var _g1 = this.selectToken.getTokens();
		while(_g < _g1.length) {
			var token = _g1[_g];
			++_g;
			if(Std["is"](token,saturn.db.query_lang.Field)) {
				var cToken = js.Boot.__cast(token , saturn.db.query_lang.Field);
				var clazz = cToken.getClass();
				if(clazz != null) {
					set.set(clazz,clazz);
				}
			}
		}
		var list = [];
		var className = set.keys();
		while(className.hasNext()) {
			var className1 = className.next();
			list.push(set.get(className1));
		}
		return list;
	}
	,unbindFields: function(token) {
		if(token == null) {
			return;
		}
		if(Std["is"](token,saturn.db.query_lang.Field)) {
			var cToken = js.Boot.__cast(token , saturn.db.query_lang.Field);
			var clazz = cToken.getClass();
			var field = cToken.getAttributeName();
			var model = this.provider.getModelByStringName(clazz);
			if(model != null) {
				if(field != "*") {
					var unboundFieldName = model.unbindFieldName(field);
					cToken.setAttributeName(unboundFieldName);
				}
			}
		}
		if(token.getTokens() != null) {
			var _g = 0;
			var _g1 = token.getTokens();
			while(_g < _g1.length) {
				var token1 = _g1[_g];
				++_g;
				this.unbindFields(token1);
			}
		}
	}
	,addClassToken: function(token) {
		if(Std["is"](token,saturn.db.query_lang.Query) || token == null) {
			return;
		}
		if(Std["is"](token,saturn.db.query_lang.Field)) {
			var fToken = js.Boot.__cast(token , saturn.db.query_lang.Field);
			if(fToken.getClass() != null) {
				var cToken = new saturn.db.query_lang.ClassToken(fToken.getClass());
				if(fToken.clazzAlias != null) {
					cToken.name = fToken.clazzAlias;
				}
				this.fromToken.addToken(cToken);
			}
		}
		if(token.getTokens() != null) {
			var _g = 0;
			var _g1 = token.getTokens();
			while(_g < _g1.length) {
				var token1 = _g1[_g];
				++_g;
				this.addClassToken(token1);
			}
		}
	}
	,addExample: function(obj,fieldList) {
		var clazz = Type.getClass(obj);
		var model = this.provider.getModel(clazz);
		if(fieldList != null) {
			if(fieldList.length > 0) {
				var _g = 0;
				while(_g < fieldList.length) {
					var field = fieldList[_g];
					++_g;
					this.getSelect().addToken(new saturn.db.query_lang.Field(clazz,field));
				}
			}
		} else {
			this.getSelect().addToken(new saturn.db.query_lang.Field(clazz,"*"));
		}
		var fields = model.getAttributes();
		var hasPrevious = false;
		this.getWhere().addToken(new saturn.db.query_lang.StartBlock());
		var _g1 = 0;
		var _g2 = fields.length;
		while(_g1 < _g2) {
			var i = _g1++;
			var field1 = fields[i];
			var value = Reflect.field(obj,field1);
			if(value != null) {
				if(hasPrevious) {
					this.getWhere().addToken(new saturn.db.query_lang.And());
				}
				var fieldToken = new saturn.db.query_lang.Field(clazz,field1);
				this.getWhere().addToken(fieldToken);
				if(Std["is"](value,saturn.db.query_lang.IsNull)) {
					saturn.core.Util.print("Found NULL");
					this.getWhere().addToken(new saturn.db.query_lang.IsNull());
				} else if(Std["is"](value,saturn.db.query_lang.IsNotNull)) {
					this.getWhere().addToken(new saturn.db.query_lang.IsNotNull());
				} else if(Std["is"](value,saturn.db.query_lang.Operator)) {
					this.getWhere().addToken(value);
				} else {
					this.getWhere().addToken(new saturn.db.query_lang.Equals());
					if(Std["is"](value,saturn.db.query_lang.Token)) {
						this.getWhere().addToken(value);
					} else {
						saturn.core.Util.print("Found value" + Type.getClassName(Type.getClass(value)));
						this.getWhere().addToken(new saturn.db.query_lang.Value(value));
					}
				}
				hasPrevious = true;
			}
		}
		this.getWhere().addToken(new saturn.db.query_lang.EndBlock());
	}
	,getResults: function() {
		return this.results;
	}
	,hasResults: function() {
		if(this.results != null) {
			return this.results.length > 0;
		} else {
			return false;
		}
	}
	,getError: function() {
		return this.error;
	}
	,__class__: saturn.db.query_lang.Query
});
saturn.db.query_lang.QueryTests = $hxClasses["saturn.db.query_lang.QueryTests"] = function() {
};
saturn.db.query_lang.QueryTests.__name__ = ["saturn","db","query_lang","QueryTests"];
saturn.db.query_lang.QueryTests.prototype = {
	test1: function() {
		var query = new saturn.db.query_lang.Query(saturn.core.Util.getProvider());
		query.getSelect().addToken(new saturn.db.query_lang.Field(saturn.core.domain.SgcAllele,"alleleId",null));
		var visitor = new saturn.db.query_lang.SQLVisitor(saturn.core.Util.getProvider());
		visitor.translate(query);
	}
	,__class__: saturn.db.query_lang.QueryTests
};
saturn.db.query_lang.QueryVisitor = $hxClasses["saturn.db.query_lang.QueryVisitor"] = function() { };
saturn.db.query_lang.QueryVisitor.__name__ = ["saturn","db","query_lang","QueryVisitor"];
saturn.db.query_lang.QueryVisitor.prototype = {
	translateQuery: null
	,__class__: saturn.db.query_lang.QueryVisitor
};
saturn.db.query_lang.RegexpLike = $hxClasses["saturn.db.query_lang.RegexpLike"] = function(field,expression) {
	saturn.db.query_lang.Function.call(this,[field,expression]);
};
saturn.db.query_lang.RegexpLike.__name__ = ["saturn","db","query_lang","RegexpLike"];
saturn.db.query_lang.RegexpLike.__super__ = saturn.db.query_lang.Function;
saturn.db.query_lang.RegexpLike.prototype = $extend(saturn.db.query_lang.Function.prototype,{
	__class__: saturn.db.query_lang.RegexpLike
});
saturn.db.query_lang.SQLVisitor = $hxClasses["saturn.db.query_lang.SQLVisitor"] = function(provider,valPos,aliasToGenerated,nextAliasId) {
	if(nextAliasId == null) {
		nextAliasId = 0;
	}
	if(valPos == null) {
		valPos = 1;
	}
	this.provider = provider;
	this.values = [];
	this.valPos = valPos;
	if(aliasToGenerated == null) {
		this.aliasToGenerated = new haxe.ds.StringMap();
	} else {
		this.aliasToGenerated = aliasToGenerated;
	}
	this.nextAliasId = nextAliasId;
};
saturn.db.query_lang.SQLVisitor.__name__ = ["saturn","db","query_lang","SQLVisitor"];
saturn.db.query_lang.SQLVisitor.prototype = {
	provider: null
	,values: null
	,valPos: null
	,nextAliasId: null
	,aliasToGenerated: null
	,generatedToAlias: null
	,generateId: function(alias,baseValue) {
		if(baseValue == null) {
			baseValue = "ALIAS_";
		}
		if(this.aliasToGenerated.exists(alias)) {
			return this.aliasToGenerated.get(alias);
		}
		this.nextAliasId++;
		var id = baseValue + this.nextAliasId;
		this.aliasToGenerated.set(alias,id);
		saturn.core.Util.debug("Mapping" + alias + " to  " + id);
		return id;
	}
	,getNextValuePosition: function() {
		return this.valPos;
	}
	,getNextAliasId: function() {
		return this.nextAliasId;
	}
	,getValues: function() {
		return this.values;
	}
	,translate: function(token) {
		var sqlTranslation = "";
		if(token != null) {
			if(Std["is"](token,saturn.db.query_lang.Query)) {
				var query = js.Boot.__cast(token , saturn.db.query_lang.Query);
				this.postProcess(query);
				var sqlQuery = "";
				var tokens = query.getTokens();
				var _g = 0;
				while(_g < tokens.length) {
					var token1 = tokens[_g];
					++_g;
					sqlTranslation += Std.string(this.translate(token1));
				}
			} else {
				var nestedTranslation = "";
				if(token.getTokens() != null) {
					var tokenTranslations = [];
					if(Std["is"](token,saturn.db.query_lang.Instr)) {
						if(this.provider.getProviderType() == "SQLITE" || this.provider.getProviderType() == "MYSQL") {
							token.tokens.pop();
							token.tokens.pop();
						}
					}
					var _g1 = 0;
					var _g11 = token.getTokens();
					while(_g1 < _g11.length) {
						var token2 = _g11[_g1];
						++_g1;
						if(Std["is"](token2,saturn.db.query_lang.Query)) {
							var subVisitor = new saturn.db.query_lang.SQLVisitor(this.provider,this.valPos,this.aliasToGenerated,this.nextAliasId);
							this.valPos = subVisitor.getNextValuePosition();
							this.nextAliasId = subVisitor.getNextAliasId();
							var generatedAlias = "";
							if(token2.name != null && token2.name != "") {
								generatedAlias = this.generateId(token2.name);
							}
							tokenTranslations.push("(" + Std.string(subVisitor.translate(token2)) + ") " + generatedAlias + " ");
							var _g2 = 0;
							var _g3 = subVisitor.getValues();
							while(_g2 < _g3.length) {
								var value = _g3[_g2];
								++_g2;
								this.values.push(value);
							}
						} else {
							tokenTranslations.push(this.translate(token2));
						}
					}
					var joinSep = " ";
					if(Std["is"](token,saturn.db.query_lang.Select) || Std["is"](token,saturn.db.query_lang.From) || Std["is"](token,saturn.db.query_lang.Function) || Std["is"](token,saturn.db.query_lang.Group) || Std["is"](token,saturn.db.query_lang.OrderBy)) {
						joinSep = ",";
					}
					nestedTranslation = tokenTranslations.join(joinSep);
				}
				if(Std["is"](token,saturn.db.query_lang.Value)) {
					var cToken = js.Boot.__cast(token , saturn.db.query_lang.Value);
					this.values.push(cToken.getValue());
					sqlTranslation += " " + this.getParameterNotation(this.valPos++) + " " + nestedTranslation + " ";
				} else if(Std["is"](token,saturn.db.query_lang.Function)) {
					if(Std["is"](token,saturn.db.query_lang.Trim)) {
						if(this.provider.getProviderType() == "SQLITE") {
							sqlTranslation += "ltrim(" + nestedTranslation + ",'0'" + ")";
						} else {
							sqlTranslation += "Trim( leading '0' from " + nestedTranslation + ")";
						}
					} else {
						var funcName = "";
						var specialCastAsInt = false;
						if(Std["is"](token,saturn.db.query_lang.Max)) {
							funcName = "MAX";
						} else if(Std["is"](token,saturn.db.query_lang.Count)) {
							funcName = "COUNT";
						} else if(Std["is"](token,saturn.db.query_lang.Instr)) {
							funcName = "INSTR";
						} else if(Std["is"](token,saturn.db.query_lang.Substr)) {
							funcName = "SUBSTR";
						} else if(Std["is"](token,saturn.db.query_lang.Length)) {
							funcName = "LENGTH";
						} else if(Std["is"](token,saturn.db.query_lang.Concat)) {
							funcName = "CONCAT";
						} else if(Std["is"](token,saturn.db.query_lang.RegexpLike)) {
							funcName = "REGEXP_LIKE";
						} else if(Std["is"](token,saturn.db.query_lang.ToNumber)) {
							if(this.provider.getProviderType() == "MYSQL") {
								funcName = "cast";
								specialCastAsInt = true;
							} else {
								funcName = "to_number";
							}
						} else if(Std["is"](token,saturn.db.query_lang.CastAsInt)) {
							funcName = "cast";
							specialCastAsInt = true;
						}
						if(!specialCastAsInt) {
							sqlTranslation += funcName + "( " + nestedTranslation + " )";
						} else {
							sqlTranslation += funcName + "( " + nestedTranslation + " as int)";
						}
					}
				} else if(Std["is"](token,saturn.db.query_lang.Select)) {
					sqlTranslation += " SELECT " + nestedTranslation;
				} else if(Std["is"](token,saturn.db.query_lang.Field)) {
					var cToken1 = js.Boot.__cast(token , saturn.db.query_lang.Field);
					var clazzName = cToken1.getClass();
					var fieldPrefix = null;
					var fieldName = null;
					if(cToken1.clazzAlias != null) {
						fieldPrefix = this.generateId(cToken1.clazzAlias);
					}
					if(clazzName != null) {
						var model = this.provider.getModelByStringName(clazzName);
						fieldName = model.getSqlColumn(cToken1.getAttributeName());
						if(fieldPrefix == null) {
							var tableName = model.getTableName();
							var schemaName = model.getSchemaName();
							fieldPrefix = this.provider.generateQualifiedName(schemaName,tableName);
						}
					} else {
						fieldName = this.generateId(cToken1.attributeName);
					}
					if(cToken1.getAttributeName() == "*") {
						sqlTranslation += fieldPrefix + ".*";
					} else {
						sqlTranslation += fieldPrefix + "." + fieldName;
					}
					sqlTranslation += " " + nestedTranslation + " ";
				} else if(Std["is"](token,saturn.db.query_lang.Where)) {
					sqlTranslation += " WHERE " + nestedTranslation;
				} else if(Std["is"](token,saturn.db.query_lang.Group)) {
					sqlTranslation += " GROUP BY " + nestedTranslation;
				} else if(Std["is"](token,saturn.db.query_lang.From)) {
					sqlTranslation += " FROM " + nestedTranslation;
				} else if(Std["is"](token,saturn.db.query_lang.OrderBy)) {
					sqlTranslation += " ORDER BY " + nestedTranslation;
				} else if(Std["is"](token,saturn.db.query_lang.OrderByItem)) {
					var oToken = js.Boot.__cast(token , saturn.db.query_lang.OrderByItem);
					var direction = "ASC";
					if(oToken.descending) {
						direction = "DESC";
					}
					sqlTranslation += nestedTranslation + " " + direction;
				} else if(Std["is"](token,saturn.db.query_lang.ClassToken)) {
					var cToken2 = js.Boot.__cast(token , saturn.db.query_lang.ClassToken);
					var model1 = this.provider.getModelByStringName(cToken2.getClass());
					var tableName1 = model1.getTableName();
					var schemaName1 = model1.getSchemaName();
					var name = this.provider.generateQualifiedName(schemaName1,tableName1);
					sqlTranslation += " " + name + " ";
				} else if(Std["is"](token,saturn.db.query_lang.Operator)) {
					if(Std["is"](token,saturn.db.query_lang.And)) {
						sqlTranslation += " AND " + nestedTranslation;
					} else if(Std["is"](token,saturn.db.query_lang.Plus)) {
						sqlTranslation += " + " + nestedTranslation;
					} else if(Std["is"](token,saturn.db.query_lang.Minus)) {
						sqlTranslation += " - " + nestedTranslation;
					} else if(Std["is"](token,saturn.db.query_lang.Or)) {
						sqlTranslation += " OR " + nestedTranslation;
					} else if(Std["is"](token,saturn.db.query_lang.Equals)) {
						sqlTranslation += " = " + nestedTranslation;
					} else if(Std["is"](token,saturn.db.query_lang.IsNull)) {
						sqlTranslation += " IS NULL " + nestedTranslation;
					} else if(Std["is"](token,saturn.db.query_lang.IsNotNull)) {
						sqlTranslation += " IS NOT NULL " + nestedTranslation;
					} else if(Std["is"](token,saturn.db.query_lang.GreaterThan)) {
						sqlTranslation += " > " + nestedTranslation;
					} else if(Std["is"](token,saturn.db.query_lang.GreaterThanOrEqualTo)) {
						sqlTranslation += " >= " + nestedTranslation;
					} else if(Std["is"](token,saturn.db.query_lang.LessThan)) {
						sqlTranslation += " < " + nestedTranslation;
					} else if(Std["is"](token,saturn.db.query_lang.LessThanOrEqualTo)) {
						sqlTranslation += " <= " + nestedTranslation;
					} else if(Std["is"](token,saturn.db.query_lang.In)) {
						sqlTranslation += " IN " + nestedTranslation;
					} else if(Std["is"](token,saturn.db.query_lang.Concat)) {
						sqlTranslation += " || " + nestedTranslation;
					} else if(Std["is"](token,saturn.db.query_lang.Like)) {
						sqlTranslation += " LIKE " + nestedTranslation;
					}
				} else if(Std["is"](token,saturn.db.query_lang.ValueList)) {
					var cToken3 = js.Boot.__cast(token , saturn.db.query_lang.ValueList);
					var values = cToken3.getValues();
					var itemStrings = [];
					var _g12 = 0;
					var _g4 = values.length;
					while(_g12 < _g4) {
						var i = _g12++;
						itemStrings.push(this.getParameterNotation(this.valPos++));
						values.push(values[i]);
					}
					sqlTranslation += " ( " + itemStrings.join(",") + " ) ";
				} else if(Std["is"](token,saturn.db.query_lang.Limit)) {
					var cToken4 = js.Boot.__cast(token , saturn.db.query_lang.Limit);
					sqlTranslation += this.getLimitClause(nestedTranslation);
				} else if(Std["is"](token,saturn.db.query_lang.StartBlock)) {
					sqlTranslation += " ( ";
				} else if(Std["is"](token,saturn.db.query_lang.EndBlock)) {
					sqlTranslation += " ) ";
				} else {
					sqlTranslation += " " + nestedTranslation + " ";
				}
			}
		}
		if(token != null && token.name != null && !Std["is"](token,saturn.db.query_lang.Query)) {
			var generatedAlias1 = this.generateId(token.name);
			sqlTranslation += "  \"" + generatedAlias1 + "\"";
		}
		return sqlTranslation;
	}
	,getProcessedResults: function(results) {
		if(results.length > 0) {
			this.generatedToAlias = new haxe.ds.StringMap();
			var generated = this.aliasToGenerated.keys();
			while(generated.hasNext()) {
				var generated1 = generated.next();
				this.generatedToAlias.set(this.aliasToGenerated.get(generated1),generated1);
			}
			var fields = Reflect.fields(results[0]);
			var toRename = [];
			var _g = 0;
			while(_g < fields.length) {
				var field = fields[_g];
				++_g;
				if(this.generatedToAlias.exists(field)) {
					toRename.push(field);
				}
			}
			if(toRename.length > 0) {
				var _g1 = 0;
				while(_g1 < results.length) {
					var row = results[_g1];
					++_g1;
					var _g11 = 0;
					while(_g11 < toRename.length) {
						var field1 = toRename[_g11];
						++_g11;
						var val = Reflect.field(row,field1);
						Reflect.deleteField(row,field1);
						Reflect.setField(row,this.generatedToAlias.get(field1),val);
					}
				}
			}
		}
		return results;
	}
	,getParameterNotation: function(i) {
		if(this.provider.getProviderType() == "ORACLE") {
			return ":" + i;
		} else if(this.provider.getProviderType() == "MYSQL") {
			return "?";
		} else if(this.provider.getProviderType() == "PGSQL") {
			return "$" + i;
		} else {
			return "?";
		}
	}
	,postProcess: function(query) {
		if(this.provider.getProviderType() == "ORACLE") {
			if(query.tokens != null && query.tokens.length > 0) {
				var _g = 0;
				var _g1 = query.tokens;
				while(_g < _g1.length) {
					var token = _g1[_g];
					++_g;
					if(Std["is"](token,saturn.db.query_lang.Limit)) {
						if(query.whereToken == null) {
							query.whereToken = new saturn.db.query_lang.Where();
						}
						var where = query.getWhere();
						where.add(token);
						HxOverrides.remove(query.tokens,token);
					}
				}
			}
		}
	}
	,getLimitClause: function(txt) {
		if(this.provider.getProviderType() == "ORACLE") {
			return " ROWNUM < " + txt;
		} else if(this.provider.getProviderType() == "MYSQL") {
			return " limit " + txt;
		} else if(this.provider.getProviderType() == "PGSQL") {
			return " LIMIT " + txt;
		} else {
			return " limit " + txt;
		}
	}
	,buildSqlInClause: function(numIds,nextVal,func) {
		if(nextVal == null) {
			nextVal = 0;
		}
		var inClause = new StringBuf();
		inClause.add("IN(");
		inClause.add(")");
		return inClause.toString();
	}
	,__class__: saturn.db.query_lang.SQLVisitor
};
saturn.db.query_lang.Select = $hxClasses["saturn.db.query_lang.Select"] = function() {
	saturn.db.query_lang.Token.call(this,null);
};
saturn.db.query_lang.Select.__name__ = ["saturn","db","query_lang","Select"];
saturn.db.query_lang.Select.__super__ = saturn.db.query_lang.Token;
saturn.db.query_lang.Select.prototype = $extend(saturn.db.query_lang.Token.prototype,{
	__class__: saturn.db.query_lang.Select
});
saturn.db.query_lang.StartBlock = $hxClasses["saturn.db.query_lang.StartBlock"] = function() {
	saturn.db.query_lang.Token.call(this,null);
};
saturn.db.query_lang.StartBlock.__name__ = ["saturn","db","query_lang","StartBlock"];
saturn.db.query_lang.StartBlock.__super__ = saturn.db.query_lang.Token;
saturn.db.query_lang.StartBlock.prototype = $extend(saturn.db.query_lang.Token.prototype,{
	__class__: saturn.db.query_lang.StartBlock
});
saturn.db.query_lang.Substr = $hxClasses["saturn.db.query_lang.Substr"] = function(value,position,length) {
	saturn.db.query_lang.Function.call(this,[value,position,length]);
};
saturn.db.query_lang.Substr.__name__ = ["saturn","db","query_lang","Substr"];
saturn.db.query_lang.Substr.__super__ = saturn.db.query_lang.Function;
saturn.db.query_lang.Substr.prototype = $extend(saturn.db.query_lang.Function.prototype,{
	__class__: saturn.db.query_lang.Substr
});
saturn.db.query_lang.ToNumber = $hxClasses["saturn.db.query_lang.ToNumber"] = function(token) {
	saturn.db.query_lang.Function.call(this,[token]);
};
saturn.db.query_lang.ToNumber.__name__ = ["saturn","db","query_lang","ToNumber"];
saturn.db.query_lang.ToNumber.__super__ = saturn.db.query_lang.Function;
saturn.db.query_lang.ToNumber.prototype = $extend(saturn.db.query_lang.Function.prototype,{
	__class__: saturn.db.query_lang.ToNumber
});
saturn.db.query_lang.Trim = $hxClasses["saturn.db.query_lang.Trim"] = function(value) {
	saturn.db.query_lang.Function.call(this,[value]);
};
saturn.db.query_lang.Trim.__name__ = ["saturn","db","query_lang","Trim"];
saturn.db.query_lang.Trim.__super__ = saturn.db.query_lang.Function;
saturn.db.query_lang.Trim.prototype = $extend(saturn.db.query_lang.Function.prototype,{
	__class__: saturn.db.query_lang.Trim
});
saturn.db.query_lang.Value = $hxClasses["saturn.db.query_lang.Value"] = function(value) {
	saturn.db.query_lang.Token.call(this,null);
	this.value = value;
};
saturn.db.query_lang.Value.__name__ = ["saturn","db","query_lang","Value"];
saturn.db.query_lang.Value.__super__ = saturn.db.query_lang.Token;
saturn.db.query_lang.Value.prototype = $extend(saturn.db.query_lang.Token.prototype,{
	value: null
	,getValue: function() {
		return this.value;
	}
	,__class__: saturn.db.query_lang.Value
});
saturn.db.query_lang.ValueList = $hxClasses["saturn.db.query_lang.ValueList"] = function(values) {
	this.values = values;
	saturn.db.query_lang.Token.call(this,null);
};
saturn.db.query_lang.ValueList.__name__ = ["saturn","db","query_lang","ValueList"];
saturn.db.query_lang.ValueList.__super__ = saturn.db.query_lang.Token;
saturn.db.query_lang.ValueList.prototype = $extend(saturn.db.query_lang.Token.prototype,{
	values: null
	,getValues: function() {
		return this.values;
	}
	,__class__: saturn.db.query_lang.ValueList
});
saturn.db.query_lang.Where = $hxClasses["saturn.db.query_lang.Where"] = function() {
	saturn.db.query_lang.Token.call(this,null);
};
saturn.db.query_lang.Where.__name__ = ["saturn","db","query_lang","Where"];
saturn.db.query_lang.Where.__super__ = saturn.db.query_lang.Token;
saturn.db.query_lang.Where.prototype = $extend(saturn.db.query_lang.Token.prototype,{
	__class__: saturn.db.query_lang.Where
});
saturn.util.CollectionUtils = $hxClasses["saturn.util.CollectionUtils"] = function() { };
saturn.util.CollectionUtils.__name__ = ["saturn","util","CollectionUtils"];
saturn.util.MathUtils = $hxClasses["saturn.util.MathUtils"] = function() { };
saturn.util.MathUtils.__name__ = ["saturn","util","MathUtils"];
saturn.util.MathUtils.logX = function(num,x) {
	return Math.log(num) / Math.log(x);
};
saturn.util.MathUtils.sigFigs = function(num,figs) {
	var places = Std["int"](Math.pow(10,figs));
	var forRound = num * places;
	var afterRound = Math.round(forRound);
	return afterRound / places;
};
saturn.util.StringUtils = $hxClasses["saturn.util.StringUtils"] = function() { };
saturn.util.StringUtils.__name__ = ["saturn","util","StringUtils"];
saturn.util.StringUtils.getRepeat = function(txt,count) {
	var stringBuf = new StringBuf();
	var _g1 = 0;
	var _g = count;
	while(_g1 < _g) {
		var i = _g1++;
		stringBuf.add(txt);
	}
	return stringBuf.toString();
};
saturn.util.StringUtils.reverse = function(txt) {
	var cols = txt.split("");
	cols.reverse();
	return cols.join("");
};
saturn.util.StringUtils.__super__ = StringTools;
saturn.util.StringUtils.prototype = $extend(StringTools.prototype,{
	__class__: saturn.util.StringUtils
});
if(!saturn.workflow) saturn.workflow = {};
saturn.workflow.Chain = $hxClasses["saturn.workflow.Chain"] = function() {
	this.items = [];
	this.pos = 0;
	this.provider = saturn.core.Util.getProvider();
};
saturn.workflow.Chain.__name__ = ["saturn","workflow","Chain"];
saturn.workflow.Chain.prototype = {
	items: null
	,pos: null
	,provider: null
	,done: null
	,add: function(item,config) {
		this.items.push(new saturn.workflow.ChainUnit(item,config));
	}
	,next: function() {
		var _gthis = this;
		if(this.pos <= this.items.length - 1) {
			var unit = this.items[this.pos++];
			var handler = function(resp) {
				saturn.core.Util.debug("Workflow returning");
				var error = resp.getError();
				if(error != null) {
					_gthis.die(error);
					return;
				} else {
					unit.getConfig().setResponse(resp);
					_gthis.next();
				}
			};
			var config = unit.getConfig();
			if(this.pos > 1) {
				config.setData(this.items[this.pos - 2].getConfig().getResponse());
			}
			if(unit.isDirectMethod()) {
				(unit.getDirectMethod())(config,handler);
			} else {
				saturn.core.Util.debug("Workflow running unit: " + unit.getQName());
				this.provider.getByNamedQuery("saturn.workflow",[unit.getQName(),config],unit.getResponseClass(),true,function(objs,error1) {
					if(error1 != null) {
						_gthis.die(error1);
					} else {
						handler(objs[0]);
					}
				});
			}
		} else {
			this.done(null);
		}
	}
	,start: function(cb) {
		this.done = cb;
		this.next();
	}
	,die: function(error) {
		this.done(error);
	}
	,__class__: saturn.workflow.Chain
};
saturn.workflow.ChainUnit = $hxClasses["saturn.workflow.ChainUnit"] = function(item,config) {
	this.config = config;
	this.method = null;
	if(typeof(item) == "string") {
		var qName = item;
		var lastI = qName.lastIndexOf(".");
		this.qualifiedClassName = qName.substring(0,lastI);
		this.methodName = qName.substring(lastI + 1,qName.length);
		this.packageName = this.qualifiedClassName.substring(0,this.qualifiedClassName.lastIndexOf("."));
		var classShortName = this.qualifiedClassName.substring(this.qualifiedClassName.lastIndexOf(".") + 1,this.qualifiedClassName.length);
		this.qualifiedName = qName;
		this.responseClassName = this.packageName + "." + classShortName + "Response";
	} else {
		this.method = item;
	}
};
saturn.workflow.ChainUnit.__name__ = ["saturn","workflow","ChainUnit"];
saturn.workflow.ChainUnit.prototype = {
	qualifiedName: null
	,packageName: null
	,qualifiedClassName: null
	,methodName: null
	,responseClassName: null
	,config: null
	,method: null
	,isDirectMethod: function() {
		return this.method != null;
	}
	,getDirectMethod: function() {
		return this.method;
	}
	,setConfig: function(config) {
		this.config = config;
	}
	,getQName: function() {
		return this.qualifiedName;
	}
	,getMethodName: function() {
		return this.methodName;
	}
	,getClassName: function() {
		return this.qualifiedClassName;
	}
	,getResponseClass: function() {
		return Type.resolveClass(this.responseClassName);
	}
	,getConfig: function() {
		return this.config;
	}
	,__class__: saturn.workflow.ChainUnit
};
saturn.workflow.DBtoFASTA = $hxClasses["saturn.workflow.DBtoFASTA"] = function(config,cb) {
	this.config = config;
	this.cb = cb;
	this.response = new saturn.workflow.DBtoFASTAResponse(null);
};
saturn.workflow.DBtoFASTA.__name__ = ["saturn","workflow","DBtoFASTA"];
saturn.workflow.DBtoFASTA.query = function(config,cb) {
	var runner = new saturn.workflow.DBtoFASTA(config,cb);
	runner.run();
};
saturn.workflow.DBtoFASTA.prototype = {
	config: null
	,cb: null
	,response: null
	,run: function() {
		var _gthis = this;
		var p = saturn.client.core.CommonCore.getDefaultProvider();
		saturn.core.Util.debug("Fetching sequences for " + this.config.getDatabaseName());
		p.getByNamedQuery("FETCH_PROTEINS",[this.config.getDatabaseName()],saturn.core.domain.Molecule,false,function(objs,error) {
			saturn.core.Util.debug("Objects fetched " + objs.length);
			if(error != null) {
				_gthis.response.setError(error);
				_gthis.done();
			} else {
				saturn.core.Util.opentemp("sequences_",function(error1,fd,path) {
					if(error1 != null) {
						_gthis.response.setError(error1);
						_gthis.done();
					} else {
						saturn.core.Util.debug(path);
						var added = 10;
						var limit = _gthis.config.getLimit();
						var _g = 0;
						while(_g < objs.length) {
							var obj = objs[_g];
							++_g;
							if(obj.sequence != null) {
								fd.write(">" + obj.name + "\n" + obj.sequence + "\n");
								if(limit != -1 && limit == added) {
									saturn.core.Util.debug("Breaking");
									break;
								} else {
									++added;
								}
							}
						}
						fd.end(function(error2) {
							if(error2 != null) {
								_gthis.response.setError(error2);
								_gthis.done();
							} else {
								_gthis.response.setFastaFilePath(path);
								_gthis.done();
							}
						});
					}
				});
			}
		});
	}
	,done: function() {
		saturn.core.Util.debug("Workflow item finished");
		this.cb(this.response);
	}
	,__class__: saturn.workflow.DBtoFASTA
};
saturn.workflow.Object = $hxClasses["saturn.workflow.Object"] = function() {
	this.remote = false;
};
saturn.workflow.Object.__name__ = ["saturn","workflow","Object"];
saturn.workflow.Object.prototype = {
	error: null
	,data: null
	,response: null
	,remote: null
	,setRemote: function(remote) {
		this.remote = remote;
	}
	,isRemote: function() {
		return this.remote;
	}
	,getParameter: function(param) {
		var data = this.getData();
		if(data != null && Reflect.hasField(data,param)) {
			return Reflect.field(data,param);
		} else if(Reflect.hasField(this,param)) {
			return Reflect.field(this,param);
		} else {
			return null;
		}
	}
	,setError: function(error) {
		saturn.core.Util.debug(error);
		this.error = error;
	}
	,getError: function() {
		return this.error;
	}
	,setData: function(data) {
		this.data = data;
	}
	,getData: function() {
		return this.data;
	}
	,getResponse: function() {
		return this.response;
	}
	,setResponse: function(resp) {
		this.response = resp;
	}
	,setup: function(cb) {
	}
	,__class__: saturn.workflow.Object
};
saturn.workflow.DBtoFASTAConfig = $hxClasses["saturn.workflow.DBtoFASTAConfig"] = function(databaseName,type) {
	saturn.workflow.Object.call(this);
	this.databaseName = databaseName;
	this.type = type;
	this.limit = -1;
};
saturn.workflow.DBtoFASTAConfig.__name__ = ["saturn","workflow","DBtoFASTAConfig"];
saturn.workflow.DBtoFASTAConfig.__super__ = saturn.workflow.Object;
saturn.workflow.DBtoFASTAConfig.prototype = $extend(saturn.workflow.Object.prototype,{
	databaseName: null
	,type: null
	,limit: null
	,setLimit: function(limit) {
		this.limit = limit;
	}
	,getLimit: function() {
		return this.limit;
	}
	,getDatabaseName: function() {
		return this.databaseName;
	}
	,__class__: saturn.workflow.DBtoFASTAConfig
});
saturn.workflow.SequenceType = $hxClasses["saturn.workflow.SequenceType"] = { __ename__ : ["saturn","workflow","SequenceType"], __constructs__ : ["PROTEIN","DNA"] };
saturn.workflow.SequenceType.PROTEIN = ["PROTEIN",0];
saturn.workflow.SequenceType.PROTEIN.toString = $estr;
saturn.workflow.SequenceType.PROTEIN.__enum__ = saturn.workflow.SequenceType;
saturn.workflow.SequenceType.DNA = ["DNA",1];
saturn.workflow.SequenceType.DNA.toString = $estr;
saturn.workflow.SequenceType.DNA.__enum__ = saturn.workflow.SequenceType;
saturn.workflow.DBtoFASTAResponse = $hxClasses["saturn.workflow.DBtoFASTAResponse"] = function(fastaFilePath) {
	saturn.workflow.Object.call(this);
	this.fastaFilePath = fastaFilePath;
};
saturn.workflow.DBtoFASTAResponse.__name__ = ["saturn","workflow","DBtoFASTAResponse"];
saturn.workflow.DBtoFASTAResponse.__super__ = saturn.workflow.Object;
saturn.workflow.DBtoFASTAResponse.prototype = $extend(saturn.workflow.Object.prototype,{
	fastaFilePath: null
	,setFastaFilePath: function(path) {
		this.fastaFilePath = path;
	}
	,getFastaFilePath: function() {
		return this.fastaFilePath;
	}
	,__class__: saturn.workflow.DBtoFASTAResponse
});
saturn.workflow.Unit = $hxClasses["saturn.workflow.Unit"] = function(config,cb) {
	this.cb = cb;
	this.config = config;
};
saturn.workflow.Unit.__name__ = ["saturn","workflow","Unit"];
saturn.workflow.Unit.prototype = {
	response: null
	,config: null
	,cb: null
	,done: function() {
		saturn.core.Util.debug("Workflow item finished");
		this.cb(this.response);
	}
	,setup: function(cb) {
		if(this.config != null) {
			this.config.setup(cb);
		} else {
			cb(null);
		}
	}
	,run: function() {
		var _gthis = this;
		this.setup(function(err) {
			if(err != null) {
				_gthis.response.setError(err);
				_gthis.done();
			} else {
				_gthis._run();
			}
		});
	}
	,_run: function() {
	}
	,__class__: saturn.workflow.Unit
};
saturn.workflow.HMMer = $hxClasses["saturn.workflow.HMMer"] = function(config,cb) {
	this.hmmPath = "bin/deployed_bin/hmmer";
	saturn.workflow.Unit.call(this,config,cb);
	this.response = new saturn.workflow.HMMerResponse();
	this.hmmSearchPath = this.hmmPath + "/hmmsearch";
};
saturn.workflow.HMMer.__name__ = ["saturn","workflow","HMMer"];
saturn.workflow.HMMer.query = function(config,cb) {
	saturn.core.Util.debug("HMMer query started");
	var runner = new saturn.workflow.HMMer(config,cb);
	runner.run();
};
saturn.workflow.HMMer.__super__ = saturn.workflow.Unit;
saturn.workflow.HMMer.prototype = $extend(saturn.workflow.Unit.prototype,{
	hmmPath: null
	,hmmSearchPath: null
	,getHMMPath: function() {
		return this.hmmPath;
	}
	,getHMMSearchPath: function() {
		return this.hmmSearchPath;
	}
	,_run: function() {
		if(this.config.getProgram() == saturn.workflow.HMMerProgram.HMMSEARCH) {
			this.runHMMSearch();
		} else if(this.config.getProgram() == saturn.workflow.HMMerProgram.HMMUPLOAD) {
			this.runUpload();
		} else {
			saturn.core.Util.debug("Unknown program: " + Std.string(this.config.getProgram()));
		}
	}
	,runHMMSearch: function() {
		var _gthis = this;
		saturn.core.Util.debug("Running HMMSearch");
		var fastaFile = this.config.getParameter("fastaFilePath");
		if(fastaFile != null) {
			var data = this.config.getData();
			saturn.core.Util.opentemp("hmm_table_",function(error,stream,path_table) {
				if(error != null) {
					_gthis.response.setError(error);
				} else {
					saturn.core.Util.opentemp("hmm_raw_",function(error1,stream1,path_raw) {
						if(error1 != null) {
							_gthis.response.setError(error1);
						} else {
							var args = _gthis.config.getParameter("hmmFilePath");
							var args1 = _gthis.config.getParameter("fastaFilePath");
							var args2 = ["--domtblout",path_table,"--noali","-o",path_raw,args,args1];
							saturn.core.Util.debug(args2.join(","));
							saturn.core.Util.exec(_gthis.hmmSearchPath,args2,function(code) {
								saturn.core.Util.debug("Hello World");
								if(code != 0) {
									saturn.core.Util.debug("Error");
									_gthis.response.setError("An error has occurred running HMMSearch");
									_gthis.done();
								} else if(_gthis.config.isRemote()) {
									_gthis.done();
								} else {
									_gthis.response.setTableOutputPath(path_table);
									_gthis.response.setRawOutputPath(path_raw);
									_gthis.done();
								}
							});
						}
					});
				}
			});
		} else {
			this.response.setError("fastaFilePath missing!");
			this.done();
		}
	}
	,runUpload: function() {
	}
	,__class__: saturn.workflow.HMMer
});
saturn.workflow.HMMerConfig = $hxClasses["saturn.workflow.HMMerConfig"] = function(program) {
	saturn.workflow.Object.call(this);
	this.program = program;
};
saturn.workflow.HMMerConfig.__name__ = ["saturn","workflow","HMMerConfig"];
saturn.workflow.HMMerConfig.__super__ = saturn.workflow.Object;
saturn.workflow.HMMerConfig.prototype = $extend(saturn.workflow.Object.prototype,{
	hmmFilePath: null
	,fastaFilePath: null
	,tableOutputPath: null
	,fastaContent: null
	,program: null
	,getProgram: function() {
		return this.program;
	}
	,setProgram: function(program) {
		this.program = program;
	}
	,setHMMPath: function(hmmFilePath) {
		this.hmmFilePath = hmmFilePath;
	}
	,setFastaFilePath: function(fastaFilePath) {
		this.fastaFilePath = fastaFilePath;
	}
	,setFastaContent: function(fastaContent) {
		this.fastaContent = fastaContent;
	}
	,setup: function(cb) {
		var _gthis = this;
		if(this.fastaFilePath == null && this.fastaContent != null) {
			saturn.core.Util.opentemp("fasta_file_",function(error,stream,path) {
				if(error == null) {
					stream.write(_gthis.fastaContent);
				}
				_gthis.fastaFilePath = path;
				cb(error);
			});
		}
	}
	,__class__: saturn.workflow.HMMerConfig
});
saturn.workflow.HMMerProgram = $hxClasses["saturn.workflow.HMMerProgram"] = { __ename__ : ["saturn","workflow","HMMerProgram"], __constructs__ : ["HMMSEARCH","HMMUPLOAD"] };
saturn.workflow.HMMerProgram.HMMSEARCH = ["HMMSEARCH",0];
saturn.workflow.HMMerProgram.HMMSEARCH.toString = $estr;
saturn.workflow.HMMerProgram.HMMSEARCH.__enum__ = saturn.workflow.HMMerProgram;
saturn.workflow.HMMerProgram.HMMUPLOAD = ["HMMUPLOAD",1];
saturn.workflow.HMMerProgram.HMMUPLOAD.toString = $estr;
saturn.workflow.HMMerProgram.HMMUPLOAD.__enum__ = saturn.workflow.HMMerProgram;
saturn.workflow.HMMerResponse = $hxClasses["saturn.workflow.HMMerResponse"] = function() {
	saturn.workflow.Object.call(this);
	this.tableOutputPath = "Test";
};
saturn.workflow.HMMerResponse.__name__ = ["saturn","workflow","HMMerResponse"];
saturn.workflow.HMMerResponse.__super__ = saturn.workflow.Object;
saturn.workflow.HMMerResponse.prototype = $extend(saturn.workflow.Object.prototype,{
	tableOutputPath: null
	,rawOutputPath: null
	,setTableOutputPath: function(path) {
		this.tableOutputPath = path;
	}
	,getTableOutputPath: function() {
		return this.tableOutputPath;
	}
	,setRawOutputPath: function(path) {
		this.rawOutputPath = path;
	}
	,getRawOutputPath: function() {
		return this.rawOutputPath;
	}
	,__class__: saturn.workflow.HMMerResponse
});
saturn.workflow.Pfam = $hxClasses["saturn.workflow.Pfam"] = function() {
};
saturn.workflow.Pfam.__name__ = ["saturn","workflow","Pfam"];
saturn.workflow.Pfam.prototype = {
	query: function() {
	}
	,__class__: saturn.workflow.Pfam
};
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
$hxClasses["Math"] = Math;
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = ["String"];
$hxClasses["Array"] = Array;
Array.__name__ = ["Array"];
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = ["Date"];
var Int = $hxClasses["Int"] = { __name__ : ["Int"]};
var Dynamic = $hxClasses["Dynamic"] = { __name__ : ["Dynamic"]};
var Float = $hxClasses["Float"] = Number;
Float.__name__ = ["Float"];
var Bool = $hxClasses["Bool"] = Boolean;
Bool.__ename__ = ["Bool"];
var Class = $hxClasses["Class"] = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {};
var q = js.Browser.get_window().jQuery;
var js = js || {}
js.JQuery = q;
var ArrayBuffer = $global.ArrayBuffer || js.html.compat.ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js.html.compat.ArrayBuffer.sliceImpl;
}
var Uint8Array = $global.Uint8Array || js.html.compat.Uint8Array._new;
haxe.Serializer.USE_CACHE = false;
haxe.Serializer.USE_ENUM_INDEX = false;
haxe.Serializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe.Serializer.BASE64_CODES = null;
haxe.Unserializer.DEFAULT_RESOLVER = new haxe._Unserializer.DefaultResolver();
haxe.Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe.Unserializer.CODES = null;
haxe.ds.ObjectMap.count = 0;
js.Boot.__toStr = ({ }).toString;
js.html.compat.Uint8Array.BYTES_PER_ELEMENT = 1;
phylo.PhyloNewickParser.newLineReg = new EReg("\n","g");
phylo.PhyloNewickParser.carLineReg = new EReg("\r","g");
phylo.PhyloNewickParser.whiteSpaceReg = new EReg("\\s","g");
saturn.client.WorkspaceApplication.layoutsSuspended = 0;
saturn.app.SaturnClient.reg_edit = new EReg("edit\\s+","");
saturn.app.SaturnClient.reg_wiki = new EReg("wiki-\\s+","");
saturn.client.ICMClient.reg_jsonStart = new EReg("\\\\?\"\\s*<JSON_START>","g");
saturn.client.ICMClient.reg_jsonStop = new EReg("<JSON_STOP>\\\\?\"","g");
saturn.client.core.CommonCore.pools = new haxe.ds.StringMap();
saturn.client.core.CommonCore.resourceToPool = new haxe.ds.ObjectMap();
saturn.client.core.CommonCore.providers = new haxe.ds.StringMap();
saturn.client.core.CommonCore.combinedModels = null;
saturn.client.core.CommonCore.annotationManager = new saturn.core.annotations.AnnotationManager();
saturn.client.workspace.ABITraceWO.FILE_IMPORT_FORMATS = ["ab1"];
saturn.client.programs.ABITraceViewer.CLASS_SUPPORT = [saturn.client.workspace.ABITraceWO];
saturn.client.workspace.AlignmentWorkspaceObject.FILE_IMPORT_FORMATS = ["aln","pfam_aln"];
saturn.client.programs.AlignmentViewer.CLASS_SUPPORT = [saturn.client.workspace.AlignmentWorkspaceObject];
saturn.client.programs.sequenceeditor.SequenceEditor.reg_newLine = new EReg("\n","g");
saturn.client.programs.sequenceeditor.SequenceEditor.reg_carReturn = new EReg("\r","g");
saturn.client.programs.sequenceeditor.SequenceEditor.reg_whiteSpace = new EReg("\\s","g");
saturn.client.programs.sequenceeditor.SequenceEditor.reg_star = new EReg("\\*","g");
saturn.client.programs.sequenceeditor.SequenceEditor.reg_num = new EReg("[0-9]","g");
saturn.client.workspace.DNAWorkspaceObject.FILE_IMPORT_FORMATS = ["fasta"];
saturn.client.workspace.PrimerWorkspaceObject.FILE_IMPORT_FORMATS = [];
saturn.client.programs.DNASequenceEditor.CLASS_SUPPORT = [saturn.client.workspace.DNAWorkspaceObject,saturn.client.workspace.PrimerWorkspaceObject];
saturn.client.programs.DNASequenceEditor.reg_replaceStar = new EReg("\\*","");
saturn.client.workspace.PCRProductWO.FILE_IMPORT_FORMATS = [];
saturn.client.programs.PCRProductViewer.CLASS_SUPPORT = [saturn.client.workspace.PCRProductWO];
saturn.client.workspace.AlleleWO.FILE_IMPORT_FORMATS = [];
saturn.client.programs.AlleleViewer.CLASS_SUPPORT = [saturn.client.workspace.AlleleWO];
saturn.client.workspace.CompoundWO.FILE_IMPORT_FORMATS = ["sdf"];
saturn.client.programs.CompoundViewer.CLASS_SUPPORT = [saturn.client.workspace.CompoundWO];
saturn.client.workspace.ConsoleWO.FILE_IMPORT_FORMATS = [];
saturn.client.programs.ConsoleViewer.CLASS_SUPPORT = [saturn.client.workspace.ConsoleWO];
saturn.client.workspace.CrystalHelperDataWO.FILE_IMPORT_FORMATS = [];
saturn.client.programs.CrystalHelper.CLASS_SUPPORT = [saturn.client.workspace.CrystalHelperDataWO];
saturn.client.workspace.DigestWO.FILE_IMPORT_FORMATS = [];
saturn.client.programs.DigestViewer.CLASS_SUPPORT = [saturn.client.workspace.DigestWO];
saturn.client.workspace.GlycanWO.FILE_IMPORT_FORMATS = ["glycoct_condensed"];
saturn.client.programs.GlycanBuilder.CLASS_SUPPORT = [saturn.client.workspace.GlycanWO];
saturn.client.workspace.GridVarWO.FILE_IMPORT_FORMATS = ["csv"];
saturn.client.programs.GridVarViewer.CLASS_SUPPORT = [saturn.client.workspace.GridVarWO];
saturn.client.workspace.HomeWO.FILE_IMPORT_FORMATS = [];
saturn.client.programs.HomePage.CLASS_SUPPORT = [saturn.client.workspace.HomeWO];
saturn.client.workspace.LigationWO.FILE_IMPORT_FORMATS = [];
saturn.client.programs.LigationViewer.CLASS_SUPPORT = [saturn.client.workspace.LigationWO];
saturn.client.workspace.TableHelperWO.FILE_IMPORT_FORMATS = [];
saturn.client.programs.TableHelper.CLASS_SUPPORT = [saturn.client.workspace.TableHelperWO];
saturn.client.programs.TableHelper.next_store_id = 0;
saturn.client.workspace.MultiAlleleHelperWO.FILE_IMPORT_FORMATS = [];
saturn.client.programs.MultiAlleleHelper.CLASS_SUPPORT = [saturn.client.workspace.MultiAlleleHelperWO];
saturn.client.workspace.MultiConstructHelperWO.FILE_IMPORT_FORMATS = [];
saturn.client.programs.MultiConstructHelper.CLASS_SUPPORT = [saturn.client.workspace.MultiConstructHelperWO];
saturn.client.workspace.StructureModelWO.FILE_IMPORT_FORMATS = ["pdb","icb"];
saturn.client.programs.PDBViewer.CLASS_SUPPORT = [saturn.client.workspace.StructureModelWO];
saturn.client.workspace.Phylo5WorkspaceObject.FILE_IMPORT_FORMATS = [];
saturn.client.programs.Phylo5Viewer.CLASS_SUPPORT = [saturn.client.workspace.Phylo5WorkspaceObject];
saturn.client.programs.Phylo5Viewer.newLineReg = new EReg("\n","g");
saturn.client.programs.Phylo5Viewer.carLineReg = new EReg("\r","g");
saturn.client.programs.Phylo5Viewer.whiteSpaceReg = new EReg("\\s","g");
saturn.client.workspace.ProteinWorkspaceObject.FILE_IMPORT_FORMATS = ["fasta"];
saturn.client.programs.ProteinSequenceEditor.CLASS_SUPPORT = [saturn.client.workspace.ProteinWorkspaceObject];
saturn.client.workspace.ScarabELNWO.FILE_IMPORT_FORMATS = [];
saturn.client.programs.ScarabELNViewer.CLASS_SUPPORT = [saturn.client.workspace.ScarabELNWO];
saturn.client.workspace.WONKAWO.FILE_IMPORT_FORMATS = [];
saturn.client.programs.WONKA.CLASS_SUPPORT = [saturn.client.workspace.WONKAWO];
saturn.client.workspace.WebPageWorkspaceObject.FILE_IMPORT_FORMATS = ["html"];
saturn.client.programs.WebPageViewer.CLASS_SUPPORT = [saturn.client.workspace.WebPageWorkspaceObject];
saturn.client.workspace.ChromoHubWorkspaceObject.FILE_IMPORT_FORMATS = [];
saturn.client.programs.chromohub.ChromoHubViewer.CLASS_SUPPORT = [saturn.client.workspace.ChromoHubWorkspaceObject];
saturn.client.programs.chromohub.ChromoHubViewer.newLineReg = new EReg("\n","g");
saturn.client.programs.chromohub.ChromoHubViewer.carLineReg = new EReg("\r","g");
saturn.client.programs.chromohub.ChromoHubViewer.whiteSpaceReg = new EReg("\\s","g");
saturn.client.programs.plugins.DisoPredAnnotationPlugin.reg_predLines = new EReg("pred:\\s+([\\.\\*A-Z]+)","");
saturn.client.programs.plugins.SSAnnotationPlugin.reg_predLines = new EReg("Pred:\\s+([A-Z]+)","");
saturn.client.programs.plugins.SVGDomainAnnotationPlugin.reg_pfam = new EReg("pfam([0-9]+)","");
saturn.client.programs.plugins.TMHMMAnnotationPlugin.reg_tmhmm_domain = new EReg("(outside|inside|TMhelix)\\s+([0-9]+)\\s+([0-9]+)","");
saturn.client.workspace.TextFileWO.FILE_IMPORT_FORMATS = [];
saturn.core.molecule.Molecule.newLineReg = new EReg("\n","g");
saturn.core.molecule.Molecule.carLineReg = new EReg("\r","g");
saturn.core.molecule.Molecule.whiteSpaceReg = new EReg("\\s","g");
saturn.core.molecule.Molecule.reg_starReplace = new EReg("\\*","");
saturn.core.Table.r_d = new EReg("^\\d*\\.?\\d*$","");
saturn.core.StandardGeneticCode.instance = new saturn.core.StandardGeneticCode();
saturn.core.StandardGeneticCode.standardTable = saturn.core.StandardGeneticCode.instance.getCodonLookupTable();
saturn.core.StandardGeneticCode.aaToCodon = saturn.core.StandardGeneticCode.instance.getAAToCodonTable();
saturn.core.GeneticCodeRegistry.CODE_REGISTRY = new saturn.core.GeneticCodeRegistry();
saturn.core.EUtils.eutils = null;
saturn.core.FastaEntity.DNA_CHARS = (function($this) {
	var $r;
	var _g = new haxe.ds.StringMap();
	_g.set("A",true);
	_g.set("T",true);
	_g.set("G",true);
	_g.set("C",true);
	_g.set("X",true);
	_g.set("U",true);
	$r = _g;
	return $r;
}(this));
saturn.core.FastaEntity.headerPattern1 = new EReg("^>(.+)","");
saturn.core.PDBParser.pdb3To1 = (function($this) {
	var $r;
	var _g = new haxe.ds.StringMap();
	_g.set("00C","C");
	_g.set("01W","X");
	_g.set("02K","A");
	_g.set("03Y","C");
	_g.set("07O","C");
	_g.set("08P","C");
	_g.set("0A0","D");
	_g.set("0A1","Y");
	_g.set("0A2","K");
	_g.set("0A8","C");
	_g.set("0AA","V");
	_g.set("0AB","V");
	_g.set("0AC","G");
	_g.set("0AD","G");
	_g.set("0AF","W");
	_g.set("0AG","L");
	_g.set("0AH","S");
	_g.set("0AK","D");
	_g.set("0AM","A");
	_g.set("0AP","C");
	_g.set("0AU","U");
	_g.set("0AV","A");
	_g.set("0AZ","P");
	_g.set("0BN","F");
	_g.set("0C ","C");
	_g.set("0CS","A");
	_g.set("0DC","C");
	_g.set("0DG","G");
	_g.set("0DT","T");
	_g.set("0FL","A");
	_g.set("0G ","G");
	_g.set("0NC","A");
	_g.set("0SP","A");
	_g.set("0U ","U");
	_g.set("0YG","YG");
	_g.set("10C","C");
	_g.set("125","U");
	_g.set("126","U");
	_g.set("127","U");
	_g.set("128","N");
	_g.set("12A","A");
	_g.set("143","C");
	_g.set("175","ASG");
	_g.set("193","X");
	_g.set("1AP","A");
	_g.set("1MA","A");
	_g.set("1MG","G");
	_g.set("1PA","F");
	_g.set("1PI","A");
	_g.set("1PR","N");
	_g.set("1SC","C");
	_g.set("1TQ","W");
	_g.set("1TY","Y");
	_g.set("1X6","S");
	_g.set("200","F");
	_g.set("23F","F");
	_g.set("23S","X");
	_g.set("26B","T");
	_g.set("2AD","X");
	_g.set("2AG","A");
	_g.set("2AO","X");
	_g.set("2AR","A");
	_g.set("2AS","X");
	_g.set("2AT","T");
	_g.set("2AU","U");
	_g.set("2BD","I");
	_g.set("2BT","T");
	_g.set("2BU","A");
	_g.set("2CO","C");
	_g.set("2DA","A");
	_g.set("2DF","N");
	_g.set("2DM","N");
	_g.set("2DO","X");
	_g.set("2DT","T");
	_g.set("2EG","G");
	_g.set("2FE","N");
	_g.set("2FI","N");
	_g.set("2FM","M");
	_g.set("2GT","T");
	_g.set("2HF","H");
	_g.set("2LU","L");
	_g.set("2MA","A");
	_g.set("2MG","G");
	_g.set("2ML","L");
	_g.set("2MR","R");
	_g.set("2MT","P");
	_g.set("2MU","U");
	_g.set("2NT","T");
	_g.set("2OM","U");
	_g.set("2OT","T");
	_g.set("2PI","X");
	_g.set("2PR","G");
	_g.set("2SA","N");
	_g.set("2SI","X");
	_g.set("2ST","T");
	_g.set("2TL","T");
	_g.set("2TY","Y");
	_g.set("2VA","V");
	_g.set("2XA","C");
	_g.set("32S","X");
	_g.set("32T","X");
	_g.set("3AH","H");
	_g.set("3AR","X");
	_g.set("3CF","F");
	_g.set("3DA","A");
	_g.set("3DR","N");
	_g.set("3GA","A");
	_g.set("3MD","D");
	_g.set("3ME","U");
	_g.set("3NF","Y");
	_g.set("3QN","K");
	_g.set("3TY","X");
	_g.set("3XH","G");
	_g.set("4AC","N");
	_g.set("4BF","Y");
	_g.set("4CF","F");
	_g.set("4CY","M");
	_g.set("4DP","W");
	_g.set("4F3","GYG");
	_g.set("4FB","P");
	_g.set("4FW","W");
	_g.set("4HT","W");
	_g.set("4IN","W");
	_g.set("4MF","N");
	_g.set("4MM","X");
	_g.set("4OC","C");
	_g.set("4PC","C");
	_g.set("4PD","C");
	_g.set("4PE","C");
	_g.set("4PH","F");
	_g.set("4SC","C");
	_g.set("4SU","U");
	_g.set("4TA","N");
	_g.set("4U7","A");
	_g.set("56A","H");
	_g.set("5AA","A");
	_g.set("5AB","A");
	_g.set("5AT","T");
	_g.set("5BU","U");
	_g.set("5CG","G");
	_g.set("5CM","C");
	_g.set("5CS","C");
	_g.set("5FA","A");
	_g.set("5FC","C");
	_g.set("5FU","U");
	_g.set("5HP","E");
	_g.set("5HT","T");
	_g.set("5HU","U");
	_g.set("5IC","C");
	_g.set("5IT","T");
	_g.set("5IU","U");
	_g.set("5MC","C");
	_g.set("5MD","N");
	_g.set("5MU","U");
	_g.set("5NC","C");
	_g.set("5PC","C");
	_g.set("5PY","T");
	_g.set("5SE","U");
	_g.set("5ZA","TWG");
	_g.set("64T","T");
	_g.set("6CL","K");
	_g.set("6CT","T");
	_g.set("6CW","W");
	_g.set("6HA","A");
	_g.set("6HC","C");
	_g.set("6HG","G");
	_g.set("6HN","K");
	_g.set("6HT","T");
	_g.set("6IA","A");
	_g.set("6MA","A");
	_g.set("6MC","A");
	_g.set("6MI","N");
	_g.set("6MT","A");
	_g.set("6MZ","N");
	_g.set("6OG","G");
	_g.set("70U","U");
	_g.set("7DA","A");
	_g.set("7GU","G");
	_g.set("7JA","I");
	_g.set("7MG","G");
	_g.set("8AN","A");
	_g.set("8FG","G");
	_g.set("8MG","G");
	_g.set("8OG","G");
	_g.set("9NE","E");
	_g.set("9NF","F");
	_g.set("9NR","R");
	_g.set("9NV","V");
	_g.set("A  ","A");
	_g.set("A1P","N");
	_g.set("A23","A");
	_g.set("A2L","A");
	_g.set("A2M","A");
	_g.set("A34","A");
	_g.set("A35","A");
	_g.set("A38","A");
	_g.set("A39","A");
	_g.set("A3A","A");
	_g.set("A3P","A");
	_g.set("A40","A");
	_g.set("A43","A");
	_g.set("A44","A");
	_g.set("A47","A");
	_g.set("A5L","A");
	_g.set("A5M","C");
	_g.set("A5N","N");
	_g.set("A5O","A");
	_g.set("A66","X");
	_g.set("AA3","A");
	_g.set("AA4","A");
	_g.set("AAR","R");
	_g.set("AB7","X");
	_g.set("ABA","A");
	_g.set("ABR","A");
	_g.set("ABS","A");
	_g.set("ABT","N");
	_g.set("ACB","D");
	_g.set("ACL","R");
	_g.set("AD2","A");
	_g.set("ADD","X");
	_g.set("ADX","N");
	_g.set("AEA","X");
	_g.set("AEI","D");
	_g.set("AET","A");
	_g.set("AFA","N");
	_g.set("AFF","N");
	_g.set("AFG","G");
	_g.set("AGM","R");
	_g.set("AGT","C");
	_g.set("AHB","N");
	_g.set("AHH","X");
	_g.set("AHO","A");
	_g.set("AHP","A");
	_g.set("AHS","X");
	_g.set("AHT","X");
	_g.set("AIB","A");
	_g.set("AKL","D");
	_g.set("AKZ","D");
	_g.set("ALA","A");
	_g.set("ALC","A");
	_g.set("ALM","A");
	_g.set("ALN","A");
	_g.set("ALO","T");
	_g.set("ALQ","X");
	_g.set("ALS","A");
	_g.set("ALT","A");
	_g.set("ALV","A");
	_g.set("ALY","K");
	_g.set("AN8","A");
	_g.set("AP7","A");
	_g.set("APE","X");
	_g.set("APH","A");
	_g.set("API","K");
	_g.set("APK","K");
	_g.set("APM","X");
	_g.set("APP","X");
	_g.set("AR2","R");
	_g.set("AR4","E");
	_g.set("AR7","R");
	_g.set("ARG","R");
	_g.set("ARM","R");
	_g.set("ARO","R");
	_g.set("ARV","X");
	_g.set("AS ","A");
	_g.set("AS2","D");
	_g.set("AS9","X");
	_g.set("ASA","D");
	_g.set("ASB","D");
	_g.set("ASI","D");
	_g.set("ASK","D");
	_g.set("ASL","D");
	_g.set("ASM","X");
	_g.set("ASN","N");
	_g.set("ASP","D");
	_g.set("ASQ","D");
	_g.set("ASU","N");
	_g.set("ASX","B");
	_g.set("ATD","T");
	_g.set("ATL","T");
	_g.set("ATM","T");
	_g.set("AVC","A");
	_g.set("AVN","X");
	_g.set("AYA","A");
	_g.set("AYG","AYG");
	_g.set("AZK","K");
	_g.set("AZS","S");
	_g.set("AZY","Y");
	_g.set("B1F","F");
	_g.set("B1P","N");
	_g.set("B2A","A");
	_g.set("B2F","F");
	_g.set("B2I","I");
	_g.set("B2V","V");
	_g.set("B3A","A");
	_g.set("B3D","D");
	_g.set("B3E","E");
	_g.set("B3K","K");
	_g.set("B3L","X");
	_g.set("B3M","X");
	_g.set("B3Q","X");
	_g.set("B3S","S");
	_g.set("B3T","X");
	_g.set("B3U","H");
	_g.set("B3X","N");
	_g.set("B3Y","Y");
	_g.set("BB6","C");
	_g.set("BB7","C");
	_g.set("BB8","F");
	_g.set("BB9","C");
	_g.set("BBC","C");
	_g.set("BCS","C");
	_g.set("BE2","X");
	_g.set("BFD","D");
	_g.set("BG1","S");
	_g.set("BGM","G");
	_g.set("BH2","D");
	_g.set("BHD","D");
	_g.set("BIF","F");
	_g.set("BIL","X");
	_g.set("BIU","I");
	_g.set("BJH","X");
	_g.set("BLE","L");
	_g.set("BLY","K");
	_g.set("BMP","N");
	_g.set("BMT","T");
	_g.set("BNN","F");
	_g.set("BNO","X");
	_g.set("BOE","T");
	_g.set("BOR","R");
	_g.set("BPE","C");
	_g.set("BRU","U");
	_g.set("BSE","S");
	_g.set("BT5","N");
	_g.set("BTA","L");
	_g.set("BTC","C");
	_g.set("BTR","W");
	_g.set("BUC","C");
	_g.set("BUG","V");
	_g.set("BVP","U");
	_g.set("BZG","N");
	_g.set("C  ","C");
	_g.set("C12","TYG");
	_g.set("C1X","K");
	_g.set("C25","C");
	_g.set("C2L","C");
	_g.set("C2S","C");
	_g.set("C31","C");
	_g.set("C32","C");
	_g.set("C34","C");
	_g.set("C36","C");
	_g.set("C37","C");
	_g.set("C38","C");
	_g.set("C3Y","C");
	_g.set("C42","C");
	_g.set("C43","C");
	_g.set("C45","C");
	_g.set("C46","C");
	_g.set("C49","C");
	_g.set("C4R","C");
	_g.set("C4S","C");
	_g.set("C5C","C");
	_g.set("C66","X");
	_g.set("C6C","C");
	_g.set("C99","TFG");
	_g.set("CAF","C");
	_g.set("CAL","X");
	_g.set("CAR","C");
	_g.set("CAS","C");
	_g.set("CAV","X");
	_g.set("CAY","C");
	_g.set("CB2","C");
	_g.set("CBR","C");
	_g.set("CBV","C");
	_g.set("CCC","C");
	_g.set("CCL","K");
	_g.set("CCS","C");
	_g.set("CCY","CYG");
	_g.set("CDE","X");
	_g.set("CDV","X");
	_g.set("CDW","C");
	_g.set("CEA","C");
	_g.set("CFL","C");
	_g.set("CFY","FCYG");
	_g.set("CG1","G");
	_g.set("CGA","E");
	_g.set("CGU","E");
	_g.set("CH ","C");
	_g.set("CH6","MYG");
	_g.set("CH7","KYG");
	_g.set("CHF","X");
	_g.set("CHG","X");
	_g.set("CHP","G");
	_g.set("CHS","X");
	_g.set("CIR","R");
	_g.set("CJO","GYG");
	_g.set("CLE","L");
	_g.set("CLG","K");
	_g.set("CLH","K");
	_g.set("CLV","AFG");
	_g.set("CM0","N");
	_g.set("CME","C");
	_g.set("CMH","C");
	_g.set("CML","C");
	_g.set("CMR","C");
	_g.set("CMT","C");
	_g.set("CNU","U");
	_g.set("CP1","C");
	_g.set("CPC","X");
	_g.set("CPI","X");
	_g.set("CQR","GYG");
	_g.set("CR0","TLG");
	_g.set("CR2","GYG");
	_g.set("CR5","G");
	_g.set("CR7","KYG");
	_g.set("CR8","HYG");
	_g.set("CRF","TWG");
	_g.set("CRG","THG");
	_g.set("CRK","MYG");
	_g.set("CRO","GYG");
	_g.set("CRQ","QYG");
	_g.set("CRU","EYG");
	_g.set("CRW","ASG");
	_g.set("CRX","ASG");
	_g.set("CS0","C");
	_g.set("CS1","C");
	_g.set("CS3","C");
	_g.set("CS4","C");
	_g.set("CS8","N");
	_g.set("CSA","C");
	_g.set("CSB","C");
	_g.set("CSD","C");
	_g.set("CSE","C");
	_g.set("CSF","C");
	_g.set("CSH","SHG");
	_g.set("CSI","G");
	_g.set("CSJ","C");
	_g.set("CSL","C");
	_g.set("CSO","C");
	_g.set("CSP","C");
	_g.set("CSR","C");
	_g.set("CSS","C");
	_g.set("CSU","C");
	_g.set("CSW","C");
	_g.set("CSX","C");
	_g.set("CSY","SYG");
	_g.set("CSZ","C");
	_g.set("CTE","W");
	_g.set("CTG","T");
	_g.set("CTH","T");
	_g.set("CUC","X");
	_g.set("CWR","S");
	_g.set("CXM","M");
	_g.set("CY0","C");
	_g.set("CY1","C");
	_g.set("CY3","C");
	_g.set("CY4","C");
	_g.set("CYA","C");
	_g.set("CYD","C");
	_g.set("CYF","C");
	_g.set("CYG","C");
	_g.set("CYJ","X");
	_g.set("CYM","C");
	_g.set("CYQ","C");
	_g.set("CYR","C");
	_g.set("CYS","C");
	_g.set("CZ2","C");
	_g.set("CZO","GYG");
	_g.set("CZZ","C");
	_g.set("D11","T");
	_g.set("D1P","N");
	_g.set("D3 ","N");
	_g.set("D33","N");
	_g.set("D3P","G");
	_g.set("D3T","T");
	_g.set("D4M","T");
	_g.set("D4P","X");
	_g.set("DA ","A");
	_g.set("DA2","X");
	_g.set("DAB","A");
	_g.set("DAH","F");
	_g.set("DAL","A");
	_g.set("DAR","R");
	_g.set("DAS","D");
	_g.set("DBB","T");
	_g.set("DBM","N");
	_g.set("DBS","S");
	_g.set("DBU","T");
	_g.set("DBY","Y");
	_g.set("DBZ","A");
	_g.set("DC ","C");
	_g.set("DC2","C");
	_g.set("DCG","G");
	_g.set("DCI","X");
	_g.set("DCL","X");
	_g.set("DCT","C");
	_g.set("DCY","C");
	_g.set("DDE","H");
	_g.set("DDG","G");
	_g.set("DDN","U");
	_g.set("DDX","N");
	_g.set("DFC","C");
	_g.set("DFG","G");
	_g.set("DFI","X");
	_g.set("DFO","X");
	_g.set("DFT","N");
	_g.set("DG ","G");
	_g.set("DGH","G");
	_g.set("DGI","G");
	_g.set("DGL","E");
	_g.set("DGN","Q");
	_g.set("DHA","S");
	_g.set("DHI","H");
	_g.set("DHL","X");
	_g.set("DHN","V");
	_g.set("DHP","X");
	_g.set("DHU","U");
	_g.set("DHV","V");
	_g.set("DI ","I");
	_g.set("DIL","I");
	_g.set("DIR","R");
	_g.set("DIV","V");
	_g.set("DLE","L");
	_g.set("DLS","K");
	_g.set("DLY","K");
	_g.set("DM0","K");
	_g.set("DMH","N");
	_g.set("DMK","D");
	_g.set("DMT","X");
	_g.set("DN ","N");
	_g.set("DNE","L");
	_g.set("DNG","L");
	_g.set("DNL","K");
	_g.set("DNM","L");
	_g.set("DNP","A");
	_g.set("DNR","C");
	_g.set("DNS","K");
	_g.set("DOA","X");
	_g.set("DOC","C");
	_g.set("DOH","D");
	_g.set("DON","L");
	_g.set("DPB","T");
	_g.set("DPH","F");
	_g.set("DPL","P");
	_g.set("DPP","A");
	_g.set("DPQ","Y");
	_g.set("DPR","P");
	_g.set("DPY","N");
	_g.set("DRM","U");
	_g.set("DRP","N");
	_g.set("DRT","T");
	_g.set("DRZ","N");
	_g.set("DSE","S");
	_g.set("DSG","N");
	_g.set("DSN","S");
	_g.set("DSP","D");
	_g.set("DT ","T");
	_g.set("DTH","T");
	_g.set("DTR","W");
	_g.set("DTY","Y");
	_g.set("DU ","U");
	_g.set("DVA","V");
	_g.set("DXD","N");
	_g.set("DXN","N");
	_g.set("DYG","DYG");
	_g.set("DYS","C");
	_g.set("DZM","A");
	_g.set("E  ","A");
	_g.set("E1X","A");
	_g.set("ECC","Q");
	_g.set("EDA","A");
	_g.set("EFC","C");
	_g.set("EHP","F");
	_g.set("EIT","T");
	_g.set("ENP","N");
	_g.set("ESB","Y");
	_g.set("ESC","M");
	_g.set("EXB","X");
	_g.set("EXY","L");
	_g.set("EY5","N");
	_g.set("EYS","X");
	_g.set("F2F","F");
	_g.set("FA2","A");
	_g.set("FA5","N");
	_g.set("FAG","N");
	_g.set("FAI","N");
	_g.set("FB5","A");
	_g.set("FB6","A");
	_g.set("FCL","F");
	_g.set("FFD","N");
	_g.set("FGA","E");
	_g.set("FGL","G");
	_g.set("FGP","S");
	_g.set("FHL","X");
	_g.set("FHO","K");
	_g.set("FHU","U");
	_g.set("FLA","A");
	_g.set("FLE","L");
	_g.set("FLT","Y");
	_g.set("FME","M");
	_g.set("FMG","G");
	_g.set("FMU","N");
	_g.set("FOE","C");
	_g.set("FOX","G");
	_g.set("FP9","P");
	_g.set("FPA","F");
	_g.set("FRD","X");
	_g.set("FT6","W");
	_g.set("FTR","W");
	_g.set("FTY","Y");
	_g.set("FVA","V");
	_g.set("FZN","K");
	_g.set("G  ","G");
	_g.set("G25","G");
	_g.set("G2L","G");
	_g.set("G2S","G");
	_g.set("G31","G");
	_g.set("G32","G");
	_g.set("G33","G");
	_g.set("G36","G");
	_g.set("G38","G");
	_g.set("G42","G");
	_g.set("G46","G");
	_g.set("G47","G");
	_g.set("G48","G");
	_g.set("G49","G");
	_g.set("G4P","N");
	_g.set("G7M","G");
	_g.set("GAO","G");
	_g.set("GAU","E");
	_g.set("GCK","C");
	_g.set("GCM","X");
	_g.set("GDP","G");
	_g.set("GDR","G");
	_g.set("GFL","G");
	_g.set("GGL","E");
	_g.set("GH3","G");
	_g.set("GHG","Q");
	_g.set("GHP","G");
	_g.set("GL3","G");
	_g.set("GLH","Q");
	_g.set("GLJ","E");
	_g.set("GLK","E");
	_g.set("GLM","X");
	_g.set("GLN","Q");
	_g.set("GLQ","E");
	_g.set("GLU","E");
	_g.set("GLX","Z");
	_g.set("GLY","G");
	_g.set("GLZ","G");
	_g.set("GMA","E");
	_g.set("GMS","G");
	_g.set("GMU","U");
	_g.set("GN7","G");
	_g.set("GND","X");
	_g.set("GNE","N");
	_g.set("GOM","G");
	_g.set("GPL","K");
	_g.set("GS ","G");
	_g.set("GSC","G");
	_g.set("GSR","G");
	_g.set("GSS","G");
	_g.set("GSU","E");
	_g.set("GT9","C");
	_g.set("GTP","G");
	_g.set("GVL","X");
	_g.set("GYC","CYG");
	_g.set("GYS","SYG");
	_g.set("H2U","U");
	_g.set("H5M","P");
	_g.set("HAC","A");
	_g.set("HAR","R");
	_g.set("HBN","H");
	_g.set("HCS","X");
	_g.set("HDP","U");
	_g.set("HEU","U");
	_g.set("HFA","X");
	_g.set("HGL","X");
	_g.set("HHI","H");
	_g.set("HHK","AK");
	_g.set("HIA","H");
	_g.set("HIC","H");
	_g.set("HIP","H");
	_g.set("HIQ","H");
	_g.set("HIS","H");
	_g.set("HL2","L");
	_g.set("HLU","L");
	_g.set("HMR","R");
	_g.set("HOL","N");
	_g.set("HPC","F");
	_g.set("HPE","F");
	_g.set("HPH","F");
	_g.set("HPQ","F");
	_g.set("HQA","A");
	_g.set("HRG","R");
	_g.set("HRP","W");
	_g.set("HS8","H");
	_g.set("HS9","H");
	_g.set("HSE","S");
	_g.set("HSL","S");
	_g.set("HSO","H");
	_g.set("HTI","C");
	_g.set("HTN","N");
	_g.set("HTR","W");
	_g.set("HV5","A");
	_g.set("HVA","V");
	_g.set("HY3","P");
	_g.set("HYP","P");
	_g.set("HZP","P");
	_g.set("I  ","I");
	_g.set("I2M","I");
	_g.set("I58","K");
	_g.set("I5C","C");
	_g.set("IAM","A");
	_g.set("IAR","R");
	_g.set("IAS","D");
	_g.set("IC ","C");
	_g.set("IEL","K");
	_g.set("IEY","HYG");
	_g.set("IG ","G");
	_g.set("IGL","G");
	_g.set("IGU","G");
	_g.set("IIC","SHG");
	_g.set("IIL","I");
	_g.set("ILE","I");
	_g.set("ILG","E");
	_g.set("ILX","I");
	_g.set("IMC","C");
	_g.set("IML","I");
	_g.set("IOY","F");
	_g.set("IPG","G");
	_g.set("IPN","N");
	_g.set("IRN","N");
	_g.set("IT1","K");
	_g.set("IU ","U");
	_g.set("IYR","Y");
	_g.set("IYT","T");
	_g.set("IZO","M");
	_g.set("JJJ","C");
	_g.set("JJK","C");
	_g.set("JJL","C");
	_g.set("JW5","N");
	_g.set("K1R","C");
	_g.set("KAG","G");
	_g.set("KCX","K");
	_g.set("KGC","K");
	_g.set("KNB","A");
	_g.set("KOR","M");
	_g.set("KPI","K");
	_g.set("KST","K");
	_g.set("KYQ","K");
	_g.set("L2A","X");
	_g.set("LA2","K");
	_g.set("LAA","D");
	_g.set("LAL","A");
	_g.set("LBY","K");
	_g.set("LC ","C");
	_g.set("LCA","A");
	_g.set("LCC","N");
	_g.set("LCG","G");
	_g.set("LCH","N");
	_g.set("LCK","K");
	_g.set("LCX","K");
	_g.set("LDH","K");
	_g.set("LED","L");
	_g.set("LEF","L");
	_g.set("LEH","L");
	_g.set("LEI","V");
	_g.set("LEM","L");
	_g.set("LEN","L");
	_g.set("LET","X");
	_g.set("LEU","L");
	_g.set("LEX","L");
	_g.set("LG ","G");
	_g.set("LGP","G");
	_g.set("LHC","X");
	_g.set("LHU","U");
	_g.set("LKC","N");
	_g.set("LLP","K");
	_g.set("LLY","K");
	_g.set("LME","E");
	_g.set("LMF","K");
	_g.set("LMQ","Q");
	_g.set("LMS","N");
	_g.set("LP6","K");
	_g.set("LPD","P");
	_g.set("LPG","G");
	_g.set("LPL","X");
	_g.set("LPS","S");
	_g.set("LSO","X");
	_g.set("LTA","X");
	_g.set("LTR","W");
	_g.set("LVG","G");
	_g.set("LVN","V");
	_g.set("LYF","K");
	_g.set("LYK","K");
	_g.set("LYM","K");
	_g.set("LYN","K");
	_g.set("LYR","K");
	_g.set("LYS","K");
	_g.set("LYX","K");
	_g.set("LYZ","K");
	_g.set("M0H","C");
	_g.set("M1G","G");
	_g.set("M2G","G");
	_g.set("M2L","K");
	_g.set("M2S","M");
	_g.set("M30","G");
	_g.set("M3L","K");
	_g.set("M5M","C");
	_g.set("MA ","A");
	_g.set("MA6","A");
	_g.set("MA7","A");
	_g.set("MAA","A");
	_g.set("MAD","A");
	_g.set("MAI","R");
	_g.set("MBQ","Y");
	_g.set("MBZ","N");
	_g.set("MC1","S");
	_g.set("MCG","X");
	_g.set("MCL","K");
	_g.set("MCS","C");
	_g.set("MCY","C");
	_g.set("MD3","C");
	_g.set("MD6","G");
	_g.set("MDH","X");
	_g.set("MDO","ASG");
	_g.set("MDR","N");
	_g.set("MEA","F");
	_g.set("MED","M");
	_g.set("MEG","E");
	_g.set("MEN","N");
	_g.set("MEP","U");
	_g.set("MEQ","Q");
	_g.set("MET","M");
	_g.set("MEU","G");
	_g.set("MF3","X");
	_g.set("MFC","GYG");
	_g.set("MG1","G");
	_g.set("MGG","R");
	_g.set("MGN","Q");
	_g.set("MGQ","A");
	_g.set("MGV","G");
	_g.set("MGY","G");
	_g.set("MHL","L");
	_g.set("MHO","M");
	_g.set("MHS","H");
	_g.set("MIA","A");
	_g.set("MIS","S");
	_g.set("MK8","L");
	_g.set("ML3","K");
	_g.set("MLE","L");
	_g.set("MLL","L");
	_g.set("MLY","K");
	_g.set("MLZ","K");
	_g.set("MME","M");
	_g.set("MMO","R");
	_g.set("MMT","T");
	_g.set("MND","N");
	_g.set("MNL","L");
	_g.set("MNU","U");
	_g.set("MNV","V");
	_g.set("MOD","X");
	_g.set("MP8","P");
	_g.set("MPH","X");
	_g.set("MPJ","X");
	_g.set("MPQ","G");
	_g.set("MRG","G");
	_g.set("MSA","G");
	_g.set("MSE","M");
	_g.set("MSL","M");
	_g.set("MSO","M");
	_g.set("MSP","X");
	_g.set("MT2","M");
	_g.set("MTR","T");
	_g.set("MTU","A");
	_g.set("MTY","Y");
	_g.set("MVA","V");
	_g.set("N  ","N");
	_g.set("N10","S");
	_g.set("N2C","X");
	_g.set("N5I","N");
	_g.set("N5M","C");
	_g.set("N6G","G");
	_g.set("N7P","P");
	_g.set("NA8","A");
	_g.set("NAL","A");
	_g.set("NAM","A");
	_g.set("NB8","N");
	_g.set("NBQ","Y");
	_g.set("NC1","S");
	_g.set("NCB","A");
	_g.set("NCX","N");
	_g.set("NCY","X");
	_g.set("NDF","F");
	_g.set("NDN","U");
	_g.set("NEM","H");
	_g.set("NEP","H");
	_g.set("NF2","N");
	_g.set("NFA","F");
	_g.set("NHL","E");
	_g.set("NIT","X");
	_g.set("NIY","Y");
	_g.set("NLE","L");
	_g.set("NLN","L");
	_g.set("NLO","L");
	_g.set("NLP","L");
	_g.set("NLQ","Q");
	_g.set("NMC","G");
	_g.set("NMM","R");
	_g.set("NMS","T");
	_g.set("NMT","T");
	_g.set("NNH","R");
	_g.set("NP3","N");
	_g.set("NPH","C");
	_g.set("NPI","A");
	_g.set("NRP","LYG");
	_g.set("NRQ","MYG");
	_g.set("NSK","X");
	_g.set("NTY","Y");
	_g.set("NVA","V");
	_g.set("NYC","TWG");
	_g.set("NYG","NYG");
	_g.set("NYM","N");
	_g.set("NYS","C");
	_g.set("NZH","H");
	_g.set("O12","X");
	_g.set("O2C","N");
	_g.set("O2G","G");
	_g.set("OAD","N");
	_g.set("OAS","S");
	_g.set("OBF","X");
	_g.set("OBS","X");
	_g.set("OCS","C");
	_g.set("OCY","C");
	_g.set("ODP","N");
	_g.set("OHI","H");
	_g.set("OHS","D");
	_g.set("OIC","X");
	_g.set("OIP","I");
	_g.set("OLE","X");
	_g.set("OLT","T");
	_g.set("OLZ","S");
	_g.set("OMC","C");
	_g.set("OMG","G");
	_g.set("OMT","M");
	_g.set("OMU","U");
	_g.set("ONE","U");
	_g.set("ONH","A");
	_g.set("ONL","X");
	_g.set("OPR","R");
	_g.set("ORN","A");
	_g.set("ORQ","R");
	_g.set("OSE","S");
	_g.set("OTB","X");
	_g.set("OTH","T");
	_g.set("OTY","Y");
	_g.set("OXX","D");
	_g.set("P  ","G");
	_g.set("P1L","C");
	_g.set("P1P","N");
	_g.set("P2T","T");
	_g.set("P2U","U");
	_g.set("P2Y","P");
	_g.set("P5P","A");
	_g.set("PAQ","Y");
	_g.set("PAS","D");
	_g.set("PAT","W");
	_g.set("PAU","A");
	_g.set("PBB","C");
	_g.set("PBF","F");
	_g.set("PBT","N");
	_g.set("PCA","E");
	_g.set("PCC","P");
	_g.set("PCE","X");
	_g.set("PCS","F");
	_g.set("PDL","X");
	_g.set("PDU","U");
	_g.set("PEC","C");
	_g.set("PF5","F");
	_g.set("PFF","F");
	_g.set("PFX","X");
	_g.set("PG1","S");
	_g.set("PG7","G");
	_g.set("PG9","G");
	_g.set("PGL","X");
	_g.set("PGN","G");
	_g.set("PGP","G");
	_g.set("PGY","G");
	_g.set("PHA","F");
	_g.set("PHD","D");
	_g.set("PHE","F");
	_g.set("PHI","F");
	_g.set("PHL","F");
	_g.set("PHM","F");
	_g.set("PIA","AYG");
	_g.set("PIV","X");
	_g.set("PLE","L");
	_g.set("PM3","F");
	_g.set("PMT","C");
	_g.set("POM","P");
	_g.set("PPN","F");
	_g.set("PPU","A");
	_g.set("PPW","G");
	_g.set("PQ1","N");
	_g.set("PR3","C");
	_g.set("PR5","A");
	_g.set("PR9","P");
	_g.set("PRN","A");
	_g.set("PRO","P");
	_g.set("PRS","P");
	_g.set("PSA","F");
	_g.set("PSH","H");
	_g.set("PST","T");
	_g.set("PSU","U");
	_g.set("PSW","C");
	_g.set("PTA","X");
	_g.set("PTH","Y");
	_g.set("PTM","Y");
	_g.set("PTR","Y");
	_g.set("PU ","A");
	_g.set("PUY","N");
	_g.set("PVH","H");
	_g.set("PVL","X");
	_g.set("PYA","A");
	_g.set("PYO","U");
	_g.set("PYX","C");
	_g.set("PYY","N");
	_g.set("QLG","QLG");
	_g.set("QMM","Q");
	_g.set("QPA","C");
	_g.set("QPH","F");
	_g.set("QUO","G");
	_g.set("R  ","A");
	_g.set("R1A","C");
	_g.set("R4K","W");
	_g.set("RC7","HYG");
	_g.set("RE0","W");
	_g.set("RE3","W");
	_g.set("RIA","A");
	_g.set("RMP","A");
	_g.set("RON","X");
	_g.set("RT ","T");
	_g.set("RTP","N");
	_g.set("S1H","S");
	_g.set("S2C","C");
	_g.set("S2D","A");
	_g.set("S2M","T");
	_g.set("S2P","A");
	_g.set("S4A","A");
	_g.set("S4C","C");
	_g.set("S4G","G");
	_g.set("S4U","U");
	_g.set("S6G","G");
	_g.set("SAC","S");
	_g.set("SAH","C");
	_g.set("SAR","G");
	_g.set("SBL","S");
	_g.set("SC ","C");
	_g.set("SCH","C");
	_g.set("SCS","C");
	_g.set("SCY","C");
	_g.set("SD2","X");
	_g.set("SDG","G");
	_g.set("SDP","S");
	_g.set("SEB","S");
	_g.set("SEC","A");
	_g.set("SEG","A");
	_g.set("SEL","S");
	_g.set("SEM","S");
	_g.set("SEN","S");
	_g.set("SEP","S");
	_g.set("SER","S");
	_g.set("SET","S");
	_g.set("SGB","S");
	_g.set("SHC","C");
	_g.set("SHP","G");
	_g.set("SHR","K");
	_g.set("SIB","C");
	_g.set("SIC","DC");
	_g.set("SLA","P");
	_g.set("SLR","P");
	_g.set("SLZ","K");
	_g.set("SMC","C");
	_g.set("SME","M");
	_g.set("SMF","F");
	_g.set("SMP","A");
	_g.set("SMT","T");
	_g.set("SNC","C");
	_g.set("SNN","N");
	_g.set("SOC","C");
	_g.set("SOS","N");
	_g.set("SOY","S");
	_g.set("SPT","T");
	_g.set("SRA","A");
	_g.set("SSU","U");
	_g.set("STY","Y");
	_g.set("SUB","X");
	_g.set("SUI","DG");
	_g.set("SUN","S");
	_g.set("SUR","U");
	_g.set("SVA","S");
	_g.set("SVV","S");
	_g.set("SVW","S");
	_g.set("SVX","S");
	_g.set("SVY","S");
	_g.set("SVZ","X");
	_g.set("SWG","SWG");
	_g.set("SYS","C");
	_g.set("T  ","T");
	_g.set("T11","F");
	_g.set("T23","T");
	_g.set("T2S","T");
	_g.set("T2T","N");
	_g.set("T31","U");
	_g.set("T32","T");
	_g.set("T36","T");
	_g.set("T37","T");
	_g.set("T38","T");
	_g.set("T39","T");
	_g.set("T3P","T");
	_g.set("T41","T");
	_g.set("T48","T");
	_g.set("T49","T");
	_g.set("T4S","T");
	_g.set("T5O","U");
	_g.set("T5S","T");
	_g.set("T66","X");
	_g.set("T6A","A");
	_g.set("TA3","T");
	_g.set("TA4","X");
	_g.set("TAF","T");
	_g.set("TAL","N");
	_g.set("TAV","D");
	_g.set("TBG","V");
	_g.set("TBM","T");
	_g.set("TC1","C");
	_g.set("TCP","T");
	_g.set("TCQ","Y");
	_g.set("TCR","W");
	_g.set("TCY","A");
	_g.set("TDD","L");
	_g.set("TDY","T");
	_g.set("TFE","T");
	_g.set("TFO","A");
	_g.set("TFQ","F");
	_g.set("TFT","T");
	_g.set("TGP","G");
	_g.set("TH6","T");
	_g.set("THC","T");
	_g.set("THO","X");
	_g.set("THR","T");
	_g.set("THX","N");
	_g.set("THZ","R");
	_g.set("TIH","A");
	_g.set("TLB","N");
	_g.set("TLC","T");
	_g.set("TLN","U");
	_g.set("TMB","T");
	_g.set("TMD","T");
	_g.set("TNB","C");
	_g.set("TNR","S");
	_g.set("TOX","W");
	_g.set("TP1","T");
	_g.set("TPC","C");
	_g.set("TPG","G");
	_g.set("TPH","X");
	_g.set("TPL","W");
	_g.set("TPO","T");
	_g.set("TPQ","Y");
	_g.set("TQI","W");
	_g.set("TQQ","W");
	_g.set("TRF","W");
	_g.set("TRG","K");
	_g.set("TRN","W");
	_g.set("TRO","W");
	_g.set("TRP","W");
	_g.set("TRQ","W");
	_g.set("TRW","W");
	_g.set("TRX","W");
	_g.set("TS ","N");
	_g.set("TST","X");
	_g.set("TT ","N");
	_g.set("TTD","T");
	_g.set("TTI","U");
	_g.set("TTM","T");
	_g.set("TTQ","W");
	_g.set("TTS","Y");
	_g.set("TY1","Y");
	_g.set("TY2","Y");
	_g.set("TY3","Y");
	_g.set("TY5","Y");
	_g.set("TYB","Y");
	_g.set("TYI","Y");
	_g.set("TYJ","Y");
	_g.set("TYN","Y");
	_g.set("TYO","Y");
	_g.set("TYQ","Y");
	_g.set("TYR","Y");
	_g.set("TYS","Y");
	_g.set("TYT","Y");
	_g.set("TYU","N");
	_g.set("TYW","Y");
	_g.set("TYX","X");
	_g.set("TYY","Y");
	_g.set("TZB","X");
	_g.set("TZO","X");
	_g.set("U  ","U");
	_g.set("U25","U");
	_g.set("U2L","U");
	_g.set("U2N","U");
	_g.set("U2P","U");
	_g.set("U31","U");
	_g.set("U33","U");
	_g.set("U34","U");
	_g.set("U36","U");
	_g.set("U37","U");
	_g.set("U8U","U");
	_g.set("UAR","U");
	_g.set("UCL","U");
	_g.set("UD5","U");
	_g.set("UDP","N");
	_g.set("UFP","N");
	_g.set("UFR","U");
	_g.set("UFT","U");
	_g.set("UMA","A");
	_g.set("UMP","U");
	_g.set("UMS","U");
	_g.set("UN1","X");
	_g.set("UN2","X");
	_g.set("UNK","X");
	_g.set("UR3","U");
	_g.set("URD","U");
	_g.set("US1","U");
	_g.set("US2","U");
	_g.set("US3","T");
	_g.set("US5","U");
	_g.set("USM","U");
	_g.set("VAD","V");
	_g.set("VAF","V");
	_g.set("VAL","V");
	_g.set("VB1","K");
	_g.set("VDL","X");
	_g.set("VLL","X");
	_g.set("VLM","X");
	_g.set("VMS","X");
	_g.set("VOL","X");
	_g.set("WCR","GYG");
	_g.set("X  ","G");
	_g.set("X2W","E");
	_g.set("X4A","N");
	_g.set("X9Q","AFG");
	_g.set("XAD","A");
	_g.set("XAE","N");
	_g.set("XAL","A");
	_g.set("XAR","N");
	_g.set("XCL","C");
	_g.set("XCN","C");
	_g.set("XCP","X");
	_g.set("XCR","C");
	_g.set("XCS","N");
	_g.set("XCT","C");
	_g.set("XCY","C");
	_g.set("XGA","N");
	_g.set("XGL","G");
	_g.set("XGR","G");
	_g.set("XGU","G");
	_g.set("XPR","P");
	_g.set("XSN","N");
	_g.set("XTH","T");
	_g.set("XTL","T");
	_g.set("XTR","T");
	_g.set("XTS","G");
	_g.set("XTY","N");
	_g.set("XUA","A");
	_g.set("XUG","G");
	_g.set("XX1","K");
	_g.set("XXY","THG");
	_g.set("XYG","DYG");
	_g.set("Y  ","A");
	_g.set("YCM","C");
	_g.set("YG ","G");
	_g.set("YOF","Y");
	_g.set("YRR","N");
	_g.set("YYG","G");
	_g.set("Z  ","C");
	_g.set("Z01","A");
	_g.set("ZAD","A");
	_g.set("ZAL","A");
	_g.set("ZBC","C");
	_g.set("ZBU","U");
	_g.set("ZCL","F");
	_g.set("ZCY","C");
	_g.set("ZDU","U");
	_g.set("ZFB","X");
	_g.set("ZGU","G");
	_g.set("ZHP","N");
	_g.set("ZTH","T");
	_g.set("ZU0","T");
	_g.set("ZZJ","A");
	$r = _g;
	return $r;
}(this));
saturn.core.PDBParser.whiteSpaceReg = new EReg("\\s+","g");
saturn.core.PDBParser.onlyWhiteSpaceReg = new EReg("^\\s+$","g");
saturn.core.PDBParser.pdbCodeReg = new EReg("^pdb([0-9A-Za-z]+)","");
saturn.core.PDBParser.re_terminalWhiteSpace = new EReg("\\s+$","");
saturn.core.PDBParser.reg_mol_id = new EReg("^\\s*MOL_ID:\\s*([0-9]+)\\s*;","");
saturn.core.PDBParser.reg_mol_chains = new EReg("^ CHAIN:\\s*([A-Za-z0-9,\\s]+)\\s*","");
saturn.core.PDBParser.reg_host_expression_name = new EReg("^\\s*EXPRESSION_SYSTEM:\\s*([^;]+);","");
saturn.core.PDBParser.reg_host_expression_id = new EReg("^\\s*EXPRESSION_SYSTEM_TAXID:\\s*([^;]+);","");
saturn.core.PDBParser.reg_gene_expression_name = new EReg("^\\s*ORGANISM_SCIENTIFIC:\\s*([^;]+);","");
saturn.core.PDBParser.reg_gene_expression_id = new EReg("^\\s*ORGANISM_TAXID:\\s*([^;]+);","");
saturn.core.PDBParser.attribute_to_regex = (function($this) {
	var $r;
	var _g2 = new haxe.ds.StringMap();
	{
		var _g = new haxe.ds.StringMap();
		_g.set("EXPRESSION_SYSTEM",saturn.core.PDBParser.reg_host_expression_name);
		_g.set("EXPRESSION_SYSTEM_ID",saturn.core.PDBParser.reg_host_expression_id);
		_g.set("ORGANISM_SCIENTIFIC",saturn.core.PDBParser.reg_gene_expression_name);
		_g.set("ORGANISM_TAXID",saturn.core.PDBParser.reg_gene_expression_id);
		_g2.set("SOURCE",_g);
	}
	{
		var _g1 = new haxe.ds.StringMap();
		_g1.set("HIGH_RES",new EReg("REMARK\\s+2\\s+RESOLUTION.\\s+([\\d\\.]+)",""));
		_g2.set("REMARK",_g1);
	}
	$r = _g2;
	return $r;
}(this));
saturn.core.PDBParser.attribute_to_range = (function($this) {
	var $r;
	var _g8 = new haxe.ds.StringMap();
	{
		var _g1 = new haxe.ds.StringMap();
		var _g = new haxe.ds.StringMap();
		_g.set("REGEX",null);
		_g.set("START",10);
		_g.set("STOP",79);
		_g1.set("TITLE",_g);
		_g8.set("TITLE",_g1);
	}
	{
		var _g3 = new haxe.ds.StringMap();
		var _g2 = new haxe.ds.StringMap();
		_g2.set("REGEX",null);
		_g2.set("START",10);
		_g2.set("STOP",78);
		_g3.set("AUTHOR",_g2);
		_g8.set("AUTHOR",_g3);
	}
	{
		var _g5 = new haxe.ds.StringMap();
		var _g4 = new haxe.ds.StringMap();
		_g4.set("REGEX",null);
		_g4.set("START",10);
		_g4.set("STOP",78);
		_g5.set("EXP_TYPE",_g4);
		_g8.set("EXPDTA",_g5);
	}
	{
		var _g7 = new haxe.ds.StringMap();
		var _g6 = new haxe.ds.StringMap();
		_g6.set("REGEX",null);
		_g6.set("START",50);
		_g6.set("STOP",59);
		_g7.set("DEPOSITION_DATE",_g6);
		_g8.set("HEADER",_g7);
	}
	$r = _g8;
	return $r;
}(this));
saturn.core.PDBParser.sourceOrder = ["EXPRESSION_SYSTEM","EXPRESSION_SYSTEM_ID","ORGANISM_SCIENTIFIC","ORGANISM_TAXID"];
saturn.core.PDBParser.attributeOrder = ["DEPOSITION_DATE"];
saturn.core.PrimerRegistry.defaultInstance = new saturn.core.PrimerRegistry();
saturn.core.domain.Compound.molCache = new haxe.ds.StringMap();
saturn.core.domain.Compound.r = new EReg("svg:","g");
saturn.core.domain.Compound.rw = new EReg("width='300px'","g");
saturn.core.domain.Compound.rh = new EReg("height='300px'","g");
saturn.core.molecule.MoleculeConstants.aMW = 331.2;
saturn.core.molecule.MoleculeConstants.tMW = 322.2;
saturn.core.molecule.MoleculeConstants.gMW = 347.2;
saturn.core.molecule.MoleculeConstants.cMW = 307.2;
saturn.core.molecule.MoleculeConstants.aChainMW = 313.2;
saturn.core.molecule.MoleculeConstants.tChainMW = 304.2;
saturn.core.molecule.MoleculeConstants.gChainMW = 329.2;
saturn.core.molecule.MoleculeConstants.cChainMW = 289.2;
saturn.core.molecule.MoleculeConstants.O2H = 18.02;
saturn.core.molecule.MoleculeConstants.OH = 17.01;
saturn.core.molecule.MoleculeConstants.PO3 = 78.97;
saturn.core.molecule.MoleculeSetRegistry.defaultRegistry = new saturn.core.molecule.MoleculeSetRegistry();
saturn.db.DefaultProvider.r_date = new EReg("^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.000Z","");
saturn.db.mapping.SQLiteMapping.models = (function($this) {
	var $r;
	var _g70 = new haxe.ds.StringMap();
	{
		var _g10 = new haxe.ds.StringMap();
		var _g = new haxe.ds.StringMap();
		_g.set("constructId","CONSTRUCT_ID");
		_g.set("id","PKEY");
		_g.set("proteinSeq","CONSTRUCTPROTSEQ");
		_g.set("proteinSeqNoTag","CONSTRUCTPROTSEQNOTAG");
		_g.set("dnaSeq","CONSTRUCTDNASEQ");
		_g.set("docId","ELNEXP");
		_g.set("vectorId","SGCVECTOR_PKEY");
		_g.set("alleleId","SGCALLELE_PKEY");
		_g.set("res1Id","SGCRESTRICTENZ1_PKEY");
		_g.set("res2Id","SGCRESTRICTENZ2_PKEY");
		_g.set("constructPlateId","SGCCONSTRUCTPLATE_PKEY");
		_g.set("wellId","WELLID");
		_g.set("expectedMass","EXPECTEDMASS");
		_g.set("expectedMassNoTag","EXPETCEDMASSNOTAG");
		_g.set("status","STATUS");
		_g.set("location","SGCLOCATION");
		_g.set("elnId","ELNEXP");
		_g.set("constructComments","CONSTRUCTCOMMENTS");
		_g10.set("fields",_g);
		var _g1 = new haxe.ds.StringMap();
		_g1.set("constructId",false);
		_g1.set("id",true);
		_g10.set("indexes",_g1);
		var _g2 = new haxe.ds.StringMap();
		_g2.set("Construct ID","constructId");
		_g2.set("Construct Plate","constructPlate.plateName");
		_g2.set("Well ID","wellId");
		_g2.set("Vector ID","vector.vectorId");
		_g2.set("Allele ID","allele.alleleId");
		_g2.set("Status","status");
		_g2.set("Protein Sequence","proteinSeq");
		_g2.set("Expected Mass","expectedMass");
		_g2.set("Restriction Site 1","res1.enzymeName");
		_g2.set("Restriction Site 2","res2.enzymeName");
		_g2.set("Protein Sequence (No Tag)","proteinSeqNoTag");
		_g2.set("Expected Mass (No Tag)","expectedMassNoTag");
		_g2.set("Construct DNA Sequence","dnaSeq");
		_g2.set("Location","location");
		_g2.set("ELN ID","elnId");
		_g2.set("Construct Comments","constructComments");
		_g2.set("__HIDDEN__PKEY__","id");
		_g10.set("model",_g2);
		var _g8 = new haxe.ds.StringMap();
		var _g3 = new haxe.ds.StringMap();
		_g3.set("field","alleleId");
		_g3.set("class","saturn.core.domain.SgcAllele");
		_g3.set("fk_field","id");
		_g8.set("allele",_g3);
		var _g4 = new haxe.ds.StringMap();
		_g4.set("field","vectorId");
		_g4.set("class","saturn.core.domain.SgcVector");
		_g4.set("fk_field","Id");
		_g8.set("vector",_g4);
		var _g5 = new haxe.ds.StringMap();
		_g5.set("field","res1Id");
		_g5.set("class","saturn.core.domain.SgcRestrictionSite");
		_g5.set("fk_field","id");
		_g8.set("res1",_g5);
		var _g6 = new haxe.ds.StringMap();
		_g6.set("field","res2Id");
		_g6.set("class","saturn.core.domain.SgcRestrictionSite");
		_g6.set("fk_field","id");
		_g8.set("res2",_g6);
		var _g7 = new haxe.ds.StringMap();
		_g7.set("field","constructPlateId");
		_g7.set("class","saturn.core.domain.SgcConstructPlate");
		_g7.set("fk_field","id");
		_g8.set("constructPlate",_g7);
		_g10.set("fields.synthetic",_g8);
		var _g9 = new haxe.ds.StringMap();
		_g9.set("schema","SGC");
		_g9.set("name","CONSTRUCT");
		_g10.set("table_info",_g9);
		_g70.set("saturn.core.domain.SgcConstruct",_g10);
	}
	{
		var _g21 = new haxe.ds.StringMap();
		var _g11 = new haxe.ds.StringMap();
		_g11.set("alleleId","ALLELE_ID");
		_g11.set("allelePlateId","SGCPLATE_PKEY");
		_g11.set("id","PKEY");
		_g11.set("entryCloneId","SGCENTRYCLONE_PKEY");
		_g11.set("forwardPrimerId","SGCPRIMER5_PKEY");
		_g11.set("reversePrimerId","SGCPRIMER3_PKEY");
		_g11.set("dnaSeq","ALLELESEQUENCERAW");
		_g11.set("proteinSeq","ALLELEPROTSEQ");
		_g11.set("status","ALLELE_STATUS");
		_g11.set("location","SGCLOCATION");
		_g11.set("comments","ALLELECOMMENTS");
		_g11.set("elnId","ELNEXP");
		_g11.set("dateStamp","DATESTAMP");
		_g11.set("person","PERSON");
		_g11.set("plateWell","PLATEWELL");
		_g11.set("dnaSeqLen","ALLELESEQLENGTH");
		_g11.set("complex","COMPLEX");
		_g11.set("domainSummary","DOMAINSUMMARY");
		_g11.set("domainStartDelta","DOMAINSTARTDELTA");
		_g11.set("domainStopDelta","DOMAINSTOPDELTA");
		_g11.set("containsPharmaDomain","CONTAINSPHARMADOMAIN");
		_g11.set("domainSummaryLong","DOMAINSUMMARYLONG");
		_g11.set("impPI","IMPPI");
		_g21.set("fields",_g11);
		var _g12 = new haxe.ds.StringMap();
		_g12.set("status","In process");
		_g21.set("defaults",_g12);
		var _g13 = new haxe.ds.StringMap();
		_g13.set("Allele ID","alleleId");
		_g13.set("Plate","plate.plateName");
		_g13.set("Entry Clone ID","entryClone.entryCloneId");
		_g13.set("Forward Primer ID","forwardPrimer.primerId");
		_g13.set("Reverse Primer ID","reversePrimer.primerId");
		_g13.set("DNA Sequence","dnaSeq");
		_g13.set("Protein Sequence","proteinSeq");
		_g13.set("Status","status");
		_g13.set("Location","location");
		_g13.set("Comments","comments");
		_g13.set("ELN ID","elnId");
		_g13.set("Date Record","dateStamp");
		_g13.set("Person","person");
		_g13.set("Plate Well","plateWell");
		_g13.set("DNA Length","dnaSeqLen");
		_g13.set("Complex","complex");
		_g13.set("Domain Summary","domainSummary");
		_g13.set("Domain  Start Delta","domainStartDelta");
		_g13.set("Domain Stop Delta","domainStopDelta");
		_g13.set("Contains Pharma Domain","containsPharmaDomain");
		_g13.set("Domain Summary Long","domainSummaryLong");
		_g13.set("IMP PI","impPI");
		_g13.set("__HIDDEN__PKEY__","id");
		_g21.set("model",_g13);
		var _g14 = new haxe.ds.StringMap();
		_g14.set("alleleId",false);
		_g14.set("id",true);
		_g21.set("indexes",_g14);
		var _g19 = new haxe.ds.StringMap();
		var _g15 = new haxe.ds.StringMap();
		_g15.set("field","entryCloneId");
		_g15.set("class","saturn.core.domain.SgcEntryClone");
		_g15.set("fk_field","id");
		_g19.set("entryClone",_g15);
		var _g16 = new haxe.ds.StringMap();
		_g16.set("field","forwardPrimerId");
		_g16.set("class","saturn.core.domain.SgcForwardPrimer");
		_g16.set("fk_field","id");
		_g19.set("forwardPrimer",_g16);
		var _g17 = new haxe.ds.StringMap();
		_g17.set("field","reversePrimerId");
		_g17.set("class","saturn.core.domain.SgcReversePrimer");
		_g17.set("fk_field","id");
		_g19.set("reversePrimer",_g17);
		var _g18 = new haxe.ds.StringMap();
		_g18.set("field","allelePlateId");
		_g18.set("class","saturn.core.domain.SgcAllelePlate");
		_g18.set("fk_field","id");
		_g19.set("plate",_g18);
		_g21.set("fields.synthetic",_g19);
		var _g20 = new haxe.ds.StringMap();
		_g20.set("schema","SGC");
		_g20.set("name","ALLELE");
		_g21.set("table_info",_g20);
		_g70.set("saturn.core.domain.SgcAllele",_g21);
	}
	{
		var _g25 = new haxe.ds.StringMap();
		var _g22 = new haxe.ds.StringMap();
		_g22.set("enzymeName","RESTRICTION_ENZYME_NAME");
		_g22.set("cutSequence","RESTRICTION_ENZYME_SEQUENCERAW");
		_g22.set("id","PKEY");
		_g25.set("fields",_g22);
		var _g23 = new haxe.ds.StringMap();
		_g23.set("enzymeName",false);
		_g23.set("id",true);
		_g25.set("indexes",_g23);
		var _g24 = new haxe.ds.StringMap();
		_g24.set("schema","SGC");
		_g24.set("name","RESTRICTION_ENZYME");
		_g25.set("table_info",_g24);
		_g70.set("saturn.core.domain.SgcRestrictionSite",_g25);
	}
	{
		var _g32 = new haxe.ds.StringMap();
		var _g26 = new haxe.ds.StringMap();
		_g26.set("vectorId","VECTOR_NAME");
		_g26.set("Id","PKEY");
		_g26.set("vectorSequence","VECTORSEQUENCERAW");
		_g26.set("vectorComments","VECTORCOMMENTS");
		_g26.set("proteaseName","PROTEASE_NAME");
		_g26.set("proteaseCutSequence","PROTEASE_CUTSEQUENCE");
		_g26.set("proteaseProduct","PROTEASE_PRODUCT");
		_g26.set("antibiotic","ANTIBIOTIC");
		_g26.set("organism","ORGANISM");
		_g26.set("res1Id","SGCRESTRICTENZ1_PKEY");
		_g26.set("res2Id","SGCRESTRICTENZ2_PKEY");
		_g32.set("fields",_g26);
		var _g27 = new haxe.ds.StringMap();
		_g27.set("vectorId",false);
		_g27.set("Id",true);
		_g32.set("indexes",_g27);
		var _g30 = new haxe.ds.StringMap();
		var _g28 = new haxe.ds.StringMap();
		_g28.set("field","res1Id");
		_g28.set("class","saturn.core.domain.SgcRestrictionSite");
		_g28.set("fk_field","id");
		_g30.set("res1",_g28);
		var _g29 = new haxe.ds.StringMap();
		_g29.set("field","res2Id");
		_g29.set("class","saturn.core.domain.SgcRestrictionSite");
		_g29.set("fk_field","id");
		_g30.set("res2",_g29);
		_g32.set("fields.synthetic",_g30);
		var _g31 = new haxe.ds.StringMap();
		_g31.set("schema","SGC");
		_g31.set("name","VECTOR");
		_g32.set("table_info",_g31);
		_g70.set("saturn.core.domain.SgcVector",_g32);
	}
	{
		var _g36 = new haxe.ds.StringMap();
		var _g33 = new haxe.ds.StringMap();
		_g33.set("primerId","PRIMERNAME");
		_g33.set("id","PKEY");
		_g33.set("dnaSequence","PRIMERRAWSEQUENCE");
		_g36.set("fields",_g33);
		var _g34 = new haxe.ds.StringMap();
		_g34.set("primerId",false);
		_g34.set("id",true);
		_g36.set("indexes",_g34);
		var _g35 = new haxe.ds.StringMap();
		_g35.set("schema","SGC");
		_g35.set("name","PRIMER");
		_g36.set("table_info",_g35);
		_g70.set("saturn.core.domain.SgcForwardPrimer",_g36);
	}
	{
		var _g40 = new haxe.ds.StringMap();
		var _g37 = new haxe.ds.StringMap();
		_g37.set("primerId","PRIMERNAME");
		_g37.set("id","PKEY");
		_g37.set("dnaSequence","PRIMERRAWSEQUENCE");
		_g40.set("fields",_g37);
		var _g38 = new haxe.ds.StringMap();
		_g38.set("primerId",false);
		_g38.set("id",true);
		_g40.set("indexes",_g38);
		var _g39 = new haxe.ds.StringMap();
		_g39.set("schema","SGC");
		_g39.set("name","PRIMERREV");
		_g40.set("table_info",_g39);
		_g70.set("saturn.core.domain.SgcReversePrimer",_g40);
	}
	{
		var _g44 = new haxe.ds.StringMap();
		var _g41 = new haxe.ds.StringMap();
		_g41.set("sequence","SEQ");
		_g41.set("id","PKEY");
		_g41.set("type","SEQTYPE");
		_g41.set("version","TARGETVERSION");
		_g41.set("targetId","SGCTARGET_PKEY");
		_g41.set("crc","CRC");
		_g41.set("target","TARGET_ID");
		_g44.set("fields",_g41);
		var _g42 = new haxe.ds.StringMap();
		_g42.set("id",true);
		_g44.set("indexes",_g42);
		var _g43 = new haxe.ds.StringMap();
		_g43.set("schema","");
		_g43.set("name","SEQDATA");
		_g44.set("table_info",_g43);
		_g70.set("saturn.core.domain.SgcSeqData",_g44);
	}
	{
		var _g47 = new haxe.ds.StringMap();
		var _g45 = new haxe.ds.StringMap();
		_g45.set("id","PKEY");
		_g45.set("accession","IDENTIFIER");
		_g45.set("start","SEQSTART");
		_g45.set("stop","SEQSTOP");
		_g45.set("targetId","SGCTARGET_PKEY");
		_g47.set("fields",_g45);
		var _g46 = new haxe.ds.StringMap();
		_g46.set("accession",false);
		_g46.set("id",true);
		_g47.set("indexes",_g46);
		_g70.set("saturn.core.domain.SgcDomain",_g47);
	}
	{
		var _g51 = new haxe.ds.StringMap();
		var _g48 = new haxe.ds.StringMap();
		_g48.set("id","PKEY");
		_g48.set("plateName","PLATENAME");
		_g48.set("elnRef","ELNREF");
		_g51.set("fields",_g48);
		var _g49 = new haxe.ds.StringMap();
		_g49.set("plateName",false);
		_g49.set("id",true);
		_g51.set("indexes",_g49);
		var _g50 = new haxe.ds.StringMap();
		_g50.set("schema","SGC");
		_g50.set("name","CONSTRUCTPLATE");
		_g51.set("table_info",_g50);
		_g70.set("saturn.core.domain.SgcConstructPlate",_g51);
	}
	{
		var _g55 = new haxe.ds.StringMap();
		var _g52 = new haxe.ds.StringMap();
		_g52.set("id","PKEY");
		_g52.set("plateName","PLATENAME");
		_g52.set("elnRef","ELNREF");
		_g55.set("fields",_g52);
		var _g53 = new haxe.ds.StringMap();
		_g53.set("plateName",false);
		_g53.set("id",true);
		_g55.set("indexes",_g53);
		var _g54 = new haxe.ds.StringMap();
		_g54.set("schema","SGC");
		_g54.set("name","PLATE");
		_g55.set("table_info",_g54);
		_g70.set("saturn.core.domain.SgcAllelePlate",_g55);
	}
	{
		var _g63 = new haxe.ds.StringMap();
		var _g56 = new haxe.ds.StringMap();
		_g56.set("targetId","SEQUENCE_ID");
		_g56.set("id","PKEY");
		_g56.set("dnaSeq","DNA_SEQ");
		_g56.set("proteinSeq","PROTEIN_SEQ");
		_g63.set("fields",_g56);
		var _g57 = new haxe.ds.StringMap();
		_g57.set("targetId",false);
		_g57.set("id",true);
		_g63.set("indexes",_g57);
		var _g58 = new haxe.ds.StringMap();
		_g58.set("schema","");
		_g58.set("name","DNA");
		_g63.set("table_info",_g58);
		var _g59 = new haxe.ds.StringMap();
		_g59.set("ID","targetId");
		_g59.set("DNA Sequence","dnaSeq");
		_g59.set("Protein Sequence","proteinSeq");
		_g59.set("__HIDDEN__PKEY__","id");
		_g63.set("model",_g59);
		var _g60 = new haxe.ds.StringMap();
		_g60.set("polymorph_key","POLYMORPH_TYPE");
		_g60.set("value","TARGET");
		_g63.set("selector",_g60);
		var _g62 = new haxe.ds.StringMap();
		var _g61 = new haxe.ds.StringMap();
		_g61.set("saturn.client.programs.DNASequenceEditor",true);
		_g61.set("saturn.client.programs.ProteinSequenceEditor",true);
		_g62.set("canSave",_g61);
		_g63.set("options",_g62);
		_g70.set("saturn.core.domain.SgcTarget",_g63);
	}
	{
		var _g69 = new haxe.ds.StringMap();
		var _g64 = new haxe.ds.StringMap();
		_g64.set("entryCloneId","SEQUENCE_ID");
		_g64.set("id","PKEY");
		_g64.set("dnaSeq","DNA_SEQ");
		_g69.set("fields",_g64);
		var _g65 = new haxe.ds.StringMap();
		_g65.set("entryCloneId",false);
		_g65.set("id",true);
		_g69.set("indexes",_g65);
		var _g66 = new haxe.ds.StringMap();
		_g66.set("schema","");
		_g66.set("name","DNA");
		_g69.set("table_info",_g66);
		var _g67 = new haxe.ds.StringMap();
		_g67.set("ID","entryCloneId");
		_g67.set("DNA Sequence","dnaSeq");
		_g67.set("__HIDDEN__PKEY__","id");
		_g69.set("model",_g67);
		var _g68 = new haxe.ds.StringMap();
		_g68.set("polymorph_key","POLYMORPH_TYPE");
		_g68.set("value","ENTRY_CLONE");
		_g69.set("selector",_g68);
		_g70.set("saturn.core.domain.SgcEntryClone",_g69);
	}
	$r = _g70;
	return $r;
}(this));
saturn.db.query_lang.SQLVisitor.injection_check = new EReg("^([A-Za-z0-9\\.])+$","");
saturn.app.SaturnClient.main();
